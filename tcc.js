// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 66504;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });



















var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/* memory initializer */ allocate([64,0,0,0,88,42,0,0,60,0,0,0,56,42,0,0,68,0,0,0,40,42,0,0,76,0,1,0,240,41,0,0,0,0,0,0,0,0,0,0,60,61,158,62,61,157,33,61,149,38,38,160,124,124,161,43,43,164,45,45,162,61,61,148,60,60,1,62,62,2,43,61,171,45,61,173,42,61,170,47,61,175,37,61,165,38,61,166,94,61,222,124,61,252,45,62,203,46,46,168,35,35,182,0,0,1,2,2,2,3,3,3,4,4,5,5,6,6,7,7,8,9,10,10,11,11,12,12,13,13,14,14,15,15,0,0,16,41,0,0,0,0,0,0,0,41,0,0,0,0,0,0,232,40,0,0,0,0,0,0,40,78,0,0,1,0,1,0,24,78,0,0,2,0,1,0,224,77,0,0,3,0,1,0,152,77,0,0,4,0,1,0,136,77,0,0,5,0,1,0,64,77,0,0,6,0,3,0,240,76,0,0,7,0,0,0,144,76,0,0,9,0,0,0,104,76,0,0,10,0,3,0,48,55,0,0,11,0,0,0,40,76,0,0,12,0,0,0,24,76,0,0,13,0,0,0,16,76,0,0,14,0,1,0,232,75,0,0,15,0,1,0,152,75,0,0,28,0,0,0,96,75,0,0,29,0,0,0,88,75,0,0,30,0,3,0,24,75,0,0,27,0,0,0,216,74,0,0,16,0,0,0,232,54,0,0,17,0,0,0,208,74,0,0,18,0,3,0,200,74,0,0,19,0,3,0,184,74,0,0,20,0,3,0,176,74,0,0,21,0,1,0,144,74,0,0,22,0,3,0,72,74,0,0,23,0,1,0,56,74,0,0,24,0,0,0,32,45,0,0,25,0,0,0,24,74,0,0,26,0,0,0,0,74,0,0,31,0,3,0,192,73,0,0,32,0,0,0,184,73,0,0,33,0,0,0,176,73,0,0,34,0,0,0,152,73,0,0,35,0,0,0,144,73,0,0,36,0,1,0,104,73,0,0,37,0,1,0,48,73,0,0,38,0,0,0,0,0,0,0,0,0,0,0,105,110,116,0,118,111,105,100,0,99,104,97,114,0,105,102,0,101,108,115,101,0,119,104,105,108,101,0,98,114,101,97,107,0,114,101,116,117,114,110,0,102,111,114,0,101,120,116,101,114,110,0,115,116,97,116,105,99,0,117,110,115,105,103,110,101,100,0,103,111,116,111,0,100,111,0,99,111,110,116,105,110,117,101,0,115,119,105,116,99,104,0,99,97,115,101,0,99,111,110,115,116,0,95,95,99,111,110,115,116,0,95,95,99,111,110,115,116,95,95,0,118,111,108,97,116,105,108,101,0,95,95,118,111,108,97,116,105,108,101,0,95,95,118,111,108,97,116,105,108,101,95,95,0,108,111,110,103,0,114,101,103,105,115,116,101,114,0,115,105,103,110,101,100,0,95,95,115,105,103,110,101,100,0,95,95,115,105,103,110,101,100,95,95,0,97,117,116,111,0,105,110,108,105,110,101,0,95,95,105,110,108,105,110,101,0,95,95,105,110,108,105,110,101,95,95,0,114,101,115,116,114,105,99,116,0,95,95,114,101,115,116,114,105,99,116,0,95,95,114,101,115,116,114,105,99,116,95,95,0,95,95,101,120,116,101,110,115,105,111,110,95,95,0,102,108,111,97,116,0,100,111,117,98,108,101,0,95,66,111,111,108,0,115,104,111,114,116,0,115,116,114,117,99,116,0,117,110,105,111,110,0,116,121,112,101,100,101,102,0,100,101,102,97,117,108,116,0,101,110,117,109,0,115,105,122,101,111,102,0,95,95,97,116,116,114,105,98,117,116,101,0,95,95,97,116,116,114,105,98,117,116,101,95,95,0,95,95,97,108,105,103,110,111,102,0,95,95,97,108,105,103,110,111,102,95,95,0,116,121,112,101,111,102,0,95,95,116,121,112,101,111,102,0,95,95,116,121,112,101,111,102,95,95,0,95,95,108,97,98,101,108,95,95,0,97,115,109,0,95,95,97,115,109,0,95,95,97,115,109,95,95,0,100,101,102,105,110,101,0,105,110,99,108,117,100,101,0,105,110,99,108,117,100,101,95,110,101,120,116,0,105,102,100,101,102,0,105,102,110,100,101,102,0,101,108,105,102,0,101,110,100,105,102,0,100,101,102,105,110,101,100,0,117,110,100,101,102,0,101,114,114,111,114,0,119,97,114,110,105,110,103,0,108,105,110,101,0,112,114,97,103,109,97,0,95,95,76,73,78,69,95,95,0,95,95,70,73,76,69,95,95,0,95,95,68,65,84,69,95,95,0,95,95,84,73,77,69,95,95,0,95,95,70,85,78,67,84,73,79,78,95,95,0,95,95,86,65,95,65,82,71,83,95,95,0,95,95,102,117,110,99,95,95,0,95,95,110,97,110,95,95,0,95,95,115,110,97,110,95,95,0,95,95,105,110,102,95,95,0,115,101,99,116,105,111,110,0,95,95,115,101,99,116,105,111,110,95,95,0,97,108,105,103,110,101,100,0,95,95,97,108,105,103,110,101,100,95,95,0,112,97,99,107,101,100,0,95,95,112,97,99,107,101,100,95,95,0,119,101,97,107,0,95,95,119,101,97,107,95,95,0,97,108,105,97,115,0,95,95,97,108,105,97,115,95,95,0,117,110,117,115,101,100,0,95,95,117,110,117,115,101,100,95,95,0,99,100,101,99,108,0,95,95,99,100,101,99,108,0,95,95,99,100,101,99,108,95,95,0,115,116,100,99,97,108,108,0,95,95,115,116,100,99,97,108,108,0,95,95,115,116,100,99,97,108,108,95,95,0,102,97,115,116,99,97,108,108,0,95,95,102,97,115,116,99,97,108,108,0,95,95,102,97,115,116,99,97,108,108,95,95,0,95,95,109,111,100,101,95,95,0,95,95,68,73,95,95,0,95,95,72,73,95,95,0,95,95,83,73,95,95,0,100,108,108,101,120,112,111,114,116,0,100,108,108,105,109,112,111,114,116,0,110,111,114,101,116,117,114,110,0,95,95,110,111,114,101,116,117,114,110,95,95,0,95,95,98,117,105,108,116,105,110,95,116,121,112,101,115,95,99,111,109,112,97,116,105,98,108,101,95,112,0,95,95,98,117,105,108,116,105,110,95,99,111,110,115,116,97,110,116,95,112,0,95,95,98,117,105,108,116,105,110,95,102,114,97,109,101,95,97,100,100,114,101,115,115,0,114,101,103,112,97,114,109,0,95,95,114,101,103,112,97,114,109,95,95,0,112,97,99,107,0,109,101,109,99,112,121,0,109,101,109,115,101,116,0,95,95,100,105,118,100,105,51,0,95,95,109,111,100,100,105,51,0,95,95,117,100,105,118,100,105,51,0,95,95,117,109,111,100,100,105,51,0,95,95,116,99,99,95,105,110,116,95,102,112,117,95,99,111,110,116,114,111,108,0,95,95,116,99,99,95,102,112,117,95,99,111,110,116,114,111,108,0,95,95,97,115,104,114,100,105,51,0,95,95,108,115,104,114,100,105,51,0,95,95,97,115,104,108,100,105,51,0,95,95,102,108,111,97,116,117,110,100,105,115,102,0,95,95,102,108,111,97,116,117,110,100,105,100,102,0,95,95,102,108,111,97,116,117,110,100,105,120,102,0,95,95,102,105,120,117,110,115,120,102,100,105,0,95,95,102,105,120,117,110,115,115,102,100,105,0,95,95,102,105,120,117,110,115,100,102,100,105,0,95,95,98,111,117,110,100,95,112,116,114,95,97,100,100,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,49,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,50,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,52,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,56,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,49,50,0,95,95,98,111,117,110,100,95,112,116,114,95,105,110,100,105,114,49,54,0,95,95,98,111,117,110,100,95,108,111,99,97,108,95,110,101,119,0,95,95,98,111,117,110,100,95,108,111,99,97,108,95,100,101,108,101,116,101,0,109,101,109,109,111,118,101,0,115,116,114,108,101,110,0,115,116,114,99,112,121,0,97,108,108,111,99,97,0,98,121,116,101,0,119,111,114,100,0,97,108,105,103,110,0,115,107,105,112,0,115,112,97,99,101,0,115,116,114,105,110,103,0,97,115,99,105,122,0,97,115,99,105,105,0,102,105,108,101,0,103,108,111,98,108,0,103,108,111,98,97,108,0,105,100,101,110,116,0,115,105,122,101,0,116,121,112,101,0,116,101,120,116,0,100,97,116,97,0,98,115,115,0,112,114,101,118,105,111,117,115,0,102,105,108,108,0,111,114,103,0,113,117,97,100,0,99,111,100,101,49,54,0,99,111,100,101,51,50,0,97,108,0,99,108,0,100,108,0,98,108,0,97,104,0,99,104,0,100,104,0,98,104,0,97,120,0,99,120,0,100,120,0,98,120,0,115,112,0,98,112,0,115,105,0,100,105,0,101,97,120,0,101,99,120,0,101,100,120,0,101,98,120,0,101,115,112,0,101,98,112,0,101,115,105,0,101,100,105,0,109,109,48,0,109,109,49,0,109,109,50,0,109,109,51,0,109,109,52,0,109,109,53,0,109,109,54,0,109,109,55,0,120,109,109,48,0,120,109,109,49,0,120,109,109,50,0,120,109,109,51,0,120,109,109,52,0,120,109,109,53,0,120,109,109,54,0,120,109,109,55,0,99,114,48,0,99,114,49,0,99,114,50,0,99,114,51,0,99,114,52,0,99,114,53,0,99,114,54,0,99,114,55,0,116,114,48,0,116,114,49,0,116,114,50,0,116,114,51,0,116,114,52,0,116,114,53,0,116,114,54,0,116,114,55,0,100,98,48,0,100,98,49,0,100,98,50,0,100,98,51,0,100,98,52,0,100,98,53,0,100,98,54,0,100,98,55,0,100,114,48,0,100,114,49,0,100,114,50,0,100,114,51,0,100,114,52,0,100,114,53,0,100,114,54,0,100,114,55,0,101,115,0,99,115,0,115,115,0,100,115,0,102,115,0,103,115,0,115,116,0,109,111,118,98,0,109,111,118,119,0,109,111,118,108,0,109,111,118,0,97,100,100,98,0,97,100,100,119,0,97,100,100,108,0,97,100,100,0,111,114,98,0,111,114,119,0,111,114,108,0,111,114,0,97,100,99,98,0,97,100,99,119,0,97,100,99,108,0,97,100,99,0,115,98,98,98,0,115,98,98,119,0,115,98,98,108,0,115,98,98,0,97,110,100,98,0,97,110,100,119,0,97,110,100,108,0,97,110,100,0,115,117,98,98,0,115,117,98,119,0,115,117,98,108,0,115,117,98,0,120,111,114,98,0,120,111,114,119,0,120,111,114,108,0,120,111,114,0,99,109,112,98,0,99,109,112,119,0,99,109,112,108,0,99,109,112,0,105,110,99,98,0,105,110,99,119,0,105,110,99,108,0,105,110,99,0,100,101,99,98,0,100,101,99,119,0,100,101,99,108,0,100,101,99,0,110,111,116,98,0,110,111,116,119,0,110,111,116,108,0,110,111,116,0,110,101,103,98,0,110,101,103,119,0,110,101,103,108,0,110,101,103,0,109,117,108,98,0,109,117,108,119,0,109,117,108,108,0,109,117,108,0,105,109,117,108,98,0,105,109,117,108,119,0,105,109,117,108,108,0,105,109,117,108,0,100,105,118,98,0,100,105,118,119,0,100,105,118,108,0,100,105,118,0,105,100,105,118,98,0,105,100,105,118,119,0,105,100,105,118,108,0,105,100,105,118,0,120,99,104,103,98,0,120,99,104,103,119,0,120,99,104,103,108,0,120,99,104,103,0,116,101,115,116,98,0,116,101,115,116,119,0,116,101,115,116,108,0,116,101,115,116,0,114,111,108,98,0,114,111,108,119,0,114,111,108,108,0,114,111,108,0,114,111,114,98,0,114,111,114,119,0,114,111,114,108,0,114,111,114,0,114,99,108,98,0,114,99,108,119,0,114,99,108,108,0,114,99,108,0,114,99,114,98,0,114,99,114,119,0,114,99,114,108,0,114,99,114,0,115,104,108,98,0,115,104,108,119,0,115,104,108,108,0,115,104,108,0,115,104,114,98,0,115,104,114,119,0,115,104,114,108,0,115,104,114,0,115,97,114,98,0,115,97,114,119,0,115,97,114,108,0,115,97,114,0,115,104,108,100,119,0,115,104,108,100,108,0,115,104,108,100,0,115,104,114,100,119,0,115,104,114,100,108,0,115,104,114,100,0,112,117,115,104,119,0,112,117,115,104,108,0,112,117,115,104,0,112,111,112,119,0,112,111,112,108,0,112,111,112,0,105,110,98,0,105,110,119,0,105,110,108,0,105,110,0,111,117,116,98,0,111,117,116,119,0,111,117,116,108,0,111,117,116,0,109,111,118,122,98,119,0,109,111,118,122,98,108,0,109,111,118,122,98,0,109,111,118,122,119,108,0,109,111,118,115,98,119,0,109,111,118,115,98,108,0,109,111,118,115,119,108,0,108,101,97,119,0,108,101,97,108,0,108,101,97,0,108,101,115,0,108,100,115,0,108,115,115,0,108,102,115,0,108,103,115,0,99,97,108,108,0,106,109,112,0,108,99,97,108,108,0,108,106,109,112,0,106,111,0,106,110,111,0,106,98,0,106,99,0,106,110,97,101,0,106,110,98,0,106,110,99,0,106,97,101,0,106,101,0,106,122,0,106,110,101,0,106,110,122,0,106,98,101,0,106,110,97,0,106,110,98,101,0,106,97,0,106,115,0,106,110,115,0,106,112,0,106,112,101,0,106,110,112,0,106,112,111,0,106,108,0,106,110,103,101,0,106,110,108,0,106,103,101,0,106,108,101,0,106,110,103,0,106,110,108,101,0,106,103,0,115,101,116,111,0,115,101,116,110,111,0,115,101,116,98,0,115,101,116,99,0,115,101,116,110,97,101,0,115,101,116,110,98,0,115,101,116,110,99,0,115,101,116,97,101,0,115,101,116,101,0,115,101,116,122,0,115,101,116,110,101,0,115,101,116,110,122,0,115,101,116,98,101,0,115,101,116,110,97,0,115,101,116,110,98,101,0,115,101,116,97,0,115,101,116,115,0,115,101,116,110,115,0,115,101,116,112,0,115,101,116,112,101,0,115,101,116,110,112,0,115,101,116,112,111,0,115,101,116,108,0,115,101,116,110,103,101,0,115,101,116,110,108,0,115,101,116,103,101,0,115,101,116,108,101,0,115,101,116,110,103,0,115,101,116,110,108,101,0,115,101,116,103,0,99,109,111,118,111,0,99,109,111,118,110,111,0,99,109,111,118,98,0,99,109,111,118,99,0,99,109,111,118,110,97,101,0,99,109,111,118,110,98,0,99,109,111,118,110,99,0,99,109,111,118,97,101,0,99,109,111,118,101,0,99,109,111,118,122,0,99,109,111,118,110,101,0,99,109,111,118,110,122,0,99,109,111,118,98,101,0,99,109,111,118,110,97,0,99,109,111,118,110,98,101,0,99,109,111,118,97,0,99,109,111,118,115,0,99,109,111,118,110,115,0,99,109,111,118,112,0,99,109,111,118,112,101,0,99,109,111,118,110,112,0,99,109,111,118,112,111,0,99,109,111,118,108,0,99,109,111,118,110,103,101,0,99,109,111,118,110,108,0,99,109,111,118,103,101,0,99,109,111,118,108,101,0,99,109,111,118,110,103,0,99,109,111,118,110,108,101,0,99,109,111,118,103,0,98,115,102,119,0,98,115,102,108,0,98,115,102,0,98,115,114,119,0,98,115,114,108,0,98,115,114,0,98,116,119,0,98,116,108,0,98,116,0,98,116,115,119,0,98,116,115,108,0,98,116,115,0,98,116,114,119,0,98,116,114,108,0,98,116,114,0,98,116,99,119,0,98,116,99,108,0,98,116,99,0,108,115,108,119,0,108,115,108,108,0,108,115,108,0,102,97,100,100,0,102,97,100,100,112,0,102,97,100,100,115,0,102,105,97,100,100,108,0,102,97,100,100,108,0,102,105,97,100,100,115,0,102,109,117,108,0,102,109,117,108,112,0,102,109,117,108,115,0,102,105,109,117,108,108,0,102,109,117,108,108,0,102,105,109,117,108,115,0,102,99,111,109,0,102,99,111,109,95,49,0,102,99,111,109,115,0,102,105,99,111,109,108,0,102,99,111,109,108,0,102,105,99,111,109,115,0,102,99,111,109,112,0,102,99,111,109,112,112,0,102,99,111,109,112,115,0,102,105,99,111,109,112,108,0,102,99,111,109,112,108,0,102,105,99,111,109,112,115,0,102,115,117,98,0,102,115,117,98,112,0,102,115,117,98,115,0,102,105,115,117,98,108,0,102,115,117,98,108,0,102,105,115,117,98,115,0,102,115,117,98,114,0,102,115,117,98,114,112,0,102,115,117,98,114,115,0,102,105,115,117,98,114,108,0,102,115,117,98,114,108,0,102,105,115,117,98,114,115,0,102,100,105,118,0,102,100,105,118,112,0,102,100,105,118,115,0,102,105,100,105,118,108,0,102,100,105,118,108,0,102,105,100,105,118,115,0,102,100,105,118,114,0,102,100,105,118,114,112,0,102,100,105,118,114,115,0,102,105,100,105,118,114,108,0,102,100,105,118,114,108,0,102,105,100,105,118,114,115,0,120,97,100,100,98,0,120,97,100,100,119,0,120,97,100,100,108,0,120,97,100,100,0,99,109,112,120,99,104,103,98,0,99,109,112,120,99,104,103,119,0,99,109,112,120,99,104,103,108,0,99,109,112,120,99,104,103,0,99,109,112,115,98,0,99,109,112,115,119,0,99,109,112,115,108,0,99,109,112,115,0,115,99,109,112,98,0,115,99,109,112,119,0,115,99,109,112,108,0,115,99,109,112,0,105,110,115,98,0,105,110,115,119,0,105,110,115,108,0,105,110,115,0,111,117,116,115,98,0,111,117,116,115,119,0,111,117,116,115,108,0,111,117,116,115,0,108,111,100,115,98,0,108,111,100,115,119,0,108,111,100,115,108,0,108,111,100,115,0,115,108,111,100,98,0,115,108,111,100,119,0,115,108,111,100,108,0,115,108,111,100,0,109,111,118,115,98,0,109,111,118,115,119,0,109,111,118,115,108,0,109,111,118,115,0,115,109,111,118,98,0,115,109,111,118,119,0,115,109,111,118,108,0,115,109,111,118,0,115,99,97,115,98,0,115,99,97,115,119,0,115,99,97,115,108,0,115,99,97,115,0,115,115,99,97,98,0,115,115,99,97,119,0,115,115,99,97,108,0,115,115,99,97,0,115,116,111,115,98,0,115,116,111,115,119,0,115,116,111,115,108,0,115,116,111,115,0,115,115,116,111,98,0,115,115,116,111,119,0,115,115,116,111,108,0,115,115,116,111,0,99,108,99,0,99,108,100,0,99,108,105,0,99,108,116,115,0,99,109,99,0,108,97,104,102,0,115,97,104,102,0,112,117,115,104,97,0,112,111,112,97,0,112,117,115,104,102,108,0,112,111,112,102,108,0,112,117,115,104,102,0,112,111,112,102,0,115,116,99,0,115,116,100,0,115,116,105,0,97,97,97,0,97,97,115,0,100,97,97,0,100,97,115,0,97,97,100,0,97,97,109,0,99,98,119,0,99,119,100,0,99,119,100,101,0,99,100,113,0,99,98,116,119,0,99,119,116,108,0,99,119,116,100,0,99,108,116,100,0,105,110,116,51,0,105,110,116,111,0,105,114,101,116,0,114,115,109,0,104,108,116,0,110,111,112,0,112,97,117,115,101,0,120,108,97,116,0,119,97,105,116,0,102,119,97,105,116,0,97,119,111,114,100,0,97,100,100,114,49,54,0,100,97,116,97,49,54,0,108,111,99,107,0,114,101,112,0,114,101,112,101,0,114,101,112,122,0,114,101,112,110,101,0,114,101,112,110,122,0,105,110,118,100,0,119,98,105,110,118,100,0,99,112,117,105,100,0,119,114,109,115,114,0,114,100,116,115,99,0,114,100,109,115,114,0,114,100,112,109,99,0,117,100,50,0,108,101,97,118,101,0,114,101,116,0,114,101,116,108,0,108,114,101,116,0,102,117,99,111,109,112,112,0,102,116,115,116,0,102,120,97,109,0,102,108,100,49,0,102,108,100,108,50,116,0,102,108,100,108,50,101,0,102,108,100,112,105,0,102,108,100,108,103,50,0,102,108,100,108,110,50,0,102,108,100,122,0,102,50,120,109,49,0,102,121,108,50,120,0,102,112,116,97,110,0,102,112,97,116,97,110,0,102,120,116,114,97,99,116,0,102,112,114,101,109,49,0,102,100,101,99,115,116,112,0,102,105,110,99,115,116,112,0,102,112,114,101,109,0,102,121,108,50,120,112,49,0,102,115,113,114,116,0,102,115,105,110,99,111,115,0,102,114,110,100,105,110,116,0,102,115,99,97,108,101,0,102,115,105,110,0,102,99,111,115,0,102,99,104,115,0,102,97,98,115,0,102,110,105,110,105,116,0,102,110,99,108,101,120,0,102,110,111,112,0,102,120,99,104,0,102,110,115,116,115,119,0,101,109,109,115,0,101,110,116,101,114,0,108,111,111,112,110,101,0,108,111,111,112,110,122,0,108,111,111,112,101,0,108,111,111,112,122,0,108,111,111,112,0,106,101,99,120,122,0,102,108,100,0,102,108,100,108,0,102,108,100,115,0,102,105,108,100,108,0,102,105,108,100,113,0,102,105,108,100,108,108,0,102,108,100,116,0,102,98,108,100,0,102,115,116,0,102,115,116,108,0,102,115,116,115,0,102,115,116,112,115,0,102,115,116,112,108,0,102,105,115,116,0,102,105,115,116,112,0,102,105,115,116,108,0,102,105,115,116,112,108,0,102,115,116,112,0,102,105,115,116,112,113,0,102,105,115,116,112,108,108,0,102,115,116,112,116,0,102,98,115,116,112,0,102,117,99,111,109,0,102,117,99,111,109,112,0,102,105,110,105,116,0,102,108,100,99,119,0,102,110,115,116,99,119,0,102,115,116,99,119,0,102,115,116,115,119,0,102,99,108,101,120,0,102,110,115,116,101,110,118,0,102,115,116,101,110,118,0,102,108,100,101,110,118,0,102,110,115,97,118,101,0,102,115,97,118,101,0,102,114,115,116,111,114,0,102,102,114,101,101,0,102,102,114,101,101,112,0,102,120,115,97,118,101,0,102,120,114,115,116,111,114,0,97,114,112,108,0,108,97,114,0,108,103,100,116,0,108,105,100,116,0,108,108,100,116,0,108,109,115,119,0,108,116,114,0,115,103,100,116,0,115,105,100,116,0,115,108,100,116,0,115,109,115,119,0,115,116,114,0,118,101,114,114,0,118,101,114,119,0,98,115,119,97,112,0,105,110,118,108,112,103,0,98,111,117,110,100,108,0,98,111,117,110,100,119,0,99,109,112,120,99,104,103,56,98,0,102,99,109,111,118,98,0,102,99,109,111,118,101,0,102,99,109,111,118,98,101,0,102,99,109,111,118,117,0,102,99,109,111,118,110,98,0,102,99,109,111,118,110,101,0,102,99,109,111,118,110,98,101,0,102,99,109,111,118,110,117,0,102,117,99,111,109,105,0,102,99,111,109,105,0,102,117,99,111,109,105,112,0,102,99,111,109,105,112,0,109,111,118,100,0,109,111,118,113,0,112,97,99,107,115,115,100,119,0,112,97,99,107,115,115,119,98,0,112,97,99,107,117,115,119,98,0,112,97,100,100,98,0,112,97,100,100,119,0,112,97,100,100,100,0,112,97,100,100,115,98,0,112,97,100,100,115,119,0,112,97,100,100,117,115,98,0,112,97,100,100,117,115,119,0,112,97,110,100,0,112,97,110,100,110,0,112,99,109,112,101,113,98,0,112,99,109,112,101,113,119,0,112,99,109,112,101,113,100,0,112,99,109,112,103,116,98,0,112,99,109,112,103,116,119,0,112,99,109,112,103,116,100,0,112,109,97,100,100,119,100,0,112,109,117,108,104,119,0,112,109,117,108,108,119,0,112,111,114,0,112,115,108,108,119,0,112,115,108,108,100,0,112,115,108,108,113,0,112,115,114,97,119,0,112,115,114,97,100,0,112,115,114,108,119,0,112,115,114,108,100,0,112,115,114,108,113,0,112,115,117,98,98,0,112,115,117,98,119,0,112,115,117,98,100,0,112,115,117,98,115,98,0,112,115,117,98,115,119,0,112,115,117,98,117,115,98,0,112,115,117,98,117,115,119,0,112,117,110,112,99,107,104,98,119,0,112,117,110,112,99,107,104,119,100,0,112,117,110,112,99,107,104,100,113,0,112,117,110,112,99,107,108,98,119,0,112,117,110,112,99,107,108,119,100,0,112,117,110,112,99,107,108,100,113,0,112,120,111,114,0,0,1,0,0,0,0,0,0,0,40,52,0,0,168,51,0,0,0,0,0,0,0,0,0,0,116,99,99,32,118,101,114,115,105,111,110,32,48,46,57,46,50,54,32,45,32,84,105,110,121,32,67,32,67,111,109,112,105,108,101,114,32,45,32,67,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,48,49,45,50,48,48,54,32,70,97,98,114,105,99,101,32,66,101,108,108,97,114,100,10,85,115,97,103,101,58,32,116,99,99,32,91,111,112,116,105,111,110,115,46,46,46,93,32,91,45,111,32,111,117,116,102,105,108,101,93,32,91,45,99,93,32,105,110,102,105,108,101,40,115,41,46,46,46,10,32,32,32,32,32,32,32,116,99,99,32,91,111,112,116,105,111,110,115,46,46,46,93,32,45,114,117,110,32,105,110,102,105,108,101,32,91,97,114,103,117,109,101,110,116,115,46,46,46,93,10,71,101,110,101,114,97,108,32,111,112,116,105,111,110,115,58,10,32,32,45,99,32,32,32,32,32,32,32,32,32,32,99,111,109,112,105,108,101,32,111,110,108,121,32,45,32,103,101,110,101,114,97,116,101,32,97,110,32,111,98,106,101,99,116,32,102,105,108,101,10,32,32,45,111,32,111,117,116,102,105,108,101,32,32,115,101,116,32,111,117,116,112,117,116,32,102,105,108,101,110,97,109,101,10,32,32,45,114,117,110,32,32,32,32,32,32,32,32,114,117,110,32,99,111,109,112,105,108,101,100,32,115,111,117,114,99,101,10,32,32,45,102,102,108,97,103,32,32,32,32,32,32,115,101,116,32,111,114,32,114,101,115,101,116,32,40,119,105,116,104,32,39,110,111,45,39,32,112,114,101,102,105,120,41,32,39,102,108,97,103,39,32,40,115,101,101,32,109,97,110,32,112,97,103,101,41,10,32,32,45,87,119,97,114,110,105,110,103,32,32,32,115,101,116,32,111,114,32,114,101,115,101,116,32,40,119,105,116,104,32,39,110,111,45,39,32,112,114,101,102,105,120,41,32,39,119,97,114,110,105,110,103,39,32,40,115,101,101,32,109,97,110,32,112,97,103,101,41,10,32,32,45,119,32,32,32,32,32,32,32,32,32,32,100,105,115,97,98,108,101,32,97,108,108,32,119,97,114,110,105,110,103,115,10,32,32,45,118,32,32,32,32,32,32,32,32,32,32,115,104,111,119,32,118,101,114,115,105,111,110,10,32,32,45,118,118,32,32,32,32,32,32,32,32,32,115,104,111,119,32,105,110,99,108,117,100,101,100,32,102,105,108,101,115,32,40,97,115,32,115,111,108,101,32,97,114,103,117,109,101,110,116,58,32,115,104,111,119,32,115,101,97,114,99,104,32,112,97,116,104,115,41,10,32,32,45,100,117,109,112,118,101,114,115,105,111,110,10,32,32,45,98,101,110,99,104,32,32,32,32,32,32,115,104,111,119,32,99,111,109,112,105,108,97,116,105,111,110,32,115,116,97,116,105,115,116,105,99,115,10,80,114,101,112,114,111,99,101,115,115,111,114,32,111,112,116,105,111,110,115,58,10,32,32,45,69,32,32,32,32,32,32,32,32,32,32,112,114,101,112,114,111,99,101,115,115,32,111,110,108,121,10,32,32,45,73,100,105,114,32,32,32,32,32,32,32,97,100,100,32,105,110,99,108,117,100,101,32,112,97,116,104,32,39,100,105,114,39,10,32,32,45,68,115,121,109,91,61,118,97,108,93,32,100,101,102,105,110,101,32,39,115,121,109,39,32,119,105,116,104,32,118,97,108,117,101,32,39,118,97,108,39,10,32,32,45,85,115,121,109,32,32,32,32,32,32,32,117,110,100,101,102,105,110,101,32,39,115,121,109,39,10,76,105,110,107,101,114,32,111,112,116,105,111,110,115,58,10,32,32,45,76,100,105,114,32,32,32,32,32,32,32,97,100,100,32,108,105,98,114,97,114,121,32,112,97,116,104,32,39,100,105,114,39,10,32,32,45,108,108,105,98,32,32,32,32,32,32,32,108,105,110,107,32,119,105,116,104,32,100,121,110,97,109,105,99,32,111,114,32,115,116,97,116,105,99,32,108,105,98,114,97,114,121,32,39,108,105,98,39,10,32,32,45,112,116,104,114,101,97,100,32,32,32,32,108,105,110,107,32,119,105,116,104,32,45,108,112,116,104,114,101,97,100,32,97,110,100,32,45,68,95,82,69,69,78,84,82,65,78,84,32,40,80,79,83,73,88,32,76,105,110,117,120,41,10,32,32,45,114,32,32,32,32,32,32,32,32,32,32,103,101,110,101,114,97,116,101,32,40,114,101,108,111,99,97,116,97,98,108,101,41,32,111,98,106,101,99,116,32,102,105,108,101,10,32,32,45,114,100,121,110,97,109,105,99,32,32,32,101,120,112,111,114,116,32,97,108,108,32,103,108,111,98,97,108,32,115,121,109,98,111,108,115,32,116,111,32,100,121,110,97,109,105,99,32,108,105,110,107,101,114,10,32,32,45,115,104,97,114,101,100,32,32,32,32,32,103,101,110,101,114,97,116,101,32,97,32,115,104,97,114,101,100,32,108,105,98,114,97,114,121,10,32,32,45,115,111,110,97,109,101,32,32,32,32,32,115,101,116,32,110,97,109,101,32,102,111,114,32,115,104,97,114,101,100,32,108,105,98,114,97,114,121,32,116,111,32,98,101,32,117,115,101,100,32,97,116,32,114,117,110,116,105,109,101,10,32,32,45,115,116,97,116,105,99,32,32,32,32,32,115,116,97,116,105,99,32,108,105,110,107,105,110,103,10,32,32,45,87,108,44,45,111,112,116,91,61,118,97,108,93,32,32,115,101,116,32,108,105,110,107,101,114,32,111,112,116,105,111,110,32,40,115,101,101,32,109,97,110,117,97,108,41,10,68,101,98,117,103,103,101,114,32,111,112,116,105,111,110,115,58,10,32,32,45,103,32,32,32,32,32,32,32,32,32,32,103,101,110,101,114,97,116,101,32,114,117,110,116,105,109,101,32,100,101,98,117,103,32,105,110,102,111,10,32,32,45,98,32,32,32,32,32,32,32,32,32,32,99,111,109,112,105,108,101,32,119,105,116,104,32,98,117,105,108,116,45,105,110,32,109,101,109,111,114,121,32,97,110,100,32,98,111,117,110,100,115,32,99,104,101,99,107,101,114,32,40,105,109,112,108,105,101,115,32,45,103,41,10,77,105,115,99,32,111,112,116,105,111,110,115,58,10,32,32,45,110,111,115,116,100,105,110,99,32,32,32,100,111,32,110,111,116,32,117,115,101,32,115,116,97,110,100,97,114,100,32,115,121,115,116,101,109,32,105,110,99,108,117,100,101,32,112,97,116,104,115,10,32,32,45,110,111,115,116,100,108,105,98,32,32,32,100,111,32,110,111,116,32,108,105,110,107,32,119,105,116,104,32,115,116,97,110,100,97,114,100,32,99,114,116,32,97,110,100,32,108,105,98,114,97,114,105,101,115,10,32,32,45,66,100,105,114,32,32,32,32,32,32,32,117,115,101,32,39,100,105,114,39,32,97,115,32,116,99,99,32,105,110,116,101,114,110,97,108,32,108,105,98,114,97,114,121,32,97,110,100,32,105,110,99,108,117,100,101,32,112,97,116,104,10,32,32,45,77,68,32,32,32,32,32,32,32,32,32,103,101,110,101,114,97,116,101,32,116,97,114,103,101,116,32,100,101,112,101,110,100,101,110,99,105,101,115,32,102,111,114,32,109,97,107,101,10,32,32,45,77,70,32,100,101,112,102,105,108,101,32,112,117,116,32,103,101,110,101,114,97,116,101,100,32,100,101,112,101,110,100,101,110,99,105,101,115,32,104,101,114,101,0,0,0,0,0,0,0,0,38,46,54,62,100,101,0,0,0,0,1,0,2,0,0,0,3,0,0,0,0,0,0,0,5,0,0,0,17,0,0,0,33,0,0,0,10,0,0,0,248,0,252,0,250,0,6,15,245,0,159,0,158,0,96,0,97,0,156,0,157,0,156,0,157,0,249,0,253,0,251,0,55,0,63,0,39,0,47,0,10,213,10,212,152,102,153,102,152,0,153,0,152,102,152,0,153,102,153,0,204,0,206,0,207,0,170,15,244,0,144,0,144,243,215,0,155,0,155,0,103,0,103,0,102,0,240,0,243,0,243,0,243,0,242,0,242,0,8,15,9,15,162,15,48,15,49,15,50,15,51,15,11,15,201,0,195,0,195,0,203,0,233,218,228,217,229,217,232,217,233,217,234,217,235,217,236,217,237,217,238,217,240,217,241,217,242,217,243,217,244,217,245,217,246,217,247,217,248,217,249,217,250,217,251,217,252,217,253,217,254,217,255,217,224,217,225,217,227,219,226,219,208,217,201,217,224,223,119,15,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,52,0,0,0,192,41,0,0,52,0,2,0,168,41,0,0,12,0,2,0,136,41,0,0,56,0,0,0,80,41,0,0,1,2,0,0,0,0,0,0,0,2,1,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,45,3,166,0,6,0,0,0,0,0,49,3,166,0,6,0,0,0,0,0,53,3,108,0,6,0,0,0,0,0,57,3,110,0,6,0,0,0,0,0,61,3,172,0,6,0,0,0,0,0,65,3,172,0,6,0,0,0,0,0,69,3,164,0,6,0,0,0,0,0,73,3,164,0,6,0,0,0,0,0,77,3,174,0,6,0,0,0,0,0,81,3,174,0,6,0,0,0,0,0,85,3,170,0,6,0,0,0,0,0,89,3,170,0,6,0,0,0,0,0,224,2,188,15,20,0,2,151,23,0,227,2,189,15,20,0,2,151,23,0,230,2,163,15,20,0,2,23,151,0,230,2,186,15,20,128,2,10,151,0,233,2,171,15,20,0,2,23,151,0,233,2,186,15,20,160,2,10,151,0,236,2,179,15,20,0,2,23,151,0,236,2,186,15,20,192,2,10,151,0,239,2,187,15,20,0,2,23,151,0,239,2,186,15,20,224,2,10,151,0,247,1,160,0,6,0,2,18,14,0,247,1,162,0,6,0,2,14,18,0,247,1,136,0,22,0,2,22,150,0,247,1,138,0,22,0,2,150,22,0,247,1,176,0,14,0,2,21,22,0,247,1,198,0,22,0,2,21,150,0,248,1,140,0,20,0,2,8,150,0,248,1,142,0,20,0,2,150,8,0,248,1,32,15,20,0,2,5,2,0,248,1,33,15,20,0,2,7,2,0,248,1,36,15,20,0,2,6,2,0,248,1,34,15,20,0,2,2,5,0,248,1,35,15,20,0,2,2,7,0,248,1,38,15,20,0,2,2,6,0,120,2,190,15,16,0,2,128,2,0,119,2,190,15,16,1,2,128,1,0,121,2,191,15,16,0,2,129,2,0,115,2,182,15,20,0,2,128,23,0,118,2,183,15,16,0,2,129,2,0,101,2,80,0,12,0,1,23,0,0,101,2,255,0,20,192,1,151,0,0,101,2,106,0,4,0,1,11,0,0,101,2,104,0,4,0,1,13,0,0,101,2,6,0,4,0,1,8,0,0,104,2,88,0,12,0,1,23,0,0,104,2,143,0,20,0,1,151,0,0,104,2,7,0,4,0,1,8,0,0,60,2,144,0,12,0,2,22,14,0,60,2,144,0,12,0,2,14,22,0,59,2,134,0,22,0,2,22,150,0,59,2,134,0,22,0,2,150,22,0,107,2,228,0,6,0,2,10,14,0,107,2,228,0,6,0,1,10,0,0,107,2,236,0,6,0,2,17,14,0,107,2,236,0,6,0,1,17,0,0,111,2,230,0,6,0,2,14,10,0,111,2,230,0,6,0,1,10,0,0,111,2,238,0,6,0,2,14,17,0,111,2,238,0,6,0,1,17,0,0,122,2,141,0,20,0,2,128,22,0,125,2,196,0,16,0,2,128,2,0,126,2,197,0,16,0,2,128,2,0,127,2,178,15,16,0,2,128,2,0,128,2,180,15,16,0,2,128,2,0,129,2,181,15,16,0,2,128,2,0,251,1,0,0,22,2,2,22,150,0,251,1,2,0,22,2,2,150,22,0,251,1,4,0,6,2,2,21,14,0,251,1,128,0,22,2,2,21,150,0,252,1,131,0,20,2,2,11,150,0,63,2,132,0,22,0,2,150,22,0,63,2,132,0,22,0,2,22,150,0,63,2,168,0,6,0,2,21,14,0,63,2,246,0,22,0,2,21,150,0,28,2,64,0,12,0,1,23,0,0,27,2,254,0,22,0,1,150,0,0,32,2,72,0,12,0,1,23,0,0,31,2,254,0,22,32,1,150,0,0,35,2,246,0,22,64,1,150,0,0,39,2,246,0,22,96,1,150,0,0,43,2,246,0,22,128,1,150,0,0,47,2,246,0,22,160,1,150,0,0,48,2,175,15,20,0,2,150,22,0,48,2,107,0,20,0,3,11,151,23,48,2,107,0,20,0,2,11,23,0,48,2,105,0,20,0,3,24,151,23,48,2,105,0,20,0,2,24,23,0,51,2,246,0,22,192,1,150,0,0,51,2,246,0,22,192,2,150,14,0,55,2,246,0,22,224,1,150,0,0,55,2,246,0,22,224,2,150,14,0,67,2,192,0,150,0,2,10,150,0,67,2,210,0,150,0,2,16,150,0,67,2,208,0,150,0,1,150,0,0,95,2,164,15,20,0,3,10,23,151,95,2,165,15,20,0,3,16,23,151,95,2,165,15,20,0,2,23,151,0,98,2,172,15,20,0,3,10,23,151,98,2,173,15,20,0,3,16,23,151,98,2,173,15,20,0,2,23,151,0,130,2,255,0,16,64,1,19,0,0,130,2,232,0,1,0,1,18,0,0,131,2,255,0,16,128,1,19,0,0,131,2,235,0,1,4,1,18,0,0,132,2,154,0,0,0,2,12,13,0,132,2,255,0,0,96,1,128,0,0,133,2,234,0,0,0,2,12,13,0,133,2,255,0,0,160,1,128,0,0,0,1,205,0,0,0,1,10,0,0,164,2,144,15,80,0,1,128,0,0,188,3,200,0,0,0,2,12,10,0,152,3,194,0,0,0,1,12,0,0,151,3,194,0,0,0,1,12,0,0,153,3,202,0,0,0,1,12,0,0,134,2,112,0,65,4,1,18,0,0,189,3,224,0,0,4,1,18,0,0,190,3,224,0,0,4,1,18,0,0,191,3,225,0,0,4,1,18,0,0,192,3,225,0,0,4,1,18,0,0,193,3,226,0,0,4,1,18,0,0,194,3,227,0,0,4,1,18,0,0,7,3,217,216,0,0,0,0,0,0,245,2,192,216,8,8,1,9,0,0,245,2,192,216,8,8,2,9,15,0,245,2,192,220,8,8,2,15,9,0,251,2,200,220,8,8,2,15,9,0,245,2,193,222,0,8,0,0,0,0,246,2,192,222,8,8,1,9,0,0,246,2,192,222,8,8,2,9,15,0,246,2,192,222,8,8,2,15,9,0,246,2,193,222,0,8,0,0,0,0,247,2,216,0,16,8,1,128,0,0,248,2,218,0,16,8,1,128,0,0,249,2,220,0,16,8,1,128,0,0,250,2,222,0,16,8,1,128,0,0,195,3,192,217,8,0,1,9,0,0,196,3,192,217,8,0,1,9,0,0,197,3,217,0,16,0,1,128,0,0,196,3,221,0,16,0,1,128,0,0,198,3,219,0,16,0,1,128,0,0,199,3,223,0,16,160,1,128,0,0,200,3,223,0,16,160,1,128,0,0,201,3,219,0,16,160,1,128,0,0,202,3,223,0,16,128,1,128,0,0,203,3,208,221,8,0,1,9,0,0,204,3,208,221,8,0,1,9,0,0,205,3,217,0,16,64,1,128,0,0,206,3,217,0,16,96,1,128,0,0,204,3,221,0,16,64,1,128,0,0,207,3,221,0,16,96,1,128,0,0,208,3,223,0,16,64,1,128,0,0,209,3,223,0,16,96,1,128,0,0,210,3,219,0,16,64,1,128,0,0,211,3,219,0,16,96,1,128,0,0,212,3,216,221,8,0,1,9,0,0,213,3,223,0,16,224,1,128,0,0,214,3,223,0,16,224,1,128,0,0,215,3,219,0,16,224,1,128,0,0,216,3,223,0,16,192,1,128,0,0,185,3,200,217,8,0,1,9,0,0,217,3,224,221,8,0,1,9,0,0,218,3,232,221,8,0,1,9,0,0,219,3,227,219,32,0,0,0,0,0,220,3,217,0,16,160,1,128,0,0,221,3,217,0,16,224,1,128,0,0,222,3,217,0,48,224,1,128,0,0,186,3,224,223,0,0,1,14,0,0,186,3,221,0,16,224,1,128,0,0,223,3,224,223,32,0,1,14,0,0,223,3,224,223,32,0,0,0,0,0,223,3,221,0,48,224,1,128,0,0,224,3,226,219,32,0,0,0,0,0,225,3,217,0,16,192,1,128,0,0,226,3,217,0,48,192,1,128,0,0,227,3,217,0,16,128,1,128,0,0,228,3,221,0,16,192,1,128,0,0,229,3,221,0,48,192,1,128,0,0,230,3,221,0,16,128,1,128,0,0,231,3,192,221,8,128,1,9,0,0,232,3,192,223,8,128,1,9,0,0,233,3,174,15,16,0,1,128,0,0,234,3,174,15,16,32,1,128,0,0,235,3,99,0,16,0,2,1,129,0,236,3,2,15,16,0,2,130,2,0,237,3,1,15,16,64,1,128,0,0,238,3,1,15,16,96,1,128,0,0,239,3,0,15,16,64,1,150,0,0,240,3,1,15,16,192,1,150,0,0,242,2,3,15,20,0,2,150,22,0,241,3,0,15,16,96,1,150,0,0,242,3,1,15,16,0,1,128,0,0,243,3,1,15,16,32,1,128,0,0,244,3,0,15,16,0,1,150,0,0,245,3,1,15,16,128,1,150,0,0,246,3,0,15,16,32,1,129,0,0,247,3,0,15,16,128,1,150,0,0,248,3,0,15,16,160,1,150,0,0,249,3,200,15,8,0,1,2,0,0,37,3,192,15,22,0,2,22,150,0,41,3,176,15,22,0,2,22,150,0,250,3,1,15,16,224,1,128,0,0,251,3,98,0,16,0,2,2,128,0,252,3,98,0,16,1,2,1,128,0,253,3,199,15,16,32,1,128,0,0,194,2,64,15,80,0,2,130,2,0,254,3,192,218,8,0,2,9,15,0,255,3,200,218,8,0,2,9,15,0,0,4,208,218,8,0,2,9,15,0,1,4,216,218,8,0,2,9,15,0,2,4,192,219,8,0,2,9,15,0,3,4,200,219,8,0,2,9,15,0,4,4,208,219,8,0,2,9,15,0,5,4,216,219,8,0,2,9,15,0,6,4,232,219,8,0,2,9,15,0,7,4,240,219,8,0,2,9,15,0,8,4,232,223,8,0,2,9,15,0,9,4,240,223,8,0,2,9,15,0,10,4,110,15,16,0,2,130,3,0,10,4,126,15,16,0,2,3,130,0,11,4,111,15,16,0,2,131,3,0,11,4,127,15,16,0,2,3,131,0,12,4,107,15,16,0,2,131,3,0,13,4,99,15,16,0,2,131,3,0,14,4,103,15,16,0,2,131,3,0,15,4,252,15,16,0,2,131,3,0,16,4,253,15,16,0,2,131,3,0,17,4,254,15,16,0,2,131,3,0,18,4,236,15,16,0,2,131,3,0,19,4,237,15,16,0,2,131,3,0,20,4,220,15,16,0,2,131,3,0,21,4,221,15,16,0,2,131,3,0,22,4,219,15,16,0,2,131,3,0,23,4,223,15,16,0,2,131,3,0,24,4,116,15,16,0,2,131,3,0,25,4,117,15,16,0,2,131,3,0,26,4,118,15,16,0,2,131,3,0,27,4,100,15,16,0,2,131,3,0,28,4,101,15,16,0,2,131,3,0,29,4,102,15,16,0,2,131,3,0,30,4,245,15,16,0,2,131,3,0,31,4,229,15,16,0,2,131,3,0,32,4,213,15,16,0,2,131,3,0,33,4,235,15,16,0,2,131,3,0,34,4,241,15,16,0,2,131,3,0,34,4,113,15,16,192,2,10,3,0,35,4,242,15,16,0,2,131,3,0,35,4,114,15,16,192,2,10,3,0,36,4,243,15,16,0,2,131,3,0,36,4,115,15,16,192,2,10,3,0,37,4,225,15,16,0,2,131,3,0,37,4,113,15,16,128,2,10,3,0,38,4,226,15,16,0,2,131,3,0,38,4,114,15,16,128,2,10,3,0,39,4,209,15,16,0,2,131,3,0,39,4,113,15,16,64,2,10,3,0,40,4,210,15,16,0,2,131,3,0,40,4,114,15,16,64,2,10,3,0,41,4,211,15,16,0,2,131,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([41,4,115,15,16,64,2,10,3,0,42,4,248,15,16,0,2,131,3,0,43,4,249,15,16,0,2,131,3,0,44,4,250,15,16,0,2,131,3,0,45,4,232,15,16,0,2,131,3,0,46,4,233,15,16,0,2,131,3,0,47,4,216,15,16,0,2,131,3,0,48,4,217,15,16,0,2,131,3,0,49,4,104,15,16,0,2,131,3,0,50,4,105,15,16,0,2,131,3,0,51,4,106,15,16,0,2,131,3,0,52,4,96,15,16,0,2,131,3,0,53,4,97,15,16,0,2,131,3,0,54,4,98,15,16,0,2,131,3,0,55,4,239,15,16,0,2,131,3,0,0,0,0,0,0,0,0,0,0,0,3,6,7,0,0,0,0,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,40,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,60,97,110,111,110,121,109,111,117,115,62,0,0,0,0,0,45,104,101,108,112,0,0,0,101,110,117,109,32,0,0,0,104,0,0,0,0,0,0,0,115,116,114,117,99,116,32,0,39,37,99,39,32,109,111,100,105,102,105,101,114,32,99,97,110,32,111,110,108,121,32,98,101,32,97,112,112,108,105,101,100,32,116,111,32,111,117,116,112,117,116,115,0,0,0,0,108,101,97,100,105,110,103,45,117,110,100,101,114,115,99,111,114,101,0,0,0,0,0,0,108,111,110,103,32,100,111,117,98,108,101,0,0,0,0,0,101,110,100,32,111,102,32,108,105,110,101,0,0,0,0,0,99,111,109,109,111,110,0,0,95,95,98,111,117,110,100,95,105,110,105,116,0,0,0,0,100,111,117,98,108,101,0,0,115,105,103,110,101,100,45,99,104,97,114,0,0,0,0,0,102,108,111,97,116,0,0,0,117,110,115,105,103,110,101,100,45,99,104,97,114,0,0,0,112,111,105,110,116,101,114,0,108,111,110,103,32,108,111,110,103,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,105,109,112,108,105,99,105,116,45,102,117,110,99,116,105,111,110,45,100,101,99,108,97,114,97,116,105,111,110,0,0,0,37,115,32,114,101,100,101,102,105,110,101,100,0,0,0,0,108,111,110,103,0,0,0,0,101,114,114,111,114,0,0,0,105,110,116,0,0,0,0,0,119,114,105,116,101,45,115,116,114,105,110,103,115,0,0,0,60,45,32,37,115,10,0,0,115,104,111,114,116,0,0,0,117,110,115,117,112,112,111,114,116,101,100,0,0,0,0,0,99,104,97,114,0,0,0,0,97,108,108,0,0,0,0,0,95,66,111,111,108,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,105,110,107,101,114,32,111,112,116,105,111,110,32,39,37,115,39,0,0,118,111,105,100,0,0,0,0,99,97,110,110,111,116,32,114,101,102,101,114,101,110,99,101,32,116,119,105,99,101,32,116,104,101,32,115,97,109,101,32,111,112,101,114,97,110,100,0,115,111,110,97,109,101,61,0,117,110,115,105,103,110,101,100,32,0,0,0,0,0,0,0,39,58,39,0,0,0,0,0,115,101,99,116,105,111,110,45,97,108,105,103,110,109,101,110,116,61,0,0,0,0,0,0,46,105,110,105,116,0,0,0,118,111,108,97,116,105,108,101,32,0,0,0,0,0,0,0,114,112,97,116,104,61,0,0,99,111,110,115,116,32,0,0,98,105,110,97,114,121,0,0,115,116,114,105,110,103,32,99,111,110,115,116,97,110,116,0,99,97,110,110,111,116,32,99,97,115,116,32,39,37,115,39,32,116,111,32,39,37,115,39,0,0,0,0,0,0,0,0,101,108,102,51,50,45,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,32,105,110,32,99,111,109,109,101,110,116,0,0,0,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,109,97,107,101,115,32,105,110,116,101,103,101,114,32,102,114,111,109,32,112,111,105,110,116,101,114,32,119,105,116,104,111,117,116,32,97,32,99,97,115,116,0,0,0,0,111,102,111,114,109,97,116,61,0,0,0,0,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,100,105,115,99,97,114,100,115,32,113,117,97,108,105,102,105,101,114,115,32,102,114,111,109,32,112,111,105,110,116,101,114,32,116,97,114,103,101,116,32,116,121,112,101,0,105,110,105,116,61,0,0,0,46,100,0,0,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,102,114,111,109,32,105,110,99,111,109,112,97,116,105,98,108,101,32,112,111,105,110,116,101,114,32,116,121,112,101,0,0,0,0,0,0,0,84,116,101,120,116,61,0,0,97,115,115,105,103,110,109,101,110,116,32,109,97,107,101,115,32,112,111,105,110,116,101,114,32,102,114,111,109,32,105,110,116,101,103,101,114,32,119,105,116,104,111,117,116,32,97,32,99,97,115,116,0,0,0,0,105,109,97,103,101,45,98,97,115,101,61,0,0,0,0,0,67,97,110,110,111,116,32,97,115,115,105,103,110,32,118,111,105,100,32,118,97,108,117,101,0,0,0,0,0,0,0,0,102,105,110,105,61,0,0,0,119,105,100,116,104,32,111,102,32,39,37,115,39,32,101,120,99,101,101,100,115,32,105,116,115,32,116,121,112,101,0,0,105,110,118,97,108,105,100,32,114,101,102,101,114,101,110,99,101,32,105,110,32,99,111,110,115,116,114,97,105,110,116,32,37,100,32,40,39,37,115,39,41,0,0,0,0,0,0,0,110,111,115,116,100,108,105,98,0,0,0,0,0,0,0,0,98,105,116,102,105,101,108,100,115,32,109,117,115,116,32,104,97,118,101,32,115,99,97,108,97,114,32,116,121,112,101,0,105,100,101,110,116,105,102,105,101,114,0,0,0,0,0,0,66,115,121,109,98,111,108,105,99,0,0,0,0,0,0,0,95,95,98,111,117,110,100,115,95,115,116,97,114,116,0,0,122,101,114,111,32,119,105,100,116,104,32,102,111,114,32,98,105,116,45,102,105,101,108,100,32,39,37,115,39,0,0,0,37,100,32,105,100,101,110,116,115,44,32,37,100,32,108,105,110,101,115,44,32,37,100,32,98,121,116,101,115,44,32,37,48,46,51,102,32,115,44,32,37,100,32,108,105,110,101,115,47,115,44,32,37,48,46,49,102,32,77,66,47,115,10,0,110,101,103,97,116,105,118,101,32,119,105,100,116,104,32,105,110,32,98,105,116,45,102,105,101,108,100,32,39,37,115,39,0,0,0,0,0,0,0,0,45,108,112,116,104,114,101,97,100,0,0,0,0,0,0,0,97,115,115,105,103,110,109,101,110,116,32,111,102,32,114,101,97,100,45,111,110,108,121,32,108,111,99,97,116,105,111,110,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,116,121,112,101,32,102,111,114,32,39,37,115,39,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,111,112,116,105,111,110,32,39,37,115,39,0,76,46,37,117,0,0,0,0,115,116,114,117,99,116,47,117,110,105,111,110,47,101,110,117,109,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,115,116,114,117,99,116,47,117,110,105,111,110,47,101,110,117,109,32,110,97,109,101,0,0,95,82,69,69,78,84,82,65,78,84,0,0,0,0,0,0,45,114,117,110,32,105,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,105,110,32,97,32,99,114,111,115,115,32,99,111,109,112,105,108,101,114,0,0,0,0,0,0,0,115,105,103,110,101,100,32,97,110,100,32,117,110,115,105,103,110,101,100,32,109,111,100,105,102,105,101,114,0,0,0,0,116,111,111,32,109,97,110,121,32,98,97,115,105,99,32,116,121,112,101,115,0,0,0,0,97,114,103,117,109,101,110,116,32,116,111,32,39,37,115,39,32,105,115,32,109,105,115,115,105,110,103,0,0,0,0,0,115,105,122,101,32,111,102,32,118,97,114,105,97,98,108,101,32,108,101,110,103,116,104,32,97,114,114,97,121,32,115,104,111,117,108,100,32,98,101,32,97,110,32,105,110,116,101,103,101,114,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,45,45,32,39,37,115,39,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,71,76,79,66,65,76,95,79,70,70,83,69,84,95,84,65,66,76,69,95,0,0,0,105,110,118,97,108,105,100,32,97,114,114,97,121,32,115,105,122,101,0,0,0,0,0,0,99,97,110,110,111,116,32,114,101,108,111,99,97,116,101,0,99,114,116,105,46,111,0,0,46,103,111,116,0,0,0,0,112,97,114,97,109,101,116,101,114,32,100,101,99,108,97,114,101,100,32,97,115,32,118,111,105,100,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,97,115,109,32,111,112,101,114,97,110,100,115,0,0,0,115,116,114,97,121,32,39,92,39,32,105,110,32,112,114,111,103,114,97,109,0,0,0,0,99,114,116,49,46,111,0,0,37,115,47,37,115,0,0,0,105,110,118,97,108,105,100,32,116,121,112,101,0,0,0,0,35,101,110,100,105,102,0,0,46,115,116,97,98,115,116,114,0,0,0,0,0,0,0,0,95,95,37,115,95,101,110,100,0,0,0,0,0,0,0,0,116,121,112,101,0,0,0,0,105,110,118,97,108,105,100,32,112,97,99,107,32,112,114,97,103,109,97,0,0,0,0,0,46,115,116,97,98,0,0,0,99,111,109,112,97,114,105,115,111,110,32,111,102,32,115,116,114,117,99,116,0,0,0,0,95,95,37,115,95,115,116,97,114,116,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,102,117,110,99,116,105,111,110,0,0,111,117,116,32,111,102,32,112,97,99,107,32,115,116,97,99,107,0,0,0,0,0,0,0,95,95,67,72,65,82,95,85,78,83,73,71,78,69,68,95,95,0,0,0,0,0,0,0,45,62,0,0,0,0,0,0,105,110,99,111,114,114,101,99,116,32,110,117,109,98,101,114,32,111,102,32,111,112,101,114,97,110,100,115,0,0,0,0,60,45,32,37,115,10,0,0,100,101,112,114,101,99,97,116,101,100,32,117,115,101,32,111,102,32,108,97,98,101,108,32,97,116,32,101,110,100,32,111,102,32,99,111,109,112,111,117,110,100,32,115,116,97,116,101,109,101,110,116,0,0,0,0,39,10,39,32,97,102,116,101,114,32,39,13,39,0,0,0,46,108,98,111,117,110,100,115,0,0,0,0,0,0,0,0,119,98,0,0,0,0,0,0,100,117,112,108,105,99,97,116,101,32,108,97,98,101,108,32,39,37,115,39,0,0,0,0,109,105,115,115,105,110,103,32,116,101,114,109,105,110,97,116,105,110,103,32,37,99,32,99,104,97,114,97,99,116,101,114,0,0,0,0,0,0,0,0,46,98,111,117,110,100,115,0,45,62,32,37,115,10,0,0,99,111,117,108,100,32,110,111,116,32,119,114,105,116,101,32,39,37,115,39,0,0,0,0,116,111,111,32,109,97,110,121,32,39,100,101,102,97,117,108,116,39,0,0,0,0,0,0,117,110,107,110,111,119,110,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,58,32,39,92,120,37,120,39,0,95,95,66,79,85,78,68,83,95,67,72,69,67,75,73,78,71,95,79,78,0,0,0,0,95,115,116,97,114,116,0,0,101,109,112,116,121,32,99,97,115,101,32,114,97,110,103,101,0,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,58,32,39,92,37,99,39,0,0,47,117,115,114,47,108,111,99,97,108,47,105,110,99,108,117,100,101,58,47,117,115,114,47,108,111,99,97,108,47,105,110,99,108,117,100,101,47,120,56,54,95,54,52,45,108,105,110,117,120,45,103,110,117,58,47,117,115,114,47,105,110,99,108,117,100,101,58,47,117,115,114,47,105,110,99,108,117,100,101,47,120,56,54,95,54,52,45,108,105,110,117,120,45,103,110,117,58,123,66,125,47,105,110,99,108,117,100,101,0,0,0,46,115,104,115,116,114,116,97,98,0,0,0,0,0,0,0,115,119,105,116,99,104,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,99,104,97,114,97,99,116,101,114,32,92,120,37,48,50,120,0,0,0,117,110,104,97,110,100,108,101,100,32,115,105,122,101,32,119,104,101,110,32,100,101,114,101,102,101,114,101,110,99,105,110,103,32,98,111,117,110,100,101,100,32,112,111,105,110,116,101,114,0,0,0,0,0,0,0,37,115,47,108,105,98,37,115,46,97,0,0,0,0,0,0,117,110,100,101,102,105,110,101,100,32,100,121,110,97,109,105,99,32,115,121,109,98,111,108,32,39,37,115,39,0,0,0,99,97,110,110,111,116,32,99,111,110,116,105,110,117,101,0,105,110,118,97,108,105,100,32,100,105,115,112,108,97,99,101,109,101,110,116,0,0,0,0,109,117,108,116,105,45,99,104,97,114,97,99,116,101,114,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,0,0,0,0,0,0,37,115,47,108,105,98,37,115,46,115,111,0,0,0,0,0,46,112,108,116,0,0,0,0,99,97,110,110,111,116,32,98,114,101,97,107,0,0,0,0,105,110,118,97,108,105,100,32,111,112,101,114,97,110,100,32,114,101,102,101,114,101,110,99,101,32,97,102,116,101,114,32,37,37,0,0,0,0,0,0,101,109,112,116,121,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,37,115,47,37,115,0,0,0,46,100,121,110,97,109,105,99,0,0,0,0,0,0,0,0,99,97,110,32,111,110,108,121,32,112,114,111,100,117,99,101,32,49,54,45,98,105,116,32,98,105,110,97,114,121,32,102,105,108,101,115,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,101,120,112,114,101,115,115,105,111,110,32,116,121,112,101,0,0,0,0,0,39,46,39,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,102,105,108,101,32,116,121,112,101,0,0,46,104,97,115,104,0,0,0,105,110,105,116,105,97,108,105,122,101,114,32,101,108,101,109,101,110,116,32,105,115,32,110,111,116,32,99,111,109,112,117,116,97,98,108,101,32,97,116,32,108,111,97,100,32,116,105,109,101,0,0,0,0,0,0,109,105,115,115,105,110,103,32,35,101,110,100,105,102,0,0,76,46,46,37,117,0,0,0,33,60,97,114,99,104,62,10,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,101,114,97,110,100,115,32,102,111,114,32,98,105,110,97,114,121,32,111,112,101,114,97,116,105,111,110,0,0,0,46,100,121,110,115,116,114,0,105,110,105,116,105,97,108,105,122,101,114,32,101,108,101,109,101,110,116,32,105,115,32,110,111,116,32,99,111,110,115,116,97,110,116,0,0,0,0,0,112,97,115,116,105,110,103,32,34,37,46,42,115,34,32,97,110,100,32,34,37,115,34,32,100,111,101,115,32,110,111,116,32,103,105,118,101,32,97,32,118,97,108,105,100,32,112,114,101,112,114,111,99,101,115,115,105,110,103,32,116,111,107,101,110,0,0,0,0,0,0,0,117,110,114,101,99,111,103,110,105,122,101,100,32,69,76,70,32,102,105,108,101,0,0,0,110,102,0,0,0,0,0,0,46,100,121,110,115,121,109,0,114,97,110,103,101,32,105,110,105,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,121,101,116,32,102,111,114,32,100,121,110,97,109,105,99,32,115,116,111,114,97,103,101,0,0,0,0,0,0,0,0,58,112,97,115,116,101,58,0,99,111,117,108,100,32,110,111,116,32,114,101,97,100,32,104,101,97,100,101,114,0,0,0,46,105,110,116,101,114,112,0,116,111,111,32,109,97,110,121,32,102,105,101,108,100,32,105,110,105,116,0,0,0,0,0,109,97,99,114,111,32,39,37,115,39,32,117,115,101,100,32,119,105,116,104,32,116,111,111,32,102,101,119,32,97,114,103,115,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,99,97,110,110,111,116,32,102,105,110,100,32,39,37,115,39,0,0,0,0,0,0,0,0,47,108,105,98,47,108,100,45,108,105,110,117,120,46,115,111,46,50,0,0,0,0,0,0,61,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,76,68,95,83,79,0,0,0,102,105,101,108,100,0,0,0,109,97,99,114,111,32,39,37,115,39,32,117,115,101,100,32,119,105,116,104,32,116,111,111,32,109,97,110,121,32,97,114,103,115,0,0,0,0,0,0,102,105,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0,0,0,0,0,47,46,45,95,43,61,36,58,92,44,126,0,0,0,0,0,115,116,114,117,99,116,47,117,110,105,111,110,32,116,121,112,101,0,0,0,0,0,0,0,37,48,50,100,58,37,48,50,100,58,37,48,50,100,0,0,95,95,65,83,83,69,77,66,76,69,82,95,95,0,0,0,65,83,95,78,69,69,68,69,68,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,105,110,100,101,120,0,0,0,99,97,110,110,111,116,32,105,110,102,101,114,32,111,112,99,111,100,101,32,115,117,102,102,105,120,0,0,0,0,0,0,37,115,32,37,50,100,32,37,100,0,0,0,0,0,0,0,83,0,0,0,0,0,0,0,102,105,108,101,110,97,109,101,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,97,114,114,97,121,32,116,121,112,101,0,0,0,0,0,0,58,97,115,109,58,0,0,0,37,100,0,0,0,0,0,0,46,100,121,110,104,97,115,104,116,97,98,0,0,0,0,0,108,105,98,37,115,46,115,111,0,0,0,0,0,0,0,0,117,110,100,101,102,105,110,101,100,32,115,121,109,98,111,108,32,39,37,115,39,0,0,0,99,97,115,116,0,0,0,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,10,0,46,100,121,110,115,116,114,116,97,98,0,0,0,0,0,0,37,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,108,105,98,37,115,46,97,0,105,110,100,101,120,32,116,111,111,32,108,97,114,103,101,0,116,119,111,32,39,117,39,115,32,105,110,32,105,110,116,101,103,101,114,32,99,111,110,115,116,97,110,116,0,0,0,0,46,100,121,110,115,121,109,116,97,98,0,0,0,0,0,0,117,110,107,110,111,119,110,32,97,114,114,97,121,32,101,108,101,109,101,110,116,32,115,105,122,101,0,0,0,0,0,0,108,105,98,114,97,114,121,32,110,97,109,101,32,101,120,112,101,99,116,101,100,0,0,0,105,110,105,116,105,97,108,105,122,101,114,45,115,116,114,105,110,103,32,102,111,114,32,97,114,114,97,121,32,105,115,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,116,104,114,101,101,32,39,108,39,115,32,105,110,32,105,110,116,101,103,101,114,32,99,111,110,115,116,97,110,116,0,0,46,104,97,115,104,116,97,98,0,0,0,0,0,0,0,0,37,115,32,37,42,115,37,115,10,0,0,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,0,0,99,104,97,114,97,99,116,101,114,32,97,114,114,97,121,32,105,110,105,116,105,97,108,105,122,101,114,32,109,117,115,116,32,98,101,32,97,32,108,105,116,101,114,97,108,44,32,111,112,116,105,111,110,97,108,108,121,32,101,110,99,108,111,115,101,100,32,105,110,32,98,114,97,99,101,115,0,0,0,0,105,110,116,101,103,101,114,32,99,111,110,115,116,97,110,116,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,46,115,116,114,116,97,98,0,40,0,0,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,32,105,110,32,105,110,105,116,105,97,108,105,122,101,114,0,0,0,101,120,112,111,110,101,110,116,32,100,105,103,105,116,115,0,46,115,121,109,116,97,98,0,99,111,117,108,100,32,110,111,116,32,119,114,105,116,101,32,39,37,115,39,0,0,0,0,84,65,82,71,69,84,0,0,117,110,107,110,111,119,110,32,116,121,112,101,32,115,105,122,101,0,0,0,0,0,0,0,101,120,112,111,110,101,110,116,0,0,0,0,0,0,0,0,46,98,115,115,0,0,0,0,79,85,84,80,85,84,95,70,79,82,77,65,84,0,0,0,37,115,58,37,99,49,0,0,105,110,118,97,108,105,100,32,100,105,103,105,116,0,0,0,46,100,97,116,97,0,0,0,71,82,79,85,80,0,0,0,115,116,111,114,97,103,101,32,99,108,97,115,115,32,115,112,101,99,105,102,105,101,100,32,102,111,114,32,39,37,115,39,0,0,0,0,0,0,0,0,110,117,109,98,101,114,32,116,111,111,32,108,111,110,103,0,46,116,101,120,116,0,0,0,73,78,80,85,84,0,0,0,100,101,99,108,97,114,97,116,105,111,110,32,102,111,114,32,112,97,114,97,109,101,116,101,114,32,39,37,115,39,32,98,117,116,32,110,111,32,115,117,99,104,32,112,97,114,97,109,101,116,101,114,0,0,0,0,117,110,107,110,111,119,110,32,111,112,99,111,100,101,32,39,37,115,39,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,116,111,107,101,110,0,0,0,0,0,0,0,47,117,115,114,47,108,105,98,47,120,56,54,95,54,52,45,108,105,110,117,120,45,103,110,117,0,0,0,0,0,0,0,114,101,102,101,114,101,110,99,101,100,32,100,108,108,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0,0,0,100,101,99,108,97,114,97,116,105,111,110,32,108,105,115,116,0,0,0,0,0,0,0,0,39,59,39,0,0,0,0,0,47,117,115,114,47,108,105,98,47,120,56,54,95,54,52,45,108,105,110,117,120,45,103,110,117,58,47,108,105,98,47,120,56,54,95,54,52,45,108,105,110,117,120,45,103,110,117,58,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,120,56,54,95,54,52,45,108,105,110,117,120,45,103,110,117,0,98,97,100,32,97,114,99,104,105,116,101,99,116,117,114,101,0,0,0,0,0,0,0,0,110,97,109,101,32,112,114,111,116,111,32,95,95,97,115,109,95,95,32,40,35,97,108,105,97,115,41,32,95,95,84,72,82,79,87,0,0,0,0,0,95,102,112,95,104,119,0,0,39,37,115,39,32,97,116,116,114,105,98,117,116,101,32,105,103,110,111,114,101,100,0,0,35,32,37,100,32,34,37,115,34,37,115,10,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,111,112,116,105,111,110,32,34,45,109,37,115,34,0,0,0,0,0,0,0,65,82,70,73,76,69,78,65,77,69,83,47,0,0,0,0,95,95,82,69,68,73,82,69,67,84,95,78,84,72,40,110,97,109,101,44,32,112,114,111,116,111,44,32,97,108,105,97,115,41,0,0,0,0,0,0,95,95,109,111,100,101,95,95,40,37,115,41,32,110,111,116,32,115,117,112,112,111,114,116,101,100,10,0,0,0,0,0,32,51,0,0,0,0,0,0,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0,0,99,97,110,110,111,116,32,117,115,101,32,112,111,105,110,116,101,114,115,32,104,101,114,101,0,0,0,0,0,0,0,0,95,95,46,83,89,77,68,69,70,47,0,0,0,0,0,0,110,97,109,101,32,112,114,111,116,111,32,95,95,97,115,109,95,95,32,40,35,97,108,105,97,115,41,0,0,0,0,0,97,108,105,103,110,109,101,110,116,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,32,112,111,119,101,114,32,111,102,32,116,119,111,0,0,0,0,0,0,0,32,50,0,0,0,0,0,0,116,99,99,58,32,117,115,105,110,103,32,39,37,115,39,10,0,0,0,0,0,0,0,0,115,116,100,105,110,0,0,0,98,97,100,32,101,120,112,114,101,115,115,105,111,110,32,115,121,110,116,97,120,32,91,37,115,93,0,0,0,0,0,0,95,95,46,83,89,77,68,69,70,0,0,0,0,0,0,0,37,76,117,0,0,0,0,0,95,95,82,69,68,73,82,69,67,84,40,110,97,109,101,44,32,112,114,111,116,111,44,32,97,108,105,97,115,41,0,0,97,108,105,97,115,40,34,116,97,114,103,101,116,34,41,0,32,49,0,0,0,0,0,0,45,116,99,99,0,0,0,0,105,110,118,97,108,105,100,32,110,117,109,98,101,114,32,115,121,110,116,97,120,0,0,0,47,47,0,0,0,0,0,0,105,110,116,0,0,0,0,0,115,101,99,116,105,111,110,32,110,97,109,101,0,0,0,0,73,103,110,111,114,105,110,103,32,117,110,107,110,111,119,110,32,112,114,101,112,114,111,99,101,115,115,105,110,103,32,100,105,114,101,99,116,105,118,101,32,35,37,115,0,0,0,0,120,56,54,95,54,52,0,0,119,0,0,0,0,0,0,0,108,111,99,97,108,32,108,97,98,101,108,32,39,37,100,39,32,110,111,116,32,102,111,117,110,100,32,98,97,99,107,119,97,114,100,0,0,0,0,0,47,0,0,0,0,0,0,0,95,95,87,67,72,65,82,95,84,89,80,69,95,95,0,0,97,116,116,114,105,98,117,116,101,32,110,97,109,101,0,0,35,119,97,114,110,105,110,103,32,37,115,0,0,0,0,0,32,32,37,115,10,0,0,0,100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,97,114,99,104,105,118,101,0,108,111,110,103,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,102,111,114,119,97,114,100,32,95,95,97,108,105,97,115,95,95,32,97,116,116,114,105,98,117,116,101,0,35,101,114,114,111,114,32,37,115,0,0,0,0,0,0,0,32,32,45,10,0,0,0,0,105,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,32,119,105,116,104,32,108,97,98,101,108,0,0,0,0,73,110,118,97,108,105,100,32,114,101,108,111,99,97,116,105,111,110,32,101,110,116,114,121,32,91,37,50,100,93,32,39,37,115,39,32,64,32,37,46,56,120,0,0,0,0,0,0,95,95,80,84,82,68,73,70,70,95,84,89,80,69,95,95,0,0,0,0,0,0,0,0,86,97,114,105,97,98,108,101,32,108,101,110,103,116,104,32,97,114,114,97,121,32,99,97,110,110,111,116,32,98,101,32,105,110,105,116,105,97,108,105,122,101,100,0,0,0,0,0,35,108,105,110,101,0,0,0,117,110,107,110,111,119,110,32,97,115,115,101,109,98,108,101,114,32,100,105,114,101,99,116,105,118,101,32,39,46,37,115,39,0,0,0,0,0,0,0,46,115,116,97,98,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,115,101,103,109,101,110,116,32,112,114,101,102,105,120,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,109,101,109,111,114,121,32,114,101,102,101,114,101,110,99,101,0,0,0,0,0,35,101,110,100,105,102,32,119,105,116,104,111,117,116,32,109,97,116,99,104,105,110,103,32,35,105,102,0,0,0,0,0,108,118,97,108,117,101,0,0,37,115,58,10,37,115,0,0,114,101,103,105,115,116,101,114,0,0,0,0,0,0,0,0,110,111,32,112,114,101,118,105,111,117,115,32,115,101,99,116,105,111,110,32,114,101,102,101,114,101,110,99,101,100,0,0,105,110,118,97,108,105,100,32,115,101,99,116,105,111,110,32,116,121,112,101,0,0,0,0,95,95,83,73,90,69,95,84,89,80,69,95,95,0,0,0,117,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,102,105,108,101,0,0,115,116,114,105,110,103,32,99,111,110,115,116,97,110,116,0,35,101,108,105,102,32,97,102,116,101,114,32,35,101,108,115,101,0,0,0,0,0,0,0,47,108,105,98,47,108,100,45,108,105,110,117,120,46,115,111,46,50,0,0,0,0,0,0,49,44,32,50,44,32,52,32,111,114,32,56,32,99,111,110,115,116,97,110,116,0,0,0,99,104,97,110,103,101,32,116,121,112,101,32,111,102,32,39,37,115,39,32,102,114,111,109,32,48,120,37,120,32,116,111,32,39,37,115,39,32,105,103,110,111,114,101,100,0,0,0,46,103,110,117,46,108,105,110,107,111,110,99,101,0,0,0,46,114,101,108,37,115,0,0,117,110,105,120,0,0,0,0,102,117,110,99,116,105,111,110,32,100,101,102,105,110,105,116,105,111,110,0,0,0,0,0,35,101,108,105,102,32,119,105,116,104,111,117,116,32,109,97,116,99,104,105,110,103,32,35,105,102,0,0,0,0,0,0,101,108,102,105,110,116,101,114,112,58,10,32,32,37,115,10,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,83,84,84,95,70,85,78,67,0,0,0,0,0,0,0,0,46,115,116,97,98,115,116,114,0,0,0,0,0,0,0,0,95,95,117,110,105,120,0,0,99,97,110,110,111,116,32,117,115,101,32,108,111,99,97,108,32,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,35,101,108,115,101,32,97,102,116,101,114,32,35,101,108,115,101,0,0,0,0,0,0,0,105,110,99,108,117,100,101,0,109,101,109,111,114,121,32,102,117,108,108,0,0,0,0,0,117,110,107,110,111,119,110,32,114,101,103,105,115,116,101,114,0,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,111,98,106,101,99,116,32,109,117,115,116,32,99,111,110,116,97,105,110,32,111,110,108,121,32,111,110,101,32,115,121,109,116,97,98,0,0,0,0,0,95,95,117,110,105,120,95,95,0,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,119,105,116,104,111,117,116,32,102,105,108,101,32,115,99,111,112,101,32,99,97,110,110,111,116,32,98,101,32,115,116,97,116,105,99,0,0,0,0,35,101,108,115,101,32,119,105,116,104,111,117,116,32,109,97,116,99,104,105,110,103,32,35,105,102,0,0,0,0,0,0,108,105,98,114,97,114,105,101,115,0,0,0,0,0,0,0,117,110,107,110,111,119,110,32,99,111,110,115,116,114,97,105,110,116,32,39,37,99,39,0,105,103,110,111,114,105,110,103,32,46,115,105,122,101,32,37,115,44,42,0,0,0,0,0,45,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,98,106,101,99,116,32,102,105,108,101,0,0,0,0,0,37,117,0,0,0,0,0,0,105,51,56,54,0,0,0,0,99,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,109,101,109,111,114,121,32,102,117,108,108,0,0,0,0,0,99,114,116,0,0,0,0,0,105,110,118,97,108,105,100,32,99,108,111,98,98,101,114,32,114,101,103,105,115,116,101,114,32,39,37,115,39,0,0,0,108,97,98,101,108,32,110,111,116,32,102,111,117,110,100,58,32,37,115,0,0,0,0,0,95,95,115,116,111,112,95,37,115,0,0,0,0,0,0,0,95,95,105,51,56,54,0,0,116,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,32,116,111,32,102,117,110,99,116,105,111,110,0,0,0,105,110,115,116,97,108,108,58,32,37,115,47,10,0,0,0,99,97,110,110,111,116,32,115,112,101,99,105,102,121,32,109,117,108,116,105,112,108,101,32,102,105,108,101,115,32,119,105,116,104,32,45,99,0,0,0,99,99,0,0,0,0,0,0,105,103,110,111,114,105,110,103,32,46,105,100,101,110,116,32,37,115,0,0,0,0,0,0,95,95,115,116,97,114,116,95,37,115,0,0,0,0,0,0,95,95,105,51,56,54,95,95,0,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,112,111,105,110,116,101,114,0,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,48,46,57,46,50,54,0,0,109,101,109,111,114,121,0,0,105,103,110,111,114,105,110,103,32,46,102,105,108,101,32,37,115,0,0,0,0,0,0,0,46,102,105,110,105,95,97,114,114,97,121,0,0,0,0,0,49,57,57,57,48,49,76,0,102,105,101,108,100,32,110,111,116,32,102,111,117,110,100,58,32,37,115,0,0,0,0,0,105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,102,111,114,32,39,35,105,102,37,115,100,101,102,39,0,116,99,99,32,118,101,114,115,105,111,110,32,37,115,32,40,105,51,56,54,41,10,0,0,110,97,110,0,0,0,0,0,37,37,37,115,0,0,0,0,46,37,115,0,0,0,0,0,46,105,110,105,116,95,97,114,114,97,121,0,0,0,0,0,115,116,114,117,99,116,32,111,114,32,117,110,105,111,110,0,95,95,83,84,68,67,95,86,69,82,83,73,79,78,95,95,0,0,0,0,0,0,0,0,105,110,99,108,117,100,101,32,102,105,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0,0,0,0,0,97,46,111,117,116,0,0,0,99,97,110,110,111,116,32,117,115,101,32,98,121,116,101,32,114,101,103,105,115,116,101,114,0,0,0,0,0,0,0,0,46,37,115,37,100,0,0,0,46,112,114,101,105,110,105,116,95,97,114,114,97,121,0,0,105,109,112,108,105,99,105,116,32,100,101,99,108,97,114,97,116,105,111,110,32,111,102,32,102,117,110,99,116,105,111,110,32,39,37,115,39,0,0,0,95,95,83,84,68,67,95,95,0,0,0,0,0,0,0,0,105,110,99,111,114,114,101,99,116,32,112,114,101,102,105,120,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,46,111,0,0,0,0,0,0,40,37,37,37,115,41,0,0,97,116,116,101,109,112,116,32,116,111,32,46,111,114,103,32,98,97,99,107,119,97,114,100,115,0,0,0,0,0,0,0,95,101,110,100,0,0,0,0,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,39,37,115,39,32,117,110,100,101,99,108,97,114,101,100,0,95,95,84,73,78,89,67,95,95,0,0,0,0,0,0,0,35,105,110,99,108,117,100,101,32,114,101,99,117,114,115,105,111,110,32,116,111,111,32,100,101,101,112,0,0,0,0,0,45,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,99,111,109,112,105,108,101,114,32,101,114,114,111,114,0,115,105,122,101,32,60,32,48,59,32,46,102,105,108,108,32,105,103,110,111,114,101,100,0,95,101,100,97,116,97,0,0,39,37,115,39,32,100,101,102,105,110,101,100,32,116,119,105,99,101,0,0,0,0,0,0,39,37,99,39,32,101,120,112,101,99,116,101,100,32,40,103,111,116,32,34,37,115,34,41,0,0,0,0,0,0,0,0,105,100,101,110,116,105,102,105,101,114,0,0,0,0,0,0,37,100,0,0,0,0,0,0,101,114,114,111,114,58,32,0,39,35,105,110,99,108,117,100,101,39,32,101,120,112,101,99,116,115,32,34,70,73,76,69,78,65,77,69,34,32,111,114,32,60,70,73,76,69,78,65,77,69,62,0,0,0,0,0,119,97,114,110,105,110,103,58,32,0,0,0,0,0,0,0,116,99,99,58,32,0,0,0,97,0,0,0,0,0,0,0,37,115,58,32,0,0,0,0,37,115,58,37,100,58,32,0,73,110,32,102,105,108,101,32,105,110,99,108,117,100,101,100,32,102,114,111,109,32,37,115,58,37,100,58,10,0,0,0,37,100,40,37,37,101,98,112,41,0,0,0,0,0,0,0,105,110,116,101,114,110,97,108,32,99,111,109,112,105,108,101,114,32,101,114,114,111,114,58,32,118,115,116,97,99,107,32,108,101,97,107,63,32,40,37,100,41,0,0,0,0,0,0,114,101,112,101,97,116,32,60,32,48,59,32,46,102,105,108,108,32,105,103,110,111,114,101,100,0,0,0,0,0,0,0,100,101,99,108,97,114,97,116,105,111,110,0,0,0,0,0,95,101,116,101,120,116,0,0,47,0,0,0,0,0,0,0,100,117,109,112,118,101,114,115,105,111,110,0,0,0,0,0,108,97,98,101,108,32,105,100,101,110,116,105,102,105,101,114,0,0,0,0,0,0,0,0,37,100,46,37,100,46,37,100,0,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,98,97,100,108,121,32,112,117,110,99,116,117,97,116,101,100,32,112,97,114,97,109,101,116,101,114,32,108,105,115,116,0,77,70,0,0,0,0,0,0,77,68,0,0,0,0,0,0,109,101,109,111,114,121,32,102,117,108,108,0,0,0,0,0,69,0,0,0,0,0,0,0,112,105,112,101,0,0,0,0,119,0,0,0,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,115,32,102,111,114,32,114,101,100,101,102,105,110,105,116,105,111,110,32,111,102,32,39,37,115,39,0,0,0,0,0,37,100,0,0,0,0,0,0,118,0,0,0,0,0,0,0,54,52,32,98,105,116,32,99,111,110,115,116,97,110,116,0,112,114,105,110,116,45,115,101,97,114,99,104,45,100,105,114,115,0,0,0,0,0,0,0,99,114,116,110,46,111,0,0,110,111,115,116,100,105,110,99,0,0,0,0,0,0,0,0,105,115,121,115,116,101,109,0,95,95,98,117,105,108,116,105,110,95,102,114,97,109,101,95,97,100,100,114,101,115,115,32,111,110,108,121,32,116,97,107,101,115,32,112,111,115,105,116,105,118,101,32,105,110,116,101,103,101,114,115,0,0,0,0,48,46,57,46,50,54,0,0,102,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,109,97,99,114,111,32,110,97,109,101,32,39,37,115,39,0,109,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,32,37,115,32,92,10,0,0,87,0,0,0,0,0,0,0,87,108,44,0,0,0,0,0,114,0,0,0,0,0,0,0,99,111,117,108,100,32,110,111,116,32,102,105,110,100,32,102,114,101,101,32,111,117,116,112,117,116,32,114,101,103,105,115,116,101,114,32,102,111,114,32,114,101,108,111,97,100,105,110,103,0,0,0,0,0,0,0,114,100,121,110,97,109,105,99,0,0,0,0,0,0,0,0,97,108,105,103,110,109,101,110,116,32,109,117,115,116,32,98,101,32,97,32,112,111,115,105,116,105,118,101,32,112,111,119,101,114,32,111,102,32,116,119,111,0,0,0,0,0,0,0,114,117,110,0,0,0,0,0,112,116,104,114,101,97,100,0,108,105,98,116,99,99,49,46,97,0,0,0,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,95,95,98,111,117,110,100,95,0,0,0,0,0,0,0,0,112,101,100,97,110,116,105,99,0,0,0,0,0,0,0,0,115,105,122,101,111,102,32,97,112,112,108,105,101,100,32,116,111,32,97,110,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,116,99,99,0,0,0,0,0,0,111,0,0,0,0,0,0,0,108,97,98,101,108,32,39,37,115,39,32,117,115,101,100,32,98,117,116,32,110,111,116,32,100,101,102,105,110,101,100,0,115,111,110,97,109,101,0,0,115,104,97,114,101,100,0,0,37,115,32,58,32,92,10,0,115,116,97,116,105,99,0,0,99,111,109,112,97,114,105,115,111,110,32,111,102,32,100,105,115,116,105,110,99,116,32,112,111,105,110,116,101,114,32,116,121,112,101,115,32,108,97,99,107,115,32,97,32,99,97,115,116,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,101,114,97,110,100,115,32,116,111,32,98,105,110,97,114,121,32,37,115,0,0,0,98,0,0,0,0,0,0,0,99,111,109,112,97,114,105,115,111,110,32,98,101,116,119,101,101,110,32,112,111,105,110,116,101,114,32,97,110,100,32,105,110,116,101,103,101,114,0,0,97,115,109,32,99,111,110,115,116,114,97,105,110,116,32,37,100,32,40,39,37,115,39,41,32,99,111,117,108,100,32,110,111,116,32,98,101,32,115,97,116,105,115,102,105,101,100,0,98,101,110,99,104,0,0,0,100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,32,105,110,32,99,111,110,115,116,97,110,116,0,0,0,0,97,115,115,101,109,98,108,101,114,32,108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,0,0,0,108,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,110,111,110,112,111,114,116,97,98,108,101,32,99,111,110,118,101,114,115,105,111,110,32,102,114,111,109,32,112,111,105,110,116,101,114,32,116,111,32,99,104,97,114,47,115,104,111,114,116,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,112,111,105,110,116,101,114,32,110,111,116,32,97,99,99,101,112,116,101,100,32,102,111,114,32,117,110,97,114,121,32,112,108,117,115,0,0,0,0,0,42,0,0,0,0,0,0,0,60,100,101,102,105,110,101,62,0,0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,108,97,98,101,108,32,39,37,115,39,32,100,101,99,108,97,114,101,100,32,98,117,116,32,110,111,116,32,117,115,101,100,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,73,0,0,0,0,0,0,0,99,111,117,108,100,32,110,111,116,32,111,112,101,110,32,39,37,115,39,0,0,0,0,0,99,97,110,110,111,116,32,115,112,101,99,105,102,121,32,108,105,98,114,97,114,105,101,115,32,119,105,116,104,32,45,99,0,0,0,0,0,0,0,0,110,111,32,105,110,112,117,116,32,102,105,108,101,115,10,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);



var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
  
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
  
        if (!total) {
          // early out
          return callback(null);
        }
  
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
  
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
  
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
  
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat, node;
  
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
  
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
  
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
  
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
  
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          FS.FSNode.prototype = {};
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
  
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  
  
  
  
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision === -1) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }


  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return ((asm["setTempRet0"]((tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)),ret>>>0)|0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }function _atoi(ptr) {
      return _strtol(ptr, null, 10);
    }


  
  function _execl(/* ... */) {
      // int execl(const char *path, const char *arg0, ... /*, (char *)0 */);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/exec.html
      // We don't support executing external code.
      ___setErrNo(ERRNO_CODES.ENOEXEC);
      return -1;
    }var _execvp=_execl;

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  
   
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;



  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  
   
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;

   
  Module["_strcpy"] = _strcpy;

   
  Module["_strcat"] = _strcat;

  var _llvm_va_start=undefined;

  function _llvm_va_end() {}

  
  
  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }



  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_memcmp"] = _memcmp;

  
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }

  function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }


  function _getcwd(buf, size) {
      // char *getcwd(char *buf, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getcwd.html
      if (size == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var cwd = FS.cwd();
      if (size < cwd.length + 1) {
        ___setErrNo(ERRNO_CODES.ERANGE);
        return 0;
      } else {
        writeAsciiToMemory(cwd, buf);
        return buf;
      }
    }

  var _setjmp=undefined;

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  
   
  Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;


  function ___errno_location() {
      return ___errno_state;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr;
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60;
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  var _llvm_memset_p0i8_i64=_memset;



  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _fdopen(fildes, mode) {
      // FILE *fdopen(int fildes, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fdopen.html
      mode = Pointer_stringify(mode);
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      if ((mode.indexOf('w') != -1 && !stream.isWrite) ||
          (mode.indexOf('r') != -1 && !stream.isRead) ||
          (mode.indexOf('a') != -1 && !stream.isAppend) ||
          (mode.indexOf('+') != -1 && (!stream.isRead || !stream.isWrite))) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      } else {
        stream.error = false;
        stream.eof = false;
        return fildes;
      }
    }


  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }


  var _fabs=Math_abs;

  function _abort() {
      Module['abort']();
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;






  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var _strncmp=env._strncmp;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _pread=env._pread;
  var _tzset=env._tzset;
  var _sscanf=env._sscanf;
  var _snprintf=env._snprintf;
  var _lseek=env._lseek;
  var __scanString=env.__scanString;
  var _llvm_va_end=env._llvm_va_end;
  var _fclose=env._fclose;
  var __getFloat=env.__getFloat;
  var _strtoll=env._strtoll;
  var _fprintf=env._fprintf;
  var _strtoul=env._strtoul;
  var _printf=env._printf;
  var _strtoull=env._strtoull;
  var _close=env._close;
  var _fflush=env._fflush;
  var _fopen=env._fopen;
  var __reallyNegative=env.__reallyNegative;
  var _abort=env._abort;
  var _strtol=env._strtol;
  var _fputc=env._fputc;
  var ___buildEnvironment=env.___buildEnvironment;
  var _sysconf=env._sysconf;
  var _open=env._open;
  var ___setErrNo=env.___setErrNo;
  var _fwrite=env._fwrite;
  var _send=env._send;
  var _fdopen=env._fdopen;
  var _write=env._write;
  var _fputs=env._fputs;
  var _exit=env._exit;
  var _sprintf=env._sprintf;
  var _strrchr=env._strrchr;
  var _fabs=env._fabs;
  var _isspace=env._isspace;
  var _unlink=env._unlink;
  var _localtime=env._localtime;
  var _vsnprintf=env._vsnprintf;
  var _strchr=env._strchr;
  var _longjmp=env._longjmp;
  var _fmod=env._fmod;
  var _read=env._read;
  var _getcwd=env._getcwd;
  var __formatString=env.__formatString;
  var _localtime_r=env._localtime_r;
  var _getenv=env._getenv;
  var _gettimeofday=env._gettimeofday;
  var _atoi=env._atoi;
  var _dlclose=env._dlclose;
  var _recv=env._recv;
  var __parseInt64=env.__parseInt64;
  var _execl=env._execl;
  var _pwrite=env._pwrite;
  var _putchar=env._putchar;
  var _puts=env._puts;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _llvm_lifetime_start=env._llvm_lifetime_start;
  var _copysign=env._copysign;
  var _sbrk=env._sbrk;
  var __parseInt=env.__parseInt;
  var _time=env._time;
  var __exit=env.__exit;
  var _strcmp=env._strcmp;
  var _memchr=env._memchr;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _next_nomacro1() {
 var $str = 0, $p_0 = 0, $5 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $25 = 0, $_pre2_i_i = 0, $28 = 0, $len_0_i_i = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $45 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $64 = 0, $_pre2_i_i_i1131 = 0, $67 = 0, $len_0_i_i_i1133 = 0, $71 = 0, $73 = 0, $74 = 0, $_0_i_i_i1137 = 0, $80 = 0, $83 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $102 = 0, $_pre2_i_i_i1140 = 0, $105 = 0, $len_0_i_i_i1142 = 0, $109 = 0, $111 = 0, $112 = 0, $_0_i_i_i1146 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $135 = 0, $_pre2_i_i_i1149 = 0, $138 = 0, $len_0_i_i_i1151 = 0, $142 = 0, $144 = 0, $145 = 0, $_0_i_i_i1155 = 0, $151 = 0, $155 = 0, $159 = 0, $161 = 0, $162 = 0, $163 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $174 = 0, $_pre2_i_i_i1158 = 0, $177 = 0, $len_0_i_i_i1160 = 0, $181 = 0, $183 = 0, $184 = 0, $_0_i_i_i1164 = 0, $190 = 0, $197 = 0, $198 = 0, $202 = 0, $219 = 0, $225 = 0, $226 = 0, $230 = 0, $232 = 0, $233 = 0, $235 = 0, $h_02_i_i_i = 0, $s_01_i_i_i = 0, $h_0_lcssa_i_i_i = 0, $i_01_i_i = 0, $_pre_i135 = 0, $244 = 0, $i_0_i_i = 0, $i_02_i_i = 0, $251 = 0, $258 = 0, $263 = 0, $264 = 0, $266 = 0, $h_02_i_i = 0, $s_01_i_i = 0, $h_0_lcssa_i_i = 0, $273 = 0, $_pre = 0, $278 = 0, $281 = 0, $294 = 0, $p_1 = 0, $306 = 0, $307 = 0, $308 = 0, $311 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $325 = 0, $_pre2_i_i394 = 0, $328 = 0, $len_0_i_i396 = 0, $332 = 0, $334 = 0, $335 = 0, $337 = 0, $339 = 0, $341 = 0, $344 = 0, $_0_i137 = 0, $346 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $365 = 0, $_pre2_i_i_i1167 = 0, $368 = 0, $len_0_i_i_i1169 = 0, $372 = 0, $374 = 0, $375 = 0, $_0_i_i_i1173 = 0, $381 = 0, $384 = 0, $388 = 0, $390 = 0, $391 = 0, $392 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $403 = 0, $_pre2_i_i_i1176 = 0, $406 = 0, $len_0_i_i_i1178 = 0, $410 = 0, $412 = 0, $413 = 0, $_0_i_i_i1182 = 0, $421 = 0, $423 = 0, $424 = 0, $425 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $436 = 0, $_pre2_i_i_i1185 = 0, $439 = 0, $len_0_i_i_i1187 = 0, $443 = 0, $445 = 0, $446 = 0, $_0_i_i_i1191 = 0, $452 = 0, $456 = 0, $460 = 0, $462 = 0, $463 = 0, $464 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $475 = 0, $_pre2_i_i_i1194 = 0, $478 = 0, $len_0_i_i_i1196 = 0, $482 = 0, $484 = 0, $485 = 0, $_0_i_i_i1200 = 0, $491 = 0, $496 = 0, $p_2 = 0, $c_0 = 0, $527 = 0, $528 = 0, $p_31310 = 0, $529 = 0, $534 = 0, $p_31312 = 0, $h_01311 = 0, $536 = 0, $p_3 = 0, $537 = 0, $538 = 0, $_lcssa1309 = 0, $p_3_lcssa = 0, $h_0_lcssa = 0, $547 = 0, $549 = 0, $550 = 0, $552 = 0, $561 = 0, $562 = 0, $pts_0_lcssa = 0, $567 = 0, $p1_01296 = 0, $568 = 0, $569 = 0, $570 = 0, $size_0_i_i148 = 0, $578 = 0, $579 = 0, $581 = 0, $583 = 0, $587 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $601 = 0, $_pre2_i_i406 = 0, $604 = 0, $len_0_i_i408 = 0, $608 = 0, $610 = 0, $611 = 0, $613 = 0, $615 = 0, $617 = 0, $620 = 0, $_0_i141 = 0, $622 = 0, $626 = 0, $628 = 0, $629 = 0, $630 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $641 = 0, $_pre2_i_i_i1203 = 0, $644 = 0, $len_0_i_i_i1205 = 0, $648 = 0, $650 = 0, $651 = 0, $_0_i_i_i1209 = 0, $657 = 0, $660 = 0, $664 = 0, $666 = 0, $667 = 0, $668 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $679 = 0, $_pre2_i_i_i1212 = 0, $682 = 0, $len_0_i_i_i1214 = 0, $686 = 0, $688 = 0, $689 = 0, $_0_i_i_i1218 = 0, $697 = 0, $699 = 0, $700 = 0, $701 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $712 = 0, $_pre2_i_i_i1221 = 0, $715 = 0, $len_0_i_i_i1223 = 0, $719 = 0, $721 = 0, $722 = 0, $_0_i_i_i1227 = 0, $728 = 0, $732 = 0, $736 = 0, $738 = 0, $739 = 0, $740 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $751 = 0, $_pre2_i_i_i1230 = 0, $754 = 0, $len_0_i_i_i1232 = 0, $758 = 0, $760 = 0, $761 = 0, $_0_i_i_i1236 = 0, $767 = 0, $772 = 0, $p_4_ph = 0, $c_1_ph = 0, $c_11295_off0 = 0, $p_41294 = 0, $780 = 0, $781 = 0, $782 = 0, $size_0_i_i129 = 0, $790 = 0, $791 = 0, $793 = 0, $794 = 0, $795 = 0, $798 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $812 = 0, $_pre2_i_i378 = 0, $815 = 0, $len_0_i_i380 = 0, $819 = 0, $821 = 0, $822 = 0, $824 = 0, $826 = 0, $828 = 0, $831 = 0, $_0_i122 = 0, $833 = 0, $837 = 0, $839 = 0, $840 = 0, $841 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $852 = 0, $_pre2_i_i_i1095 = 0, $855 = 0, $len_0_i_i_i1097 = 0, $859 = 0, $861 = 0, $862 = 0, $_0_i_i_i1101 = 0, $868 = 0, $871 = 0, $875 = 0, $877 = 0, $878 = 0, $879 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $890 = 0, $_pre2_i_i_i1104 = 0, $893 = 0, $len_0_i_i_i1106 = 0, $897 = 0, $899 = 0, $900 = 0, $_0_i_i_i1110 = 0, $908 = 0, $910 = 0, $911 = 0, $912 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $923 = 0, $_pre2_i_i_i1113 = 0, $926 = 0, $len_0_i_i_i1115 = 0, $930 = 0, $932 = 0, $933 = 0, $_0_i_i_i1119 = 0, $939 = 0, $943 = 0, $947 = 0, $949 = 0, $950 = 0, $951 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $962 = 0, $_pre2_i_i_i1122 = 0, $965 = 0, $len_0_i_i_i1124 = 0, $969 = 0, $971 = 0, $972 = 0, $_0_i_i_i1128 = 0, $978 = 0, $983 = 0, $p_4_be = 0, $c_1_be = 0, $p_4_lcssa = 0, $990 = 0, $991 = 0, $h_04_i = 0, $i_03_i = 0, $h_0_lcssa_i = 0, $1001 = 0, $1002 = 0, $1004 = 0, $1013 = 0, $1014 = 0, $pts_0_lcssa_i = 0, $ts_0 = 0, $p_5 = 0, $1020 = 0, $1021 = 0, $1025 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1039 = 0, $_pre2_i_i366 = 0, $1042 = 0, $len_0_i_i368 = 0, $1046 = 0, $1048 = 0, $1049 = 0, $1051 = 0, $1052 = 0, $1054 = 0, $1057 = 0, $_0_i114 = 0, $1059 = 0, $1063 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1078 = 0, $_pre2_i_i_i1059 = 0, $1081 = 0, $len_0_i_i_i1061 = 0, $1085 = 0, $1087 = 0, $1088 = 0, $_0_i_i_i1065 = 0, $1094 = 0, $1097 = 0, $1101 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1108 = 0, $1109 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1116 = 0, $_pre2_i_i_i1068 = 0, $1119 = 0, $len_0_i_i_i1070 = 0, $1123 = 0, $1125 = 0, $1126 = 0, $_0_i_i_i1074 = 0, $1134 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1149 = 0, $_pre2_i_i_i1077 = 0, $1152 = 0, $len_0_i_i_i1079 = 0, $1156 = 0, $1158 = 0, $1159 = 0, $_0_i_i_i1083 = 0, $1165 = 0, $1169 = 0, $1173 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1188 = 0, $_pre2_i_i_i1086 = 0, $1191 = 0, $len_0_i_i_i1088 = 0, $1195 = 0, $1197 = 0, $1198 = 0, $_0_i_i_i1092 = 0, $1204 = 0, $1209 = 0, $p_6 = 0, $c_2_in = 0, $c_2 = 0, $c_21528 = 0, $p_61527 = 0, $1212 = 0, $size_0_i_i111 = 0, $1219 = 0, $1220 = 0, $storemerge = 0, $p_7_ph = 0, $c_3_ph = 0, $1221 = 0, $p_7 = 0, $c_3 = 0, $1222 = 0, $1223 = 0, $size_0_i_i105 = 0, $1231 = 0, $1232 = 0, $1235 = 0, $1236 = 0, $1239 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $1253 = 0, $_pre2_i_i354 = 0, $1256 = 0, $len_0_i_i356 = 0, $1260 = 0, $1262 = 0, $1263 = 0, $1265 = 0, $1266 = 0, $1268 = 0, $1271 = 0, $_0_i98 = 0, $1273 = 0, $1277 = 0, $1279 = 0, $1280 = 0, $1281 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1292 = 0, $_pre2_i_i_i1023 = 0, $1295 = 0, $len_0_i_i_i1025 = 0, $1299 = 0, $1301 = 0, $1302 = 0, $_0_i_i_i1029 = 0, $1308 = 0, $1311 = 0, $1315 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1330 = 0, $_pre2_i_i_i1032 = 0, $1333 = 0, $len_0_i_i_i1034 = 0, $1337 = 0, $1339 = 0, $1340 = 0, $_0_i_i_i1038 = 0, $1348 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $1363 = 0, $_pre2_i_i_i1041 = 0, $1366 = 0, $len_0_i_i_i1043 = 0, $1370 = 0, $1372 = 0, $1373 = 0, $_0_i_i_i1047 = 0, $1379 = 0, $1383 = 0, $1387 = 0, $1389 = 0, $1390 = 0, $1391 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1402 = 0, $_pre2_i_i_i1050 = 0, $1405 = 0, $len_0_i_i_i1052 = 0, $1409 = 0, $1411 = 0, $1412 = 0, $_0_i_i_i1056 = 0, $1418 = 0, $1423 = 0, $p_8 = 0, $c_4_in = 0, $c_4 = 0, $c_41534 = 0, $p_81531 = 0, $c_41535 = 0, $p_81532 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $size_0_i_i92 = 0, $1440 = 0, $1441 = 0, $1444 = 0, $1445 = 0, $1448 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1462 = 0, $_pre2_i_i342 = 0, $1465 = 0, $len_0_i_i344 = 0, $1469 = 0, $1471 = 0, $1472 = 0, $1474 = 0, $1475 = 0, $1477 = 0, $1480 = 0, $_0_i85 = 0, $1482 = 0, $1486 = 0, $1488 = 0, $1489 = 0, $1490 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1501 = 0, $_pre2_i_i_i987 = 0, $1504 = 0, $len_0_i_i_i989 = 0, $1508 = 0, $1510 = 0, $1511 = 0, $_0_i_i_i993 = 0, $1517 = 0, $1520 = 0, $1524 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1539 = 0, $_pre2_i_i_i996 = 0, $1542 = 0, $len_0_i_i_i998 = 0, $1546 = 0, $1548 = 0, $1549 = 0, $_0_i_i_i1002 = 0, $1557 = 0, $1559 = 0, $1560 = 0, $1561 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1572 = 0, $_pre2_i_i_i1005 = 0, $1575 = 0, $len_0_i_i_i1007 = 0, $1579 = 0, $1581 = 0, $1582 = 0, $_0_i_i_i1011 = 0, $1588 = 0, $1592 = 0, $1596 = 0, $1598 = 0, $1599 = 0, $1600 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1611 = 0, $_pre2_i_i_i1014 = 0, $1614 = 0, $len_0_i_i_i1016 = 0, $1618 = 0, $1620 = 0, $1621 = 0, $_0_i_i_i1020 = 0, $1627 = 0, $1632 = 0, $p_9 = 0, $c_5_in = 0, $c_5 = 0, $1636 = 0, $size_0_i_i82 = 0, $1643 = 0, $1644 = 0, $1647 = 0, $1648 = 0, $1651 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $1660 = 0, $1661 = 0, $1665 = 0, $_pre2_i_i330 = 0, $1668 = 0, $len_0_i_i332 = 0, $1672 = 0, $1674 = 0, $1675 = 0, $1677 = 0, $1678 = 0, $1680 = 0, $1683 = 0, $_0_i75 = 0, $1685 = 0, $1689 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $1700 = 0, $1704 = 0, $_pre2_i_i_i951 = 0, $1707 = 0, $len_0_i_i_i953 = 0, $1711 = 0, $1713 = 0, $1714 = 0, $_0_i_i_i957 = 0, $1720 = 0, $1723 = 0, $1727 = 0, $1729 = 0, $1730 = 0, $1731 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1742 = 0, $_pre2_i_i_i960 = 0, $1745 = 0, $len_0_i_i_i962 = 0, $1749 = 0, $1751 = 0, $1752 = 0, $_0_i_i_i966 = 0, $1760 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $1770 = 0, $1771 = 0, $1775 = 0, $_pre2_i_i_i969 = 0, $1778 = 0, $len_0_i_i_i971 = 0, $1782 = 0, $1784 = 0, $1785 = 0, $_0_i_i_i975 = 0, $1791 = 0, $1795 = 0, $1799 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $1810 = 0, $1814 = 0, $_pre2_i_i_i978 = 0, $1817 = 0, $len_0_i_i_i980 = 0, $1821 = 0, $1823 = 0, $1824 = 0, $_0_i_i_i984 = 0, $1830 = 0, $1835 = 0, $p_10 = 0, $c_6_in = 0, $p_101541 = 0, $p_101542 = 0, $1840 = 0, $1844 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1858 = 0, $_pre2_i_i318 = 0, $1861 = 0, $len_0_i_i320 = 0, $1865 = 0, $1867 = 0, $1868 = 0, $1871 = 0, $1876 = 0, $_0_i71 = 0, $1878 = 0, $1882 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1889 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1897 = 0, $_pre2_i_i_i915 = 0, $1900 = 0, $len_0_i_i_i917 = 0, $1904 = 0, $1906 = 0, $1907 = 0, $_0_i_i_i921 = 0, $1913 = 0, $1916 = 0, $1920 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $1930 = 0, $1931 = 0, $1935 = 0, $_pre2_i_i_i924 = 0, $1938 = 0, $len_0_i_i_i926 = 0, $1942 = 0, $1944 = 0, $1945 = 0, $_0_i_i_i930 = 0, $1953 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1968 = 0, $_pre2_i_i_i933 = 0, $1971 = 0, $len_0_i_i_i935 = 0, $1975 = 0, $1977 = 0, $1978 = 0, $_0_i_i_i939 = 0, $1984 = 0, $1988 = 0, $1992 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1999 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2007 = 0, $_pre2_i_i_i942 = 0, $2010 = 0, $len_0_i_i_i944 = 0, $2014 = 0, $2016 = 0, $2017 = 0, $_0_i_i_i948 = 0, $2023 = 0, $p_11 = 0, $p_915371540 = 0, $p_12 = 0, $is_long_0 = 0, $c_7 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $size_0_i_i = 0, $2044 = 0, $2046 = 0, $2048 = 0, $2051 = 0, $2052 = 0, $2054 = 0, $2056 = 0, $2057 = 0, $p_025_i = 0, $2058 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $n_1_i = 0, $p_2_i = 0, $2088 = 0, $2089 = 0, $c_0_i68 = 0, $c_1_i = 0, $p_3_i = 0, $2121 = 0, $c_2_i = 0, $p_4_i = 0, $2123 = 0, $2124 = 0, $size_0_i_i20_i = 0, $2132 = 0, $2133 = 0, $2137 = 0, $2138 = 0, $size_0_i_i14_i = 0, $2146 = 0, $2147 = 0, $storemerge26_i = 0, $2150 = 0, $2152 = 0, $2153 = 0, $2155 = 0, $2156 = 0, $size_0_i_i8_i = 0, $2164 = 0, $2165 = 0, $2168 = 0, $2169 = 0, $size_0_i_i_i = 0, $2177 = 0, $2178 = 0, $storemerge_i = 0, $2185 = 0, $_ = 0, $2186 = 0, $2190 = 0, $2195 = 0, $2206 = 0, $2207 = 0, $2210 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $2220 = 0, $2224 = 0, $_pre2_i_i306 = 0, $2227 = 0, $len_0_i_i308 = 0, $2231 = 0, $2233 = 0, $2234 = 0, $2236 = 0, $2237 = 0, $2239 = 0, $2242 = 0, $_0_i64 = 0, $2244 = 0, $2248 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $2263 = 0, $_pre2_i_i_i879 = 0, $2266 = 0, $len_0_i_i_i881 = 0, $2270 = 0, $2272 = 0, $2273 = 0, $_0_i_i_i885 = 0, $2279 = 0, $2282 = 0, $2286 = 0, $2288 = 0, $2289 = 0, $2290 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2301 = 0, $_pre2_i_i_i888 = 0, $2304 = 0, $len_0_i_i_i890 = 0, $2308 = 0, $2310 = 0, $2311 = 0, $_0_i_i_i894 = 0, $2319 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $2330 = 0, $2334 = 0, $_pre2_i_i_i897 = 0, $2337 = 0, $len_0_i_i_i899 = 0, $2341 = 0, $2343 = 0, $2344 = 0, $_0_i_i_i903 = 0, $2350 = 0, $2354 = 0, $2358 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $2373 = 0, $_pre2_i_i_i906 = 0, $2376 = 0, $len_0_i_i_i908 = 0, $2380 = 0, $2382 = 0, $2383 = 0, $_0_i_i_i912 = 0, $2389 = 0, $2394 = 0, $p_13 = 0, $c_8_in = 0, $c_8 = 0, $2399 = 0, $2400 = 0, $2403 = 0, $2409 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2417 = 0, $_pre2_i_i294 = 0, $2420 = 0, $len_0_i_i296 = 0, $2424 = 0, $2426 = 0, $2427 = 0, $2429 = 0, $2430 = 0, $2432 = 0, $2435 = 0, $_0_i60 = 0, $2437 = 0, $2441 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2448 = 0, $2449 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2456 = 0, $_pre2_i_i_i843 = 0, $2459 = 0, $len_0_i_i_i845 = 0, $2463 = 0, $2465 = 0, $2466 = 0, $_0_i_i_i849 = 0, $2472 = 0, $2475 = 0, $2479 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $2490 = 0, $2494 = 0, $_pre2_i_i_i852 = 0, $2497 = 0, $len_0_i_i_i854 = 0, $2501 = 0, $2503 = 0, $2504 = 0, $_0_i_i_i858 = 0, $2512 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2519 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2527 = 0, $_pre2_i_i_i861 = 0, $2530 = 0, $len_0_i_i_i863 = 0, $2534 = 0, $2536 = 0, $2537 = 0, $_0_i_i_i867 = 0, $2543 = 0, $2547 = 0, $2551 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2558 = 0, $2559 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2566 = 0, $_pre2_i_i_i870 = 0, $2569 = 0, $len_0_i_i_i872 = 0, $2573 = 0, $2575 = 0, $2576 = 0, $_0_i_i_i876 = 0, $2582 = 0, $2587 = 0, $p_14 = 0, $c_9_in = 0, $p_141544 = 0, $p_131543 = 0, $2595 = 0, $2596 = 0, $2599 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $2613 = 0, $_pre2_i_i282 = 0, $2616 = 0, $len_0_i_i284 = 0, $2620 = 0, $2622 = 0, $2623 = 0, $2625 = 0, $2626 = 0, $2628 = 0, $2631 = 0, $_0_i56 = 0, $2633 = 0, $2637 = 0, $2639 = 0, $2640 = 0, $2641 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2652 = 0, $_pre2_i_i_i807 = 0, $2655 = 0, $len_0_i_i_i809 = 0, $2659 = 0, $2661 = 0, $2662 = 0, $_0_i_i_i813 = 0, $2668 = 0, $2671 = 0, $2675 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2690 = 0, $_pre2_i_i_i816 = 0, $2693 = 0, $len_0_i_i_i818 = 0, $2697 = 0, $2699 = 0, $2700 = 0, $_0_i_i_i822 = 0, $2708 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $2723 = 0, $_pre2_i_i_i825 = 0, $2726 = 0, $len_0_i_i_i827 = 0, $2730 = 0, $2732 = 0, $2733 = 0, $_0_i_i_i831 = 0, $2739 = 0, $2743 = 0, $2747 = 0, $2749 = 0, $2750 = 0, $2751 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2762 = 0, $_pre2_i_i_i834 = 0, $2765 = 0, $len_0_i_i_i836 = 0, $2769 = 0, $2771 = 0, $2772 = 0, $_0_i_i_i840 = 0, $2778 = 0, $2783 = 0, $p_15 = 0, $c_10_in = 0, $c_10 = 0, $2788 = 0, $2789 = 0, $2792 = 0, $2798 = 0, $2799 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2806 = 0, $_pre2_i_i270 = 0, $2809 = 0, $len_0_i_i272 = 0, $2813 = 0, $2815 = 0, $2816 = 0, $2818 = 0, $2819 = 0, $2821 = 0, $2824 = 0, $_0_i52 = 0, $2826 = 0, $2830 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $2840 = 0, $2841 = 0, $2845 = 0, $_pre2_i_i_i771 = 0, $2848 = 0, $len_0_i_i_i773 = 0, $2852 = 0, $2854 = 0, $2855 = 0, $_0_i_i_i777 = 0, $2861 = 0, $2864 = 0, $2868 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $2883 = 0, $_pre2_i_i_i780 = 0, $2886 = 0, $len_0_i_i_i782 = 0, $2890 = 0, $2892 = 0, $2893 = 0, $_0_i_i_i786 = 0, $2901 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2908 = 0, $2909 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2916 = 0, $_pre2_i_i_i789 = 0, $2919 = 0, $len_0_i_i_i791 = 0, $2923 = 0, $2925 = 0, $2926 = 0, $_0_i_i_i795 = 0, $2932 = 0, $2936 = 0, $2940 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $2950 = 0, $2951 = 0, $2955 = 0, $_pre2_i_i_i798 = 0, $2958 = 0, $len_0_i_i_i800 = 0, $2962 = 0, $2964 = 0, $2965 = 0, $_0_i_i_i804 = 0, $2971 = 0, $2976 = 0, $p_16 = 0, $c_11_in = 0, $p_161546 = 0, $p_151545 = 0, $2984 = 0, $2985 = 0, $2988 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $3002 = 0, $_pre2_i_i258 = 0, $3005 = 0, $len_0_i_i260 = 0, $3009 = 0, $3011 = 0, $3012 = 0, $3014 = 0, $3015 = 0, $3017 = 0, $3020 = 0, $_0_i48 = 0, $3022 = 0, $3026 = 0, $3028 = 0, $3029 = 0, $3030 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3041 = 0, $_pre2_i_i_i735 = 0, $3044 = 0, $len_0_i_i_i737 = 0, $3048 = 0, $3050 = 0, $3051 = 0, $_0_i_i_i741 = 0, $3057 = 0, $3060 = 0, $3064 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3079 = 0, $_pre2_i_i_i744 = 0, $3082 = 0, $len_0_i_i_i746 = 0, $3086 = 0, $3088 = 0, $3089 = 0, $_0_i_i_i750 = 0, $3097 = 0, $3099 = 0, $3100 = 0, $3101 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3112 = 0, $_pre2_i_i_i753 = 0, $3115 = 0, $len_0_i_i_i755 = 0, $3119 = 0, $3121 = 0, $3122 = 0, $_0_i_i_i759 = 0, $3128 = 0, $3132 = 0, $3136 = 0, $3138 = 0, $3139 = 0, $3140 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3151 = 0, $_pre2_i_i_i762 = 0, $3154 = 0, $len_0_i_i_i764 = 0, $3158 = 0, $3160 = 0, $3161 = 0, $_0_i_i_i768 = 0, $3167 = 0, $3172 = 0, $p_17 = 0, $c_12_in = 0, $c_12 = 0, $p_171547 = 0, $3180 = 0, $3181 = 0, $3184 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3198 = 0, $_pre2_i_i246 = 0, $3201 = 0, $len_0_i_i248 = 0, $3205 = 0, $3207 = 0, $3208 = 0, $3210 = 0, $3211 = 0, $3213 = 0, $3216 = 0, $_0_i44 = 0, $3218 = 0, $3222 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3229 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3237 = 0, $_pre2_i_i_i699 = 0, $3240 = 0, $len_0_i_i_i701 = 0, $3244 = 0, $3246 = 0, $3247 = 0, $_0_i_i_i705 = 0, $3253 = 0, $3256 = 0, $3260 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $3270 = 0, $3271 = 0, $3275 = 0, $_pre2_i_i_i708 = 0, $3278 = 0, $len_0_i_i_i710 = 0, $3282 = 0, $3284 = 0, $3285 = 0, $_0_i_i_i714 = 0, $3293 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3308 = 0, $_pre2_i_i_i717 = 0, $3311 = 0, $len_0_i_i_i719 = 0, $3315 = 0, $3317 = 0, $3318 = 0, $_0_i_i_i723 = 0, $3324 = 0, $3328 = 0, $3332 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3339 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3347 = 0, $_pre2_i_i_i726 = 0, $3350 = 0, $len_0_i_i_i728 = 0, $3354 = 0, $3356 = 0, $3357 = 0, $_0_i_i_i732 = 0, $3363 = 0, $3368 = 0, $p_18 = 0, $c_13_in = 0, $c_13 = 0, $p_181548 = 0, $3376 = 0, $3377 = 0, $3380 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $3390 = 0, $3394 = 0, $_pre2_i_i234 = 0, $3397 = 0, $len_0_i_i236 = 0, $3401 = 0, $3403 = 0, $3404 = 0, $3406 = 0, $3407 = 0, $3409 = 0, $3412 = 0, $_0_i40 = 0, $3414 = 0, $3418 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $3433 = 0, $_pre2_i_i_i663 = 0, $3436 = 0, $len_0_i_i_i665 = 0, $3440 = 0, $3442 = 0, $3443 = 0, $_0_i_i_i669 = 0, $3449 = 0, $3452 = 0, $3456 = 0, $3458 = 0, $3459 = 0, $3460 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3471 = 0, $_pre2_i_i_i672 = 0, $3474 = 0, $len_0_i_i_i674 = 0, $3478 = 0, $3480 = 0, $3481 = 0, $_0_i_i_i678 = 0, $3489 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $3500 = 0, $3504 = 0, $_pre2_i_i_i681 = 0, $3507 = 0, $len_0_i_i_i683 = 0, $3511 = 0, $3513 = 0, $3514 = 0, $_0_i_i_i687 = 0, $3520 = 0, $3524 = 0, $3528 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $3543 = 0, $_pre2_i_i_i690 = 0, $3546 = 0, $len_0_i_i_i692 = 0, $3550 = 0, $3552 = 0, $3553 = 0, $_0_i_i_i696 = 0, $3559 = 0, $3564 = 0, $p_19 = 0, $c_14_in = 0, $c_14 = 0, $p_191549 = 0, $3572 = 0, $3573 = 0, $3576 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3590 = 0, $_pre2_i_i222 = 0, $3593 = 0, $len_0_i_i224 = 0, $3597 = 0, $3599 = 0, $3600 = 0, $3602 = 0, $3603 = 0, $3605 = 0, $3608 = 0, $_0_i36 = 0, $3610 = 0, $3614 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3629 = 0, $_pre2_i_i_i627 = 0, $3632 = 0, $len_0_i_i_i629 = 0, $3636 = 0, $3638 = 0, $3639 = 0, $_0_i_i_i633 = 0, $3645 = 0, $3648 = 0, $3652 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3659 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3667 = 0, $_pre2_i_i_i636 = 0, $3670 = 0, $len_0_i_i_i638 = 0, $3674 = 0, $3676 = 0, $3677 = 0, $_0_i_i_i642 = 0, $3685 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3700 = 0, $_pre2_i_i_i645 = 0, $3703 = 0, $len_0_i_i_i647 = 0, $3707 = 0, $3709 = 0, $3710 = 0, $_0_i_i_i651 = 0, $3716 = 0, $3720 = 0, $3724 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3739 = 0, $_pre2_i_i_i654 = 0, $3742 = 0, $len_0_i_i_i656 = 0, $3746 = 0, $3748 = 0, $3749 = 0, $_0_i_i_i660 = 0, $3755 = 0, $3760 = 0, $p_20 = 0, $c_15_in = 0, $c_15 = 0, $p_201550 = 0, $3770 = 0, $3771 = 0, $3774 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3788 = 0, $_pre2_i_i210 = 0, $3791 = 0, $len_0_i_i212 = 0, $3795 = 0, $3797 = 0, $3798 = 0, $3800 = 0, $3801 = 0, $3803 = 0, $3806 = 0, $_0_i32 = 0, $3808 = 0, $3812 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3819 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3827 = 0, $_pre2_i_i_i591 = 0, $3830 = 0, $len_0_i_i_i593 = 0, $3834 = 0, $3836 = 0, $3837 = 0, $_0_i_i_i597 = 0, $3843 = 0, $3846 = 0, $3850 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $3860 = 0, $3861 = 0, $3865 = 0, $_pre2_i_i_i600 = 0, $3868 = 0, $len_0_i_i_i602 = 0, $3872 = 0, $3874 = 0, $3875 = 0, $_0_i_i_i606 = 0, $3883 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3898 = 0, $_pre2_i_i_i609 = 0, $3901 = 0, $len_0_i_i_i611 = 0, $3905 = 0, $3907 = 0, $3908 = 0, $_0_i_i_i615 = 0, $3914 = 0, $3918 = 0, $3922 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3929 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3937 = 0, $_pre2_i_i_i618 = 0, $3940 = 0, $len_0_i_i_i620 = 0, $3944 = 0, $3946 = 0, $3947 = 0, $_0_i_i_i624 = 0, $3953 = 0, $3958 = 0, $p_21 = 0, $c_16_in = 0, $p_211551 = 0, $3965 = 0, $3966 = 0, $3969 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $3983 = 0, $_pre2_i_i198 = 0, $3986 = 0, $len_0_i_i200 = 0, $3990 = 0, $3992 = 0, $3993 = 0, $3995 = 0, $3996 = 0, $3998 = 0, $4001 = 0, $_0_i28 = 0, $4003 = 0, $4007 = 0, $4009 = 0, $4010 = 0, $4011 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4022 = 0, $_pre2_i_i_i555 = 0, $4025 = 0, $len_0_i_i_i557 = 0, $4029 = 0, $4031 = 0, $4032 = 0, $_0_i_i_i561 = 0, $4038 = 0, $4041 = 0, $4045 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4060 = 0, $_pre2_i_i_i564 = 0, $4063 = 0, $len_0_i_i_i566 = 0, $4067 = 0, $4069 = 0, $4070 = 0, $_0_i_i_i570 = 0, $4078 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $4093 = 0, $_pre2_i_i_i573 = 0, $4096 = 0, $len_0_i_i_i575 = 0, $4100 = 0, $4102 = 0, $4103 = 0, $_0_i_i_i579 = 0, $4109 = 0, $4113 = 0, $4117 = 0, $4119 = 0, $4120 = 0, $4121 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4132 = 0, $_pre2_i_i_i582 = 0, $4135 = 0, $len_0_i_i_i584 = 0, $4139 = 0, $4141 = 0, $4142 = 0, $_0_i_i_i588 = 0, $4148 = 0, $4153 = 0, $p_22 = 0, $c_17_in = 0, $p_221552 = 0, $4160 = 0, $4161 = 0, $4164 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4178 = 0, $_pre2_i_i186 = 0, $4181 = 0, $len_0_i_i188 = 0, $4185 = 0, $4187 = 0, $4188 = 0, $4190 = 0, $4191 = 0, $4193 = 0, $4196 = 0, $_0_i24 = 0, $4198 = 0, $4202 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4209 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4217 = 0, $_pre2_i_i_i519 = 0, $4220 = 0, $len_0_i_i_i521 = 0, $4224 = 0, $4226 = 0, $4227 = 0, $_0_i_i_i525 = 0, $4233 = 0, $4236 = 0, $4240 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $4250 = 0, $4251 = 0, $4255 = 0, $_pre2_i_i_i528 = 0, $4258 = 0, $len_0_i_i_i530 = 0, $4262 = 0, $4264 = 0, $4265 = 0, $_0_i_i_i534 = 0, $4273 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4288 = 0, $_pre2_i_i_i537 = 0, $4291 = 0, $len_0_i_i_i539 = 0, $4295 = 0, $4297 = 0, $4298 = 0, $_0_i_i_i543 = 0, $4304 = 0, $4308 = 0, $4312 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4319 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4327 = 0, $_pre2_i_i_i546 = 0, $4330 = 0, $len_0_i_i_i548 = 0, $4334 = 0, $4336 = 0, $4337 = 0, $_0_i_i_i552 = 0, $4343 = 0, $4348 = 0, $p_23 = 0, $c_18_in = 0, $p_231553 = 0, $4355 = 0, $4356 = 0, $4359 = 0, $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $4373 = 0, $_pre2_i_i174 = 0, $4376 = 0, $len_0_i_i176 = 0, $4380 = 0, $4382 = 0, $4383 = 0, $4385 = 0, $4386 = 0, $4388 = 0, $4391 = 0, $_0_i20 = 0, $4393 = 0, $4397 = 0, $4399 = 0, $4400 = 0, $4401 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0, $4412 = 0, $_pre2_i_i_i483 = 0, $4415 = 0, $len_0_i_i_i485 = 0, $4419 = 0, $4421 = 0, $4422 = 0, $_0_i_i_i489 = 0, $4428 = 0, $4431 = 0, $4435 = 0, $4437 = 0, $4438 = 0, $4439 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4450 = 0, $_pre2_i_i_i492 = 0, $4453 = 0, $len_0_i_i_i494 = 0, $4457 = 0, $4459 = 0, $4460 = 0, $_0_i_i_i498 = 0, $4468 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $4483 = 0, $_pre2_i_i_i501 = 0, $4486 = 0, $len_0_i_i_i503 = 0, $4490 = 0, $4492 = 0, $4493 = 0, $_0_i_i_i507 = 0, $4499 = 0, $4503 = 0, $4507 = 0, $4509 = 0, $4510 = 0, $4511 = 0, $4514 = 0, $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4522 = 0, $_pre2_i_i_i510 = 0, $4525 = 0, $len_0_i_i_i512 = 0, $4529 = 0, $4531 = 0, $4532 = 0, $_0_i_i_i516 = 0, $4538 = 0, $4543 = 0, $p_24 = 0, $c_19_in = 0, $p_241554 = 0, $4550 = 0, $4551 = 0, $4554 = 0, $4560 = 0, $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4568 = 0, $_pre2_i_i162 = 0, $4571 = 0, $len_0_i_i164 = 0, $4575 = 0, $4577 = 0, $4578 = 0, $4580 = 0, $4581 = 0, $4583 = 0, $4586 = 0, $_0_i16 = 0, $4588 = 0, $4592 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4599 = 0, $4600 = 0, $4601 = 0, $4602 = 0, $4603 = 0, $4607 = 0, $_pre2_i_i_i447 = 0, $4610 = 0, $len_0_i_i_i449 = 0, $4614 = 0, $4616 = 0, $4617 = 0, $_0_i_i_i453 = 0, $4623 = 0, $4626 = 0, $4630 = 0, $4632 = 0, $4633 = 0, $4634 = 0, $4637 = 0, $4638 = 0, $4639 = 0, $4640 = 0, $4641 = 0, $4645 = 0, $_pre2_i_i_i456 = 0, $4648 = 0, $len_0_i_i_i458 = 0, $4652 = 0, $4654 = 0, $4655 = 0, $_0_i_i_i462 = 0, $4663 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0, $4674 = 0, $4678 = 0, $_pre2_i_i_i465 = 0, $4681 = 0, $len_0_i_i_i467 = 0, $4685 = 0, $4687 = 0, $4688 = 0, $_0_i_i_i471 = 0, $4694 = 0, $4698 = 0, $4702 = 0, $4704 = 0, $4705 = 0, $4706 = 0, $4709 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4717 = 0, $_pre2_i_i_i474 = 0, $4720 = 0, $len_0_i_i_i476 = 0, $4724 = 0, $4726 = 0, $4727 = 0, $_0_i_i_i480 = 0, $4733 = 0, $4738 = 0, $p_25 = 0, $c_20_in = 0, $p_251555 = 0, $4745 = 0, $4746 = 0, $4749 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $4763 = 0, $_pre2_i_i151 = 0, $4766 = 0, $len_0_i_i153 = 0, $4770 = 0, $4772 = 0, $4773 = 0, $4775 = 0, $4776 = 0, $4778 = 0, $4781 = 0, $_0_i = 0, $4783 = 0, $4787 = 0, $4789 = 0, $4790 = 0, $4791 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0, $4798 = 0, $4802 = 0, $_pre2_i_i_i = 0, $4805 = 0, $len_0_i_i_i = 0, $4809 = 0, $4811 = 0, $4812 = 0, $_0_i_i_i = 0, $4818 = 0, $4821 = 0, $4825 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0, $4836 = 0, $4840 = 0, $_pre2_i_i_i420 = 0, $4843 = 0, $len_0_i_i_i422 = 0, $4847 = 0, $4849 = 0, $4850 = 0, $_0_i_i_i426 = 0, $4858 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4865 = 0, $4866 = 0, $4867 = 0, $4868 = 0, $4869 = 0, $4873 = 0, $_pre2_i_i_i429 = 0, $4876 = 0, $len_0_i_i_i431 = 0, $4880 = 0, $4882 = 0, $4883 = 0, $_0_i_i_i435 = 0, $4889 = 0, $4893 = 0, $4897 = 0, $4899 = 0, $4900 = 0, $4901 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0, $4908 = 0, $4912 = 0, $_pre2_i_i_i438 = 0, $4915 = 0, $len_0_i_i_i440 = 0, $4919 = 0, $4921 = 0, $4922 = 0, $_0_i_i_i444 = 0, $4928 = 0, $4933 = 0, $p_26 = 0, $c_21_in = 0, $c_21 = 0, $4936 = 0, $4938 = 0, $p_261556 = 0, $p_27 = 0, $p_28 = 0, $4947 = 0, $4948 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $str = sp | 0;
 $p_0 = HEAP32[HEAP32[13912] >> 2] | 0;
 L1 : while (1) {
  $5 = HEAPU8[$p_0] | 0;
  L3 : do {
   switch ($5 | 0) {
   case 10:
    {
     $294 = (HEAP32[13912] | 0) + 16 | 0;
     HEAP32[$294 >> 2] = (HEAP32[$294 >> 2] | 0) + 1;
     HEAP32[5308] = HEAP32[5308] | 1;
     $p_1 = $p_0 + 1 | 0;
     break;
    }
   case 12:
   case 11:
   case 13:
    {
     $p_0 = $p_0 + 1 | 0;
     continue L1;
     break;
    }
   case 97:
   case 98:
   case 99:
   case 100:
   case 101:
   case 102:
   case 103:
   case 104:
   case 105:
   case 106:
   case 107:
   case 108:
   case 109:
   case 110:
   case 111:
   case 112:
   case 113:
   case 114:
   case 115:
   case 116:
   case 117:
   case 118:
   case 119:
   case 120:
   case 121:
   case 122:
   case 65:
   case 66:
   case 67:
   case 68:
   case 69:
   case 70:
   case 71:
   case 72:
   case 73:
   case 74:
   case 75:
   case 77:
   case 78:
   case 79:
   case 80:
   case 81:
   case 82:
   case 83:
   case 84:
   case 85:
   case 86:
   case 87:
   case 88:
   case 89:
   case 90:
   case 95:
    {
     label = 143;
     break L1;
     break;
    }
   case 92:
    {
     $11 = HEAP32[13912] | 0;
     $14 = $p_0 >>> 0 < (HEAP32[$11 + 4 >> 2] | 0) >>> 0;
     HEAP32[$11 >> 2] = $p_0;
     if (!$14) {
      $17 = HEAP32[13912] | 0;
      $18 = $17 | 0;
      $19 = HEAP32[$18 >> 2] | 0;
      $20 = $17 + 4 | 0;
      $21 = HEAP32[$20 >> 2] | 0;
      if ($19 >>> 0 < $21 >>> 0) {
       $35 = $19;
       $34 = $21;
      } else {
       $25 = HEAP32[$17 + 8 >> 2] | 0;
       $_pre2_i_i = $17 + 1056 | 0;
       if (($25 | 0) == -1) {
        $len_0_i_i = 0;
       } else {
        $28 = _read($25 | 0, $_pre2_i_i | 0, 8192) | 0;
        $len_0_i_i = ($28 | 0) < 0 ? 0 : $28;
       }
       HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i;
       HEAP32[$18 >> 2] = $_pre2_i_i;
       $32 = $17 + 1056 + $len_0_i_i | 0;
       HEAP32[$20 >> 2] = $32;
       HEAP8[$32] = 92;
       $35 = HEAP32[$18 >> 2] | 0;
       $34 = HEAP32[$20 >> 2] | 0;
      }
      if ($35 >>> 0 >= $34 >>> 0) {
       HEAP32[$18 >> 2] = $34;
      }
      $38 = HEAP32[13912] | 0;
      $40 = HEAP32[$38 >> 2] | 0;
      if ($40 >>> 0 < (HEAP32[$38 + 4 >> 2] | 0) >>> 0) {
       $p_0 = $40;
       continue L1;
      }
      $197 = HEAP32[5314] | 0;
      $198 = HEAP32[5336] | 0;
      if (($198 & 4 | 0) != 0) {
       $202 = HEAP32[5308] | 0;
       if (($202 & 8 | 0) == 0) {
        label = 57;
        break L1;
       }
      }
      if (($198 & 1 | 0) == 0) {
       label = 59;
       break L1;
      }
      if ((HEAP32[$197 + 724 >> 2] | 0) != (HEAP32[$38 + 28 >> 2] | 0)) {
       label = 61;
       break L1;
      }
      $219 = $197 + 464 | 0;
      if ((HEAP32[$219 >> 2] | 0) == ($197 + 336 | 0)) {
       label = 63;
       break L1;
      }
      $225 = HEAP32[5308] | 0;
      $226 = $225 & -9;
      HEAP32[5308] = $226;
      if (($225 & 4 | 0) == 0) {
       $281 = $197;
      } else {
       $230 = $38 + 32 | 0;
       $232 = HEAP32[$38 + 24 >> 2] | 0;
       $233 = HEAP8[$230] | 0;
       if ($233 << 24 >> 24 == 0) {
        $h_0_lcssa_i_i_i = 1;
       } else {
        $s_01_i_i_i = $230;
        $h_02_i_i_i = 1;
        $235 = $233;
        do {
         $h_02_i_i_i = ($h_02_i_i_i * 263 | 0) + ($235 & 255) | 0;
         $s_01_i_i_i = $s_01_i_i_i + 1 | 0;
         $235 = HEAP8[$s_01_i_i_i] | 0;
        } while ($235 << 24 >> 24 != 0);
        $h_0_lcssa_i_i_i = $h_02_i_i_i & 511;
       }
       $i_01_i_i = HEAP32[$197 + 728 + ($h_0_lcssa_i_i_i << 2) >> 2] | 0;
       $_pre_i135 = $197 + 2776 | 0;
       L32 : do {
        if (($i_01_i_i | 0) == 0) {
         label = 73;
        } else {
         $244 = HEAP32[$_pre_i135 >> 2] | 0;
         $i_02_i_i = $i_01_i_i;
         while (1) {
          $251 = HEAP32[$244 + ($i_02_i_i - 1 << 2) >> 2] | 0;
          if ((_strcmp($251 + 8 | 0, $230 | 0) | 0) == 0) {
           break;
          }
          $i_0_i_i = HEAP32[$251 + 4 >> 2] | 0;
          if (($i_0_i_i | 0) == 0) {
           label = 73;
           break L32;
          } else {
           $i_02_i_i = $i_0_i_i;
          }
         }
         if (($251 | 0) == 0) {
          label = 73;
         } else {
          $278 = $226;
          $_pre = $197;
         }
        }
       } while (0);
       if ((label | 0) == 73) {
        label = 0;
        $258 = _tcc_malloc((_strlen($230 | 0) | 0) + 12 | 0) | 0;
        _strcpy($258 + 8 | 0, $230 | 0) | 0;
        HEAP32[$258 >> 2] = $232;
        $263 = $197 + 2780 | 0;
        _dynarray_add($_pre_i135, $263, $258);
        $264 = HEAP8[$230] | 0;
        if ($264 << 24 >> 24 == 0) {
         $h_0_lcssa_i_i = 1;
        } else {
         $s_01_i_i = $230;
         $h_02_i_i = 1;
         $266 = $264;
         do {
          $h_02_i_i = ($h_02_i_i * 263 | 0) + ($266 & 255) | 0;
          $s_01_i_i = $s_01_i_i + 1 | 0;
          $266 = HEAP8[$s_01_i_i] | 0;
         } while ($266 << 24 >> 24 != 0);
         $h_0_lcssa_i_i = $h_02_i_i & 511;
        }
        $273 = $197 + 728 + ($h_0_lcssa_i_i << 2) | 0;
        HEAP32[$258 + 4 >> 2] = HEAP32[$273 >> 2];
        HEAP32[$273 >> 2] = HEAP32[$263 >> 2];
        $278 = HEAP32[5308] | 0;
        $_pre = HEAP32[5314] | 0;
       }
       HEAP32[5308] = $278 & -5;
       $281 = $_pre;
      }
      if ((HEAP32[$281 + 80 >> 2] | 0) != 0) {
       _put_stabd(162, 0, 0);
      }
      _tcc_close();
      HEAP32[$219 >> 2] = (HEAP32[$219 >> 2] | 0) - 4;
      $p_0 = HEAP32[HEAP32[13912] >> 2] | 0;
      continue L1;
     }
     $45 = HEAP8[$p_0] | 0;
     HEAP32[13924] = $45 & 255;
     L51 : do {
      if ($45 << 24 >> 24 == 92) {
       L52 : while (1) {
        $49 = HEAP32[13912] | 0;
        $51 = (HEAP32[$49 >> 2] | 0) + 1 | 0;
        HEAP32[$49 >> 2] = $51;
        $52 = HEAP8[$51] | 0;
        $53 = $52 & 255;
        HEAP32[13924] = $53;
        if ($52 << 24 >> 24 == 92) {
         $56 = HEAP32[13912] | 0;
         $57 = $56 | 0;
         $58 = HEAP32[$57 >> 2] | 0;
         $59 = $56 + 4 | 0;
         $60 = HEAP32[$59 >> 2] | 0;
         if ($58 >>> 0 < $60 >>> 0) {
          $74 = $58;
          $73 = $60;
         } else {
          $64 = HEAP32[$56 + 8 >> 2] | 0;
          $_pre2_i_i_i1131 = $56 + 1056 | 0;
          if (($64 | 0) == -1) {
           $len_0_i_i_i1133 = 0;
          } else {
           $67 = _read($64 | 0, $_pre2_i_i_i1131 | 0, 8192) | 0;
           $len_0_i_i_i1133 = ($67 | 0) < 0 ? 0 : $67;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1133;
          HEAP32[$57 >> 2] = $_pre2_i_i_i1131;
          $71 = $56 + 1056 + $len_0_i_i_i1133 | 0;
          HEAP32[$59 >> 2] = $71;
          HEAP8[$71] = 92;
          $74 = HEAP32[$57 >> 2] | 0;
          $73 = HEAP32[$59 >> 2] | 0;
         }
         if ($74 >>> 0 < $73 >>> 0) {
          $_0_i_i_i1137 = HEAPU8[$74] | 0;
         } else {
          HEAP32[$57 >> 2] = $73;
          $_0_i_i_i1137 = -1;
         }
         HEAP32[13924] = $_0_i_i_i1137;
         $80 = $_0_i_i_i1137;
        } else {
         $80 = $53;
        }
        do {
         if (($80 | 0) == 10) {
          $83 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$83 >> 2] = (HEAP32[$83 >> 2] | 0) + 1;
          $87 = HEAP32[13912] | 0;
          $89 = (HEAP32[$87 >> 2] | 0) + 1 | 0;
          HEAP32[$87 >> 2] = $89;
          $90 = HEAP8[$89] | 0;
          $91 = $90 & 255;
          HEAP32[13924] = $91;
          if ($90 << 24 >> 24 != 92) {
           $190 = $91;
           break;
          }
          $94 = HEAP32[13912] | 0;
          $95 = $94 | 0;
          $96 = HEAP32[$95 >> 2] | 0;
          $97 = $94 + 4 | 0;
          $98 = HEAP32[$97 >> 2] | 0;
          if ($96 >>> 0 < $98 >>> 0) {
           $112 = $96;
           $111 = $98;
          } else {
           $102 = HEAP32[$94 + 8 >> 2] | 0;
           $_pre2_i_i_i1140 = $94 + 1056 | 0;
           if (($102 | 0) == -1) {
            $len_0_i_i_i1142 = 0;
           } else {
            $105 = _read($102 | 0, $_pre2_i_i_i1140 | 0, 8192) | 0;
            $len_0_i_i_i1142 = ($105 | 0) < 0 ? 0 : $105;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1142;
           HEAP32[$95 >> 2] = $_pre2_i_i_i1140;
           $109 = $94 + 1056 + $len_0_i_i_i1142 | 0;
           HEAP32[$97 >> 2] = $109;
           HEAP8[$109] = 92;
           $112 = HEAP32[$95 >> 2] | 0;
           $111 = HEAP32[$97 >> 2] | 0;
          }
          if ($112 >>> 0 < $111 >>> 0) {
           $_0_i_i_i1146 = HEAPU8[$112] | 0;
          } else {
           HEAP32[$95 >> 2] = $111;
           $_0_i_i_i1146 = -1;
          }
          HEAP32[13924] = $_0_i_i_i1146;
          $190 = $_0_i_i_i1146;
         } else if (($80 | 0) == 13) {
          $120 = HEAP32[13912] | 0;
          $122 = (HEAP32[$120 >> 2] | 0) + 1 | 0;
          HEAP32[$120 >> 2] = $122;
          $123 = HEAP8[$122] | 0;
          $124 = $123 & 255;
          HEAP32[13924] = $124;
          if ($123 << 24 >> 24 == 92) {
           $127 = HEAP32[13912] | 0;
           $128 = $127 | 0;
           $129 = HEAP32[$128 >> 2] | 0;
           $130 = $127 + 4 | 0;
           $131 = HEAP32[$130 >> 2] | 0;
           if ($129 >>> 0 < $131 >>> 0) {
            $145 = $129;
            $144 = $131;
           } else {
            $135 = HEAP32[$127 + 8 >> 2] | 0;
            $_pre2_i_i_i1149 = $127 + 1056 | 0;
            if (($135 | 0) == -1) {
             $len_0_i_i_i1151 = 0;
            } else {
             $138 = _read($135 | 0, $_pre2_i_i_i1149 | 0, 8192) | 0;
             $len_0_i_i_i1151 = ($138 | 0) < 0 ? 0 : $138;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1151;
            HEAP32[$128 >> 2] = $_pre2_i_i_i1149;
            $142 = $127 + 1056 + $len_0_i_i_i1151 | 0;
            HEAP32[$130 >> 2] = $142;
            HEAP8[$142] = 92;
            $145 = HEAP32[$128 >> 2] | 0;
            $144 = HEAP32[$130 >> 2] | 0;
           }
           if ($145 >>> 0 < $144 >>> 0) {
            $_0_i_i_i1155 = HEAPU8[$145] | 0;
           } else {
            HEAP32[$128 >> 2] = $144;
            $_0_i_i_i1155 = -1;
           }
           HEAP32[13924] = $_0_i_i_i1155;
           $151 = $_0_i_i_i1155;
          } else {
           $151 = $124;
          }
          if (($151 | 0) != 10) {
           break L52;
          }
          $155 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$155 >> 2] = (HEAP32[$155 >> 2] | 0) + 1;
          $159 = HEAP32[13912] | 0;
          $161 = (HEAP32[$159 >> 2] | 0) + 1 | 0;
          HEAP32[$159 >> 2] = $161;
          $162 = HEAP8[$161] | 0;
          $163 = $162 & 255;
          HEAP32[13924] = $163;
          if ($162 << 24 >> 24 != 92) {
           $190 = $163;
           break;
          }
          $166 = HEAP32[13912] | 0;
          $167 = $166 | 0;
          $168 = HEAP32[$167 >> 2] | 0;
          $169 = $166 + 4 | 0;
          $170 = HEAP32[$169 >> 2] | 0;
          if ($168 >>> 0 < $170 >>> 0) {
           $184 = $168;
           $183 = $170;
          } else {
           $174 = HEAP32[$166 + 8 >> 2] | 0;
           $_pre2_i_i_i1158 = $166 + 1056 | 0;
           if (($174 | 0) == -1) {
            $len_0_i_i_i1160 = 0;
           } else {
            $177 = _read($174 | 0, $_pre2_i_i_i1158 | 0, 8192) | 0;
            $len_0_i_i_i1160 = ($177 | 0) < 0 ? 0 : $177;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1160;
           HEAP32[$167 >> 2] = $_pre2_i_i_i1158;
           $181 = $166 + 1056 + $len_0_i_i_i1160 | 0;
           HEAP32[$169 >> 2] = $181;
           HEAP8[$181] = 92;
           $184 = HEAP32[$167 >> 2] | 0;
           $183 = HEAP32[$169 >> 2] | 0;
          }
          if ($184 >>> 0 < $183 >>> 0) {
           $_0_i_i_i1164 = HEAPU8[$184] | 0;
          } else {
           HEAP32[$167 >> 2] = $183;
           $_0_i_i_i1164 = -1;
          }
          HEAP32[13924] = $_0_i_i_i1164;
          $190 = $_0_i_i_i1164;
         } else {
          break L52;
         }
        } while (0);
        if (($190 | 0) != 92) {
         break L51;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $p_0 = HEAP32[HEAP32[13912] >> 2] | 0;
     continue L1;
     break;
    }
   case 32:
   case 9:
    {
     label = 3;
     break L1;
     break;
    }
   case 48:
   case 49:
   case 50:
   case 51:
   case 52:
   case 53:
   case 54:
   case 55:
   case 56:
   case 57:
    {
     $c_3_ph = $5;
     $p_7_ph = $p_0;
     $storemerge = 0;
     label = 337;
     break L1;
     break;
    }
   case 35:
    {
     $306 = $p_0 + 1 | 0;
     $307 = HEAP8[$306] | 0;
     $308 = $307 & 255;
     L110 : do {
      if ($307 << 24 >> 24 == 92) {
       $311 = HEAP32[13912] | 0;
       do {
        if ((HEAP32[$311 + 4 >> 2] | 0) >>> 0 > $306 >>> 0) {
         $_0_i137 = $306;
         $344 = $311;
        } else {
         HEAP32[$311 >> 2] = $306;
         $317 = HEAP32[13912] | 0;
         $318 = $317 | 0;
         $319 = HEAP32[$318 >> 2] | 0;
         $320 = $317 + 4 | 0;
         $321 = HEAP32[$320 >> 2] | 0;
         if ($319 >>> 0 < $321 >>> 0) {
          $335 = $319;
          $334 = $321;
         } else {
          $325 = HEAP32[$317 + 8 >> 2] | 0;
          $_pre2_i_i394 = $317 + 1056 | 0;
          if (($325 | 0) == -1) {
           $len_0_i_i396 = 0;
          } else {
           $328 = _read($325 | 0, $_pre2_i_i394 | 0, 8192) | 0;
           $len_0_i_i396 = ($328 | 0) < 0 ? 0 : $328;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i396;
          HEAP32[$318 >> 2] = $_pre2_i_i394;
          $332 = $317 + 1056 + $len_0_i_i396 | 0;
          HEAP32[$320 >> 2] = $332;
          HEAP8[$332] = 92;
          $335 = HEAP32[$318 >> 2] | 0;
          $334 = HEAP32[$320 >> 2] | 0;
         }
         if ($335 >>> 0 < $334 >>> 0) {
          $337 = HEAP8[$335] | 0;
          $339 = HEAP32[13912] | 0;
          $341 = HEAP32[$339 >> 2] | 0;
          if ($337 << 24 >> 24 == 92) {
           $_0_i137 = $341;
           $344 = $339;
           break;
          } else {
           $c_0 = $337 & 255;
           $p_2 = $341;
           break L110;
          }
         } else {
          HEAP32[$318 >> 2] = $334;
          $c_0 = -1;
          $p_2 = HEAP32[HEAP32[13912] >> 2] | 0;
          break L110;
         }
        }
       } while (0);
       HEAP32[$344 >> 2] = $_0_i137;
       $346 = HEAP8[$_0_i137] | 0;
       HEAP32[13924] = $346 & 255;
       L124 : do {
        if ($346 << 24 >> 24 == 92) {
         L125 : while (1) {
          $350 = HEAP32[13912] | 0;
          $352 = (HEAP32[$350 >> 2] | 0) + 1 | 0;
          HEAP32[$350 >> 2] = $352;
          $353 = HEAP8[$352] | 0;
          $354 = $353 & 255;
          HEAP32[13924] = $354;
          if ($353 << 24 >> 24 == 92) {
           $357 = HEAP32[13912] | 0;
           $358 = $357 | 0;
           $359 = HEAP32[$358 >> 2] | 0;
           $360 = $357 + 4 | 0;
           $361 = HEAP32[$360 >> 2] | 0;
           if ($359 >>> 0 < $361 >>> 0) {
            $375 = $359;
            $374 = $361;
           } else {
            $365 = HEAP32[$357 + 8 >> 2] | 0;
            $_pre2_i_i_i1167 = $357 + 1056 | 0;
            if (($365 | 0) == -1) {
             $len_0_i_i_i1169 = 0;
            } else {
             $368 = _read($365 | 0, $_pre2_i_i_i1167 | 0, 8192) | 0;
             $len_0_i_i_i1169 = ($368 | 0) < 0 ? 0 : $368;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1169;
            HEAP32[$358 >> 2] = $_pre2_i_i_i1167;
            $372 = $357 + 1056 + $len_0_i_i_i1169 | 0;
            HEAP32[$360 >> 2] = $372;
            HEAP8[$372] = 92;
            $375 = HEAP32[$358 >> 2] | 0;
            $374 = HEAP32[$360 >> 2] | 0;
           }
           if ($375 >>> 0 < $374 >>> 0) {
            $_0_i_i_i1173 = HEAPU8[$375] | 0;
           } else {
            HEAP32[$358 >> 2] = $374;
            $_0_i_i_i1173 = -1;
           }
           HEAP32[13924] = $_0_i_i_i1173;
           $381 = $_0_i_i_i1173;
          } else {
           $381 = $354;
          }
          do {
           if (($381 | 0) == 10) {
            $384 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$384 >> 2] = (HEAP32[$384 >> 2] | 0) + 1;
            $388 = HEAP32[13912] | 0;
            $390 = (HEAP32[$388 >> 2] | 0) + 1 | 0;
            HEAP32[$388 >> 2] = $390;
            $391 = HEAP8[$390] | 0;
            $392 = $391 & 255;
            HEAP32[13924] = $392;
            if ($391 << 24 >> 24 != 92) {
             $491 = $392;
             break;
            }
            $395 = HEAP32[13912] | 0;
            $396 = $395 | 0;
            $397 = HEAP32[$396 >> 2] | 0;
            $398 = $395 + 4 | 0;
            $399 = HEAP32[$398 >> 2] | 0;
            if ($397 >>> 0 < $399 >>> 0) {
             $413 = $397;
             $412 = $399;
            } else {
             $403 = HEAP32[$395 + 8 >> 2] | 0;
             $_pre2_i_i_i1176 = $395 + 1056 | 0;
             if (($403 | 0) == -1) {
              $len_0_i_i_i1178 = 0;
             } else {
              $406 = _read($403 | 0, $_pre2_i_i_i1176 | 0, 8192) | 0;
              $len_0_i_i_i1178 = ($406 | 0) < 0 ? 0 : $406;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1178;
             HEAP32[$396 >> 2] = $_pre2_i_i_i1176;
             $410 = $395 + 1056 + $len_0_i_i_i1178 | 0;
             HEAP32[$398 >> 2] = $410;
             HEAP8[$410] = 92;
             $413 = HEAP32[$396 >> 2] | 0;
             $412 = HEAP32[$398 >> 2] | 0;
            }
            if ($413 >>> 0 < $412 >>> 0) {
             $_0_i_i_i1182 = HEAPU8[$413] | 0;
            } else {
             HEAP32[$396 >> 2] = $412;
             $_0_i_i_i1182 = -1;
            }
            HEAP32[13924] = $_0_i_i_i1182;
            $491 = $_0_i_i_i1182;
           } else if (($381 | 0) == 13) {
            $421 = HEAP32[13912] | 0;
            $423 = (HEAP32[$421 >> 2] | 0) + 1 | 0;
            HEAP32[$421 >> 2] = $423;
            $424 = HEAP8[$423] | 0;
            $425 = $424 & 255;
            HEAP32[13924] = $425;
            if ($424 << 24 >> 24 == 92) {
             $428 = HEAP32[13912] | 0;
             $429 = $428 | 0;
             $430 = HEAP32[$429 >> 2] | 0;
             $431 = $428 + 4 | 0;
             $432 = HEAP32[$431 >> 2] | 0;
             if ($430 >>> 0 < $432 >>> 0) {
              $446 = $430;
              $445 = $432;
             } else {
              $436 = HEAP32[$428 + 8 >> 2] | 0;
              $_pre2_i_i_i1185 = $428 + 1056 | 0;
              if (($436 | 0) == -1) {
               $len_0_i_i_i1187 = 0;
              } else {
               $439 = _read($436 | 0, $_pre2_i_i_i1185 | 0, 8192) | 0;
               $len_0_i_i_i1187 = ($439 | 0) < 0 ? 0 : $439;
              }
              HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1187;
              HEAP32[$429 >> 2] = $_pre2_i_i_i1185;
              $443 = $428 + 1056 + $len_0_i_i_i1187 | 0;
              HEAP32[$431 >> 2] = $443;
              HEAP8[$443] = 92;
              $446 = HEAP32[$429 >> 2] | 0;
              $445 = HEAP32[$431 >> 2] | 0;
             }
             if ($446 >>> 0 < $445 >>> 0) {
              $_0_i_i_i1191 = HEAPU8[$446] | 0;
             } else {
              HEAP32[$429 >> 2] = $445;
              $_0_i_i_i1191 = -1;
             }
             HEAP32[13924] = $_0_i_i_i1191;
             $452 = $_0_i_i_i1191;
            } else {
             $452 = $425;
            }
            if (($452 | 0) != 10) {
             break L125;
            }
            $456 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$456 >> 2] = (HEAP32[$456 >> 2] | 0) + 1;
            $460 = HEAP32[13912] | 0;
            $462 = (HEAP32[$460 >> 2] | 0) + 1 | 0;
            HEAP32[$460 >> 2] = $462;
            $463 = HEAP8[$462] | 0;
            $464 = $463 & 255;
            HEAP32[13924] = $464;
            if ($463 << 24 >> 24 != 92) {
             $491 = $464;
             break;
            }
            $467 = HEAP32[13912] | 0;
            $468 = $467 | 0;
            $469 = HEAP32[$468 >> 2] | 0;
            $470 = $467 + 4 | 0;
            $471 = HEAP32[$470 >> 2] | 0;
            if ($469 >>> 0 < $471 >>> 0) {
             $485 = $469;
             $484 = $471;
            } else {
             $475 = HEAP32[$467 + 8 >> 2] | 0;
             $_pre2_i_i_i1194 = $467 + 1056 | 0;
             if (($475 | 0) == -1) {
              $len_0_i_i_i1196 = 0;
             } else {
              $478 = _read($475 | 0, $_pre2_i_i_i1194 | 0, 8192) | 0;
              $len_0_i_i_i1196 = ($478 | 0) < 0 ? 0 : $478;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1196;
             HEAP32[$468 >> 2] = $_pre2_i_i_i1194;
             $482 = $467 + 1056 + $len_0_i_i_i1196 | 0;
             HEAP32[$470 >> 2] = $482;
             HEAP8[$482] = 92;
             $485 = HEAP32[$468 >> 2] | 0;
             $484 = HEAP32[$470 >> 2] | 0;
            }
            if ($485 >>> 0 < $484 >>> 0) {
             $_0_i_i_i1200 = HEAPU8[$485] | 0;
            } else {
             HEAP32[$468 >> 2] = $484;
             $_0_i_i_i1200 = -1;
            }
            HEAP32[13924] = $_0_i_i_i1200;
            $491 = $_0_i_i_i1200;
           } else {
            break L125;
           }
          } while (0);
          if (($491 | 0) != 92) {
           break L124;
          }
         }
         _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
       } while (0);
       $496 = HEAP32[HEAP32[13912] >> 2] | 0;
       $c_0 = HEAPU8[$496] | 0;
       $p_2 = $496;
      } else {
       $c_0 = $308;
       $p_2 = $306;
      }
     } while (0);
     do {
      if ((HEAP32[5308] & 1 | 0) != 0) {
       if ((HEAP32[5336] & 1 | 0) == 0) {
        break;
       }
       HEAP32[HEAP32[13912] >> 2] = $p_2;
       _preprocess(HEAP32[5308] & 2);
       $p_1 = HEAP32[HEAP32[13912] >> 2] | 0;
       break L3;
      }
     } while (0);
     if (($c_0 | 0) == 35) {
      label = 139;
      break L1;
     }
     if ((HEAP32[5336] & 8 | 0) == 0) {
      label = 142;
      break L1;
     }
     $p_0 = _parse_line_comment($p_2 - 1 | 0) | 0;
     continue L1;
     break;
    }
   case 39:
   case 34:
    {
     $c_7 = $5;
     $is_long_0 = 0;
     $p_12 = $p_0;
     label = 570;
     break L1;
     break;
    }
   case 46:
    {
     label = 405;
     break L1;
     break;
    }
   case 76:
    {
     label = 278;
     break L1;
     break;
    }
   case 60:
    {
     label = 640;
     break L1;
     break;
    }
   case 62:
    {
     label = 748;
     break L1;
     break;
    }
   case 38:
    {
     label = 856;
     break L1;
     break;
    }
   case 124:
    {
     label = 911;
     break L1;
     break;
    }
   case 43:
    {
     label = 966;
     break L1;
     break;
    }
   case 45:
    {
     label = 1021;
     break L1;
     break;
    }
   case 33:
    {
     label = 1077;
     break L1;
     break;
    }
   case 61:
    {
     label = 1131;
     break L1;
     break;
    }
   case 42:
    {
     label = 1185;
     break L1;
     break;
    }
   case 37:
    {
     label = 1239;
     break L1;
     break;
    }
   case 94:
    {
     label = 1293;
     break L1;
     break;
    }
   case 47:
    {
     label = 1347;
     break L1;
     break;
    }
   case 40:
   case 41:
   case 91:
   case 93:
   case 123:
   case 125:
   case 44:
   case 59:
   case 58:
   case 63:
   case 126:
   case 36:
   case 64:
    {
     label = 1403;
     break L1;
     break;
    }
   default:
    {
     label = 1404;
     break L1;
    }
   }
  } while (0);
  if ((HEAP32[5336] & 4 | 0) == 0) {
   $p_0 = $p_1;
  } else {
   label = 83;
   break;
  }
 }
 L190 : do {
  if ((label | 0) == 3) {
   HEAP32[5310] = $5;
   $p_28 = $p_0 + 1 | 0;
   $4947 = HEAP32[13912] | 0;
   $4948 = $4947 | 0;
   HEAP32[$4948 >> 2] = $p_28;
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 57) {
   HEAP32[5308] = $202 | 8;
   HEAP32[5310] = 10;
   $p_28 = $40;
   $4947 = HEAP32[13912] | 0;
   $4948 = $4947 | 0;
   HEAP32[$4948 >> 2] = $p_28;
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 59) {
   HEAP32[5310] = -1;
   $p_27 = $40;
  } else if ((label | 0) == 61) {
   _tcc_error(13656, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $p_27 = $40;
  } else if ((label | 0) == 63) {
   HEAP32[5310] = -1;
   $p_27 = $40;
  } else if ((label | 0) == 83) {
   HEAP32[5310] = 10;
   $p_28 = $p_1;
   $4947 = HEAP32[13912] | 0;
   $4948 = $4947 | 0;
   HEAP32[$4948 >> 2] = $p_28;
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 139) {
   HEAP32[5310] = 182;
   $p_27 = $p_2 + 1 | 0;
  } else if ((label | 0) == 142) {
   HEAP32[5310] = 35;
   $p_27 = $p_2;
  } else if ((label | 0) == 143) {
   $528 = $5 + 263 | 0;
   $527 = HEAP8[$p_0 + 1 | 0] | 0;
   label = 144;
  } else if ((label | 0) == 278) {
   $1020 = $p_0 + 1 | 0;
   $1021 = HEAP8[$1020] | 0;
   if (!(($1021 << 24 >> 24 | 0) == 92 | ($1021 << 24 >> 24 | 0) == 39 | ($1021 << 24 >> 24 | 0) == 34)) {
    $528 = 339;
    $527 = $1021;
    label = 144;
    break;
   }
   L442 : do {
    if ($1021 << 24 >> 24 == 92) {
     $1025 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$1025 + 4 >> 2] | 0) >>> 0 > $1020 >>> 0) {
       $_0_i114 = $1020;
       $1057 = $1025;
      } else {
       HEAP32[$1025 >> 2] = $1020;
       $1031 = HEAP32[13912] | 0;
       $1032 = $1031 | 0;
       $1033 = HEAP32[$1032 >> 2] | 0;
       $1034 = $1031 + 4 | 0;
       $1035 = HEAP32[$1034 >> 2] | 0;
       if ($1033 >>> 0 < $1035 >>> 0) {
        $1049 = $1033;
        $1048 = $1035;
       } else {
        $1039 = HEAP32[$1031 + 8 >> 2] | 0;
        $_pre2_i_i366 = $1031 + 1056 | 0;
        if (($1039 | 0) == -1) {
         $len_0_i_i368 = 0;
        } else {
         $1042 = _read($1039 | 0, $_pre2_i_i366 | 0, 8192) | 0;
         $len_0_i_i368 = ($1042 | 0) < 0 ? 0 : $1042;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i368;
        HEAP32[$1032 >> 2] = $_pre2_i_i366;
        $1046 = $1031 + 1056 + $len_0_i_i368 | 0;
        HEAP32[$1034 >> 2] = $1046;
        HEAP8[$1046] = 92;
        $1049 = HEAP32[$1032 >> 2] | 0;
        $1048 = HEAP32[$1034 >> 2] | 0;
       }
       if ($1049 >>> 0 < $1048 >>> 0) {
        $1051 = HEAP8[$1049] | 0;
        $1052 = HEAP32[13912] | 0;
        $1054 = HEAP32[$1052 >> 2] | 0;
        if ($1051 << 24 >> 24 == 92) {
         $_0_i114 = $1054;
         $1057 = $1052;
         break;
        } else {
         $c_2_in = $1051;
         $p_6 = $1054;
         label = 330;
         break L442;
        }
       } else {
        HEAP32[$1032 >> 2] = $1048;
        $p_61527 = HEAP32[HEAP32[13912] >> 2] | 0;
        $c_21528 = -1;
        break L442;
       }
      }
     } while (0);
     HEAP32[$1057 >> 2] = $_0_i114;
     $1059 = HEAP8[$_0_i114] | 0;
     HEAP32[13924] = $1059 & 255;
     L456 : do {
      if ($1059 << 24 >> 24 == 92) {
       L457 : while (1) {
        $1063 = HEAP32[13912] | 0;
        $1065 = (HEAP32[$1063 >> 2] | 0) + 1 | 0;
        HEAP32[$1063 >> 2] = $1065;
        $1066 = HEAP8[$1065] | 0;
        $1067 = $1066 & 255;
        HEAP32[13924] = $1067;
        if ($1066 << 24 >> 24 == 92) {
         $1070 = HEAP32[13912] | 0;
         $1071 = $1070 | 0;
         $1072 = HEAP32[$1071 >> 2] | 0;
         $1073 = $1070 + 4 | 0;
         $1074 = HEAP32[$1073 >> 2] | 0;
         if ($1072 >>> 0 < $1074 >>> 0) {
          $1088 = $1072;
          $1087 = $1074;
         } else {
          $1078 = HEAP32[$1070 + 8 >> 2] | 0;
          $_pre2_i_i_i1059 = $1070 + 1056 | 0;
          if (($1078 | 0) == -1) {
           $len_0_i_i_i1061 = 0;
          } else {
           $1081 = _read($1078 | 0, $_pre2_i_i_i1059 | 0, 8192) | 0;
           $len_0_i_i_i1061 = ($1081 | 0) < 0 ? 0 : $1081;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1061;
          HEAP32[$1071 >> 2] = $_pre2_i_i_i1059;
          $1085 = $1070 + 1056 + $len_0_i_i_i1061 | 0;
          HEAP32[$1073 >> 2] = $1085;
          HEAP8[$1085] = 92;
          $1088 = HEAP32[$1071 >> 2] | 0;
          $1087 = HEAP32[$1073 >> 2] | 0;
         }
         if ($1088 >>> 0 < $1087 >>> 0) {
          $_0_i_i_i1065 = HEAPU8[$1088] | 0;
         } else {
          HEAP32[$1071 >> 2] = $1087;
          $_0_i_i_i1065 = -1;
         }
         HEAP32[13924] = $_0_i_i_i1065;
         $1094 = $_0_i_i_i1065;
        } else {
         $1094 = $1067;
        }
        do {
         if (($1094 | 0) == 13) {
          $1134 = HEAP32[13912] | 0;
          $1136 = (HEAP32[$1134 >> 2] | 0) + 1 | 0;
          HEAP32[$1134 >> 2] = $1136;
          $1137 = HEAP8[$1136] | 0;
          $1138 = $1137 & 255;
          HEAP32[13924] = $1138;
          if ($1137 << 24 >> 24 == 92) {
           $1141 = HEAP32[13912] | 0;
           $1142 = $1141 | 0;
           $1143 = HEAP32[$1142 >> 2] | 0;
           $1144 = $1141 + 4 | 0;
           $1145 = HEAP32[$1144 >> 2] | 0;
           if ($1143 >>> 0 < $1145 >>> 0) {
            $1159 = $1143;
            $1158 = $1145;
           } else {
            $1149 = HEAP32[$1141 + 8 >> 2] | 0;
            $_pre2_i_i_i1077 = $1141 + 1056 | 0;
            if (($1149 | 0) == -1) {
             $len_0_i_i_i1079 = 0;
            } else {
             $1152 = _read($1149 | 0, $_pre2_i_i_i1077 | 0, 8192) | 0;
             $len_0_i_i_i1079 = ($1152 | 0) < 0 ? 0 : $1152;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1079;
            HEAP32[$1142 >> 2] = $_pre2_i_i_i1077;
            $1156 = $1141 + 1056 + $len_0_i_i_i1079 | 0;
            HEAP32[$1144 >> 2] = $1156;
            HEAP8[$1156] = 92;
            $1159 = HEAP32[$1142 >> 2] | 0;
            $1158 = HEAP32[$1144 >> 2] | 0;
           }
           if ($1159 >>> 0 < $1158 >>> 0) {
            $_0_i_i_i1083 = HEAPU8[$1159] | 0;
           } else {
            HEAP32[$1142 >> 2] = $1158;
            $_0_i_i_i1083 = -1;
           }
           HEAP32[13924] = $_0_i_i_i1083;
           $1165 = $_0_i_i_i1083;
          } else {
           $1165 = $1138;
          }
          if (($1165 | 0) != 10) {
           break L457;
          }
          $1169 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$1169 >> 2] = (HEAP32[$1169 >> 2] | 0) + 1;
          $1173 = HEAP32[13912] | 0;
          $1175 = (HEAP32[$1173 >> 2] | 0) + 1 | 0;
          HEAP32[$1173 >> 2] = $1175;
          $1176 = HEAP8[$1175] | 0;
          $1177 = $1176 & 255;
          HEAP32[13924] = $1177;
          if ($1176 << 24 >> 24 != 92) {
           $1204 = $1177;
           break;
          }
          $1180 = HEAP32[13912] | 0;
          $1181 = $1180 | 0;
          $1182 = HEAP32[$1181 >> 2] | 0;
          $1183 = $1180 + 4 | 0;
          $1184 = HEAP32[$1183 >> 2] | 0;
          if ($1182 >>> 0 < $1184 >>> 0) {
           $1198 = $1182;
           $1197 = $1184;
          } else {
           $1188 = HEAP32[$1180 + 8 >> 2] | 0;
           $_pre2_i_i_i1086 = $1180 + 1056 | 0;
           if (($1188 | 0) == -1) {
            $len_0_i_i_i1088 = 0;
           } else {
            $1191 = _read($1188 | 0, $_pre2_i_i_i1086 | 0, 8192) | 0;
            $len_0_i_i_i1088 = ($1191 | 0) < 0 ? 0 : $1191;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1088;
           HEAP32[$1181 >> 2] = $_pre2_i_i_i1086;
           $1195 = $1180 + 1056 + $len_0_i_i_i1088 | 0;
           HEAP32[$1183 >> 2] = $1195;
           HEAP8[$1195] = 92;
           $1198 = HEAP32[$1181 >> 2] | 0;
           $1197 = HEAP32[$1183 >> 2] | 0;
          }
          if ($1198 >>> 0 < $1197 >>> 0) {
           $_0_i_i_i1092 = HEAPU8[$1198] | 0;
          } else {
           HEAP32[$1181 >> 2] = $1197;
           $_0_i_i_i1092 = -1;
          }
          HEAP32[13924] = $_0_i_i_i1092;
          $1204 = $_0_i_i_i1092;
         } else if (($1094 | 0) == 10) {
          $1097 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$1097 >> 2] = (HEAP32[$1097 >> 2] | 0) + 1;
          $1101 = HEAP32[13912] | 0;
          $1103 = (HEAP32[$1101 >> 2] | 0) + 1 | 0;
          HEAP32[$1101 >> 2] = $1103;
          $1104 = HEAP8[$1103] | 0;
          $1105 = $1104 & 255;
          HEAP32[13924] = $1105;
          if ($1104 << 24 >> 24 != 92) {
           $1204 = $1105;
           break;
          }
          $1108 = HEAP32[13912] | 0;
          $1109 = $1108 | 0;
          $1110 = HEAP32[$1109 >> 2] | 0;
          $1111 = $1108 + 4 | 0;
          $1112 = HEAP32[$1111 >> 2] | 0;
          if ($1110 >>> 0 < $1112 >>> 0) {
           $1126 = $1110;
           $1125 = $1112;
          } else {
           $1116 = HEAP32[$1108 + 8 >> 2] | 0;
           $_pre2_i_i_i1068 = $1108 + 1056 | 0;
           if (($1116 | 0) == -1) {
            $len_0_i_i_i1070 = 0;
           } else {
            $1119 = _read($1116 | 0, $_pre2_i_i_i1068 | 0, 8192) | 0;
            $len_0_i_i_i1070 = ($1119 | 0) < 0 ? 0 : $1119;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1070;
           HEAP32[$1109 >> 2] = $_pre2_i_i_i1068;
           $1123 = $1108 + 1056 + $len_0_i_i_i1070 | 0;
           HEAP32[$1111 >> 2] = $1123;
           HEAP8[$1123] = 92;
           $1126 = HEAP32[$1109 >> 2] | 0;
           $1125 = HEAP32[$1111 >> 2] | 0;
          }
          if ($1126 >>> 0 < $1125 >>> 0) {
           $_0_i_i_i1074 = HEAPU8[$1126] | 0;
          } else {
           HEAP32[$1109 >> 2] = $1125;
           $_0_i_i_i1074 = -1;
          }
          HEAP32[13924] = $_0_i_i_i1074;
          $1204 = $_0_i_i_i1074;
         } else {
          break L457;
         }
        } while (0);
        if (($1204 | 0) != 92) {
         break L456;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $1209 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_2_in = HEAP8[$1209] | 0;
     $p_6 = $1209;
     label = 330;
    } else {
     $c_2_in = $1021;
     $p_6 = $1020;
     label = 330;
    }
   } while (0);
   if ((label | 0) == 330) {
    $c_2 = $c_2_in & 255;
    if (($c_2 | 0) == 39 | ($c_2 | 0) == 34) {
     $c_7 = $c_2;
     $is_long_0 = 1;
     $p_12 = $p_6;
     label = 570;
     break;
    } else {
     $p_61527 = $p_6;
     $c_21528 = $c_2;
    }
   }
   HEAP32[5298] = 0;
   $1212 = HEAP32[5300] | 0;
   if (($1212 | 0) > 0) {
    $1220 = HEAP32[5299] | 0;
   } else {
    $size_0_i_i111 = ($1212 | 0) == 0 ? 8 : $1212;
    while (1) {
     if (($size_0_i_i111 | 0) < 1) {
      $size_0_i_i111 = $size_0_i_i111 << 1;
     } else {
      break;
     }
    }
    $1219 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i111) | 0;
    HEAP32[5301] = $1219;
    HEAP32[5300] = $size_0_i_i111;
    HEAP32[5299] = $1219;
    $1220 = $1219;
   }
   HEAP8[$1220] = 76;
   HEAP32[5298] = 1;
   $c_1_ph = $c_21528;
   $p_4_ph = $p_61527;
   label = 210;
  } else if ((label | 0) == 405) {
   $1444 = $p_0 + 1 | 0;
   $1445 = HEAP8[$1444] | 0;
   L204 : do {
    if ($1445 << 24 >> 24 == 92) {
     $1448 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$1448 + 4 >> 2] | 0) >>> 0 > $1444 >>> 0) {
       $_0_i85 = $1444;
       $1480 = $1448;
      } else {
       HEAP32[$1448 >> 2] = $1444;
       $1454 = HEAP32[13912] | 0;
       $1455 = $1454 | 0;
       $1456 = HEAP32[$1455 >> 2] | 0;
       $1457 = $1454 + 4 | 0;
       $1458 = HEAP32[$1457 >> 2] | 0;
       if ($1456 >>> 0 < $1458 >>> 0) {
        $1472 = $1456;
        $1471 = $1458;
       } else {
        $1462 = HEAP32[$1454 + 8 >> 2] | 0;
        $_pre2_i_i342 = $1454 + 1056 | 0;
        if (($1462 | 0) == -1) {
         $len_0_i_i344 = 0;
        } else {
         $1465 = _read($1462 | 0, $_pre2_i_i342 | 0, 8192) | 0;
         $len_0_i_i344 = ($1465 | 0) < 0 ? 0 : $1465;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i344;
        HEAP32[$1455 >> 2] = $_pre2_i_i342;
        $1469 = $1454 + 1056 + $len_0_i_i344 | 0;
        HEAP32[$1457 >> 2] = $1469;
        HEAP8[$1469] = 92;
        $1472 = HEAP32[$1455 >> 2] | 0;
        $1471 = HEAP32[$1457 >> 2] | 0;
       }
       if ($1472 >>> 0 < $1471 >>> 0) {
        $1474 = HEAP8[$1472] | 0;
        $1475 = HEAP32[13912] | 0;
        $1477 = HEAP32[$1475 >> 2] | 0;
        if ($1474 << 24 >> 24 == 92) {
         $_0_i85 = $1477;
         $1480 = $1475;
         break;
        } else {
         $c_5_in = $1474;
         $p_9 = $1477;
         label = 456;
         break L204;
        }
       } else {
        HEAP32[$1455 >> 2] = $1471;
        $p_915371540 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L204;
       }
      }
     } while (0);
     HEAP32[$1480 >> 2] = $_0_i85;
     $1482 = HEAP8[$_0_i85] | 0;
     HEAP32[13924] = $1482 & 255;
     L218 : do {
      if ($1482 << 24 >> 24 == 92) {
       L219 : while (1) {
        $1486 = HEAP32[13912] | 0;
        $1488 = (HEAP32[$1486 >> 2] | 0) + 1 | 0;
        HEAP32[$1486 >> 2] = $1488;
        $1489 = HEAP8[$1488] | 0;
        $1490 = $1489 & 255;
        HEAP32[13924] = $1490;
        if ($1489 << 24 >> 24 == 92) {
         $1493 = HEAP32[13912] | 0;
         $1494 = $1493 | 0;
         $1495 = HEAP32[$1494 >> 2] | 0;
         $1496 = $1493 + 4 | 0;
         $1497 = HEAP32[$1496 >> 2] | 0;
         if ($1495 >>> 0 < $1497 >>> 0) {
          $1511 = $1495;
          $1510 = $1497;
         } else {
          $1501 = HEAP32[$1493 + 8 >> 2] | 0;
          $_pre2_i_i_i987 = $1493 + 1056 | 0;
          if (($1501 | 0) == -1) {
           $len_0_i_i_i989 = 0;
          } else {
           $1504 = _read($1501 | 0, $_pre2_i_i_i987 | 0, 8192) | 0;
           $len_0_i_i_i989 = ($1504 | 0) < 0 ? 0 : $1504;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i989;
          HEAP32[$1494 >> 2] = $_pre2_i_i_i987;
          $1508 = $1493 + 1056 + $len_0_i_i_i989 | 0;
          HEAP32[$1496 >> 2] = $1508;
          HEAP8[$1508] = 92;
          $1511 = HEAP32[$1494 >> 2] | 0;
          $1510 = HEAP32[$1496 >> 2] | 0;
         }
         if ($1511 >>> 0 < $1510 >>> 0) {
          $_0_i_i_i993 = HEAPU8[$1511] | 0;
         } else {
          HEAP32[$1494 >> 2] = $1510;
          $_0_i_i_i993 = -1;
         }
         HEAP32[13924] = $_0_i_i_i993;
         $1517 = $_0_i_i_i993;
        } else {
         $1517 = $1490;
        }
        do {
         if (($1517 | 0) == 10) {
          $1520 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$1520 >> 2] = (HEAP32[$1520 >> 2] | 0) + 1;
          $1524 = HEAP32[13912] | 0;
          $1526 = (HEAP32[$1524 >> 2] | 0) + 1 | 0;
          HEAP32[$1524 >> 2] = $1526;
          $1527 = HEAP8[$1526] | 0;
          $1528 = $1527 & 255;
          HEAP32[13924] = $1528;
          if ($1527 << 24 >> 24 != 92) {
           $1627 = $1528;
           break;
          }
          $1531 = HEAP32[13912] | 0;
          $1532 = $1531 | 0;
          $1533 = HEAP32[$1532 >> 2] | 0;
          $1534 = $1531 + 4 | 0;
          $1535 = HEAP32[$1534 >> 2] | 0;
          if ($1533 >>> 0 < $1535 >>> 0) {
           $1549 = $1533;
           $1548 = $1535;
          } else {
           $1539 = HEAP32[$1531 + 8 >> 2] | 0;
           $_pre2_i_i_i996 = $1531 + 1056 | 0;
           if (($1539 | 0) == -1) {
            $len_0_i_i_i998 = 0;
           } else {
            $1542 = _read($1539 | 0, $_pre2_i_i_i996 | 0, 8192) | 0;
            $len_0_i_i_i998 = ($1542 | 0) < 0 ? 0 : $1542;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i998;
           HEAP32[$1532 >> 2] = $_pre2_i_i_i996;
           $1546 = $1531 + 1056 + $len_0_i_i_i998 | 0;
           HEAP32[$1534 >> 2] = $1546;
           HEAP8[$1546] = 92;
           $1549 = HEAP32[$1532 >> 2] | 0;
           $1548 = HEAP32[$1534 >> 2] | 0;
          }
          if ($1549 >>> 0 < $1548 >>> 0) {
           $_0_i_i_i1002 = HEAPU8[$1549] | 0;
          } else {
           HEAP32[$1532 >> 2] = $1548;
           $_0_i_i_i1002 = -1;
          }
          HEAP32[13924] = $_0_i_i_i1002;
          $1627 = $_0_i_i_i1002;
         } else if (($1517 | 0) == 13) {
          $1557 = HEAP32[13912] | 0;
          $1559 = (HEAP32[$1557 >> 2] | 0) + 1 | 0;
          HEAP32[$1557 >> 2] = $1559;
          $1560 = HEAP8[$1559] | 0;
          $1561 = $1560 & 255;
          HEAP32[13924] = $1561;
          if ($1560 << 24 >> 24 == 92) {
           $1564 = HEAP32[13912] | 0;
           $1565 = $1564 | 0;
           $1566 = HEAP32[$1565 >> 2] | 0;
           $1567 = $1564 + 4 | 0;
           $1568 = HEAP32[$1567 >> 2] | 0;
           if ($1566 >>> 0 < $1568 >>> 0) {
            $1582 = $1566;
            $1581 = $1568;
           } else {
            $1572 = HEAP32[$1564 + 8 >> 2] | 0;
            $_pre2_i_i_i1005 = $1564 + 1056 | 0;
            if (($1572 | 0) == -1) {
             $len_0_i_i_i1007 = 0;
            } else {
             $1575 = _read($1572 | 0, $_pre2_i_i_i1005 | 0, 8192) | 0;
             $len_0_i_i_i1007 = ($1575 | 0) < 0 ? 0 : $1575;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1007;
            HEAP32[$1565 >> 2] = $_pre2_i_i_i1005;
            $1579 = $1564 + 1056 + $len_0_i_i_i1007 | 0;
            HEAP32[$1567 >> 2] = $1579;
            HEAP8[$1579] = 92;
            $1582 = HEAP32[$1565 >> 2] | 0;
            $1581 = HEAP32[$1567 >> 2] | 0;
           }
           if ($1582 >>> 0 < $1581 >>> 0) {
            $_0_i_i_i1011 = HEAPU8[$1582] | 0;
           } else {
            HEAP32[$1565 >> 2] = $1581;
            $_0_i_i_i1011 = -1;
           }
           HEAP32[13924] = $_0_i_i_i1011;
           $1588 = $_0_i_i_i1011;
          } else {
           $1588 = $1561;
          }
          if (($1588 | 0) != 10) {
           break L219;
          }
          $1592 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$1592 >> 2] = (HEAP32[$1592 >> 2] | 0) + 1;
          $1596 = HEAP32[13912] | 0;
          $1598 = (HEAP32[$1596 >> 2] | 0) + 1 | 0;
          HEAP32[$1596 >> 2] = $1598;
          $1599 = HEAP8[$1598] | 0;
          $1600 = $1599 & 255;
          HEAP32[13924] = $1600;
          if ($1599 << 24 >> 24 != 92) {
           $1627 = $1600;
           break;
          }
          $1603 = HEAP32[13912] | 0;
          $1604 = $1603 | 0;
          $1605 = HEAP32[$1604 >> 2] | 0;
          $1606 = $1603 + 4 | 0;
          $1607 = HEAP32[$1606 >> 2] | 0;
          if ($1605 >>> 0 < $1607 >>> 0) {
           $1621 = $1605;
           $1620 = $1607;
          } else {
           $1611 = HEAP32[$1603 + 8 >> 2] | 0;
           $_pre2_i_i_i1014 = $1603 + 1056 | 0;
           if (($1611 | 0) == -1) {
            $len_0_i_i_i1016 = 0;
           } else {
            $1614 = _read($1611 | 0, $_pre2_i_i_i1014 | 0, 8192) | 0;
            $len_0_i_i_i1016 = ($1614 | 0) < 0 ? 0 : $1614;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1016;
           HEAP32[$1604 >> 2] = $_pre2_i_i_i1014;
           $1618 = $1603 + 1056 + $len_0_i_i_i1016 | 0;
           HEAP32[$1606 >> 2] = $1618;
           HEAP8[$1618] = 92;
           $1621 = HEAP32[$1604 >> 2] | 0;
           $1620 = HEAP32[$1606 >> 2] | 0;
          }
          if ($1621 >>> 0 < $1620 >>> 0) {
           $_0_i_i_i1020 = HEAPU8[$1621] | 0;
          } else {
           HEAP32[$1604 >> 2] = $1620;
           $_0_i_i_i1020 = -1;
          }
          HEAP32[13924] = $_0_i_i_i1020;
          $1627 = $_0_i_i_i1020;
         } else {
          break L219;
         }
        } while (0);
        if (($1627 | 0) != 92) {
         break L218;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $1632 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_5_in = HEAP8[$1632] | 0;
     $p_9 = $1632;
     label = 456;
    } else {
     $c_5_in = $1445;
     $p_9 = $1444;
     label = 456;
    }
   } while (0);
   do {
    if ((label | 0) == 456) {
     $c_5 = $c_5_in & 255;
     if (($c_5 - 48 | 0) >>> 0 < 10 >>> 0) {
      HEAP32[5298] = 0;
      $1636 = HEAP32[5300] | 0;
      if (($1636 | 0) > 0) {
       $1644 = HEAP32[5299] | 0;
      } else {
       $size_0_i_i82 = ($1636 | 0) == 0 ? 8 : $1636;
       while (1) {
        if (($size_0_i_i82 | 0) < 1) {
         $size_0_i_i82 = $size_0_i_i82 << 1;
        } else {
         break;
        }
       }
       $1643 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i82) | 0;
       HEAP32[5301] = $1643;
       HEAP32[5300] = $size_0_i_i82;
       HEAP32[5299] = $1643;
       $1644 = $1643;
      }
      HEAP8[$1644] = 46;
      $c_3_ph = $c_5;
      $p_7_ph = $p_9;
      $storemerge = 1;
      label = 337;
      break L190;
     }
     if ($c_5_in << 24 >> 24 != 46) {
      $p_915371540 = $p_9;
      break;
     }
     $1647 = $p_9 + 1 | 0;
     $1648 = HEAP8[$1647] | 0;
     L289 : do {
      if ($1648 << 24 >> 24 == 92) {
       $1651 = HEAP32[13912] | 0;
       do {
        if ((HEAP32[$1651 + 4 >> 2] | 0) >>> 0 > $1647 >>> 0) {
         $_0_i75 = $1647;
         $1683 = $1651;
        } else {
         HEAP32[$1651 >> 2] = $1647;
         $1657 = HEAP32[13912] | 0;
         $1658 = $1657 | 0;
         $1659 = HEAP32[$1658 >> 2] | 0;
         $1660 = $1657 + 4 | 0;
         $1661 = HEAP32[$1660 >> 2] | 0;
         if ($1659 >>> 0 < $1661 >>> 0) {
          $1675 = $1659;
          $1674 = $1661;
         } else {
          $1665 = HEAP32[$1657 + 8 >> 2] | 0;
          $_pre2_i_i330 = $1657 + 1056 | 0;
          if (($1665 | 0) == -1) {
           $len_0_i_i332 = 0;
          } else {
           $1668 = _read($1665 | 0, $_pre2_i_i330 | 0, 8192) | 0;
           $len_0_i_i332 = ($1668 | 0) < 0 ? 0 : $1668;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i332;
          HEAP32[$1658 >> 2] = $_pre2_i_i330;
          $1672 = $1657 + 1056 + $len_0_i_i332 | 0;
          HEAP32[$1660 >> 2] = $1672;
          HEAP8[$1672] = 92;
          $1675 = HEAP32[$1658 >> 2] | 0;
          $1674 = HEAP32[$1660 >> 2] | 0;
         }
         if ($1675 >>> 0 < $1674 >>> 0) {
          $1677 = HEAP8[$1675] | 0;
          $1678 = HEAP32[13912] | 0;
          $1680 = HEAP32[$1678 >> 2] | 0;
          if ($1677 << 24 >> 24 == 92) {
           $_0_i75 = $1680;
           $1683 = $1678;
           break;
          } else {
           $c_6_in = $1677;
           $p_10 = $1680;
           label = 515;
           break L289;
          }
         } else {
          HEAP32[$1658 >> 2] = $1674;
          $p_101541 = HEAP32[HEAP32[13912] >> 2] | 0;
          label = 516;
          break L289;
         }
        }
       } while (0);
       HEAP32[$1683 >> 2] = $_0_i75;
       $1685 = HEAP8[$_0_i75] | 0;
       HEAP32[13924] = $1685 & 255;
       L303 : do {
        if ($1685 << 24 >> 24 == 92) {
         L304 : while (1) {
          $1689 = HEAP32[13912] | 0;
          $1691 = (HEAP32[$1689 >> 2] | 0) + 1 | 0;
          HEAP32[$1689 >> 2] = $1691;
          $1692 = HEAP8[$1691] | 0;
          $1693 = $1692 & 255;
          HEAP32[13924] = $1693;
          if ($1692 << 24 >> 24 == 92) {
           $1696 = HEAP32[13912] | 0;
           $1697 = $1696 | 0;
           $1698 = HEAP32[$1697 >> 2] | 0;
           $1699 = $1696 + 4 | 0;
           $1700 = HEAP32[$1699 >> 2] | 0;
           if ($1698 >>> 0 < $1700 >>> 0) {
            $1714 = $1698;
            $1713 = $1700;
           } else {
            $1704 = HEAP32[$1696 + 8 >> 2] | 0;
            $_pre2_i_i_i951 = $1696 + 1056 | 0;
            if (($1704 | 0) == -1) {
             $len_0_i_i_i953 = 0;
            } else {
             $1707 = _read($1704 | 0, $_pre2_i_i_i951 | 0, 8192) | 0;
             $len_0_i_i_i953 = ($1707 | 0) < 0 ? 0 : $1707;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i953;
            HEAP32[$1697 >> 2] = $_pre2_i_i_i951;
            $1711 = $1696 + 1056 + $len_0_i_i_i953 | 0;
            HEAP32[$1699 >> 2] = $1711;
            HEAP8[$1711] = 92;
            $1714 = HEAP32[$1697 >> 2] | 0;
            $1713 = HEAP32[$1699 >> 2] | 0;
           }
           if ($1714 >>> 0 < $1713 >>> 0) {
            $_0_i_i_i957 = HEAPU8[$1714] | 0;
           } else {
            HEAP32[$1697 >> 2] = $1713;
            $_0_i_i_i957 = -1;
           }
           HEAP32[13924] = $_0_i_i_i957;
           $1720 = $_0_i_i_i957;
          } else {
           $1720 = $1693;
          }
          do {
           if (($1720 | 0) == 10) {
            $1723 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$1723 >> 2] = (HEAP32[$1723 >> 2] | 0) + 1;
            $1727 = HEAP32[13912] | 0;
            $1729 = (HEAP32[$1727 >> 2] | 0) + 1 | 0;
            HEAP32[$1727 >> 2] = $1729;
            $1730 = HEAP8[$1729] | 0;
            $1731 = $1730 & 255;
            HEAP32[13924] = $1731;
            if ($1730 << 24 >> 24 != 92) {
             $1830 = $1731;
             break;
            }
            $1734 = HEAP32[13912] | 0;
            $1735 = $1734 | 0;
            $1736 = HEAP32[$1735 >> 2] | 0;
            $1737 = $1734 + 4 | 0;
            $1738 = HEAP32[$1737 >> 2] | 0;
            if ($1736 >>> 0 < $1738 >>> 0) {
             $1752 = $1736;
             $1751 = $1738;
            } else {
             $1742 = HEAP32[$1734 + 8 >> 2] | 0;
             $_pre2_i_i_i960 = $1734 + 1056 | 0;
             if (($1742 | 0) == -1) {
              $len_0_i_i_i962 = 0;
             } else {
              $1745 = _read($1742 | 0, $_pre2_i_i_i960 | 0, 8192) | 0;
              $len_0_i_i_i962 = ($1745 | 0) < 0 ? 0 : $1745;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i962;
             HEAP32[$1735 >> 2] = $_pre2_i_i_i960;
             $1749 = $1734 + 1056 + $len_0_i_i_i962 | 0;
             HEAP32[$1737 >> 2] = $1749;
             HEAP8[$1749] = 92;
             $1752 = HEAP32[$1735 >> 2] | 0;
             $1751 = HEAP32[$1737 >> 2] | 0;
            }
            if ($1752 >>> 0 < $1751 >>> 0) {
             $_0_i_i_i966 = HEAPU8[$1752] | 0;
            } else {
             HEAP32[$1735 >> 2] = $1751;
             $_0_i_i_i966 = -1;
            }
            HEAP32[13924] = $_0_i_i_i966;
            $1830 = $_0_i_i_i966;
           } else if (($1720 | 0) == 13) {
            $1760 = HEAP32[13912] | 0;
            $1762 = (HEAP32[$1760 >> 2] | 0) + 1 | 0;
            HEAP32[$1760 >> 2] = $1762;
            $1763 = HEAP8[$1762] | 0;
            $1764 = $1763 & 255;
            HEAP32[13924] = $1764;
            if ($1763 << 24 >> 24 == 92) {
             $1767 = HEAP32[13912] | 0;
             $1768 = $1767 | 0;
             $1769 = HEAP32[$1768 >> 2] | 0;
             $1770 = $1767 + 4 | 0;
             $1771 = HEAP32[$1770 >> 2] | 0;
             if ($1769 >>> 0 < $1771 >>> 0) {
              $1785 = $1769;
              $1784 = $1771;
             } else {
              $1775 = HEAP32[$1767 + 8 >> 2] | 0;
              $_pre2_i_i_i969 = $1767 + 1056 | 0;
              if (($1775 | 0) == -1) {
               $len_0_i_i_i971 = 0;
              } else {
               $1778 = _read($1775 | 0, $_pre2_i_i_i969 | 0, 8192) | 0;
               $len_0_i_i_i971 = ($1778 | 0) < 0 ? 0 : $1778;
              }
              HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i971;
              HEAP32[$1768 >> 2] = $_pre2_i_i_i969;
              $1782 = $1767 + 1056 + $len_0_i_i_i971 | 0;
              HEAP32[$1770 >> 2] = $1782;
              HEAP8[$1782] = 92;
              $1785 = HEAP32[$1768 >> 2] | 0;
              $1784 = HEAP32[$1770 >> 2] | 0;
             }
             if ($1785 >>> 0 < $1784 >>> 0) {
              $_0_i_i_i975 = HEAPU8[$1785] | 0;
             } else {
              HEAP32[$1768 >> 2] = $1784;
              $_0_i_i_i975 = -1;
             }
             HEAP32[13924] = $_0_i_i_i975;
             $1791 = $_0_i_i_i975;
            } else {
             $1791 = $1764;
            }
            if (($1791 | 0) != 10) {
             break L304;
            }
            $1795 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$1795 >> 2] = (HEAP32[$1795 >> 2] | 0) + 1;
            $1799 = HEAP32[13912] | 0;
            $1801 = (HEAP32[$1799 >> 2] | 0) + 1 | 0;
            HEAP32[$1799 >> 2] = $1801;
            $1802 = HEAP8[$1801] | 0;
            $1803 = $1802 & 255;
            HEAP32[13924] = $1803;
            if ($1802 << 24 >> 24 != 92) {
             $1830 = $1803;
             break;
            }
            $1806 = HEAP32[13912] | 0;
            $1807 = $1806 | 0;
            $1808 = HEAP32[$1807 >> 2] | 0;
            $1809 = $1806 + 4 | 0;
            $1810 = HEAP32[$1809 >> 2] | 0;
            if ($1808 >>> 0 < $1810 >>> 0) {
             $1824 = $1808;
             $1823 = $1810;
            } else {
             $1814 = HEAP32[$1806 + 8 >> 2] | 0;
             $_pre2_i_i_i978 = $1806 + 1056 | 0;
             if (($1814 | 0) == -1) {
              $len_0_i_i_i980 = 0;
             } else {
              $1817 = _read($1814 | 0, $_pre2_i_i_i978 | 0, 8192) | 0;
              $len_0_i_i_i980 = ($1817 | 0) < 0 ? 0 : $1817;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i980;
             HEAP32[$1807 >> 2] = $_pre2_i_i_i978;
             $1821 = $1806 + 1056 + $len_0_i_i_i980 | 0;
             HEAP32[$1809 >> 2] = $1821;
             HEAP8[$1821] = 92;
             $1824 = HEAP32[$1807 >> 2] | 0;
             $1823 = HEAP32[$1809 >> 2] | 0;
            }
            if ($1824 >>> 0 < $1823 >>> 0) {
             $_0_i_i_i984 = HEAPU8[$1824] | 0;
            } else {
             HEAP32[$1807 >> 2] = $1823;
             $_0_i_i_i984 = -1;
            }
            HEAP32[13924] = $_0_i_i_i984;
            $1830 = $_0_i_i_i984;
           } else {
            break L304;
           }
          } while (0);
          if (($1830 | 0) != 92) {
           break L303;
          }
         }
         _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
       } while (0);
       $1835 = HEAP32[HEAP32[13912] >> 2] | 0;
       $c_6_in = HEAP8[$1835] | 0;
       $p_10 = $1835;
       label = 515;
      } else {
       $c_6_in = $1648;
       $p_10 = $1647;
       label = 515;
      }
     } while (0);
     if ((label | 0) == 515) {
      if ($c_6_in << 24 >> 24 == 46) {
       $p_101542 = $p_10;
      } else {
       $p_101541 = $p_10;
       label = 516;
      }
     }
     if ((label | 0) == 516) {
      _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 13560, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $p_101542 = $p_101541;
     }
     $1840 = $p_101542 + 1 | 0;
     if ((HEAP8[$1840] | 0) == 92) {
      $1844 = HEAP32[13912] | 0;
      do {
       if ((HEAP32[$1844 + 4 >> 2] | 0) >>> 0 > $1840 >>> 0) {
        $_0_i71 = $1840;
        $1876 = $1844;
        label = 526;
       } else {
        HEAP32[$1844 >> 2] = $1840;
        $1850 = HEAP32[13912] | 0;
        $1851 = $1850 | 0;
        $1852 = HEAP32[$1851 >> 2] | 0;
        $1853 = $1850 + 4 | 0;
        $1854 = HEAP32[$1853 >> 2] | 0;
        if ($1852 >>> 0 < $1854 >>> 0) {
         $1868 = $1852;
         $1867 = $1854;
        } else {
         $1858 = HEAP32[$1850 + 8 >> 2] | 0;
         $_pre2_i_i318 = $1850 + 1056 | 0;
         if (($1858 | 0) == -1) {
          $len_0_i_i320 = 0;
         } else {
          $1861 = _read($1858 | 0, $_pre2_i_i318 | 0, 8192) | 0;
          $len_0_i_i320 = ($1861 | 0) < 0 ? 0 : $1861;
         }
         HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i320;
         HEAP32[$1851 >> 2] = $_pre2_i_i318;
         $1865 = $1850 + 1056 + $len_0_i_i320 | 0;
         HEAP32[$1853 >> 2] = $1865;
         HEAP8[$1865] = 92;
         $1868 = HEAP32[$1851 >> 2] | 0;
         $1867 = HEAP32[$1853 >> 2] | 0;
        }
        if ($1868 >>> 0 < $1867 >>> 0) {
         $1871 = HEAP32[13912] | 0;
         if ((HEAP8[$1868] | 0) == 92) {
          $_0_i71 = HEAP32[$1871 >> 2] | 0;
          $1876 = $1871;
          label = 526;
          break;
         } else {
          break;
         }
        } else {
         HEAP32[$1851 >> 2] = $1867;
         break;
        }
       }
      } while (0);
      L379 : do {
       if ((label | 0) == 526) {
        HEAP32[$1876 >> 2] = $_0_i71;
        $1878 = HEAP8[$_0_i71] | 0;
        HEAP32[13924] = $1878 & 255;
        if ($1878 << 24 >> 24 != 92) {
         break;
        }
        L381 : while (1) {
         $1882 = HEAP32[13912] | 0;
         $1884 = (HEAP32[$1882 >> 2] | 0) + 1 | 0;
         HEAP32[$1882 >> 2] = $1884;
         $1885 = HEAP8[$1884] | 0;
         $1886 = $1885 & 255;
         HEAP32[13924] = $1886;
         if ($1885 << 24 >> 24 == 92) {
          $1889 = HEAP32[13912] | 0;
          $1890 = $1889 | 0;
          $1891 = HEAP32[$1890 >> 2] | 0;
          $1892 = $1889 + 4 | 0;
          $1893 = HEAP32[$1892 >> 2] | 0;
          if ($1891 >>> 0 < $1893 >>> 0) {
           $1907 = $1891;
           $1906 = $1893;
          } else {
           $1897 = HEAP32[$1889 + 8 >> 2] | 0;
           $_pre2_i_i_i915 = $1889 + 1056 | 0;
           if (($1897 | 0) == -1) {
            $len_0_i_i_i917 = 0;
           } else {
            $1900 = _read($1897 | 0, $_pre2_i_i_i915 | 0, 8192) | 0;
            $len_0_i_i_i917 = ($1900 | 0) < 0 ? 0 : $1900;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i917;
           HEAP32[$1890 >> 2] = $_pre2_i_i_i915;
           $1904 = $1889 + 1056 + $len_0_i_i_i917 | 0;
           HEAP32[$1892 >> 2] = $1904;
           HEAP8[$1904] = 92;
           $1907 = HEAP32[$1890 >> 2] | 0;
           $1906 = HEAP32[$1892 >> 2] | 0;
          }
          if ($1907 >>> 0 < $1906 >>> 0) {
           $_0_i_i_i921 = HEAPU8[$1907] | 0;
          } else {
           HEAP32[$1890 >> 2] = $1906;
           $_0_i_i_i921 = -1;
          }
          HEAP32[13924] = $_0_i_i_i921;
          $1913 = $_0_i_i_i921;
         } else {
          $1913 = $1886;
         }
         do {
          if (($1913 | 0) == 10) {
           $1916 = (HEAP32[13912] | 0) + 16 | 0;
           HEAP32[$1916 >> 2] = (HEAP32[$1916 >> 2] | 0) + 1;
           $1920 = HEAP32[13912] | 0;
           $1922 = (HEAP32[$1920 >> 2] | 0) + 1 | 0;
           HEAP32[$1920 >> 2] = $1922;
           $1923 = HEAP8[$1922] | 0;
           $1924 = $1923 & 255;
           HEAP32[13924] = $1924;
           if ($1923 << 24 >> 24 != 92) {
            $2023 = $1924;
            break;
           }
           $1927 = HEAP32[13912] | 0;
           $1928 = $1927 | 0;
           $1929 = HEAP32[$1928 >> 2] | 0;
           $1930 = $1927 + 4 | 0;
           $1931 = HEAP32[$1930 >> 2] | 0;
           if ($1929 >>> 0 < $1931 >>> 0) {
            $1945 = $1929;
            $1944 = $1931;
           } else {
            $1935 = HEAP32[$1927 + 8 >> 2] | 0;
            $_pre2_i_i_i924 = $1927 + 1056 | 0;
            if (($1935 | 0) == -1) {
             $len_0_i_i_i926 = 0;
            } else {
             $1938 = _read($1935 | 0, $_pre2_i_i_i924 | 0, 8192) | 0;
             $len_0_i_i_i926 = ($1938 | 0) < 0 ? 0 : $1938;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i926;
            HEAP32[$1928 >> 2] = $_pre2_i_i_i924;
            $1942 = $1927 + 1056 + $len_0_i_i_i926 | 0;
            HEAP32[$1930 >> 2] = $1942;
            HEAP8[$1942] = 92;
            $1945 = HEAP32[$1928 >> 2] | 0;
            $1944 = HEAP32[$1930 >> 2] | 0;
           }
           if ($1945 >>> 0 < $1944 >>> 0) {
            $_0_i_i_i930 = HEAPU8[$1945] | 0;
           } else {
            HEAP32[$1928 >> 2] = $1944;
            $_0_i_i_i930 = -1;
           }
           HEAP32[13924] = $_0_i_i_i930;
           $2023 = $_0_i_i_i930;
          } else if (($1913 | 0) == 13) {
           $1953 = HEAP32[13912] | 0;
           $1955 = (HEAP32[$1953 >> 2] | 0) + 1 | 0;
           HEAP32[$1953 >> 2] = $1955;
           $1956 = HEAP8[$1955] | 0;
           $1957 = $1956 & 255;
           HEAP32[13924] = $1957;
           if ($1956 << 24 >> 24 == 92) {
            $1960 = HEAP32[13912] | 0;
            $1961 = $1960 | 0;
            $1962 = HEAP32[$1961 >> 2] | 0;
            $1963 = $1960 + 4 | 0;
            $1964 = HEAP32[$1963 >> 2] | 0;
            if ($1962 >>> 0 < $1964 >>> 0) {
             $1978 = $1962;
             $1977 = $1964;
            } else {
             $1968 = HEAP32[$1960 + 8 >> 2] | 0;
             $_pre2_i_i_i933 = $1960 + 1056 | 0;
             if (($1968 | 0) == -1) {
              $len_0_i_i_i935 = 0;
             } else {
              $1971 = _read($1968 | 0, $_pre2_i_i_i933 | 0, 8192) | 0;
              $len_0_i_i_i935 = ($1971 | 0) < 0 ? 0 : $1971;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i935;
             HEAP32[$1961 >> 2] = $_pre2_i_i_i933;
             $1975 = $1960 + 1056 + $len_0_i_i_i935 | 0;
             HEAP32[$1963 >> 2] = $1975;
             HEAP8[$1975] = 92;
             $1978 = HEAP32[$1961 >> 2] | 0;
             $1977 = HEAP32[$1963 >> 2] | 0;
            }
            if ($1978 >>> 0 < $1977 >>> 0) {
             $_0_i_i_i939 = HEAPU8[$1978] | 0;
            } else {
             HEAP32[$1961 >> 2] = $1977;
             $_0_i_i_i939 = -1;
            }
            HEAP32[13924] = $_0_i_i_i939;
            $1984 = $_0_i_i_i939;
           } else {
            $1984 = $1957;
           }
           if (($1984 | 0) != 10) {
            break L381;
           }
           $1988 = (HEAP32[13912] | 0) + 16 | 0;
           HEAP32[$1988 >> 2] = (HEAP32[$1988 >> 2] | 0) + 1;
           $1992 = HEAP32[13912] | 0;
           $1994 = (HEAP32[$1992 >> 2] | 0) + 1 | 0;
           HEAP32[$1992 >> 2] = $1994;
           $1995 = HEAP8[$1994] | 0;
           $1996 = $1995 & 255;
           HEAP32[13924] = $1996;
           if ($1995 << 24 >> 24 != 92) {
            $2023 = $1996;
            break;
           }
           $1999 = HEAP32[13912] | 0;
           $2000 = $1999 | 0;
           $2001 = HEAP32[$2000 >> 2] | 0;
           $2002 = $1999 + 4 | 0;
           $2003 = HEAP32[$2002 >> 2] | 0;
           if ($2001 >>> 0 < $2003 >>> 0) {
            $2017 = $2001;
            $2016 = $2003;
           } else {
            $2007 = HEAP32[$1999 + 8 >> 2] | 0;
            $_pre2_i_i_i942 = $1999 + 1056 | 0;
            if (($2007 | 0) == -1) {
             $len_0_i_i_i944 = 0;
            } else {
             $2010 = _read($2007 | 0, $_pre2_i_i_i942 | 0, 8192) | 0;
             $len_0_i_i_i944 = ($2010 | 0) < 0 ? 0 : $2010;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i944;
            HEAP32[$2000 >> 2] = $_pre2_i_i_i942;
            $2014 = $1999 + 1056 + $len_0_i_i_i944 | 0;
            HEAP32[$2002 >> 2] = $2014;
            HEAP8[$2014] = 92;
            $2017 = HEAP32[$2000 >> 2] | 0;
            $2016 = HEAP32[$2002 >> 2] | 0;
           }
           if ($2017 >>> 0 < $2016 >>> 0) {
            $_0_i_i_i948 = HEAPU8[$2017] | 0;
           } else {
            HEAP32[$2000 >> 2] = $2016;
            $_0_i_i_i948 = -1;
           }
           HEAP32[13924] = $_0_i_i_i948;
           $2023 = $_0_i_i_i948;
          } else {
           break L381;
          }
         } while (0);
         if (($2023 | 0) != 92) {
          break L379;
         }
        }
        _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
       }
      } while (0);
      $p_11 = HEAP32[HEAP32[13912] >> 2] | 0;
     } else {
      $p_11 = $1840;
     }
     HEAP32[5310] = 204;
     $p_27 = $p_11;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 46;
   $p_27 = $p_915371540;
  } else if ((label | 0) == 640) {
   $2206 = $p_0 + 1 | 0;
   $2207 = HEAP8[$2206] | 0;
   L525 : do {
    if ($2207 << 24 >> 24 == 92) {
     $2210 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$2210 + 4 >> 2] | 0) >>> 0 > $2206 >>> 0) {
       $_0_i64 = $2206;
       $2242 = $2210;
      } else {
       HEAP32[$2210 >> 2] = $2206;
       $2216 = HEAP32[13912] | 0;
       $2217 = $2216 | 0;
       $2218 = HEAP32[$2217 >> 2] | 0;
       $2219 = $2216 + 4 | 0;
       $2220 = HEAP32[$2219 >> 2] | 0;
       if ($2218 >>> 0 < $2220 >>> 0) {
        $2234 = $2218;
        $2233 = $2220;
       } else {
        $2224 = HEAP32[$2216 + 8 >> 2] | 0;
        $_pre2_i_i306 = $2216 + 1056 | 0;
        if (($2224 | 0) == -1) {
         $len_0_i_i308 = 0;
        } else {
         $2227 = _read($2224 | 0, $_pre2_i_i306 | 0, 8192) | 0;
         $len_0_i_i308 = ($2227 | 0) < 0 ? 0 : $2227;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i308;
        HEAP32[$2217 >> 2] = $_pre2_i_i306;
        $2231 = $2216 + 1056 + $len_0_i_i308 | 0;
        HEAP32[$2219 >> 2] = $2231;
        HEAP8[$2231] = 92;
        $2234 = HEAP32[$2217 >> 2] | 0;
        $2233 = HEAP32[$2219 >> 2] | 0;
       }
       if ($2234 >>> 0 < $2233 >>> 0) {
        $2236 = HEAP8[$2234] | 0;
        $2237 = HEAP32[13912] | 0;
        $2239 = HEAP32[$2237 >> 2] | 0;
        if ($2236 << 24 >> 24 == 92) {
         $_0_i64 = $2239;
         $2242 = $2237;
         break;
        } else {
         $c_8_in = $2236;
         $p_13 = $2239;
         label = 691;
         break L525;
        }
       } else {
        HEAP32[$2217 >> 2] = $2233;
        $p_131543 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L525;
       }
      }
     } while (0);
     HEAP32[$2242 >> 2] = $_0_i64;
     $2244 = HEAP8[$_0_i64] | 0;
     HEAP32[13924] = $2244 & 255;
     L539 : do {
      if ($2244 << 24 >> 24 == 92) {
       L540 : while (1) {
        $2248 = HEAP32[13912] | 0;
        $2250 = (HEAP32[$2248 >> 2] | 0) + 1 | 0;
        HEAP32[$2248 >> 2] = $2250;
        $2251 = HEAP8[$2250] | 0;
        $2252 = $2251 & 255;
        HEAP32[13924] = $2252;
        if ($2251 << 24 >> 24 == 92) {
         $2255 = HEAP32[13912] | 0;
         $2256 = $2255 | 0;
         $2257 = HEAP32[$2256 >> 2] | 0;
         $2258 = $2255 + 4 | 0;
         $2259 = HEAP32[$2258 >> 2] | 0;
         if ($2257 >>> 0 < $2259 >>> 0) {
          $2273 = $2257;
          $2272 = $2259;
         } else {
          $2263 = HEAP32[$2255 + 8 >> 2] | 0;
          $_pre2_i_i_i879 = $2255 + 1056 | 0;
          if (($2263 | 0) == -1) {
           $len_0_i_i_i881 = 0;
          } else {
           $2266 = _read($2263 | 0, $_pre2_i_i_i879 | 0, 8192) | 0;
           $len_0_i_i_i881 = ($2266 | 0) < 0 ? 0 : $2266;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i881;
          HEAP32[$2256 >> 2] = $_pre2_i_i_i879;
          $2270 = $2255 + 1056 + $len_0_i_i_i881 | 0;
          HEAP32[$2258 >> 2] = $2270;
          HEAP8[$2270] = 92;
          $2273 = HEAP32[$2256 >> 2] | 0;
          $2272 = HEAP32[$2258 >> 2] | 0;
         }
         if ($2273 >>> 0 < $2272 >>> 0) {
          $_0_i_i_i885 = HEAPU8[$2273] | 0;
         } else {
          HEAP32[$2256 >> 2] = $2272;
          $_0_i_i_i885 = -1;
         }
         HEAP32[13924] = $_0_i_i_i885;
         $2279 = $_0_i_i_i885;
        } else {
         $2279 = $2252;
        }
        do {
         if (($2279 | 0) == 10) {
          $2282 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$2282 >> 2] = (HEAP32[$2282 >> 2] | 0) + 1;
          $2286 = HEAP32[13912] | 0;
          $2288 = (HEAP32[$2286 >> 2] | 0) + 1 | 0;
          HEAP32[$2286 >> 2] = $2288;
          $2289 = HEAP8[$2288] | 0;
          $2290 = $2289 & 255;
          HEAP32[13924] = $2290;
          if ($2289 << 24 >> 24 != 92) {
           $2389 = $2290;
           break;
          }
          $2293 = HEAP32[13912] | 0;
          $2294 = $2293 | 0;
          $2295 = HEAP32[$2294 >> 2] | 0;
          $2296 = $2293 + 4 | 0;
          $2297 = HEAP32[$2296 >> 2] | 0;
          if ($2295 >>> 0 < $2297 >>> 0) {
           $2311 = $2295;
           $2310 = $2297;
          } else {
           $2301 = HEAP32[$2293 + 8 >> 2] | 0;
           $_pre2_i_i_i888 = $2293 + 1056 | 0;
           if (($2301 | 0) == -1) {
            $len_0_i_i_i890 = 0;
           } else {
            $2304 = _read($2301 | 0, $_pre2_i_i_i888 | 0, 8192) | 0;
            $len_0_i_i_i890 = ($2304 | 0) < 0 ? 0 : $2304;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i890;
           HEAP32[$2294 >> 2] = $_pre2_i_i_i888;
           $2308 = $2293 + 1056 + $len_0_i_i_i890 | 0;
           HEAP32[$2296 >> 2] = $2308;
           HEAP8[$2308] = 92;
           $2311 = HEAP32[$2294 >> 2] | 0;
           $2310 = HEAP32[$2296 >> 2] | 0;
          }
          if ($2311 >>> 0 < $2310 >>> 0) {
           $_0_i_i_i894 = HEAPU8[$2311] | 0;
          } else {
           HEAP32[$2294 >> 2] = $2310;
           $_0_i_i_i894 = -1;
          }
          HEAP32[13924] = $_0_i_i_i894;
          $2389 = $_0_i_i_i894;
         } else if (($2279 | 0) == 13) {
          $2319 = HEAP32[13912] | 0;
          $2321 = (HEAP32[$2319 >> 2] | 0) + 1 | 0;
          HEAP32[$2319 >> 2] = $2321;
          $2322 = HEAP8[$2321] | 0;
          $2323 = $2322 & 255;
          HEAP32[13924] = $2323;
          if ($2322 << 24 >> 24 == 92) {
           $2326 = HEAP32[13912] | 0;
           $2327 = $2326 | 0;
           $2328 = HEAP32[$2327 >> 2] | 0;
           $2329 = $2326 + 4 | 0;
           $2330 = HEAP32[$2329 >> 2] | 0;
           if ($2328 >>> 0 < $2330 >>> 0) {
            $2344 = $2328;
            $2343 = $2330;
           } else {
            $2334 = HEAP32[$2326 + 8 >> 2] | 0;
            $_pre2_i_i_i897 = $2326 + 1056 | 0;
            if (($2334 | 0) == -1) {
             $len_0_i_i_i899 = 0;
            } else {
             $2337 = _read($2334 | 0, $_pre2_i_i_i897 | 0, 8192) | 0;
             $len_0_i_i_i899 = ($2337 | 0) < 0 ? 0 : $2337;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i899;
            HEAP32[$2327 >> 2] = $_pre2_i_i_i897;
            $2341 = $2326 + 1056 + $len_0_i_i_i899 | 0;
            HEAP32[$2329 >> 2] = $2341;
            HEAP8[$2341] = 92;
            $2344 = HEAP32[$2327 >> 2] | 0;
            $2343 = HEAP32[$2329 >> 2] | 0;
           }
           if ($2344 >>> 0 < $2343 >>> 0) {
            $_0_i_i_i903 = HEAPU8[$2344] | 0;
           } else {
            HEAP32[$2327 >> 2] = $2343;
            $_0_i_i_i903 = -1;
           }
           HEAP32[13924] = $_0_i_i_i903;
           $2350 = $_0_i_i_i903;
          } else {
           $2350 = $2323;
          }
          if (($2350 | 0) != 10) {
           break L540;
          }
          $2354 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$2354 >> 2] = (HEAP32[$2354 >> 2] | 0) + 1;
          $2358 = HEAP32[13912] | 0;
          $2360 = (HEAP32[$2358 >> 2] | 0) + 1 | 0;
          HEAP32[$2358 >> 2] = $2360;
          $2361 = HEAP8[$2360] | 0;
          $2362 = $2361 & 255;
          HEAP32[13924] = $2362;
          if ($2361 << 24 >> 24 != 92) {
           $2389 = $2362;
           break;
          }
          $2365 = HEAP32[13912] | 0;
          $2366 = $2365 | 0;
          $2367 = HEAP32[$2366 >> 2] | 0;
          $2368 = $2365 + 4 | 0;
          $2369 = HEAP32[$2368 >> 2] | 0;
          if ($2367 >>> 0 < $2369 >>> 0) {
           $2383 = $2367;
           $2382 = $2369;
          } else {
           $2373 = HEAP32[$2365 + 8 >> 2] | 0;
           $_pre2_i_i_i906 = $2365 + 1056 | 0;
           if (($2373 | 0) == -1) {
            $len_0_i_i_i908 = 0;
           } else {
            $2376 = _read($2373 | 0, $_pre2_i_i_i906 | 0, 8192) | 0;
            $len_0_i_i_i908 = ($2376 | 0) < 0 ? 0 : $2376;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i908;
           HEAP32[$2366 >> 2] = $_pre2_i_i_i906;
           $2380 = $2365 + 1056 + $len_0_i_i_i908 | 0;
           HEAP32[$2368 >> 2] = $2380;
           HEAP8[$2380] = 92;
           $2383 = HEAP32[$2366 >> 2] | 0;
           $2382 = HEAP32[$2368 >> 2] | 0;
          }
          if ($2383 >>> 0 < $2382 >>> 0) {
           $_0_i_i_i912 = HEAPU8[$2383] | 0;
          } else {
           HEAP32[$2366 >> 2] = $2382;
           $_0_i_i_i912 = -1;
          }
          HEAP32[13924] = $_0_i_i_i912;
          $2389 = $_0_i_i_i912;
         } else {
          break L540;
         }
        } while (0);
        if (($2389 | 0) != 92) {
         break L539;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $2394 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_8_in = HEAP8[$2394] | 0;
     $p_13 = $2394;
     label = 691;
    } else {
     $c_8_in = $2207;
     $p_13 = $2206;
     label = 691;
    }
   } while (0);
   do {
    if ((label | 0) == 691) {
     $c_8 = $c_8_in & 255;
     if (($c_8 | 0) == 61) {
      HEAP32[5310] = 158;
      $p_27 = $p_13 + 1 | 0;
      break L190;
     } else if (($c_8 | 0) != 60) {
      $p_131543 = $p_13;
      break;
     }
     $2399 = $p_13 + 1 | 0;
     $2400 = HEAP8[$2399] | 0;
     L602 : do {
      if ($2400 << 24 >> 24 == 92) {
       $2403 = HEAP32[13912] | 0;
       do {
        if ((HEAP32[$2403 + 4 >> 2] | 0) >>> 0 > $2399 >>> 0) {
         $_0_i60 = $2399;
         $2435 = $2403;
        } else {
         HEAP32[$2403 >> 2] = $2399;
         $2409 = HEAP32[13912] | 0;
         $2410 = $2409 | 0;
         $2411 = HEAP32[$2410 >> 2] | 0;
         $2412 = $2409 + 4 | 0;
         $2413 = HEAP32[$2412 >> 2] | 0;
         if ($2411 >>> 0 < $2413 >>> 0) {
          $2427 = $2411;
          $2426 = $2413;
         } else {
          $2417 = HEAP32[$2409 + 8 >> 2] | 0;
          $_pre2_i_i294 = $2409 + 1056 | 0;
          if (($2417 | 0) == -1) {
           $len_0_i_i296 = 0;
          } else {
           $2420 = _read($2417 | 0, $_pre2_i_i294 | 0, 8192) | 0;
           $len_0_i_i296 = ($2420 | 0) < 0 ? 0 : $2420;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i296;
          HEAP32[$2410 >> 2] = $_pre2_i_i294;
          $2424 = $2409 + 1056 + $len_0_i_i296 | 0;
          HEAP32[$2412 >> 2] = $2424;
          HEAP8[$2424] = 92;
          $2427 = HEAP32[$2410 >> 2] | 0;
          $2426 = HEAP32[$2412 >> 2] | 0;
         }
         if ($2427 >>> 0 < $2426 >>> 0) {
          $2429 = HEAP8[$2427] | 0;
          $2430 = HEAP32[13912] | 0;
          $2432 = HEAP32[$2430 >> 2] | 0;
          if ($2429 << 24 >> 24 == 92) {
           $_0_i60 = $2432;
           $2435 = $2430;
           break;
          } else {
           $c_9_in = $2429;
           $p_14 = $2432;
           label = 744;
           break L602;
          }
         } else {
          HEAP32[$2410 >> 2] = $2426;
          $p_141544 = HEAP32[HEAP32[13912] >> 2] | 0;
          break L602;
         }
        }
       } while (0);
       HEAP32[$2435 >> 2] = $_0_i60;
       $2437 = HEAP8[$_0_i60] | 0;
       HEAP32[13924] = $2437 & 255;
       L616 : do {
        if ($2437 << 24 >> 24 == 92) {
         L617 : while (1) {
          $2441 = HEAP32[13912] | 0;
          $2443 = (HEAP32[$2441 >> 2] | 0) + 1 | 0;
          HEAP32[$2441 >> 2] = $2443;
          $2444 = HEAP8[$2443] | 0;
          $2445 = $2444 & 255;
          HEAP32[13924] = $2445;
          if ($2444 << 24 >> 24 == 92) {
           $2448 = HEAP32[13912] | 0;
           $2449 = $2448 | 0;
           $2450 = HEAP32[$2449 >> 2] | 0;
           $2451 = $2448 + 4 | 0;
           $2452 = HEAP32[$2451 >> 2] | 0;
           if ($2450 >>> 0 < $2452 >>> 0) {
            $2466 = $2450;
            $2465 = $2452;
           } else {
            $2456 = HEAP32[$2448 + 8 >> 2] | 0;
            $_pre2_i_i_i843 = $2448 + 1056 | 0;
            if (($2456 | 0) == -1) {
             $len_0_i_i_i845 = 0;
            } else {
             $2459 = _read($2456 | 0, $_pre2_i_i_i843 | 0, 8192) | 0;
             $len_0_i_i_i845 = ($2459 | 0) < 0 ? 0 : $2459;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i845;
            HEAP32[$2449 >> 2] = $_pre2_i_i_i843;
            $2463 = $2448 + 1056 + $len_0_i_i_i845 | 0;
            HEAP32[$2451 >> 2] = $2463;
            HEAP8[$2463] = 92;
            $2466 = HEAP32[$2449 >> 2] | 0;
            $2465 = HEAP32[$2451 >> 2] | 0;
           }
           if ($2466 >>> 0 < $2465 >>> 0) {
            $_0_i_i_i849 = HEAPU8[$2466] | 0;
           } else {
            HEAP32[$2449 >> 2] = $2465;
            $_0_i_i_i849 = -1;
           }
           HEAP32[13924] = $_0_i_i_i849;
           $2472 = $_0_i_i_i849;
          } else {
           $2472 = $2445;
          }
          do {
           if (($2472 | 0) == 10) {
            $2475 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$2475 >> 2] = (HEAP32[$2475 >> 2] | 0) + 1;
            $2479 = HEAP32[13912] | 0;
            $2481 = (HEAP32[$2479 >> 2] | 0) + 1 | 0;
            HEAP32[$2479 >> 2] = $2481;
            $2482 = HEAP8[$2481] | 0;
            $2483 = $2482 & 255;
            HEAP32[13924] = $2483;
            if ($2482 << 24 >> 24 != 92) {
             $2582 = $2483;
             break;
            }
            $2486 = HEAP32[13912] | 0;
            $2487 = $2486 | 0;
            $2488 = HEAP32[$2487 >> 2] | 0;
            $2489 = $2486 + 4 | 0;
            $2490 = HEAP32[$2489 >> 2] | 0;
            if ($2488 >>> 0 < $2490 >>> 0) {
             $2504 = $2488;
             $2503 = $2490;
            } else {
             $2494 = HEAP32[$2486 + 8 >> 2] | 0;
             $_pre2_i_i_i852 = $2486 + 1056 | 0;
             if (($2494 | 0) == -1) {
              $len_0_i_i_i854 = 0;
             } else {
              $2497 = _read($2494 | 0, $_pre2_i_i_i852 | 0, 8192) | 0;
              $len_0_i_i_i854 = ($2497 | 0) < 0 ? 0 : $2497;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i854;
             HEAP32[$2487 >> 2] = $_pre2_i_i_i852;
             $2501 = $2486 + 1056 + $len_0_i_i_i854 | 0;
             HEAP32[$2489 >> 2] = $2501;
             HEAP8[$2501] = 92;
             $2504 = HEAP32[$2487 >> 2] | 0;
             $2503 = HEAP32[$2489 >> 2] | 0;
            }
            if ($2504 >>> 0 < $2503 >>> 0) {
             $_0_i_i_i858 = HEAPU8[$2504] | 0;
            } else {
             HEAP32[$2487 >> 2] = $2503;
             $_0_i_i_i858 = -1;
            }
            HEAP32[13924] = $_0_i_i_i858;
            $2582 = $_0_i_i_i858;
           } else if (($2472 | 0) == 13) {
            $2512 = HEAP32[13912] | 0;
            $2514 = (HEAP32[$2512 >> 2] | 0) + 1 | 0;
            HEAP32[$2512 >> 2] = $2514;
            $2515 = HEAP8[$2514] | 0;
            $2516 = $2515 & 255;
            HEAP32[13924] = $2516;
            if ($2515 << 24 >> 24 == 92) {
             $2519 = HEAP32[13912] | 0;
             $2520 = $2519 | 0;
             $2521 = HEAP32[$2520 >> 2] | 0;
             $2522 = $2519 + 4 | 0;
             $2523 = HEAP32[$2522 >> 2] | 0;
             if ($2521 >>> 0 < $2523 >>> 0) {
              $2537 = $2521;
              $2536 = $2523;
             } else {
              $2527 = HEAP32[$2519 + 8 >> 2] | 0;
              $_pre2_i_i_i861 = $2519 + 1056 | 0;
              if (($2527 | 0) == -1) {
               $len_0_i_i_i863 = 0;
              } else {
               $2530 = _read($2527 | 0, $_pre2_i_i_i861 | 0, 8192) | 0;
               $len_0_i_i_i863 = ($2530 | 0) < 0 ? 0 : $2530;
              }
              HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i863;
              HEAP32[$2520 >> 2] = $_pre2_i_i_i861;
              $2534 = $2519 + 1056 + $len_0_i_i_i863 | 0;
              HEAP32[$2522 >> 2] = $2534;
              HEAP8[$2534] = 92;
              $2537 = HEAP32[$2520 >> 2] | 0;
              $2536 = HEAP32[$2522 >> 2] | 0;
             }
             if ($2537 >>> 0 < $2536 >>> 0) {
              $_0_i_i_i867 = HEAPU8[$2537] | 0;
             } else {
              HEAP32[$2520 >> 2] = $2536;
              $_0_i_i_i867 = -1;
             }
             HEAP32[13924] = $_0_i_i_i867;
             $2543 = $_0_i_i_i867;
            } else {
             $2543 = $2516;
            }
            if (($2543 | 0) != 10) {
             break L617;
            }
            $2547 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$2547 >> 2] = (HEAP32[$2547 >> 2] | 0) + 1;
            $2551 = HEAP32[13912] | 0;
            $2553 = (HEAP32[$2551 >> 2] | 0) + 1 | 0;
            HEAP32[$2551 >> 2] = $2553;
            $2554 = HEAP8[$2553] | 0;
            $2555 = $2554 & 255;
            HEAP32[13924] = $2555;
            if ($2554 << 24 >> 24 != 92) {
             $2582 = $2555;
             break;
            }
            $2558 = HEAP32[13912] | 0;
            $2559 = $2558 | 0;
            $2560 = HEAP32[$2559 >> 2] | 0;
            $2561 = $2558 + 4 | 0;
            $2562 = HEAP32[$2561 >> 2] | 0;
            if ($2560 >>> 0 < $2562 >>> 0) {
             $2576 = $2560;
             $2575 = $2562;
            } else {
             $2566 = HEAP32[$2558 + 8 >> 2] | 0;
             $_pre2_i_i_i870 = $2558 + 1056 | 0;
             if (($2566 | 0) == -1) {
              $len_0_i_i_i872 = 0;
             } else {
              $2569 = _read($2566 | 0, $_pre2_i_i_i870 | 0, 8192) | 0;
              $len_0_i_i_i872 = ($2569 | 0) < 0 ? 0 : $2569;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i872;
             HEAP32[$2559 >> 2] = $_pre2_i_i_i870;
             $2573 = $2558 + 1056 + $len_0_i_i_i872 | 0;
             HEAP32[$2561 >> 2] = $2573;
             HEAP8[$2573] = 92;
             $2576 = HEAP32[$2559 >> 2] | 0;
             $2575 = HEAP32[$2561 >> 2] | 0;
            }
            if ($2576 >>> 0 < $2575 >>> 0) {
             $_0_i_i_i876 = HEAPU8[$2576] | 0;
            } else {
             HEAP32[$2559 >> 2] = $2575;
             $_0_i_i_i876 = -1;
            }
            HEAP32[13924] = $_0_i_i_i876;
            $2582 = $_0_i_i_i876;
           } else {
            break L617;
           }
          } while (0);
          if (($2582 | 0) != 92) {
           break L616;
          }
         }
         _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
       } while (0);
       $2587 = HEAP32[HEAP32[13912] >> 2] | 0;
       $c_9_in = HEAP8[$2587] | 0;
       $p_14 = $2587;
       label = 744;
      } else {
       $c_9_in = $2400;
       $p_14 = $2399;
       label = 744;
      }
     } while (0);
     do {
      if ((label | 0) == 744) {
       if ($c_9_in << 24 >> 24 != 61) {
        $p_141544 = $p_14;
        break;
       }
       HEAP32[5310] = 129;
       $p_27 = $p_14 + 1 | 0;
       break L190;
      }
     } while (0);
     HEAP32[5310] = 1;
     $p_27 = $p_141544;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 156;
   $p_27 = $p_131543;
  } else if ((label | 0) == 748) {
   $2595 = $p_0 + 1 | 0;
   $2596 = HEAP8[$2595] | 0;
   L680 : do {
    if ($2596 << 24 >> 24 == 92) {
     $2599 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$2599 + 4 >> 2] | 0) >>> 0 > $2595 >>> 0) {
       $_0_i56 = $2595;
       $2631 = $2599;
      } else {
       HEAP32[$2599 >> 2] = $2595;
       $2605 = HEAP32[13912] | 0;
       $2606 = $2605 | 0;
       $2607 = HEAP32[$2606 >> 2] | 0;
       $2608 = $2605 + 4 | 0;
       $2609 = HEAP32[$2608 >> 2] | 0;
       if ($2607 >>> 0 < $2609 >>> 0) {
        $2623 = $2607;
        $2622 = $2609;
       } else {
        $2613 = HEAP32[$2605 + 8 >> 2] | 0;
        $_pre2_i_i282 = $2605 + 1056 | 0;
        if (($2613 | 0) == -1) {
         $len_0_i_i284 = 0;
        } else {
         $2616 = _read($2613 | 0, $_pre2_i_i282 | 0, 8192) | 0;
         $len_0_i_i284 = ($2616 | 0) < 0 ? 0 : $2616;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i284;
        HEAP32[$2606 >> 2] = $_pre2_i_i282;
        $2620 = $2605 + 1056 + $len_0_i_i284 | 0;
        HEAP32[$2608 >> 2] = $2620;
        HEAP8[$2620] = 92;
        $2623 = HEAP32[$2606 >> 2] | 0;
        $2622 = HEAP32[$2608 >> 2] | 0;
       }
       if ($2623 >>> 0 < $2622 >>> 0) {
        $2625 = HEAP8[$2623] | 0;
        $2626 = HEAP32[13912] | 0;
        $2628 = HEAP32[$2626 >> 2] | 0;
        if ($2625 << 24 >> 24 == 92) {
         $_0_i56 = $2628;
         $2631 = $2626;
         break;
        } else {
         $c_10_in = $2625;
         $p_15 = $2628;
         label = 799;
         break L680;
        }
       } else {
        HEAP32[$2606 >> 2] = $2622;
        $p_151545 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L680;
       }
      }
     } while (0);
     HEAP32[$2631 >> 2] = $_0_i56;
     $2633 = HEAP8[$_0_i56] | 0;
     HEAP32[13924] = $2633 & 255;
     L694 : do {
      if ($2633 << 24 >> 24 == 92) {
       L695 : while (1) {
        $2637 = HEAP32[13912] | 0;
        $2639 = (HEAP32[$2637 >> 2] | 0) + 1 | 0;
        HEAP32[$2637 >> 2] = $2639;
        $2640 = HEAP8[$2639] | 0;
        $2641 = $2640 & 255;
        HEAP32[13924] = $2641;
        if ($2640 << 24 >> 24 == 92) {
         $2644 = HEAP32[13912] | 0;
         $2645 = $2644 | 0;
         $2646 = HEAP32[$2645 >> 2] | 0;
         $2647 = $2644 + 4 | 0;
         $2648 = HEAP32[$2647 >> 2] | 0;
         if ($2646 >>> 0 < $2648 >>> 0) {
          $2662 = $2646;
          $2661 = $2648;
         } else {
          $2652 = HEAP32[$2644 + 8 >> 2] | 0;
          $_pre2_i_i_i807 = $2644 + 1056 | 0;
          if (($2652 | 0) == -1) {
           $len_0_i_i_i809 = 0;
          } else {
           $2655 = _read($2652 | 0, $_pre2_i_i_i807 | 0, 8192) | 0;
           $len_0_i_i_i809 = ($2655 | 0) < 0 ? 0 : $2655;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i809;
          HEAP32[$2645 >> 2] = $_pre2_i_i_i807;
          $2659 = $2644 + 1056 + $len_0_i_i_i809 | 0;
          HEAP32[$2647 >> 2] = $2659;
          HEAP8[$2659] = 92;
          $2662 = HEAP32[$2645 >> 2] | 0;
          $2661 = HEAP32[$2647 >> 2] | 0;
         }
         if ($2662 >>> 0 < $2661 >>> 0) {
          $_0_i_i_i813 = HEAPU8[$2662] | 0;
         } else {
          HEAP32[$2645 >> 2] = $2661;
          $_0_i_i_i813 = -1;
         }
         HEAP32[13924] = $_0_i_i_i813;
         $2668 = $_0_i_i_i813;
        } else {
         $2668 = $2641;
        }
        do {
         if (($2668 | 0) == 10) {
          $2671 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$2671 >> 2] = (HEAP32[$2671 >> 2] | 0) + 1;
          $2675 = HEAP32[13912] | 0;
          $2677 = (HEAP32[$2675 >> 2] | 0) + 1 | 0;
          HEAP32[$2675 >> 2] = $2677;
          $2678 = HEAP8[$2677] | 0;
          $2679 = $2678 & 255;
          HEAP32[13924] = $2679;
          if ($2678 << 24 >> 24 != 92) {
           $2778 = $2679;
           break;
          }
          $2682 = HEAP32[13912] | 0;
          $2683 = $2682 | 0;
          $2684 = HEAP32[$2683 >> 2] | 0;
          $2685 = $2682 + 4 | 0;
          $2686 = HEAP32[$2685 >> 2] | 0;
          if ($2684 >>> 0 < $2686 >>> 0) {
           $2700 = $2684;
           $2699 = $2686;
          } else {
           $2690 = HEAP32[$2682 + 8 >> 2] | 0;
           $_pre2_i_i_i816 = $2682 + 1056 | 0;
           if (($2690 | 0) == -1) {
            $len_0_i_i_i818 = 0;
           } else {
            $2693 = _read($2690 | 0, $_pre2_i_i_i816 | 0, 8192) | 0;
            $len_0_i_i_i818 = ($2693 | 0) < 0 ? 0 : $2693;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i818;
           HEAP32[$2683 >> 2] = $_pre2_i_i_i816;
           $2697 = $2682 + 1056 + $len_0_i_i_i818 | 0;
           HEAP32[$2685 >> 2] = $2697;
           HEAP8[$2697] = 92;
           $2700 = HEAP32[$2683 >> 2] | 0;
           $2699 = HEAP32[$2685 >> 2] | 0;
          }
          if ($2700 >>> 0 < $2699 >>> 0) {
           $_0_i_i_i822 = HEAPU8[$2700] | 0;
          } else {
           HEAP32[$2683 >> 2] = $2699;
           $_0_i_i_i822 = -1;
          }
          HEAP32[13924] = $_0_i_i_i822;
          $2778 = $_0_i_i_i822;
         } else if (($2668 | 0) == 13) {
          $2708 = HEAP32[13912] | 0;
          $2710 = (HEAP32[$2708 >> 2] | 0) + 1 | 0;
          HEAP32[$2708 >> 2] = $2710;
          $2711 = HEAP8[$2710] | 0;
          $2712 = $2711 & 255;
          HEAP32[13924] = $2712;
          if ($2711 << 24 >> 24 == 92) {
           $2715 = HEAP32[13912] | 0;
           $2716 = $2715 | 0;
           $2717 = HEAP32[$2716 >> 2] | 0;
           $2718 = $2715 + 4 | 0;
           $2719 = HEAP32[$2718 >> 2] | 0;
           if ($2717 >>> 0 < $2719 >>> 0) {
            $2733 = $2717;
            $2732 = $2719;
           } else {
            $2723 = HEAP32[$2715 + 8 >> 2] | 0;
            $_pre2_i_i_i825 = $2715 + 1056 | 0;
            if (($2723 | 0) == -1) {
             $len_0_i_i_i827 = 0;
            } else {
             $2726 = _read($2723 | 0, $_pre2_i_i_i825 | 0, 8192) | 0;
             $len_0_i_i_i827 = ($2726 | 0) < 0 ? 0 : $2726;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i827;
            HEAP32[$2716 >> 2] = $_pre2_i_i_i825;
            $2730 = $2715 + 1056 + $len_0_i_i_i827 | 0;
            HEAP32[$2718 >> 2] = $2730;
            HEAP8[$2730] = 92;
            $2733 = HEAP32[$2716 >> 2] | 0;
            $2732 = HEAP32[$2718 >> 2] | 0;
           }
           if ($2733 >>> 0 < $2732 >>> 0) {
            $_0_i_i_i831 = HEAPU8[$2733] | 0;
           } else {
            HEAP32[$2716 >> 2] = $2732;
            $_0_i_i_i831 = -1;
           }
           HEAP32[13924] = $_0_i_i_i831;
           $2739 = $_0_i_i_i831;
          } else {
           $2739 = $2712;
          }
          if (($2739 | 0) != 10) {
           break L695;
          }
          $2743 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$2743 >> 2] = (HEAP32[$2743 >> 2] | 0) + 1;
          $2747 = HEAP32[13912] | 0;
          $2749 = (HEAP32[$2747 >> 2] | 0) + 1 | 0;
          HEAP32[$2747 >> 2] = $2749;
          $2750 = HEAP8[$2749] | 0;
          $2751 = $2750 & 255;
          HEAP32[13924] = $2751;
          if ($2750 << 24 >> 24 != 92) {
           $2778 = $2751;
           break;
          }
          $2754 = HEAP32[13912] | 0;
          $2755 = $2754 | 0;
          $2756 = HEAP32[$2755 >> 2] | 0;
          $2757 = $2754 + 4 | 0;
          $2758 = HEAP32[$2757 >> 2] | 0;
          if ($2756 >>> 0 < $2758 >>> 0) {
           $2772 = $2756;
           $2771 = $2758;
          } else {
           $2762 = HEAP32[$2754 + 8 >> 2] | 0;
           $_pre2_i_i_i834 = $2754 + 1056 | 0;
           if (($2762 | 0) == -1) {
            $len_0_i_i_i836 = 0;
           } else {
            $2765 = _read($2762 | 0, $_pre2_i_i_i834 | 0, 8192) | 0;
            $len_0_i_i_i836 = ($2765 | 0) < 0 ? 0 : $2765;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i836;
           HEAP32[$2755 >> 2] = $_pre2_i_i_i834;
           $2769 = $2754 + 1056 + $len_0_i_i_i836 | 0;
           HEAP32[$2757 >> 2] = $2769;
           HEAP8[$2769] = 92;
           $2772 = HEAP32[$2755 >> 2] | 0;
           $2771 = HEAP32[$2757 >> 2] | 0;
          }
          if ($2772 >>> 0 < $2771 >>> 0) {
           $_0_i_i_i840 = HEAPU8[$2772] | 0;
          } else {
           HEAP32[$2755 >> 2] = $2771;
           $_0_i_i_i840 = -1;
          }
          HEAP32[13924] = $_0_i_i_i840;
          $2778 = $_0_i_i_i840;
         } else {
          break L695;
         }
        } while (0);
        if (($2778 | 0) != 92) {
         break L694;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $2783 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_10_in = HEAP8[$2783] | 0;
     $p_15 = $2783;
     label = 799;
    } else {
     $c_10_in = $2596;
     $p_15 = $2595;
     label = 799;
    }
   } while (0);
   do {
    if ((label | 0) == 799) {
     $c_10 = $c_10_in & 255;
     if (($c_10 | 0) == 61) {
      HEAP32[5310] = 157;
      $p_27 = $p_15 + 1 | 0;
      break L190;
     } else if (($c_10 | 0) != 62) {
      $p_151545 = $p_15;
      break;
     }
     $2788 = $p_15 + 1 | 0;
     $2789 = HEAP8[$2788] | 0;
     L757 : do {
      if ($2789 << 24 >> 24 == 92) {
       $2792 = HEAP32[13912] | 0;
       do {
        if ((HEAP32[$2792 + 4 >> 2] | 0) >>> 0 > $2788 >>> 0) {
         $_0_i52 = $2788;
         $2824 = $2792;
        } else {
         HEAP32[$2792 >> 2] = $2788;
         $2798 = HEAP32[13912] | 0;
         $2799 = $2798 | 0;
         $2800 = HEAP32[$2799 >> 2] | 0;
         $2801 = $2798 + 4 | 0;
         $2802 = HEAP32[$2801 >> 2] | 0;
         if ($2800 >>> 0 < $2802 >>> 0) {
          $2816 = $2800;
          $2815 = $2802;
         } else {
          $2806 = HEAP32[$2798 + 8 >> 2] | 0;
          $_pre2_i_i270 = $2798 + 1056 | 0;
          if (($2806 | 0) == -1) {
           $len_0_i_i272 = 0;
          } else {
           $2809 = _read($2806 | 0, $_pre2_i_i270 | 0, 8192) | 0;
           $len_0_i_i272 = ($2809 | 0) < 0 ? 0 : $2809;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i272;
          HEAP32[$2799 >> 2] = $_pre2_i_i270;
          $2813 = $2798 + 1056 + $len_0_i_i272 | 0;
          HEAP32[$2801 >> 2] = $2813;
          HEAP8[$2813] = 92;
          $2816 = HEAP32[$2799 >> 2] | 0;
          $2815 = HEAP32[$2801 >> 2] | 0;
         }
         if ($2816 >>> 0 < $2815 >>> 0) {
          $2818 = HEAP8[$2816] | 0;
          $2819 = HEAP32[13912] | 0;
          $2821 = HEAP32[$2819 >> 2] | 0;
          if ($2818 << 24 >> 24 == 92) {
           $_0_i52 = $2821;
           $2824 = $2819;
           break;
          } else {
           $c_11_in = $2818;
           $p_16 = $2821;
           label = 852;
           break L757;
          }
         } else {
          HEAP32[$2799 >> 2] = $2815;
          $p_161546 = HEAP32[HEAP32[13912] >> 2] | 0;
          break L757;
         }
        }
       } while (0);
       HEAP32[$2824 >> 2] = $_0_i52;
       $2826 = HEAP8[$_0_i52] | 0;
       HEAP32[13924] = $2826 & 255;
       L771 : do {
        if ($2826 << 24 >> 24 == 92) {
         L772 : while (1) {
          $2830 = HEAP32[13912] | 0;
          $2832 = (HEAP32[$2830 >> 2] | 0) + 1 | 0;
          HEAP32[$2830 >> 2] = $2832;
          $2833 = HEAP8[$2832] | 0;
          $2834 = $2833 & 255;
          HEAP32[13924] = $2834;
          if ($2833 << 24 >> 24 == 92) {
           $2837 = HEAP32[13912] | 0;
           $2838 = $2837 | 0;
           $2839 = HEAP32[$2838 >> 2] | 0;
           $2840 = $2837 + 4 | 0;
           $2841 = HEAP32[$2840 >> 2] | 0;
           if ($2839 >>> 0 < $2841 >>> 0) {
            $2855 = $2839;
            $2854 = $2841;
           } else {
            $2845 = HEAP32[$2837 + 8 >> 2] | 0;
            $_pre2_i_i_i771 = $2837 + 1056 | 0;
            if (($2845 | 0) == -1) {
             $len_0_i_i_i773 = 0;
            } else {
             $2848 = _read($2845 | 0, $_pre2_i_i_i771 | 0, 8192) | 0;
             $len_0_i_i_i773 = ($2848 | 0) < 0 ? 0 : $2848;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i773;
            HEAP32[$2838 >> 2] = $_pre2_i_i_i771;
            $2852 = $2837 + 1056 + $len_0_i_i_i773 | 0;
            HEAP32[$2840 >> 2] = $2852;
            HEAP8[$2852] = 92;
            $2855 = HEAP32[$2838 >> 2] | 0;
            $2854 = HEAP32[$2840 >> 2] | 0;
           }
           if ($2855 >>> 0 < $2854 >>> 0) {
            $_0_i_i_i777 = HEAPU8[$2855] | 0;
           } else {
            HEAP32[$2838 >> 2] = $2854;
            $_0_i_i_i777 = -1;
           }
           HEAP32[13924] = $_0_i_i_i777;
           $2861 = $_0_i_i_i777;
          } else {
           $2861 = $2834;
          }
          do {
           if (($2861 | 0) == 10) {
            $2864 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$2864 >> 2] = (HEAP32[$2864 >> 2] | 0) + 1;
            $2868 = HEAP32[13912] | 0;
            $2870 = (HEAP32[$2868 >> 2] | 0) + 1 | 0;
            HEAP32[$2868 >> 2] = $2870;
            $2871 = HEAP8[$2870] | 0;
            $2872 = $2871 & 255;
            HEAP32[13924] = $2872;
            if ($2871 << 24 >> 24 != 92) {
             $2971 = $2872;
             break;
            }
            $2875 = HEAP32[13912] | 0;
            $2876 = $2875 | 0;
            $2877 = HEAP32[$2876 >> 2] | 0;
            $2878 = $2875 + 4 | 0;
            $2879 = HEAP32[$2878 >> 2] | 0;
            if ($2877 >>> 0 < $2879 >>> 0) {
             $2893 = $2877;
             $2892 = $2879;
            } else {
             $2883 = HEAP32[$2875 + 8 >> 2] | 0;
             $_pre2_i_i_i780 = $2875 + 1056 | 0;
             if (($2883 | 0) == -1) {
              $len_0_i_i_i782 = 0;
             } else {
              $2886 = _read($2883 | 0, $_pre2_i_i_i780 | 0, 8192) | 0;
              $len_0_i_i_i782 = ($2886 | 0) < 0 ? 0 : $2886;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i782;
             HEAP32[$2876 >> 2] = $_pre2_i_i_i780;
             $2890 = $2875 + 1056 + $len_0_i_i_i782 | 0;
             HEAP32[$2878 >> 2] = $2890;
             HEAP8[$2890] = 92;
             $2893 = HEAP32[$2876 >> 2] | 0;
             $2892 = HEAP32[$2878 >> 2] | 0;
            }
            if ($2893 >>> 0 < $2892 >>> 0) {
             $_0_i_i_i786 = HEAPU8[$2893] | 0;
            } else {
             HEAP32[$2876 >> 2] = $2892;
             $_0_i_i_i786 = -1;
            }
            HEAP32[13924] = $_0_i_i_i786;
            $2971 = $_0_i_i_i786;
           } else if (($2861 | 0) == 13) {
            $2901 = HEAP32[13912] | 0;
            $2903 = (HEAP32[$2901 >> 2] | 0) + 1 | 0;
            HEAP32[$2901 >> 2] = $2903;
            $2904 = HEAP8[$2903] | 0;
            $2905 = $2904 & 255;
            HEAP32[13924] = $2905;
            if ($2904 << 24 >> 24 == 92) {
             $2908 = HEAP32[13912] | 0;
             $2909 = $2908 | 0;
             $2910 = HEAP32[$2909 >> 2] | 0;
             $2911 = $2908 + 4 | 0;
             $2912 = HEAP32[$2911 >> 2] | 0;
             if ($2910 >>> 0 < $2912 >>> 0) {
              $2926 = $2910;
              $2925 = $2912;
             } else {
              $2916 = HEAP32[$2908 + 8 >> 2] | 0;
              $_pre2_i_i_i789 = $2908 + 1056 | 0;
              if (($2916 | 0) == -1) {
               $len_0_i_i_i791 = 0;
              } else {
               $2919 = _read($2916 | 0, $_pre2_i_i_i789 | 0, 8192) | 0;
               $len_0_i_i_i791 = ($2919 | 0) < 0 ? 0 : $2919;
              }
              HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i791;
              HEAP32[$2909 >> 2] = $_pre2_i_i_i789;
              $2923 = $2908 + 1056 + $len_0_i_i_i791 | 0;
              HEAP32[$2911 >> 2] = $2923;
              HEAP8[$2923] = 92;
              $2926 = HEAP32[$2909 >> 2] | 0;
              $2925 = HEAP32[$2911 >> 2] | 0;
             }
             if ($2926 >>> 0 < $2925 >>> 0) {
              $_0_i_i_i795 = HEAPU8[$2926] | 0;
             } else {
              HEAP32[$2909 >> 2] = $2925;
              $_0_i_i_i795 = -1;
             }
             HEAP32[13924] = $_0_i_i_i795;
             $2932 = $_0_i_i_i795;
            } else {
             $2932 = $2905;
            }
            if (($2932 | 0) != 10) {
             break L772;
            }
            $2936 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$2936 >> 2] = (HEAP32[$2936 >> 2] | 0) + 1;
            $2940 = HEAP32[13912] | 0;
            $2942 = (HEAP32[$2940 >> 2] | 0) + 1 | 0;
            HEAP32[$2940 >> 2] = $2942;
            $2943 = HEAP8[$2942] | 0;
            $2944 = $2943 & 255;
            HEAP32[13924] = $2944;
            if ($2943 << 24 >> 24 != 92) {
             $2971 = $2944;
             break;
            }
            $2947 = HEAP32[13912] | 0;
            $2948 = $2947 | 0;
            $2949 = HEAP32[$2948 >> 2] | 0;
            $2950 = $2947 + 4 | 0;
            $2951 = HEAP32[$2950 >> 2] | 0;
            if ($2949 >>> 0 < $2951 >>> 0) {
             $2965 = $2949;
             $2964 = $2951;
            } else {
             $2955 = HEAP32[$2947 + 8 >> 2] | 0;
             $_pre2_i_i_i798 = $2947 + 1056 | 0;
             if (($2955 | 0) == -1) {
              $len_0_i_i_i800 = 0;
             } else {
              $2958 = _read($2955 | 0, $_pre2_i_i_i798 | 0, 8192) | 0;
              $len_0_i_i_i800 = ($2958 | 0) < 0 ? 0 : $2958;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i800;
             HEAP32[$2948 >> 2] = $_pre2_i_i_i798;
             $2962 = $2947 + 1056 + $len_0_i_i_i800 | 0;
             HEAP32[$2950 >> 2] = $2962;
             HEAP8[$2962] = 92;
             $2965 = HEAP32[$2948 >> 2] | 0;
             $2964 = HEAP32[$2950 >> 2] | 0;
            }
            if ($2965 >>> 0 < $2964 >>> 0) {
             $_0_i_i_i804 = HEAPU8[$2965] | 0;
            } else {
             HEAP32[$2948 >> 2] = $2964;
             $_0_i_i_i804 = -1;
            }
            HEAP32[13924] = $_0_i_i_i804;
            $2971 = $_0_i_i_i804;
           } else {
            break L772;
           }
          } while (0);
          if (($2971 | 0) != 92) {
           break L771;
          }
         }
         _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
       } while (0);
       $2976 = HEAP32[HEAP32[13912] >> 2] | 0;
       $c_11_in = HEAP8[$2976] | 0;
       $p_16 = $2976;
       label = 852;
      } else {
       $c_11_in = $2789;
       $p_16 = $2788;
       label = 852;
      }
     } while (0);
     do {
      if ((label | 0) == 852) {
       if ($c_11_in << 24 >> 24 != 61) {
        $p_161546 = $p_16;
        break;
       }
       HEAP32[5310] = 130;
       $p_27 = $p_16 + 1 | 0;
       break L190;
      }
     } while (0);
     HEAP32[5310] = 2;
     $p_27 = $p_161546;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 159;
   $p_27 = $p_151545;
  } else if ((label | 0) == 856) {
   $2984 = $p_0 + 1 | 0;
   $2985 = HEAP8[$2984] | 0;
   L835 : do {
    if ($2985 << 24 >> 24 == 92) {
     $2988 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$2988 + 4 >> 2] | 0) >>> 0 > $2984 >>> 0) {
       $_0_i48 = $2984;
       $3020 = $2988;
      } else {
       HEAP32[$2988 >> 2] = $2984;
       $2994 = HEAP32[13912] | 0;
       $2995 = $2994 | 0;
       $2996 = HEAP32[$2995 >> 2] | 0;
       $2997 = $2994 + 4 | 0;
       $2998 = HEAP32[$2997 >> 2] | 0;
       if ($2996 >>> 0 < $2998 >>> 0) {
        $3012 = $2996;
        $3011 = $2998;
       } else {
        $3002 = HEAP32[$2994 + 8 >> 2] | 0;
        $_pre2_i_i258 = $2994 + 1056 | 0;
        if (($3002 | 0) == -1) {
         $len_0_i_i260 = 0;
        } else {
         $3005 = _read($3002 | 0, $_pre2_i_i258 | 0, 8192) | 0;
         $len_0_i_i260 = ($3005 | 0) < 0 ? 0 : $3005;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i260;
        HEAP32[$2995 >> 2] = $_pre2_i_i258;
        $3009 = $2994 + 1056 + $len_0_i_i260 | 0;
        HEAP32[$2997 >> 2] = $3009;
        HEAP8[$3009] = 92;
        $3012 = HEAP32[$2995 >> 2] | 0;
        $3011 = HEAP32[$2997 >> 2] | 0;
       }
       if ($3012 >>> 0 < $3011 >>> 0) {
        $3014 = HEAP8[$3012] | 0;
        $3015 = HEAP32[13912] | 0;
        $3017 = HEAP32[$3015 >> 2] | 0;
        if ($3014 << 24 >> 24 == 92) {
         $_0_i48 = $3017;
         $3020 = $3015;
         break;
        } else {
         $c_12_in = $3014;
         $p_17 = $3017;
         label = 907;
         break L835;
        }
       } else {
        HEAP32[$2995 >> 2] = $3011;
        $p_171547 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L835;
       }
      }
     } while (0);
     HEAP32[$3020 >> 2] = $_0_i48;
     $3022 = HEAP8[$_0_i48] | 0;
     HEAP32[13924] = $3022 & 255;
     L849 : do {
      if ($3022 << 24 >> 24 == 92) {
       L850 : while (1) {
        $3026 = HEAP32[13912] | 0;
        $3028 = (HEAP32[$3026 >> 2] | 0) + 1 | 0;
        HEAP32[$3026 >> 2] = $3028;
        $3029 = HEAP8[$3028] | 0;
        $3030 = $3029 & 255;
        HEAP32[13924] = $3030;
        if ($3029 << 24 >> 24 == 92) {
         $3033 = HEAP32[13912] | 0;
         $3034 = $3033 | 0;
         $3035 = HEAP32[$3034 >> 2] | 0;
         $3036 = $3033 + 4 | 0;
         $3037 = HEAP32[$3036 >> 2] | 0;
         if ($3035 >>> 0 < $3037 >>> 0) {
          $3051 = $3035;
          $3050 = $3037;
         } else {
          $3041 = HEAP32[$3033 + 8 >> 2] | 0;
          $_pre2_i_i_i735 = $3033 + 1056 | 0;
          if (($3041 | 0) == -1) {
           $len_0_i_i_i737 = 0;
          } else {
           $3044 = _read($3041 | 0, $_pre2_i_i_i735 | 0, 8192) | 0;
           $len_0_i_i_i737 = ($3044 | 0) < 0 ? 0 : $3044;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i737;
          HEAP32[$3034 >> 2] = $_pre2_i_i_i735;
          $3048 = $3033 + 1056 + $len_0_i_i_i737 | 0;
          HEAP32[$3036 >> 2] = $3048;
          HEAP8[$3048] = 92;
          $3051 = HEAP32[$3034 >> 2] | 0;
          $3050 = HEAP32[$3036 >> 2] | 0;
         }
         if ($3051 >>> 0 < $3050 >>> 0) {
          $_0_i_i_i741 = HEAPU8[$3051] | 0;
         } else {
          HEAP32[$3034 >> 2] = $3050;
          $_0_i_i_i741 = -1;
         }
         HEAP32[13924] = $_0_i_i_i741;
         $3057 = $_0_i_i_i741;
        } else {
         $3057 = $3030;
        }
        do {
         if (($3057 | 0) == 10) {
          $3060 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3060 >> 2] = (HEAP32[$3060 >> 2] | 0) + 1;
          $3064 = HEAP32[13912] | 0;
          $3066 = (HEAP32[$3064 >> 2] | 0) + 1 | 0;
          HEAP32[$3064 >> 2] = $3066;
          $3067 = HEAP8[$3066] | 0;
          $3068 = $3067 & 255;
          HEAP32[13924] = $3068;
          if ($3067 << 24 >> 24 != 92) {
           $3167 = $3068;
           break;
          }
          $3071 = HEAP32[13912] | 0;
          $3072 = $3071 | 0;
          $3073 = HEAP32[$3072 >> 2] | 0;
          $3074 = $3071 + 4 | 0;
          $3075 = HEAP32[$3074 >> 2] | 0;
          if ($3073 >>> 0 < $3075 >>> 0) {
           $3089 = $3073;
           $3088 = $3075;
          } else {
           $3079 = HEAP32[$3071 + 8 >> 2] | 0;
           $_pre2_i_i_i744 = $3071 + 1056 | 0;
           if (($3079 | 0) == -1) {
            $len_0_i_i_i746 = 0;
           } else {
            $3082 = _read($3079 | 0, $_pre2_i_i_i744 | 0, 8192) | 0;
            $len_0_i_i_i746 = ($3082 | 0) < 0 ? 0 : $3082;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i746;
           HEAP32[$3072 >> 2] = $_pre2_i_i_i744;
           $3086 = $3071 + 1056 + $len_0_i_i_i746 | 0;
           HEAP32[$3074 >> 2] = $3086;
           HEAP8[$3086] = 92;
           $3089 = HEAP32[$3072 >> 2] | 0;
           $3088 = HEAP32[$3074 >> 2] | 0;
          }
          if ($3089 >>> 0 < $3088 >>> 0) {
           $_0_i_i_i750 = HEAPU8[$3089] | 0;
          } else {
           HEAP32[$3072 >> 2] = $3088;
           $_0_i_i_i750 = -1;
          }
          HEAP32[13924] = $_0_i_i_i750;
          $3167 = $_0_i_i_i750;
         } else if (($3057 | 0) == 13) {
          $3097 = HEAP32[13912] | 0;
          $3099 = (HEAP32[$3097 >> 2] | 0) + 1 | 0;
          HEAP32[$3097 >> 2] = $3099;
          $3100 = HEAP8[$3099] | 0;
          $3101 = $3100 & 255;
          HEAP32[13924] = $3101;
          if ($3100 << 24 >> 24 == 92) {
           $3104 = HEAP32[13912] | 0;
           $3105 = $3104 | 0;
           $3106 = HEAP32[$3105 >> 2] | 0;
           $3107 = $3104 + 4 | 0;
           $3108 = HEAP32[$3107 >> 2] | 0;
           if ($3106 >>> 0 < $3108 >>> 0) {
            $3122 = $3106;
            $3121 = $3108;
           } else {
            $3112 = HEAP32[$3104 + 8 >> 2] | 0;
            $_pre2_i_i_i753 = $3104 + 1056 | 0;
            if (($3112 | 0) == -1) {
             $len_0_i_i_i755 = 0;
            } else {
             $3115 = _read($3112 | 0, $_pre2_i_i_i753 | 0, 8192) | 0;
             $len_0_i_i_i755 = ($3115 | 0) < 0 ? 0 : $3115;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i755;
            HEAP32[$3105 >> 2] = $_pre2_i_i_i753;
            $3119 = $3104 + 1056 + $len_0_i_i_i755 | 0;
            HEAP32[$3107 >> 2] = $3119;
            HEAP8[$3119] = 92;
            $3122 = HEAP32[$3105 >> 2] | 0;
            $3121 = HEAP32[$3107 >> 2] | 0;
           }
           if ($3122 >>> 0 < $3121 >>> 0) {
            $_0_i_i_i759 = HEAPU8[$3122] | 0;
           } else {
            HEAP32[$3105 >> 2] = $3121;
            $_0_i_i_i759 = -1;
           }
           HEAP32[13924] = $_0_i_i_i759;
           $3128 = $_0_i_i_i759;
          } else {
           $3128 = $3101;
          }
          if (($3128 | 0) != 10) {
           break L850;
          }
          $3132 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3132 >> 2] = (HEAP32[$3132 >> 2] | 0) + 1;
          $3136 = HEAP32[13912] | 0;
          $3138 = (HEAP32[$3136 >> 2] | 0) + 1 | 0;
          HEAP32[$3136 >> 2] = $3138;
          $3139 = HEAP8[$3138] | 0;
          $3140 = $3139 & 255;
          HEAP32[13924] = $3140;
          if ($3139 << 24 >> 24 != 92) {
           $3167 = $3140;
           break;
          }
          $3143 = HEAP32[13912] | 0;
          $3144 = $3143 | 0;
          $3145 = HEAP32[$3144 >> 2] | 0;
          $3146 = $3143 + 4 | 0;
          $3147 = HEAP32[$3146 >> 2] | 0;
          if ($3145 >>> 0 < $3147 >>> 0) {
           $3161 = $3145;
           $3160 = $3147;
          } else {
           $3151 = HEAP32[$3143 + 8 >> 2] | 0;
           $_pre2_i_i_i762 = $3143 + 1056 | 0;
           if (($3151 | 0) == -1) {
            $len_0_i_i_i764 = 0;
           } else {
            $3154 = _read($3151 | 0, $_pre2_i_i_i762 | 0, 8192) | 0;
            $len_0_i_i_i764 = ($3154 | 0) < 0 ? 0 : $3154;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i764;
           HEAP32[$3144 >> 2] = $_pre2_i_i_i762;
           $3158 = $3143 + 1056 + $len_0_i_i_i764 | 0;
           HEAP32[$3146 >> 2] = $3158;
           HEAP8[$3158] = 92;
           $3161 = HEAP32[$3144 >> 2] | 0;
           $3160 = HEAP32[$3146 >> 2] | 0;
          }
          if ($3161 >>> 0 < $3160 >>> 0) {
           $_0_i_i_i768 = HEAPU8[$3161] | 0;
          } else {
           HEAP32[$3144 >> 2] = $3160;
           $_0_i_i_i768 = -1;
          }
          HEAP32[13924] = $_0_i_i_i768;
          $3167 = $_0_i_i_i768;
         } else {
          break L850;
         }
        } while (0);
        if (($3167 | 0) != 92) {
         break L849;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $3172 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_12_in = HEAP8[$3172] | 0;
     $p_17 = $3172;
     label = 907;
    } else {
     $c_12_in = $2985;
     $p_17 = $2984;
     label = 907;
    }
   } while (0);
   do {
    if ((label | 0) == 907) {
     $c_12 = $c_12_in & 255;
     if (($c_12 | 0) == 38) {
      HEAP32[5310] = 160;
      $p_27 = $p_17 + 1 | 0;
      break L190;
     } else if (($c_12 | 0) == 61) {
      HEAP32[5310] = 166;
      $p_27 = $p_17 + 1 | 0;
      break L190;
     } else {
      $p_171547 = $p_17;
      break;
     }
    }
   } while (0);
   HEAP32[5310] = 38;
   $p_27 = $p_171547;
  } else if ((label | 0) == 911) {
   $3180 = $p_0 + 1 | 0;
   $3181 = HEAP8[$3180] | 0;
   L914 : do {
    if ($3181 << 24 >> 24 == 92) {
     $3184 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$3184 + 4 >> 2] | 0) >>> 0 > $3180 >>> 0) {
       $_0_i44 = $3180;
       $3216 = $3184;
      } else {
       HEAP32[$3184 >> 2] = $3180;
       $3190 = HEAP32[13912] | 0;
       $3191 = $3190 | 0;
       $3192 = HEAP32[$3191 >> 2] | 0;
       $3193 = $3190 + 4 | 0;
       $3194 = HEAP32[$3193 >> 2] | 0;
       if ($3192 >>> 0 < $3194 >>> 0) {
        $3208 = $3192;
        $3207 = $3194;
       } else {
        $3198 = HEAP32[$3190 + 8 >> 2] | 0;
        $_pre2_i_i246 = $3190 + 1056 | 0;
        if (($3198 | 0) == -1) {
         $len_0_i_i248 = 0;
        } else {
         $3201 = _read($3198 | 0, $_pre2_i_i246 | 0, 8192) | 0;
         $len_0_i_i248 = ($3201 | 0) < 0 ? 0 : $3201;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i248;
        HEAP32[$3191 >> 2] = $_pre2_i_i246;
        $3205 = $3190 + 1056 + $len_0_i_i248 | 0;
        HEAP32[$3193 >> 2] = $3205;
        HEAP8[$3205] = 92;
        $3208 = HEAP32[$3191 >> 2] | 0;
        $3207 = HEAP32[$3193 >> 2] | 0;
       }
       if ($3208 >>> 0 < $3207 >>> 0) {
        $3210 = HEAP8[$3208] | 0;
        $3211 = HEAP32[13912] | 0;
        $3213 = HEAP32[$3211 >> 2] | 0;
        if ($3210 << 24 >> 24 == 92) {
         $_0_i44 = $3213;
         $3216 = $3211;
         break;
        } else {
         $c_13_in = $3210;
         $p_18 = $3213;
         label = 962;
         break L914;
        }
       } else {
        HEAP32[$3191 >> 2] = $3207;
        $p_181548 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L914;
       }
      }
     } while (0);
     HEAP32[$3216 >> 2] = $_0_i44;
     $3218 = HEAP8[$_0_i44] | 0;
     HEAP32[13924] = $3218 & 255;
     L928 : do {
      if ($3218 << 24 >> 24 == 92) {
       L929 : while (1) {
        $3222 = HEAP32[13912] | 0;
        $3224 = (HEAP32[$3222 >> 2] | 0) + 1 | 0;
        HEAP32[$3222 >> 2] = $3224;
        $3225 = HEAP8[$3224] | 0;
        $3226 = $3225 & 255;
        HEAP32[13924] = $3226;
        if ($3225 << 24 >> 24 == 92) {
         $3229 = HEAP32[13912] | 0;
         $3230 = $3229 | 0;
         $3231 = HEAP32[$3230 >> 2] | 0;
         $3232 = $3229 + 4 | 0;
         $3233 = HEAP32[$3232 >> 2] | 0;
         if ($3231 >>> 0 < $3233 >>> 0) {
          $3247 = $3231;
          $3246 = $3233;
         } else {
          $3237 = HEAP32[$3229 + 8 >> 2] | 0;
          $_pre2_i_i_i699 = $3229 + 1056 | 0;
          if (($3237 | 0) == -1) {
           $len_0_i_i_i701 = 0;
          } else {
           $3240 = _read($3237 | 0, $_pre2_i_i_i699 | 0, 8192) | 0;
           $len_0_i_i_i701 = ($3240 | 0) < 0 ? 0 : $3240;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i701;
          HEAP32[$3230 >> 2] = $_pre2_i_i_i699;
          $3244 = $3229 + 1056 + $len_0_i_i_i701 | 0;
          HEAP32[$3232 >> 2] = $3244;
          HEAP8[$3244] = 92;
          $3247 = HEAP32[$3230 >> 2] | 0;
          $3246 = HEAP32[$3232 >> 2] | 0;
         }
         if ($3247 >>> 0 < $3246 >>> 0) {
          $_0_i_i_i705 = HEAPU8[$3247] | 0;
         } else {
          HEAP32[$3230 >> 2] = $3246;
          $_0_i_i_i705 = -1;
         }
         HEAP32[13924] = $_0_i_i_i705;
         $3253 = $_0_i_i_i705;
        } else {
         $3253 = $3226;
        }
        do {
         if (($3253 | 0) == 10) {
          $3256 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3256 >> 2] = (HEAP32[$3256 >> 2] | 0) + 1;
          $3260 = HEAP32[13912] | 0;
          $3262 = (HEAP32[$3260 >> 2] | 0) + 1 | 0;
          HEAP32[$3260 >> 2] = $3262;
          $3263 = HEAP8[$3262] | 0;
          $3264 = $3263 & 255;
          HEAP32[13924] = $3264;
          if ($3263 << 24 >> 24 != 92) {
           $3363 = $3264;
           break;
          }
          $3267 = HEAP32[13912] | 0;
          $3268 = $3267 | 0;
          $3269 = HEAP32[$3268 >> 2] | 0;
          $3270 = $3267 + 4 | 0;
          $3271 = HEAP32[$3270 >> 2] | 0;
          if ($3269 >>> 0 < $3271 >>> 0) {
           $3285 = $3269;
           $3284 = $3271;
          } else {
           $3275 = HEAP32[$3267 + 8 >> 2] | 0;
           $_pre2_i_i_i708 = $3267 + 1056 | 0;
           if (($3275 | 0) == -1) {
            $len_0_i_i_i710 = 0;
           } else {
            $3278 = _read($3275 | 0, $_pre2_i_i_i708 | 0, 8192) | 0;
            $len_0_i_i_i710 = ($3278 | 0) < 0 ? 0 : $3278;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i710;
           HEAP32[$3268 >> 2] = $_pre2_i_i_i708;
           $3282 = $3267 + 1056 + $len_0_i_i_i710 | 0;
           HEAP32[$3270 >> 2] = $3282;
           HEAP8[$3282] = 92;
           $3285 = HEAP32[$3268 >> 2] | 0;
           $3284 = HEAP32[$3270 >> 2] | 0;
          }
          if ($3285 >>> 0 < $3284 >>> 0) {
           $_0_i_i_i714 = HEAPU8[$3285] | 0;
          } else {
           HEAP32[$3268 >> 2] = $3284;
           $_0_i_i_i714 = -1;
          }
          HEAP32[13924] = $_0_i_i_i714;
          $3363 = $_0_i_i_i714;
         } else if (($3253 | 0) == 13) {
          $3293 = HEAP32[13912] | 0;
          $3295 = (HEAP32[$3293 >> 2] | 0) + 1 | 0;
          HEAP32[$3293 >> 2] = $3295;
          $3296 = HEAP8[$3295] | 0;
          $3297 = $3296 & 255;
          HEAP32[13924] = $3297;
          if ($3296 << 24 >> 24 == 92) {
           $3300 = HEAP32[13912] | 0;
           $3301 = $3300 | 0;
           $3302 = HEAP32[$3301 >> 2] | 0;
           $3303 = $3300 + 4 | 0;
           $3304 = HEAP32[$3303 >> 2] | 0;
           if ($3302 >>> 0 < $3304 >>> 0) {
            $3318 = $3302;
            $3317 = $3304;
           } else {
            $3308 = HEAP32[$3300 + 8 >> 2] | 0;
            $_pre2_i_i_i717 = $3300 + 1056 | 0;
            if (($3308 | 0) == -1) {
             $len_0_i_i_i719 = 0;
            } else {
             $3311 = _read($3308 | 0, $_pre2_i_i_i717 | 0, 8192) | 0;
             $len_0_i_i_i719 = ($3311 | 0) < 0 ? 0 : $3311;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i719;
            HEAP32[$3301 >> 2] = $_pre2_i_i_i717;
            $3315 = $3300 + 1056 + $len_0_i_i_i719 | 0;
            HEAP32[$3303 >> 2] = $3315;
            HEAP8[$3315] = 92;
            $3318 = HEAP32[$3301 >> 2] | 0;
            $3317 = HEAP32[$3303 >> 2] | 0;
           }
           if ($3318 >>> 0 < $3317 >>> 0) {
            $_0_i_i_i723 = HEAPU8[$3318] | 0;
           } else {
            HEAP32[$3301 >> 2] = $3317;
            $_0_i_i_i723 = -1;
           }
           HEAP32[13924] = $_0_i_i_i723;
           $3324 = $_0_i_i_i723;
          } else {
           $3324 = $3297;
          }
          if (($3324 | 0) != 10) {
           break L929;
          }
          $3328 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3328 >> 2] = (HEAP32[$3328 >> 2] | 0) + 1;
          $3332 = HEAP32[13912] | 0;
          $3334 = (HEAP32[$3332 >> 2] | 0) + 1 | 0;
          HEAP32[$3332 >> 2] = $3334;
          $3335 = HEAP8[$3334] | 0;
          $3336 = $3335 & 255;
          HEAP32[13924] = $3336;
          if ($3335 << 24 >> 24 != 92) {
           $3363 = $3336;
           break;
          }
          $3339 = HEAP32[13912] | 0;
          $3340 = $3339 | 0;
          $3341 = HEAP32[$3340 >> 2] | 0;
          $3342 = $3339 + 4 | 0;
          $3343 = HEAP32[$3342 >> 2] | 0;
          if ($3341 >>> 0 < $3343 >>> 0) {
           $3357 = $3341;
           $3356 = $3343;
          } else {
           $3347 = HEAP32[$3339 + 8 >> 2] | 0;
           $_pre2_i_i_i726 = $3339 + 1056 | 0;
           if (($3347 | 0) == -1) {
            $len_0_i_i_i728 = 0;
           } else {
            $3350 = _read($3347 | 0, $_pre2_i_i_i726 | 0, 8192) | 0;
            $len_0_i_i_i728 = ($3350 | 0) < 0 ? 0 : $3350;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i728;
           HEAP32[$3340 >> 2] = $_pre2_i_i_i726;
           $3354 = $3339 + 1056 + $len_0_i_i_i728 | 0;
           HEAP32[$3342 >> 2] = $3354;
           HEAP8[$3354] = 92;
           $3357 = HEAP32[$3340 >> 2] | 0;
           $3356 = HEAP32[$3342 >> 2] | 0;
          }
          if ($3357 >>> 0 < $3356 >>> 0) {
           $_0_i_i_i732 = HEAPU8[$3357] | 0;
          } else {
           HEAP32[$3340 >> 2] = $3356;
           $_0_i_i_i732 = -1;
          }
          HEAP32[13924] = $_0_i_i_i732;
          $3363 = $_0_i_i_i732;
         } else {
          break L929;
         }
        } while (0);
        if (($3363 | 0) != 92) {
         break L928;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $3368 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_13_in = HEAP8[$3368] | 0;
     $p_18 = $3368;
     label = 962;
    } else {
     $c_13_in = $3181;
     $p_18 = $3180;
     label = 962;
    }
   } while (0);
   do {
    if ((label | 0) == 962) {
     $c_13 = $c_13_in & 255;
     if (($c_13 | 0) == 124) {
      HEAP32[5310] = 161;
      $p_27 = $p_18 + 1 | 0;
      break L190;
     } else if (($c_13 | 0) == 61) {
      HEAP32[5310] = 252;
      $p_27 = $p_18 + 1 | 0;
      break L190;
     } else {
      $p_181548 = $p_18;
      break;
     }
    }
   } while (0);
   HEAP32[5310] = 124;
   $p_27 = $p_181548;
  } else if ((label | 0) == 966) {
   $3376 = $p_0 + 1 | 0;
   $3377 = HEAP8[$3376] | 0;
   L993 : do {
    if ($3377 << 24 >> 24 == 92) {
     $3380 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$3380 + 4 >> 2] | 0) >>> 0 > $3376 >>> 0) {
       $_0_i40 = $3376;
       $3412 = $3380;
      } else {
       HEAP32[$3380 >> 2] = $3376;
       $3386 = HEAP32[13912] | 0;
       $3387 = $3386 | 0;
       $3388 = HEAP32[$3387 >> 2] | 0;
       $3389 = $3386 + 4 | 0;
       $3390 = HEAP32[$3389 >> 2] | 0;
       if ($3388 >>> 0 < $3390 >>> 0) {
        $3404 = $3388;
        $3403 = $3390;
       } else {
        $3394 = HEAP32[$3386 + 8 >> 2] | 0;
        $_pre2_i_i234 = $3386 + 1056 | 0;
        if (($3394 | 0) == -1) {
         $len_0_i_i236 = 0;
        } else {
         $3397 = _read($3394 | 0, $_pre2_i_i234 | 0, 8192) | 0;
         $len_0_i_i236 = ($3397 | 0) < 0 ? 0 : $3397;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i236;
        HEAP32[$3387 >> 2] = $_pre2_i_i234;
        $3401 = $3386 + 1056 + $len_0_i_i236 | 0;
        HEAP32[$3389 >> 2] = $3401;
        HEAP8[$3401] = 92;
        $3404 = HEAP32[$3387 >> 2] | 0;
        $3403 = HEAP32[$3389 >> 2] | 0;
       }
       if ($3404 >>> 0 < $3403 >>> 0) {
        $3406 = HEAP8[$3404] | 0;
        $3407 = HEAP32[13912] | 0;
        $3409 = HEAP32[$3407 >> 2] | 0;
        if ($3406 << 24 >> 24 == 92) {
         $_0_i40 = $3409;
         $3412 = $3407;
         break;
        } else {
         $c_14_in = $3406;
         $p_19 = $3409;
         label = 1017;
         break L993;
        }
       } else {
        HEAP32[$3387 >> 2] = $3403;
        $p_191549 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L993;
       }
      }
     } while (0);
     HEAP32[$3412 >> 2] = $_0_i40;
     $3414 = HEAP8[$_0_i40] | 0;
     HEAP32[13924] = $3414 & 255;
     L1007 : do {
      if ($3414 << 24 >> 24 == 92) {
       L1008 : while (1) {
        $3418 = HEAP32[13912] | 0;
        $3420 = (HEAP32[$3418 >> 2] | 0) + 1 | 0;
        HEAP32[$3418 >> 2] = $3420;
        $3421 = HEAP8[$3420] | 0;
        $3422 = $3421 & 255;
        HEAP32[13924] = $3422;
        if ($3421 << 24 >> 24 == 92) {
         $3425 = HEAP32[13912] | 0;
         $3426 = $3425 | 0;
         $3427 = HEAP32[$3426 >> 2] | 0;
         $3428 = $3425 + 4 | 0;
         $3429 = HEAP32[$3428 >> 2] | 0;
         if ($3427 >>> 0 < $3429 >>> 0) {
          $3443 = $3427;
          $3442 = $3429;
         } else {
          $3433 = HEAP32[$3425 + 8 >> 2] | 0;
          $_pre2_i_i_i663 = $3425 + 1056 | 0;
          if (($3433 | 0) == -1) {
           $len_0_i_i_i665 = 0;
          } else {
           $3436 = _read($3433 | 0, $_pre2_i_i_i663 | 0, 8192) | 0;
           $len_0_i_i_i665 = ($3436 | 0) < 0 ? 0 : $3436;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i665;
          HEAP32[$3426 >> 2] = $_pre2_i_i_i663;
          $3440 = $3425 + 1056 + $len_0_i_i_i665 | 0;
          HEAP32[$3428 >> 2] = $3440;
          HEAP8[$3440] = 92;
          $3443 = HEAP32[$3426 >> 2] | 0;
          $3442 = HEAP32[$3428 >> 2] | 0;
         }
         if ($3443 >>> 0 < $3442 >>> 0) {
          $_0_i_i_i669 = HEAPU8[$3443] | 0;
         } else {
          HEAP32[$3426 >> 2] = $3442;
          $_0_i_i_i669 = -1;
         }
         HEAP32[13924] = $_0_i_i_i669;
         $3449 = $_0_i_i_i669;
        } else {
         $3449 = $3422;
        }
        do {
         if (($3449 | 0) == 10) {
          $3452 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3452 >> 2] = (HEAP32[$3452 >> 2] | 0) + 1;
          $3456 = HEAP32[13912] | 0;
          $3458 = (HEAP32[$3456 >> 2] | 0) + 1 | 0;
          HEAP32[$3456 >> 2] = $3458;
          $3459 = HEAP8[$3458] | 0;
          $3460 = $3459 & 255;
          HEAP32[13924] = $3460;
          if ($3459 << 24 >> 24 != 92) {
           $3559 = $3460;
           break;
          }
          $3463 = HEAP32[13912] | 0;
          $3464 = $3463 | 0;
          $3465 = HEAP32[$3464 >> 2] | 0;
          $3466 = $3463 + 4 | 0;
          $3467 = HEAP32[$3466 >> 2] | 0;
          if ($3465 >>> 0 < $3467 >>> 0) {
           $3481 = $3465;
           $3480 = $3467;
          } else {
           $3471 = HEAP32[$3463 + 8 >> 2] | 0;
           $_pre2_i_i_i672 = $3463 + 1056 | 0;
           if (($3471 | 0) == -1) {
            $len_0_i_i_i674 = 0;
           } else {
            $3474 = _read($3471 | 0, $_pre2_i_i_i672 | 0, 8192) | 0;
            $len_0_i_i_i674 = ($3474 | 0) < 0 ? 0 : $3474;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i674;
           HEAP32[$3464 >> 2] = $_pre2_i_i_i672;
           $3478 = $3463 + 1056 + $len_0_i_i_i674 | 0;
           HEAP32[$3466 >> 2] = $3478;
           HEAP8[$3478] = 92;
           $3481 = HEAP32[$3464 >> 2] | 0;
           $3480 = HEAP32[$3466 >> 2] | 0;
          }
          if ($3481 >>> 0 < $3480 >>> 0) {
           $_0_i_i_i678 = HEAPU8[$3481] | 0;
          } else {
           HEAP32[$3464 >> 2] = $3480;
           $_0_i_i_i678 = -1;
          }
          HEAP32[13924] = $_0_i_i_i678;
          $3559 = $_0_i_i_i678;
         } else if (($3449 | 0) == 13) {
          $3489 = HEAP32[13912] | 0;
          $3491 = (HEAP32[$3489 >> 2] | 0) + 1 | 0;
          HEAP32[$3489 >> 2] = $3491;
          $3492 = HEAP8[$3491] | 0;
          $3493 = $3492 & 255;
          HEAP32[13924] = $3493;
          if ($3492 << 24 >> 24 == 92) {
           $3496 = HEAP32[13912] | 0;
           $3497 = $3496 | 0;
           $3498 = HEAP32[$3497 >> 2] | 0;
           $3499 = $3496 + 4 | 0;
           $3500 = HEAP32[$3499 >> 2] | 0;
           if ($3498 >>> 0 < $3500 >>> 0) {
            $3514 = $3498;
            $3513 = $3500;
           } else {
            $3504 = HEAP32[$3496 + 8 >> 2] | 0;
            $_pre2_i_i_i681 = $3496 + 1056 | 0;
            if (($3504 | 0) == -1) {
             $len_0_i_i_i683 = 0;
            } else {
             $3507 = _read($3504 | 0, $_pre2_i_i_i681 | 0, 8192) | 0;
             $len_0_i_i_i683 = ($3507 | 0) < 0 ? 0 : $3507;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i683;
            HEAP32[$3497 >> 2] = $_pre2_i_i_i681;
            $3511 = $3496 + 1056 + $len_0_i_i_i683 | 0;
            HEAP32[$3499 >> 2] = $3511;
            HEAP8[$3511] = 92;
            $3514 = HEAP32[$3497 >> 2] | 0;
            $3513 = HEAP32[$3499 >> 2] | 0;
           }
           if ($3514 >>> 0 < $3513 >>> 0) {
            $_0_i_i_i687 = HEAPU8[$3514] | 0;
           } else {
            HEAP32[$3497 >> 2] = $3513;
            $_0_i_i_i687 = -1;
           }
           HEAP32[13924] = $_0_i_i_i687;
           $3520 = $_0_i_i_i687;
          } else {
           $3520 = $3493;
          }
          if (($3520 | 0) != 10) {
           break L1008;
          }
          $3524 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3524 >> 2] = (HEAP32[$3524 >> 2] | 0) + 1;
          $3528 = HEAP32[13912] | 0;
          $3530 = (HEAP32[$3528 >> 2] | 0) + 1 | 0;
          HEAP32[$3528 >> 2] = $3530;
          $3531 = HEAP8[$3530] | 0;
          $3532 = $3531 & 255;
          HEAP32[13924] = $3532;
          if ($3531 << 24 >> 24 != 92) {
           $3559 = $3532;
           break;
          }
          $3535 = HEAP32[13912] | 0;
          $3536 = $3535 | 0;
          $3537 = HEAP32[$3536 >> 2] | 0;
          $3538 = $3535 + 4 | 0;
          $3539 = HEAP32[$3538 >> 2] | 0;
          if ($3537 >>> 0 < $3539 >>> 0) {
           $3553 = $3537;
           $3552 = $3539;
          } else {
           $3543 = HEAP32[$3535 + 8 >> 2] | 0;
           $_pre2_i_i_i690 = $3535 + 1056 | 0;
           if (($3543 | 0) == -1) {
            $len_0_i_i_i692 = 0;
           } else {
            $3546 = _read($3543 | 0, $_pre2_i_i_i690 | 0, 8192) | 0;
            $len_0_i_i_i692 = ($3546 | 0) < 0 ? 0 : $3546;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i692;
           HEAP32[$3536 >> 2] = $_pre2_i_i_i690;
           $3550 = $3535 + 1056 + $len_0_i_i_i692 | 0;
           HEAP32[$3538 >> 2] = $3550;
           HEAP8[$3550] = 92;
           $3553 = HEAP32[$3536 >> 2] | 0;
           $3552 = HEAP32[$3538 >> 2] | 0;
          }
          if ($3553 >>> 0 < $3552 >>> 0) {
           $_0_i_i_i696 = HEAPU8[$3553] | 0;
          } else {
           HEAP32[$3536 >> 2] = $3552;
           $_0_i_i_i696 = -1;
          }
          HEAP32[13924] = $_0_i_i_i696;
          $3559 = $_0_i_i_i696;
         } else {
          break L1008;
         }
        } while (0);
        if (($3559 | 0) != 92) {
         break L1007;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $3564 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_14_in = HEAP8[$3564] | 0;
     $p_19 = $3564;
     label = 1017;
    } else {
     $c_14_in = $3377;
     $p_19 = $3376;
     label = 1017;
    }
   } while (0);
   do {
    if ((label | 0) == 1017) {
     $c_14 = $c_14_in & 255;
     if (($c_14 | 0) == 43) {
      HEAP32[5310] = 164;
      $p_27 = $p_19 + 1 | 0;
      break L190;
     } else if (($c_14 | 0) == 61) {
      HEAP32[5310] = 171;
      $p_27 = $p_19 + 1 | 0;
      break L190;
     } else {
      $p_191549 = $p_19;
      break;
     }
    }
   } while (0);
   HEAP32[5310] = 43;
   $p_27 = $p_191549;
  } else if ((label | 0) == 1021) {
   $3572 = $p_0 + 1 | 0;
   $3573 = HEAP8[$3572] | 0;
   L1072 : do {
    if ($3573 << 24 >> 24 == 92) {
     $3576 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$3576 + 4 >> 2] | 0) >>> 0 > $3572 >>> 0) {
       $_0_i36 = $3572;
       $3608 = $3576;
      } else {
       HEAP32[$3576 >> 2] = $3572;
       $3582 = HEAP32[13912] | 0;
       $3583 = $3582 | 0;
       $3584 = HEAP32[$3583 >> 2] | 0;
       $3585 = $3582 + 4 | 0;
       $3586 = HEAP32[$3585 >> 2] | 0;
       if ($3584 >>> 0 < $3586 >>> 0) {
        $3600 = $3584;
        $3599 = $3586;
       } else {
        $3590 = HEAP32[$3582 + 8 >> 2] | 0;
        $_pre2_i_i222 = $3582 + 1056 | 0;
        if (($3590 | 0) == -1) {
         $len_0_i_i224 = 0;
        } else {
         $3593 = _read($3590 | 0, $_pre2_i_i222 | 0, 8192) | 0;
         $len_0_i_i224 = ($3593 | 0) < 0 ? 0 : $3593;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i224;
        HEAP32[$3583 >> 2] = $_pre2_i_i222;
        $3597 = $3582 + 1056 + $len_0_i_i224 | 0;
        HEAP32[$3585 >> 2] = $3597;
        HEAP8[$3597] = 92;
        $3600 = HEAP32[$3583 >> 2] | 0;
        $3599 = HEAP32[$3585 >> 2] | 0;
       }
       if ($3600 >>> 0 < $3599 >>> 0) {
        $3602 = HEAP8[$3600] | 0;
        $3603 = HEAP32[13912] | 0;
        $3605 = HEAP32[$3603 >> 2] | 0;
        if ($3602 << 24 >> 24 == 92) {
         $_0_i36 = $3605;
         $3608 = $3603;
         break;
        } else {
         $c_15_in = $3602;
         $p_20 = $3605;
         label = 1072;
         break L1072;
        }
       } else {
        HEAP32[$3583 >> 2] = $3599;
        $p_201550 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L1072;
       }
      }
     } while (0);
     HEAP32[$3608 >> 2] = $_0_i36;
     $3610 = HEAP8[$_0_i36] | 0;
     HEAP32[13924] = $3610 & 255;
     L1086 : do {
      if ($3610 << 24 >> 24 == 92) {
       L1087 : while (1) {
        $3614 = HEAP32[13912] | 0;
        $3616 = (HEAP32[$3614 >> 2] | 0) + 1 | 0;
        HEAP32[$3614 >> 2] = $3616;
        $3617 = HEAP8[$3616] | 0;
        $3618 = $3617 & 255;
        HEAP32[13924] = $3618;
        if ($3617 << 24 >> 24 == 92) {
         $3621 = HEAP32[13912] | 0;
         $3622 = $3621 | 0;
         $3623 = HEAP32[$3622 >> 2] | 0;
         $3624 = $3621 + 4 | 0;
         $3625 = HEAP32[$3624 >> 2] | 0;
         if ($3623 >>> 0 < $3625 >>> 0) {
          $3639 = $3623;
          $3638 = $3625;
         } else {
          $3629 = HEAP32[$3621 + 8 >> 2] | 0;
          $_pre2_i_i_i627 = $3621 + 1056 | 0;
          if (($3629 | 0) == -1) {
           $len_0_i_i_i629 = 0;
          } else {
           $3632 = _read($3629 | 0, $_pre2_i_i_i627 | 0, 8192) | 0;
           $len_0_i_i_i629 = ($3632 | 0) < 0 ? 0 : $3632;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i629;
          HEAP32[$3622 >> 2] = $_pre2_i_i_i627;
          $3636 = $3621 + 1056 + $len_0_i_i_i629 | 0;
          HEAP32[$3624 >> 2] = $3636;
          HEAP8[$3636] = 92;
          $3639 = HEAP32[$3622 >> 2] | 0;
          $3638 = HEAP32[$3624 >> 2] | 0;
         }
         if ($3639 >>> 0 < $3638 >>> 0) {
          $_0_i_i_i633 = HEAPU8[$3639] | 0;
         } else {
          HEAP32[$3622 >> 2] = $3638;
          $_0_i_i_i633 = -1;
         }
         HEAP32[13924] = $_0_i_i_i633;
         $3645 = $_0_i_i_i633;
        } else {
         $3645 = $3618;
        }
        do {
         if (($3645 | 0) == 10) {
          $3648 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3648 >> 2] = (HEAP32[$3648 >> 2] | 0) + 1;
          $3652 = HEAP32[13912] | 0;
          $3654 = (HEAP32[$3652 >> 2] | 0) + 1 | 0;
          HEAP32[$3652 >> 2] = $3654;
          $3655 = HEAP8[$3654] | 0;
          $3656 = $3655 & 255;
          HEAP32[13924] = $3656;
          if ($3655 << 24 >> 24 != 92) {
           $3755 = $3656;
           break;
          }
          $3659 = HEAP32[13912] | 0;
          $3660 = $3659 | 0;
          $3661 = HEAP32[$3660 >> 2] | 0;
          $3662 = $3659 + 4 | 0;
          $3663 = HEAP32[$3662 >> 2] | 0;
          if ($3661 >>> 0 < $3663 >>> 0) {
           $3677 = $3661;
           $3676 = $3663;
          } else {
           $3667 = HEAP32[$3659 + 8 >> 2] | 0;
           $_pre2_i_i_i636 = $3659 + 1056 | 0;
           if (($3667 | 0) == -1) {
            $len_0_i_i_i638 = 0;
           } else {
            $3670 = _read($3667 | 0, $_pre2_i_i_i636 | 0, 8192) | 0;
            $len_0_i_i_i638 = ($3670 | 0) < 0 ? 0 : $3670;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i638;
           HEAP32[$3660 >> 2] = $_pre2_i_i_i636;
           $3674 = $3659 + 1056 + $len_0_i_i_i638 | 0;
           HEAP32[$3662 >> 2] = $3674;
           HEAP8[$3674] = 92;
           $3677 = HEAP32[$3660 >> 2] | 0;
           $3676 = HEAP32[$3662 >> 2] | 0;
          }
          if ($3677 >>> 0 < $3676 >>> 0) {
           $_0_i_i_i642 = HEAPU8[$3677] | 0;
          } else {
           HEAP32[$3660 >> 2] = $3676;
           $_0_i_i_i642 = -1;
          }
          HEAP32[13924] = $_0_i_i_i642;
          $3755 = $_0_i_i_i642;
         } else if (($3645 | 0) == 13) {
          $3685 = HEAP32[13912] | 0;
          $3687 = (HEAP32[$3685 >> 2] | 0) + 1 | 0;
          HEAP32[$3685 >> 2] = $3687;
          $3688 = HEAP8[$3687] | 0;
          $3689 = $3688 & 255;
          HEAP32[13924] = $3689;
          if ($3688 << 24 >> 24 == 92) {
           $3692 = HEAP32[13912] | 0;
           $3693 = $3692 | 0;
           $3694 = HEAP32[$3693 >> 2] | 0;
           $3695 = $3692 + 4 | 0;
           $3696 = HEAP32[$3695 >> 2] | 0;
           if ($3694 >>> 0 < $3696 >>> 0) {
            $3710 = $3694;
            $3709 = $3696;
           } else {
            $3700 = HEAP32[$3692 + 8 >> 2] | 0;
            $_pre2_i_i_i645 = $3692 + 1056 | 0;
            if (($3700 | 0) == -1) {
             $len_0_i_i_i647 = 0;
            } else {
             $3703 = _read($3700 | 0, $_pre2_i_i_i645 | 0, 8192) | 0;
             $len_0_i_i_i647 = ($3703 | 0) < 0 ? 0 : $3703;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i647;
            HEAP32[$3693 >> 2] = $_pre2_i_i_i645;
            $3707 = $3692 + 1056 + $len_0_i_i_i647 | 0;
            HEAP32[$3695 >> 2] = $3707;
            HEAP8[$3707] = 92;
            $3710 = HEAP32[$3693 >> 2] | 0;
            $3709 = HEAP32[$3695 >> 2] | 0;
           }
           if ($3710 >>> 0 < $3709 >>> 0) {
            $_0_i_i_i651 = HEAPU8[$3710] | 0;
           } else {
            HEAP32[$3693 >> 2] = $3709;
            $_0_i_i_i651 = -1;
           }
           HEAP32[13924] = $_0_i_i_i651;
           $3716 = $_0_i_i_i651;
          } else {
           $3716 = $3689;
          }
          if (($3716 | 0) != 10) {
           break L1087;
          }
          $3720 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3720 >> 2] = (HEAP32[$3720 >> 2] | 0) + 1;
          $3724 = HEAP32[13912] | 0;
          $3726 = (HEAP32[$3724 >> 2] | 0) + 1 | 0;
          HEAP32[$3724 >> 2] = $3726;
          $3727 = HEAP8[$3726] | 0;
          $3728 = $3727 & 255;
          HEAP32[13924] = $3728;
          if ($3727 << 24 >> 24 != 92) {
           $3755 = $3728;
           break;
          }
          $3731 = HEAP32[13912] | 0;
          $3732 = $3731 | 0;
          $3733 = HEAP32[$3732 >> 2] | 0;
          $3734 = $3731 + 4 | 0;
          $3735 = HEAP32[$3734 >> 2] | 0;
          if ($3733 >>> 0 < $3735 >>> 0) {
           $3749 = $3733;
           $3748 = $3735;
          } else {
           $3739 = HEAP32[$3731 + 8 >> 2] | 0;
           $_pre2_i_i_i654 = $3731 + 1056 | 0;
           if (($3739 | 0) == -1) {
            $len_0_i_i_i656 = 0;
           } else {
            $3742 = _read($3739 | 0, $_pre2_i_i_i654 | 0, 8192) | 0;
            $len_0_i_i_i656 = ($3742 | 0) < 0 ? 0 : $3742;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i656;
           HEAP32[$3732 >> 2] = $_pre2_i_i_i654;
           $3746 = $3731 + 1056 + $len_0_i_i_i656 | 0;
           HEAP32[$3734 >> 2] = $3746;
           HEAP8[$3746] = 92;
           $3749 = HEAP32[$3732 >> 2] | 0;
           $3748 = HEAP32[$3734 >> 2] | 0;
          }
          if ($3749 >>> 0 < $3748 >>> 0) {
           $_0_i_i_i660 = HEAPU8[$3749] | 0;
          } else {
           HEAP32[$3732 >> 2] = $3748;
           $_0_i_i_i660 = -1;
          }
          HEAP32[13924] = $_0_i_i_i660;
          $3755 = $_0_i_i_i660;
         } else {
          break L1087;
         }
        } while (0);
        if (($3755 | 0) != 92) {
         break L1086;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $3760 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_15_in = HEAP8[$3760] | 0;
     $p_20 = $3760;
     label = 1072;
    } else {
     $c_15_in = $3573;
     $p_20 = $3572;
     label = 1072;
    }
   } while (0);
   do {
    if ((label | 0) == 1072) {
     $c_15 = $c_15_in & 255;
     if (($c_15 | 0) == 45) {
      HEAP32[5310] = 162;
      $p_27 = $p_20 + 1 | 0;
      break L190;
     } else if (($c_15 | 0) == 61) {
      HEAP32[5310] = 173;
      $p_27 = $p_20 + 1 | 0;
      break L190;
     } else if (($c_15 | 0) == 62) {
      HEAP32[5310] = 203;
      $p_27 = $p_20 + 1 | 0;
      break L190;
     } else {
      $p_201550 = $p_20;
      break;
     }
    }
   } while (0);
   HEAP32[5310] = 45;
   $p_27 = $p_201550;
  } else if ((label | 0) == 1077) {
   $3770 = $p_0 + 1 | 0;
   $3771 = HEAP8[$3770] | 0;
   L1152 : do {
    if ($3771 << 24 >> 24 == 92) {
     $3774 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$3774 + 4 >> 2] | 0) >>> 0 > $3770 >>> 0) {
       $_0_i32 = $3770;
       $3806 = $3774;
      } else {
       HEAP32[$3774 >> 2] = $3770;
       $3780 = HEAP32[13912] | 0;
       $3781 = $3780 | 0;
       $3782 = HEAP32[$3781 >> 2] | 0;
       $3783 = $3780 + 4 | 0;
       $3784 = HEAP32[$3783 >> 2] | 0;
       if ($3782 >>> 0 < $3784 >>> 0) {
        $3798 = $3782;
        $3797 = $3784;
       } else {
        $3788 = HEAP32[$3780 + 8 >> 2] | 0;
        $_pre2_i_i210 = $3780 + 1056 | 0;
        if (($3788 | 0) == -1) {
         $len_0_i_i212 = 0;
        } else {
         $3791 = _read($3788 | 0, $_pre2_i_i210 | 0, 8192) | 0;
         $len_0_i_i212 = ($3791 | 0) < 0 ? 0 : $3791;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i212;
        HEAP32[$3781 >> 2] = $_pre2_i_i210;
        $3795 = $3780 + 1056 + $len_0_i_i212 | 0;
        HEAP32[$3783 >> 2] = $3795;
        HEAP8[$3795] = 92;
        $3798 = HEAP32[$3781 >> 2] | 0;
        $3797 = HEAP32[$3783 >> 2] | 0;
       }
       if ($3798 >>> 0 < $3797 >>> 0) {
        $3800 = HEAP8[$3798] | 0;
        $3801 = HEAP32[13912] | 0;
        $3803 = HEAP32[$3801 >> 2] | 0;
        if ($3800 << 24 >> 24 == 92) {
         $_0_i32 = $3803;
         $3806 = $3801;
         break;
        } else {
         $c_16_in = $3800;
         $p_21 = $3803;
         label = 1128;
         break L1152;
        }
       } else {
        HEAP32[$3781 >> 2] = $3797;
        $p_211551 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L1152;
       }
      }
     } while (0);
     HEAP32[$3806 >> 2] = $_0_i32;
     $3808 = HEAP8[$_0_i32] | 0;
     HEAP32[13924] = $3808 & 255;
     L1166 : do {
      if ($3808 << 24 >> 24 == 92) {
       L1167 : while (1) {
        $3812 = HEAP32[13912] | 0;
        $3814 = (HEAP32[$3812 >> 2] | 0) + 1 | 0;
        HEAP32[$3812 >> 2] = $3814;
        $3815 = HEAP8[$3814] | 0;
        $3816 = $3815 & 255;
        HEAP32[13924] = $3816;
        if ($3815 << 24 >> 24 == 92) {
         $3819 = HEAP32[13912] | 0;
         $3820 = $3819 | 0;
         $3821 = HEAP32[$3820 >> 2] | 0;
         $3822 = $3819 + 4 | 0;
         $3823 = HEAP32[$3822 >> 2] | 0;
         if ($3821 >>> 0 < $3823 >>> 0) {
          $3837 = $3821;
          $3836 = $3823;
         } else {
          $3827 = HEAP32[$3819 + 8 >> 2] | 0;
          $_pre2_i_i_i591 = $3819 + 1056 | 0;
          if (($3827 | 0) == -1) {
           $len_0_i_i_i593 = 0;
          } else {
           $3830 = _read($3827 | 0, $_pre2_i_i_i591 | 0, 8192) | 0;
           $len_0_i_i_i593 = ($3830 | 0) < 0 ? 0 : $3830;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i593;
          HEAP32[$3820 >> 2] = $_pre2_i_i_i591;
          $3834 = $3819 + 1056 + $len_0_i_i_i593 | 0;
          HEAP32[$3822 >> 2] = $3834;
          HEAP8[$3834] = 92;
          $3837 = HEAP32[$3820 >> 2] | 0;
          $3836 = HEAP32[$3822 >> 2] | 0;
         }
         if ($3837 >>> 0 < $3836 >>> 0) {
          $_0_i_i_i597 = HEAPU8[$3837] | 0;
         } else {
          HEAP32[$3820 >> 2] = $3836;
          $_0_i_i_i597 = -1;
         }
         HEAP32[13924] = $_0_i_i_i597;
         $3843 = $_0_i_i_i597;
        } else {
         $3843 = $3816;
        }
        do {
         if (($3843 | 0) == 10) {
          $3846 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3846 >> 2] = (HEAP32[$3846 >> 2] | 0) + 1;
          $3850 = HEAP32[13912] | 0;
          $3852 = (HEAP32[$3850 >> 2] | 0) + 1 | 0;
          HEAP32[$3850 >> 2] = $3852;
          $3853 = HEAP8[$3852] | 0;
          $3854 = $3853 & 255;
          HEAP32[13924] = $3854;
          if ($3853 << 24 >> 24 != 92) {
           $3953 = $3854;
           break;
          }
          $3857 = HEAP32[13912] | 0;
          $3858 = $3857 | 0;
          $3859 = HEAP32[$3858 >> 2] | 0;
          $3860 = $3857 + 4 | 0;
          $3861 = HEAP32[$3860 >> 2] | 0;
          if ($3859 >>> 0 < $3861 >>> 0) {
           $3875 = $3859;
           $3874 = $3861;
          } else {
           $3865 = HEAP32[$3857 + 8 >> 2] | 0;
           $_pre2_i_i_i600 = $3857 + 1056 | 0;
           if (($3865 | 0) == -1) {
            $len_0_i_i_i602 = 0;
           } else {
            $3868 = _read($3865 | 0, $_pre2_i_i_i600 | 0, 8192) | 0;
            $len_0_i_i_i602 = ($3868 | 0) < 0 ? 0 : $3868;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i602;
           HEAP32[$3858 >> 2] = $_pre2_i_i_i600;
           $3872 = $3857 + 1056 + $len_0_i_i_i602 | 0;
           HEAP32[$3860 >> 2] = $3872;
           HEAP8[$3872] = 92;
           $3875 = HEAP32[$3858 >> 2] | 0;
           $3874 = HEAP32[$3860 >> 2] | 0;
          }
          if ($3875 >>> 0 < $3874 >>> 0) {
           $_0_i_i_i606 = HEAPU8[$3875] | 0;
          } else {
           HEAP32[$3858 >> 2] = $3874;
           $_0_i_i_i606 = -1;
          }
          HEAP32[13924] = $_0_i_i_i606;
          $3953 = $_0_i_i_i606;
         } else if (($3843 | 0) == 13) {
          $3883 = HEAP32[13912] | 0;
          $3885 = (HEAP32[$3883 >> 2] | 0) + 1 | 0;
          HEAP32[$3883 >> 2] = $3885;
          $3886 = HEAP8[$3885] | 0;
          $3887 = $3886 & 255;
          HEAP32[13924] = $3887;
          if ($3886 << 24 >> 24 == 92) {
           $3890 = HEAP32[13912] | 0;
           $3891 = $3890 | 0;
           $3892 = HEAP32[$3891 >> 2] | 0;
           $3893 = $3890 + 4 | 0;
           $3894 = HEAP32[$3893 >> 2] | 0;
           if ($3892 >>> 0 < $3894 >>> 0) {
            $3908 = $3892;
            $3907 = $3894;
           } else {
            $3898 = HEAP32[$3890 + 8 >> 2] | 0;
            $_pre2_i_i_i609 = $3890 + 1056 | 0;
            if (($3898 | 0) == -1) {
             $len_0_i_i_i611 = 0;
            } else {
             $3901 = _read($3898 | 0, $_pre2_i_i_i609 | 0, 8192) | 0;
             $len_0_i_i_i611 = ($3901 | 0) < 0 ? 0 : $3901;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i611;
            HEAP32[$3891 >> 2] = $_pre2_i_i_i609;
            $3905 = $3890 + 1056 + $len_0_i_i_i611 | 0;
            HEAP32[$3893 >> 2] = $3905;
            HEAP8[$3905] = 92;
            $3908 = HEAP32[$3891 >> 2] | 0;
            $3907 = HEAP32[$3893 >> 2] | 0;
           }
           if ($3908 >>> 0 < $3907 >>> 0) {
            $_0_i_i_i615 = HEAPU8[$3908] | 0;
           } else {
            HEAP32[$3891 >> 2] = $3907;
            $_0_i_i_i615 = -1;
           }
           HEAP32[13924] = $_0_i_i_i615;
           $3914 = $_0_i_i_i615;
          } else {
           $3914 = $3887;
          }
          if (($3914 | 0) != 10) {
           break L1167;
          }
          $3918 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$3918 >> 2] = (HEAP32[$3918 >> 2] | 0) + 1;
          $3922 = HEAP32[13912] | 0;
          $3924 = (HEAP32[$3922 >> 2] | 0) + 1 | 0;
          HEAP32[$3922 >> 2] = $3924;
          $3925 = HEAP8[$3924] | 0;
          $3926 = $3925 & 255;
          HEAP32[13924] = $3926;
          if ($3925 << 24 >> 24 != 92) {
           $3953 = $3926;
           break;
          }
          $3929 = HEAP32[13912] | 0;
          $3930 = $3929 | 0;
          $3931 = HEAP32[$3930 >> 2] | 0;
          $3932 = $3929 + 4 | 0;
          $3933 = HEAP32[$3932 >> 2] | 0;
          if ($3931 >>> 0 < $3933 >>> 0) {
           $3947 = $3931;
           $3946 = $3933;
          } else {
           $3937 = HEAP32[$3929 + 8 >> 2] | 0;
           $_pre2_i_i_i618 = $3929 + 1056 | 0;
           if (($3937 | 0) == -1) {
            $len_0_i_i_i620 = 0;
           } else {
            $3940 = _read($3937 | 0, $_pre2_i_i_i618 | 0, 8192) | 0;
            $len_0_i_i_i620 = ($3940 | 0) < 0 ? 0 : $3940;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i620;
           HEAP32[$3930 >> 2] = $_pre2_i_i_i618;
           $3944 = $3929 + 1056 + $len_0_i_i_i620 | 0;
           HEAP32[$3932 >> 2] = $3944;
           HEAP8[$3944] = 92;
           $3947 = HEAP32[$3930 >> 2] | 0;
           $3946 = HEAP32[$3932 >> 2] | 0;
          }
          if ($3947 >>> 0 < $3946 >>> 0) {
           $_0_i_i_i624 = HEAPU8[$3947] | 0;
          } else {
           HEAP32[$3930 >> 2] = $3946;
           $_0_i_i_i624 = -1;
          }
          HEAP32[13924] = $_0_i_i_i624;
          $3953 = $_0_i_i_i624;
         } else {
          break L1167;
         }
        } while (0);
        if (($3953 | 0) != 92) {
         break L1166;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $3958 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_16_in = HEAP8[$3958] | 0;
     $p_21 = $3958;
     label = 1128;
    } else {
     $c_16_in = $3771;
     $p_21 = $3770;
     label = 1128;
    }
   } while (0);
   do {
    if ((label | 0) == 1128) {
     if ($c_16_in << 24 >> 24 != 61) {
      $p_211551 = $p_21;
      break;
     }
     HEAP32[5310] = 149;
     $p_27 = $p_21 + 1 | 0;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 33;
   $p_27 = $p_211551;
  } else if ((label | 0) == 1131) {
   $3965 = $p_0 + 1 | 0;
   $3966 = HEAP8[$3965] | 0;
   L1229 : do {
    if ($3966 << 24 >> 24 == 92) {
     $3969 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$3969 + 4 >> 2] | 0) >>> 0 > $3965 >>> 0) {
       $_0_i28 = $3965;
       $4001 = $3969;
      } else {
       HEAP32[$3969 >> 2] = $3965;
       $3975 = HEAP32[13912] | 0;
       $3976 = $3975 | 0;
       $3977 = HEAP32[$3976 >> 2] | 0;
       $3978 = $3975 + 4 | 0;
       $3979 = HEAP32[$3978 >> 2] | 0;
       if ($3977 >>> 0 < $3979 >>> 0) {
        $3993 = $3977;
        $3992 = $3979;
       } else {
        $3983 = HEAP32[$3975 + 8 >> 2] | 0;
        $_pre2_i_i198 = $3975 + 1056 | 0;
        if (($3983 | 0) == -1) {
         $len_0_i_i200 = 0;
        } else {
         $3986 = _read($3983 | 0, $_pre2_i_i198 | 0, 8192) | 0;
         $len_0_i_i200 = ($3986 | 0) < 0 ? 0 : $3986;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i200;
        HEAP32[$3976 >> 2] = $_pre2_i_i198;
        $3990 = $3975 + 1056 + $len_0_i_i200 | 0;
        HEAP32[$3978 >> 2] = $3990;
        HEAP8[$3990] = 92;
        $3993 = HEAP32[$3976 >> 2] | 0;
        $3992 = HEAP32[$3978 >> 2] | 0;
       }
       if ($3993 >>> 0 < $3992 >>> 0) {
        $3995 = HEAP8[$3993] | 0;
        $3996 = HEAP32[13912] | 0;
        $3998 = HEAP32[$3996 >> 2] | 0;
        if ($3995 << 24 >> 24 == 92) {
         $_0_i28 = $3998;
         $4001 = $3996;
         break;
        } else {
         $c_17_in = $3995;
         $p_22 = $3998;
         label = 1182;
         break L1229;
        }
       } else {
        HEAP32[$3976 >> 2] = $3992;
        $p_221552 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L1229;
       }
      }
     } while (0);
     HEAP32[$4001 >> 2] = $_0_i28;
     $4003 = HEAP8[$_0_i28] | 0;
     HEAP32[13924] = $4003 & 255;
     L1243 : do {
      if ($4003 << 24 >> 24 == 92) {
       L1244 : while (1) {
        $4007 = HEAP32[13912] | 0;
        $4009 = (HEAP32[$4007 >> 2] | 0) + 1 | 0;
        HEAP32[$4007 >> 2] = $4009;
        $4010 = HEAP8[$4009] | 0;
        $4011 = $4010 & 255;
        HEAP32[13924] = $4011;
        if ($4010 << 24 >> 24 == 92) {
         $4014 = HEAP32[13912] | 0;
         $4015 = $4014 | 0;
         $4016 = HEAP32[$4015 >> 2] | 0;
         $4017 = $4014 + 4 | 0;
         $4018 = HEAP32[$4017 >> 2] | 0;
         if ($4016 >>> 0 < $4018 >>> 0) {
          $4032 = $4016;
          $4031 = $4018;
         } else {
          $4022 = HEAP32[$4014 + 8 >> 2] | 0;
          $_pre2_i_i_i555 = $4014 + 1056 | 0;
          if (($4022 | 0) == -1) {
           $len_0_i_i_i557 = 0;
          } else {
           $4025 = _read($4022 | 0, $_pre2_i_i_i555 | 0, 8192) | 0;
           $len_0_i_i_i557 = ($4025 | 0) < 0 ? 0 : $4025;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i557;
          HEAP32[$4015 >> 2] = $_pre2_i_i_i555;
          $4029 = $4014 + 1056 + $len_0_i_i_i557 | 0;
          HEAP32[$4017 >> 2] = $4029;
          HEAP8[$4029] = 92;
          $4032 = HEAP32[$4015 >> 2] | 0;
          $4031 = HEAP32[$4017 >> 2] | 0;
         }
         if ($4032 >>> 0 < $4031 >>> 0) {
          $_0_i_i_i561 = HEAPU8[$4032] | 0;
         } else {
          HEAP32[$4015 >> 2] = $4031;
          $_0_i_i_i561 = -1;
         }
         HEAP32[13924] = $_0_i_i_i561;
         $4038 = $_0_i_i_i561;
        } else {
         $4038 = $4011;
        }
        do {
         if (($4038 | 0) == 10) {
          $4041 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4041 >> 2] = (HEAP32[$4041 >> 2] | 0) + 1;
          $4045 = HEAP32[13912] | 0;
          $4047 = (HEAP32[$4045 >> 2] | 0) + 1 | 0;
          HEAP32[$4045 >> 2] = $4047;
          $4048 = HEAP8[$4047] | 0;
          $4049 = $4048 & 255;
          HEAP32[13924] = $4049;
          if ($4048 << 24 >> 24 != 92) {
           $4148 = $4049;
           break;
          }
          $4052 = HEAP32[13912] | 0;
          $4053 = $4052 | 0;
          $4054 = HEAP32[$4053 >> 2] | 0;
          $4055 = $4052 + 4 | 0;
          $4056 = HEAP32[$4055 >> 2] | 0;
          if ($4054 >>> 0 < $4056 >>> 0) {
           $4070 = $4054;
           $4069 = $4056;
          } else {
           $4060 = HEAP32[$4052 + 8 >> 2] | 0;
           $_pre2_i_i_i564 = $4052 + 1056 | 0;
           if (($4060 | 0) == -1) {
            $len_0_i_i_i566 = 0;
           } else {
            $4063 = _read($4060 | 0, $_pre2_i_i_i564 | 0, 8192) | 0;
            $len_0_i_i_i566 = ($4063 | 0) < 0 ? 0 : $4063;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i566;
           HEAP32[$4053 >> 2] = $_pre2_i_i_i564;
           $4067 = $4052 + 1056 + $len_0_i_i_i566 | 0;
           HEAP32[$4055 >> 2] = $4067;
           HEAP8[$4067] = 92;
           $4070 = HEAP32[$4053 >> 2] | 0;
           $4069 = HEAP32[$4055 >> 2] | 0;
          }
          if ($4070 >>> 0 < $4069 >>> 0) {
           $_0_i_i_i570 = HEAPU8[$4070] | 0;
          } else {
           HEAP32[$4053 >> 2] = $4069;
           $_0_i_i_i570 = -1;
          }
          HEAP32[13924] = $_0_i_i_i570;
          $4148 = $_0_i_i_i570;
         } else if (($4038 | 0) == 13) {
          $4078 = HEAP32[13912] | 0;
          $4080 = (HEAP32[$4078 >> 2] | 0) + 1 | 0;
          HEAP32[$4078 >> 2] = $4080;
          $4081 = HEAP8[$4080] | 0;
          $4082 = $4081 & 255;
          HEAP32[13924] = $4082;
          if ($4081 << 24 >> 24 == 92) {
           $4085 = HEAP32[13912] | 0;
           $4086 = $4085 | 0;
           $4087 = HEAP32[$4086 >> 2] | 0;
           $4088 = $4085 + 4 | 0;
           $4089 = HEAP32[$4088 >> 2] | 0;
           if ($4087 >>> 0 < $4089 >>> 0) {
            $4103 = $4087;
            $4102 = $4089;
           } else {
            $4093 = HEAP32[$4085 + 8 >> 2] | 0;
            $_pre2_i_i_i573 = $4085 + 1056 | 0;
            if (($4093 | 0) == -1) {
             $len_0_i_i_i575 = 0;
            } else {
             $4096 = _read($4093 | 0, $_pre2_i_i_i573 | 0, 8192) | 0;
             $len_0_i_i_i575 = ($4096 | 0) < 0 ? 0 : $4096;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i575;
            HEAP32[$4086 >> 2] = $_pre2_i_i_i573;
            $4100 = $4085 + 1056 + $len_0_i_i_i575 | 0;
            HEAP32[$4088 >> 2] = $4100;
            HEAP8[$4100] = 92;
            $4103 = HEAP32[$4086 >> 2] | 0;
            $4102 = HEAP32[$4088 >> 2] | 0;
           }
           if ($4103 >>> 0 < $4102 >>> 0) {
            $_0_i_i_i579 = HEAPU8[$4103] | 0;
           } else {
            HEAP32[$4086 >> 2] = $4102;
            $_0_i_i_i579 = -1;
           }
           HEAP32[13924] = $_0_i_i_i579;
           $4109 = $_0_i_i_i579;
          } else {
           $4109 = $4082;
          }
          if (($4109 | 0) != 10) {
           break L1244;
          }
          $4113 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4113 >> 2] = (HEAP32[$4113 >> 2] | 0) + 1;
          $4117 = HEAP32[13912] | 0;
          $4119 = (HEAP32[$4117 >> 2] | 0) + 1 | 0;
          HEAP32[$4117 >> 2] = $4119;
          $4120 = HEAP8[$4119] | 0;
          $4121 = $4120 & 255;
          HEAP32[13924] = $4121;
          if ($4120 << 24 >> 24 != 92) {
           $4148 = $4121;
           break;
          }
          $4124 = HEAP32[13912] | 0;
          $4125 = $4124 | 0;
          $4126 = HEAP32[$4125 >> 2] | 0;
          $4127 = $4124 + 4 | 0;
          $4128 = HEAP32[$4127 >> 2] | 0;
          if ($4126 >>> 0 < $4128 >>> 0) {
           $4142 = $4126;
           $4141 = $4128;
          } else {
           $4132 = HEAP32[$4124 + 8 >> 2] | 0;
           $_pre2_i_i_i582 = $4124 + 1056 | 0;
           if (($4132 | 0) == -1) {
            $len_0_i_i_i584 = 0;
           } else {
            $4135 = _read($4132 | 0, $_pre2_i_i_i582 | 0, 8192) | 0;
            $len_0_i_i_i584 = ($4135 | 0) < 0 ? 0 : $4135;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i584;
           HEAP32[$4125 >> 2] = $_pre2_i_i_i582;
           $4139 = $4124 + 1056 + $len_0_i_i_i584 | 0;
           HEAP32[$4127 >> 2] = $4139;
           HEAP8[$4139] = 92;
           $4142 = HEAP32[$4125 >> 2] | 0;
           $4141 = HEAP32[$4127 >> 2] | 0;
          }
          if ($4142 >>> 0 < $4141 >>> 0) {
           $_0_i_i_i588 = HEAPU8[$4142] | 0;
          } else {
           HEAP32[$4125 >> 2] = $4141;
           $_0_i_i_i588 = -1;
          }
          HEAP32[13924] = $_0_i_i_i588;
          $4148 = $_0_i_i_i588;
         } else {
          break L1244;
         }
        } while (0);
        if (($4148 | 0) != 92) {
         break L1243;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $4153 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_17_in = HEAP8[$4153] | 0;
     $p_22 = $4153;
     label = 1182;
    } else {
     $c_17_in = $3966;
     $p_22 = $3965;
     label = 1182;
    }
   } while (0);
   do {
    if ((label | 0) == 1182) {
     if ($c_17_in << 24 >> 24 != 61) {
      $p_221552 = $p_22;
      break;
     }
     HEAP32[5310] = 148;
     $p_27 = $p_22 + 1 | 0;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 61;
   $p_27 = $p_221552;
  } else if ((label | 0) == 1185) {
   $4160 = $p_0 + 1 | 0;
   $4161 = HEAP8[$4160] | 0;
   L1306 : do {
    if ($4161 << 24 >> 24 == 92) {
     $4164 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$4164 + 4 >> 2] | 0) >>> 0 > $4160 >>> 0) {
       $_0_i24 = $4160;
       $4196 = $4164;
      } else {
       HEAP32[$4164 >> 2] = $4160;
       $4170 = HEAP32[13912] | 0;
       $4171 = $4170 | 0;
       $4172 = HEAP32[$4171 >> 2] | 0;
       $4173 = $4170 + 4 | 0;
       $4174 = HEAP32[$4173 >> 2] | 0;
       if ($4172 >>> 0 < $4174 >>> 0) {
        $4188 = $4172;
        $4187 = $4174;
       } else {
        $4178 = HEAP32[$4170 + 8 >> 2] | 0;
        $_pre2_i_i186 = $4170 + 1056 | 0;
        if (($4178 | 0) == -1) {
         $len_0_i_i188 = 0;
        } else {
         $4181 = _read($4178 | 0, $_pre2_i_i186 | 0, 8192) | 0;
         $len_0_i_i188 = ($4181 | 0) < 0 ? 0 : $4181;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i188;
        HEAP32[$4171 >> 2] = $_pre2_i_i186;
        $4185 = $4170 + 1056 + $len_0_i_i188 | 0;
        HEAP32[$4173 >> 2] = $4185;
        HEAP8[$4185] = 92;
        $4188 = HEAP32[$4171 >> 2] | 0;
        $4187 = HEAP32[$4173 >> 2] | 0;
       }
       if ($4188 >>> 0 < $4187 >>> 0) {
        $4190 = HEAP8[$4188] | 0;
        $4191 = HEAP32[13912] | 0;
        $4193 = HEAP32[$4191 >> 2] | 0;
        if ($4190 << 24 >> 24 == 92) {
         $_0_i24 = $4193;
         $4196 = $4191;
         break;
        } else {
         $c_18_in = $4190;
         $p_23 = $4193;
         label = 1236;
         break L1306;
        }
       } else {
        HEAP32[$4171 >> 2] = $4187;
        $p_231553 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L1306;
       }
      }
     } while (0);
     HEAP32[$4196 >> 2] = $_0_i24;
     $4198 = HEAP8[$_0_i24] | 0;
     HEAP32[13924] = $4198 & 255;
     L1320 : do {
      if ($4198 << 24 >> 24 == 92) {
       L1321 : while (1) {
        $4202 = HEAP32[13912] | 0;
        $4204 = (HEAP32[$4202 >> 2] | 0) + 1 | 0;
        HEAP32[$4202 >> 2] = $4204;
        $4205 = HEAP8[$4204] | 0;
        $4206 = $4205 & 255;
        HEAP32[13924] = $4206;
        if ($4205 << 24 >> 24 == 92) {
         $4209 = HEAP32[13912] | 0;
         $4210 = $4209 | 0;
         $4211 = HEAP32[$4210 >> 2] | 0;
         $4212 = $4209 + 4 | 0;
         $4213 = HEAP32[$4212 >> 2] | 0;
         if ($4211 >>> 0 < $4213 >>> 0) {
          $4227 = $4211;
          $4226 = $4213;
         } else {
          $4217 = HEAP32[$4209 + 8 >> 2] | 0;
          $_pre2_i_i_i519 = $4209 + 1056 | 0;
          if (($4217 | 0) == -1) {
           $len_0_i_i_i521 = 0;
          } else {
           $4220 = _read($4217 | 0, $_pre2_i_i_i519 | 0, 8192) | 0;
           $len_0_i_i_i521 = ($4220 | 0) < 0 ? 0 : $4220;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i521;
          HEAP32[$4210 >> 2] = $_pre2_i_i_i519;
          $4224 = $4209 + 1056 + $len_0_i_i_i521 | 0;
          HEAP32[$4212 >> 2] = $4224;
          HEAP8[$4224] = 92;
          $4227 = HEAP32[$4210 >> 2] | 0;
          $4226 = HEAP32[$4212 >> 2] | 0;
         }
         if ($4227 >>> 0 < $4226 >>> 0) {
          $_0_i_i_i525 = HEAPU8[$4227] | 0;
         } else {
          HEAP32[$4210 >> 2] = $4226;
          $_0_i_i_i525 = -1;
         }
         HEAP32[13924] = $_0_i_i_i525;
         $4233 = $_0_i_i_i525;
        } else {
         $4233 = $4206;
        }
        do {
         if (($4233 | 0) == 10) {
          $4236 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4236 >> 2] = (HEAP32[$4236 >> 2] | 0) + 1;
          $4240 = HEAP32[13912] | 0;
          $4242 = (HEAP32[$4240 >> 2] | 0) + 1 | 0;
          HEAP32[$4240 >> 2] = $4242;
          $4243 = HEAP8[$4242] | 0;
          $4244 = $4243 & 255;
          HEAP32[13924] = $4244;
          if ($4243 << 24 >> 24 != 92) {
           $4343 = $4244;
           break;
          }
          $4247 = HEAP32[13912] | 0;
          $4248 = $4247 | 0;
          $4249 = HEAP32[$4248 >> 2] | 0;
          $4250 = $4247 + 4 | 0;
          $4251 = HEAP32[$4250 >> 2] | 0;
          if ($4249 >>> 0 < $4251 >>> 0) {
           $4265 = $4249;
           $4264 = $4251;
          } else {
           $4255 = HEAP32[$4247 + 8 >> 2] | 0;
           $_pre2_i_i_i528 = $4247 + 1056 | 0;
           if (($4255 | 0) == -1) {
            $len_0_i_i_i530 = 0;
           } else {
            $4258 = _read($4255 | 0, $_pre2_i_i_i528 | 0, 8192) | 0;
            $len_0_i_i_i530 = ($4258 | 0) < 0 ? 0 : $4258;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i530;
           HEAP32[$4248 >> 2] = $_pre2_i_i_i528;
           $4262 = $4247 + 1056 + $len_0_i_i_i530 | 0;
           HEAP32[$4250 >> 2] = $4262;
           HEAP8[$4262] = 92;
           $4265 = HEAP32[$4248 >> 2] | 0;
           $4264 = HEAP32[$4250 >> 2] | 0;
          }
          if ($4265 >>> 0 < $4264 >>> 0) {
           $_0_i_i_i534 = HEAPU8[$4265] | 0;
          } else {
           HEAP32[$4248 >> 2] = $4264;
           $_0_i_i_i534 = -1;
          }
          HEAP32[13924] = $_0_i_i_i534;
          $4343 = $_0_i_i_i534;
         } else if (($4233 | 0) == 13) {
          $4273 = HEAP32[13912] | 0;
          $4275 = (HEAP32[$4273 >> 2] | 0) + 1 | 0;
          HEAP32[$4273 >> 2] = $4275;
          $4276 = HEAP8[$4275] | 0;
          $4277 = $4276 & 255;
          HEAP32[13924] = $4277;
          if ($4276 << 24 >> 24 == 92) {
           $4280 = HEAP32[13912] | 0;
           $4281 = $4280 | 0;
           $4282 = HEAP32[$4281 >> 2] | 0;
           $4283 = $4280 + 4 | 0;
           $4284 = HEAP32[$4283 >> 2] | 0;
           if ($4282 >>> 0 < $4284 >>> 0) {
            $4298 = $4282;
            $4297 = $4284;
           } else {
            $4288 = HEAP32[$4280 + 8 >> 2] | 0;
            $_pre2_i_i_i537 = $4280 + 1056 | 0;
            if (($4288 | 0) == -1) {
             $len_0_i_i_i539 = 0;
            } else {
             $4291 = _read($4288 | 0, $_pre2_i_i_i537 | 0, 8192) | 0;
             $len_0_i_i_i539 = ($4291 | 0) < 0 ? 0 : $4291;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i539;
            HEAP32[$4281 >> 2] = $_pre2_i_i_i537;
            $4295 = $4280 + 1056 + $len_0_i_i_i539 | 0;
            HEAP32[$4283 >> 2] = $4295;
            HEAP8[$4295] = 92;
            $4298 = HEAP32[$4281 >> 2] | 0;
            $4297 = HEAP32[$4283 >> 2] | 0;
           }
           if ($4298 >>> 0 < $4297 >>> 0) {
            $_0_i_i_i543 = HEAPU8[$4298] | 0;
           } else {
            HEAP32[$4281 >> 2] = $4297;
            $_0_i_i_i543 = -1;
           }
           HEAP32[13924] = $_0_i_i_i543;
           $4304 = $_0_i_i_i543;
          } else {
           $4304 = $4277;
          }
          if (($4304 | 0) != 10) {
           break L1321;
          }
          $4308 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4308 >> 2] = (HEAP32[$4308 >> 2] | 0) + 1;
          $4312 = HEAP32[13912] | 0;
          $4314 = (HEAP32[$4312 >> 2] | 0) + 1 | 0;
          HEAP32[$4312 >> 2] = $4314;
          $4315 = HEAP8[$4314] | 0;
          $4316 = $4315 & 255;
          HEAP32[13924] = $4316;
          if ($4315 << 24 >> 24 != 92) {
           $4343 = $4316;
           break;
          }
          $4319 = HEAP32[13912] | 0;
          $4320 = $4319 | 0;
          $4321 = HEAP32[$4320 >> 2] | 0;
          $4322 = $4319 + 4 | 0;
          $4323 = HEAP32[$4322 >> 2] | 0;
          if ($4321 >>> 0 < $4323 >>> 0) {
           $4337 = $4321;
           $4336 = $4323;
          } else {
           $4327 = HEAP32[$4319 + 8 >> 2] | 0;
           $_pre2_i_i_i546 = $4319 + 1056 | 0;
           if (($4327 | 0) == -1) {
            $len_0_i_i_i548 = 0;
           } else {
            $4330 = _read($4327 | 0, $_pre2_i_i_i546 | 0, 8192) | 0;
            $len_0_i_i_i548 = ($4330 | 0) < 0 ? 0 : $4330;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i548;
           HEAP32[$4320 >> 2] = $_pre2_i_i_i546;
           $4334 = $4319 + 1056 + $len_0_i_i_i548 | 0;
           HEAP32[$4322 >> 2] = $4334;
           HEAP8[$4334] = 92;
           $4337 = HEAP32[$4320 >> 2] | 0;
           $4336 = HEAP32[$4322 >> 2] | 0;
          }
          if ($4337 >>> 0 < $4336 >>> 0) {
           $_0_i_i_i552 = HEAPU8[$4337] | 0;
          } else {
           HEAP32[$4320 >> 2] = $4336;
           $_0_i_i_i552 = -1;
          }
          HEAP32[13924] = $_0_i_i_i552;
          $4343 = $_0_i_i_i552;
         } else {
          break L1321;
         }
        } while (0);
        if (($4343 | 0) != 92) {
         break L1320;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $4348 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_18_in = HEAP8[$4348] | 0;
     $p_23 = $4348;
     label = 1236;
    } else {
     $c_18_in = $4161;
     $p_23 = $4160;
     label = 1236;
    }
   } while (0);
   do {
    if ((label | 0) == 1236) {
     if ($c_18_in << 24 >> 24 != 61) {
      $p_231553 = $p_23;
      break;
     }
     HEAP32[5310] = 170;
     $p_27 = $p_23 + 1 | 0;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 42;
   $p_27 = $p_231553;
  } else if ((label | 0) == 1239) {
   $4355 = $p_0 + 1 | 0;
   $4356 = HEAP8[$4355] | 0;
   L1383 : do {
    if ($4356 << 24 >> 24 == 92) {
     $4359 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$4359 + 4 >> 2] | 0) >>> 0 > $4355 >>> 0) {
       $_0_i20 = $4355;
       $4391 = $4359;
      } else {
       HEAP32[$4359 >> 2] = $4355;
       $4365 = HEAP32[13912] | 0;
       $4366 = $4365 | 0;
       $4367 = HEAP32[$4366 >> 2] | 0;
       $4368 = $4365 + 4 | 0;
       $4369 = HEAP32[$4368 >> 2] | 0;
       if ($4367 >>> 0 < $4369 >>> 0) {
        $4383 = $4367;
        $4382 = $4369;
       } else {
        $4373 = HEAP32[$4365 + 8 >> 2] | 0;
        $_pre2_i_i174 = $4365 + 1056 | 0;
        if (($4373 | 0) == -1) {
         $len_0_i_i176 = 0;
        } else {
         $4376 = _read($4373 | 0, $_pre2_i_i174 | 0, 8192) | 0;
         $len_0_i_i176 = ($4376 | 0) < 0 ? 0 : $4376;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i176;
        HEAP32[$4366 >> 2] = $_pre2_i_i174;
        $4380 = $4365 + 1056 + $len_0_i_i176 | 0;
        HEAP32[$4368 >> 2] = $4380;
        HEAP8[$4380] = 92;
        $4383 = HEAP32[$4366 >> 2] | 0;
        $4382 = HEAP32[$4368 >> 2] | 0;
       }
       if ($4383 >>> 0 < $4382 >>> 0) {
        $4385 = HEAP8[$4383] | 0;
        $4386 = HEAP32[13912] | 0;
        $4388 = HEAP32[$4386 >> 2] | 0;
        if ($4385 << 24 >> 24 == 92) {
         $_0_i20 = $4388;
         $4391 = $4386;
         break;
        } else {
         $c_19_in = $4385;
         $p_24 = $4388;
         label = 1290;
         break L1383;
        }
       } else {
        HEAP32[$4366 >> 2] = $4382;
        $p_241554 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L1383;
       }
      }
     } while (0);
     HEAP32[$4391 >> 2] = $_0_i20;
     $4393 = HEAP8[$_0_i20] | 0;
     HEAP32[13924] = $4393 & 255;
     L1397 : do {
      if ($4393 << 24 >> 24 == 92) {
       L1398 : while (1) {
        $4397 = HEAP32[13912] | 0;
        $4399 = (HEAP32[$4397 >> 2] | 0) + 1 | 0;
        HEAP32[$4397 >> 2] = $4399;
        $4400 = HEAP8[$4399] | 0;
        $4401 = $4400 & 255;
        HEAP32[13924] = $4401;
        if ($4400 << 24 >> 24 == 92) {
         $4404 = HEAP32[13912] | 0;
         $4405 = $4404 | 0;
         $4406 = HEAP32[$4405 >> 2] | 0;
         $4407 = $4404 + 4 | 0;
         $4408 = HEAP32[$4407 >> 2] | 0;
         if ($4406 >>> 0 < $4408 >>> 0) {
          $4422 = $4406;
          $4421 = $4408;
         } else {
          $4412 = HEAP32[$4404 + 8 >> 2] | 0;
          $_pre2_i_i_i483 = $4404 + 1056 | 0;
          if (($4412 | 0) == -1) {
           $len_0_i_i_i485 = 0;
          } else {
           $4415 = _read($4412 | 0, $_pre2_i_i_i483 | 0, 8192) | 0;
           $len_0_i_i_i485 = ($4415 | 0) < 0 ? 0 : $4415;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i485;
          HEAP32[$4405 >> 2] = $_pre2_i_i_i483;
          $4419 = $4404 + 1056 + $len_0_i_i_i485 | 0;
          HEAP32[$4407 >> 2] = $4419;
          HEAP8[$4419] = 92;
          $4422 = HEAP32[$4405 >> 2] | 0;
          $4421 = HEAP32[$4407 >> 2] | 0;
         }
         if ($4422 >>> 0 < $4421 >>> 0) {
          $_0_i_i_i489 = HEAPU8[$4422] | 0;
         } else {
          HEAP32[$4405 >> 2] = $4421;
          $_0_i_i_i489 = -1;
         }
         HEAP32[13924] = $_0_i_i_i489;
         $4428 = $_0_i_i_i489;
        } else {
         $4428 = $4401;
        }
        do {
         if (($4428 | 0) == 10) {
          $4431 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4431 >> 2] = (HEAP32[$4431 >> 2] | 0) + 1;
          $4435 = HEAP32[13912] | 0;
          $4437 = (HEAP32[$4435 >> 2] | 0) + 1 | 0;
          HEAP32[$4435 >> 2] = $4437;
          $4438 = HEAP8[$4437] | 0;
          $4439 = $4438 & 255;
          HEAP32[13924] = $4439;
          if ($4438 << 24 >> 24 != 92) {
           $4538 = $4439;
           break;
          }
          $4442 = HEAP32[13912] | 0;
          $4443 = $4442 | 0;
          $4444 = HEAP32[$4443 >> 2] | 0;
          $4445 = $4442 + 4 | 0;
          $4446 = HEAP32[$4445 >> 2] | 0;
          if ($4444 >>> 0 < $4446 >>> 0) {
           $4460 = $4444;
           $4459 = $4446;
          } else {
           $4450 = HEAP32[$4442 + 8 >> 2] | 0;
           $_pre2_i_i_i492 = $4442 + 1056 | 0;
           if (($4450 | 0) == -1) {
            $len_0_i_i_i494 = 0;
           } else {
            $4453 = _read($4450 | 0, $_pre2_i_i_i492 | 0, 8192) | 0;
            $len_0_i_i_i494 = ($4453 | 0) < 0 ? 0 : $4453;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i494;
           HEAP32[$4443 >> 2] = $_pre2_i_i_i492;
           $4457 = $4442 + 1056 + $len_0_i_i_i494 | 0;
           HEAP32[$4445 >> 2] = $4457;
           HEAP8[$4457] = 92;
           $4460 = HEAP32[$4443 >> 2] | 0;
           $4459 = HEAP32[$4445 >> 2] | 0;
          }
          if ($4460 >>> 0 < $4459 >>> 0) {
           $_0_i_i_i498 = HEAPU8[$4460] | 0;
          } else {
           HEAP32[$4443 >> 2] = $4459;
           $_0_i_i_i498 = -1;
          }
          HEAP32[13924] = $_0_i_i_i498;
          $4538 = $_0_i_i_i498;
         } else if (($4428 | 0) == 13) {
          $4468 = HEAP32[13912] | 0;
          $4470 = (HEAP32[$4468 >> 2] | 0) + 1 | 0;
          HEAP32[$4468 >> 2] = $4470;
          $4471 = HEAP8[$4470] | 0;
          $4472 = $4471 & 255;
          HEAP32[13924] = $4472;
          if ($4471 << 24 >> 24 == 92) {
           $4475 = HEAP32[13912] | 0;
           $4476 = $4475 | 0;
           $4477 = HEAP32[$4476 >> 2] | 0;
           $4478 = $4475 + 4 | 0;
           $4479 = HEAP32[$4478 >> 2] | 0;
           if ($4477 >>> 0 < $4479 >>> 0) {
            $4493 = $4477;
            $4492 = $4479;
           } else {
            $4483 = HEAP32[$4475 + 8 >> 2] | 0;
            $_pre2_i_i_i501 = $4475 + 1056 | 0;
            if (($4483 | 0) == -1) {
             $len_0_i_i_i503 = 0;
            } else {
             $4486 = _read($4483 | 0, $_pre2_i_i_i501 | 0, 8192) | 0;
             $len_0_i_i_i503 = ($4486 | 0) < 0 ? 0 : $4486;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i503;
            HEAP32[$4476 >> 2] = $_pre2_i_i_i501;
            $4490 = $4475 + 1056 + $len_0_i_i_i503 | 0;
            HEAP32[$4478 >> 2] = $4490;
            HEAP8[$4490] = 92;
            $4493 = HEAP32[$4476 >> 2] | 0;
            $4492 = HEAP32[$4478 >> 2] | 0;
           }
           if ($4493 >>> 0 < $4492 >>> 0) {
            $_0_i_i_i507 = HEAPU8[$4493] | 0;
           } else {
            HEAP32[$4476 >> 2] = $4492;
            $_0_i_i_i507 = -1;
           }
           HEAP32[13924] = $_0_i_i_i507;
           $4499 = $_0_i_i_i507;
          } else {
           $4499 = $4472;
          }
          if (($4499 | 0) != 10) {
           break L1398;
          }
          $4503 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4503 >> 2] = (HEAP32[$4503 >> 2] | 0) + 1;
          $4507 = HEAP32[13912] | 0;
          $4509 = (HEAP32[$4507 >> 2] | 0) + 1 | 0;
          HEAP32[$4507 >> 2] = $4509;
          $4510 = HEAP8[$4509] | 0;
          $4511 = $4510 & 255;
          HEAP32[13924] = $4511;
          if ($4510 << 24 >> 24 != 92) {
           $4538 = $4511;
           break;
          }
          $4514 = HEAP32[13912] | 0;
          $4515 = $4514 | 0;
          $4516 = HEAP32[$4515 >> 2] | 0;
          $4517 = $4514 + 4 | 0;
          $4518 = HEAP32[$4517 >> 2] | 0;
          if ($4516 >>> 0 < $4518 >>> 0) {
           $4532 = $4516;
           $4531 = $4518;
          } else {
           $4522 = HEAP32[$4514 + 8 >> 2] | 0;
           $_pre2_i_i_i510 = $4514 + 1056 | 0;
           if (($4522 | 0) == -1) {
            $len_0_i_i_i512 = 0;
           } else {
            $4525 = _read($4522 | 0, $_pre2_i_i_i510 | 0, 8192) | 0;
            $len_0_i_i_i512 = ($4525 | 0) < 0 ? 0 : $4525;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i512;
           HEAP32[$4515 >> 2] = $_pre2_i_i_i510;
           $4529 = $4514 + 1056 + $len_0_i_i_i512 | 0;
           HEAP32[$4517 >> 2] = $4529;
           HEAP8[$4529] = 92;
           $4532 = HEAP32[$4515 >> 2] | 0;
           $4531 = HEAP32[$4517 >> 2] | 0;
          }
          if ($4532 >>> 0 < $4531 >>> 0) {
           $_0_i_i_i516 = HEAPU8[$4532] | 0;
          } else {
           HEAP32[$4515 >> 2] = $4531;
           $_0_i_i_i516 = -1;
          }
          HEAP32[13924] = $_0_i_i_i516;
          $4538 = $_0_i_i_i516;
         } else {
          break L1398;
         }
        } while (0);
        if (($4538 | 0) != 92) {
         break L1397;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $4543 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_19_in = HEAP8[$4543] | 0;
     $p_24 = $4543;
     label = 1290;
    } else {
     $c_19_in = $4356;
     $p_24 = $4355;
     label = 1290;
    }
   } while (0);
   do {
    if ((label | 0) == 1290) {
     if ($c_19_in << 24 >> 24 != 61) {
      $p_241554 = $p_24;
      break;
     }
     HEAP32[5310] = 165;
     $p_27 = $p_24 + 1 | 0;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 37;
   $p_27 = $p_241554;
  } else if ((label | 0) == 1293) {
   $4550 = $p_0 + 1 | 0;
   $4551 = HEAP8[$4550] | 0;
   L1460 : do {
    if ($4551 << 24 >> 24 == 92) {
     $4554 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$4554 + 4 >> 2] | 0) >>> 0 > $4550 >>> 0) {
       $_0_i16 = $4550;
       $4586 = $4554;
      } else {
       HEAP32[$4554 >> 2] = $4550;
       $4560 = HEAP32[13912] | 0;
       $4561 = $4560 | 0;
       $4562 = HEAP32[$4561 >> 2] | 0;
       $4563 = $4560 + 4 | 0;
       $4564 = HEAP32[$4563 >> 2] | 0;
       if ($4562 >>> 0 < $4564 >>> 0) {
        $4578 = $4562;
        $4577 = $4564;
       } else {
        $4568 = HEAP32[$4560 + 8 >> 2] | 0;
        $_pre2_i_i162 = $4560 + 1056 | 0;
        if (($4568 | 0) == -1) {
         $len_0_i_i164 = 0;
        } else {
         $4571 = _read($4568 | 0, $_pre2_i_i162 | 0, 8192) | 0;
         $len_0_i_i164 = ($4571 | 0) < 0 ? 0 : $4571;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i164;
        HEAP32[$4561 >> 2] = $_pre2_i_i162;
        $4575 = $4560 + 1056 + $len_0_i_i164 | 0;
        HEAP32[$4563 >> 2] = $4575;
        HEAP8[$4575] = 92;
        $4578 = HEAP32[$4561 >> 2] | 0;
        $4577 = HEAP32[$4563 >> 2] | 0;
       }
       if ($4578 >>> 0 < $4577 >>> 0) {
        $4580 = HEAP8[$4578] | 0;
        $4581 = HEAP32[13912] | 0;
        $4583 = HEAP32[$4581 >> 2] | 0;
        if ($4580 << 24 >> 24 == 92) {
         $_0_i16 = $4583;
         $4586 = $4581;
         break;
        } else {
         $c_20_in = $4580;
         $p_25 = $4583;
         label = 1344;
         break L1460;
        }
       } else {
        HEAP32[$4561 >> 2] = $4577;
        $p_251555 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L1460;
       }
      }
     } while (0);
     HEAP32[$4586 >> 2] = $_0_i16;
     $4588 = HEAP8[$_0_i16] | 0;
     HEAP32[13924] = $4588 & 255;
     L1474 : do {
      if ($4588 << 24 >> 24 == 92) {
       L1475 : while (1) {
        $4592 = HEAP32[13912] | 0;
        $4594 = (HEAP32[$4592 >> 2] | 0) + 1 | 0;
        HEAP32[$4592 >> 2] = $4594;
        $4595 = HEAP8[$4594] | 0;
        $4596 = $4595 & 255;
        HEAP32[13924] = $4596;
        if ($4595 << 24 >> 24 == 92) {
         $4599 = HEAP32[13912] | 0;
         $4600 = $4599 | 0;
         $4601 = HEAP32[$4600 >> 2] | 0;
         $4602 = $4599 + 4 | 0;
         $4603 = HEAP32[$4602 >> 2] | 0;
         if ($4601 >>> 0 < $4603 >>> 0) {
          $4617 = $4601;
          $4616 = $4603;
         } else {
          $4607 = HEAP32[$4599 + 8 >> 2] | 0;
          $_pre2_i_i_i447 = $4599 + 1056 | 0;
          if (($4607 | 0) == -1) {
           $len_0_i_i_i449 = 0;
          } else {
           $4610 = _read($4607 | 0, $_pre2_i_i_i447 | 0, 8192) | 0;
           $len_0_i_i_i449 = ($4610 | 0) < 0 ? 0 : $4610;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i449;
          HEAP32[$4600 >> 2] = $_pre2_i_i_i447;
          $4614 = $4599 + 1056 + $len_0_i_i_i449 | 0;
          HEAP32[$4602 >> 2] = $4614;
          HEAP8[$4614] = 92;
          $4617 = HEAP32[$4600 >> 2] | 0;
          $4616 = HEAP32[$4602 >> 2] | 0;
         }
         if ($4617 >>> 0 < $4616 >>> 0) {
          $_0_i_i_i453 = HEAPU8[$4617] | 0;
         } else {
          HEAP32[$4600 >> 2] = $4616;
          $_0_i_i_i453 = -1;
         }
         HEAP32[13924] = $_0_i_i_i453;
         $4623 = $_0_i_i_i453;
        } else {
         $4623 = $4596;
        }
        do {
         if (($4623 | 0) == 10) {
          $4626 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4626 >> 2] = (HEAP32[$4626 >> 2] | 0) + 1;
          $4630 = HEAP32[13912] | 0;
          $4632 = (HEAP32[$4630 >> 2] | 0) + 1 | 0;
          HEAP32[$4630 >> 2] = $4632;
          $4633 = HEAP8[$4632] | 0;
          $4634 = $4633 & 255;
          HEAP32[13924] = $4634;
          if ($4633 << 24 >> 24 != 92) {
           $4733 = $4634;
           break;
          }
          $4637 = HEAP32[13912] | 0;
          $4638 = $4637 | 0;
          $4639 = HEAP32[$4638 >> 2] | 0;
          $4640 = $4637 + 4 | 0;
          $4641 = HEAP32[$4640 >> 2] | 0;
          if ($4639 >>> 0 < $4641 >>> 0) {
           $4655 = $4639;
           $4654 = $4641;
          } else {
           $4645 = HEAP32[$4637 + 8 >> 2] | 0;
           $_pre2_i_i_i456 = $4637 + 1056 | 0;
           if (($4645 | 0) == -1) {
            $len_0_i_i_i458 = 0;
           } else {
            $4648 = _read($4645 | 0, $_pre2_i_i_i456 | 0, 8192) | 0;
            $len_0_i_i_i458 = ($4648 | 0) < 0 ? 0 : $4648;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i458;
           HEAP32[$4638 >> 2] = $_pre2_i_i_i456;
           $4652 = $4637 + 1056 + $len_0_i_i_i458 | 0;
           HEAP32[$4640 >> 2] = $4652;
           HEAP8[$4652] = 92;
           $4655 = HEAP32[$4638 >> 2] | 0;
           $4654 = HEAP32[$4640 >> 2] | 0;
          }
          if ($4655 >>> 0 < $4654 >>> 0) {
           $_0_i_i_i462 = HEAPU8[$4655] | 0;
          } else {
           HEAP32[$4638 >> 2] = $4654;
           $_0_i_i_i462 = -1;
          }
          HEAP32[13924] = $_0_i_i_i462;
          $4733 = $_0_i_i_i462;
         } else if (($4623 | 0) == 13) {
          $4663 = HEAP32[13912] | 0;
          $4665 = (HEAP32[$4663 >> 2] | 0) + 1 | 0;
          HEAP32[$4663 >> 2] = $4665;
          $4666 = HEAP8[$4665] | 0;
          $4667 = $4666 & 255;
          HEAP32[13924] = $4667;
          if ($4666 << 24 >> 24 == 92) {
           $4670 = HEAP32[13912] | 0;
           $4671 = $4670 | 0;
           $4672 = HEAP32[$4671 >> 2] | 0;
           $4673 = $4670 + 4 | 0;
           $4674 = HEAP32[$4673 >> 2] | 0;
           if ($4672 >>> 0 < $4674 >>> 0) {
            $4688 = $4672;
            $4687 = $4674;
           } else {
            $4678 = HEAP32[$4670 + 8 >> 2] | 0;
            $_pre2_i_i_i465 = $4670 + 1056 | 0;
            if (($4678 | 0) == -1) {
             $len_0_i_i_i467 = 0;
            } else {
             $4681 = _read($4678 | 0, $_pre2_i_i_i465 | 0, 8192) | 0;
             $len_0_i_i_i467 = ($4681 | 0) < 0 ? 0 : $4681;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i467;
            HEAP32[$4671 >> 2] = $_pre2_i_i_i465;
            $4685 = $4670 + 1056 + $len_0_i_i_i467 | 0;
            HEAP32[$4673 >> 2] = $4685;
            HEAP8[$4685] = 92;
            $4688 = HEAP32[$4671 >> 2] | 0;
            $4687 = HEAP32[$4673 >> 2] | 0;
           }
           if ($4688 >>> 0 < $4687 >>> 0) {
            $_0_i_i_i471 = HEAPU8[$4688] | 0;
           } else {
            HEAP32[$4671 >> 2] = $4687;
            $_0_i_i_i471 = -1;
           }
           HEAP32[13924] = $_0_i_i_i471;
           $4694 = $_0_i_i_i471;
          } else {
           $4694 = $4667;
          }
          if (($4694 | 0) != 10) {
           break L1475;
          }
          $4698 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4698 >> 2] = (HEAP32[$4698 >> 2] | 0) + 1;
          $4702 = HEAP32[13912] | 0;
          $4704 = (HEAP32[$4702 >> 2] | 0) + 1 | 0;
          HEAP32[$4702 >> 2] = $4704;
          $4705 = HEAP8[$4704] | 0;
          $4706 = $4705 & 255;
          HEAP32[13924] = $4706;
          if ($4705 << 24 >> 24 != 92) {
           $4733 = $4706;
           break;
          }
          $4709 = HEAP32[13912] | 0;
          $4710 = $4709 | 0;
          $4711 = HEAP32[$4710 >> 2] | 0;
          $4712 = $4709 + 4 | 0;
          $4713 = HEAP32[$4712 >> 2] | 0;
          if ($4711 >>> 0 < $4713 >>> 0) {
           $4727 = $4711;
           $4726 = $4713;
          } else {
           $4717 = HEAP32[$4709 + 8 >> 2] | 0;
           $_pre2_i_i_i474 = $4709 + 1056 | 0;
           if (($4717 | 0) == -1) {
            $len_0_i_i_i476 = 0;
           } else {
            $4720 = _read($4717 | 0, $_pre2_i_i_i474 | 0, 8192) | 0;
            $len_0_i_i_i476 = ($4720 | 0) < 0 ? 0 : $4720;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i476;
           HEAP32[$4710 >> 2] = $_pre2_i_i_i474;
           $4724 = $4709 + 1056 + $len_0_i_i_i476 | 0;
           HEAP32[$4712 >> 2] = $4724;
           HEAP8[$4724] = 92;
           $4727 = HEAP32[$4710 >> 2] | 0;
           $4726 = HEAP32[$4712 >> 2] | 0;
          }
          if ($4727 >>> 0 < $4726 >>> 0) {
           $_0_i_i_i480 = HEAPU8[$4727] | 0;
          } else {
           HEAP32[$4710 >> 2] = $4726;
           $_0_i_i_i480 = -1;
          }
          HEAP32[13924] = $_0_i_i_i480;
          $4733 = $_0_i_i_i480;
         } else {
          break L1475;
         }
        } while (0);
        if (($4733 | 0) != 92) {
         break L1474;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $4738 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_20_in = HEAP8[$4738] | 0;
     $p_25 = $4738;
     label = 1344;
    } else {
     $c_20_in = $4551;
     $p_25 = $4550;
     label = 1344;
    }
   } while (0);
   do {
    if ((label | 0) == 1344) {
     if ($c_20_in << 24 >> 24 != 61) {
      $p_251555 = $p_25;
      break;
     }
     HEAP32[5310] = 222;
     $p_27 = $p_25 + 1 | 0;
     break L190;
    }
   } while (0);
   HEAP32[5310] = 94;
   $p_27 = $p_251555;
  } else if ((label | 0) == 1347) {
   $4745 = $p_0 + 1 | 0;
   $4746 = HEAP8[$4745] | 0;
   L1537 : do {
    if ($4746 << 24 >> 24 == 92) {
     $4749 = HEAP32[13912] | 0;
     do {
      if ((HEAP32[$4749 + 4 >> 2] | 0) >>> 0 > $4745 >>> 0) {
       $_0_i = $4745;
       $4781 = $4749;
      } else {
       HEAP32[$4749 >> 2] = $4745;
       $4755 = HEAP32[13912] | 0;
       $4756 = $4755 | 0;
       $4757 = HEAP32[$4756 >> 2] | 0;
       $4758 = $4755 + 4 | 0;
       $4759 = HEAP32[$4758 >> 2] | 0;
       if ($4757 >>> 0 < $4759 >>> 0) {
        $4773 = $4757;
        $4772 = $4759;
       } else {
        $4763 = HEAP32[$4755 + 8 >> 2] | 0;
        $_pre2_i_i151 = $4755 + 1056 | 0;
        if (($4763 | 0) == -1) {
         $len_0_i_i153 = 0;
        } else {
         $4766 = _read($4763 | 0, $_pre2_i_i151 | 0, 8192) | 0;
         $len_0_i_i153 = ($4766 | 0) < 0 ? 0 : $4766;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i153;
        HEAP32[$4756 >> 2] = $_pre2_i_i151;
        $4770 = $4755 + 1056 + $len_0_i_i153 | 0;
        HEAP32[$4758 >> 2] = $4770;
        HEAP8[$4770] = 92;
        $4773 = HEAP32[$4756 >> 2] | 0;
        $4772 = HEAP32[$4758 >> 2] | 0;
       }
       if ($4773 >>> 0 < $4772 >>> 0) {
        $4775 = HEAP8[$4773] | 0;
        $4776 = HEAP32[13912] | 0;
        $4778 = HEAP32[$4776 >> 2] | 0;
        if ($4775 << 24 >> 24 == 92) {
         $_0_i = $4778;
         $4781 = $4776;
         break;
        } else {
         $c_21_in = $4775;
         $p_26 = $4778;
         label = 1398;
         break L1537;
        }
       } else {
        HEAP32[$4756 >> 2] = $4772;
        $p_261556 = HEAP32[HEAP32[13912] >> 2] | 0;
        break L1537;
       }
      }
     } while (0);
     HEAP32[$4781 >> 2] = $_0_i;
     $4783 = HEAP8[$_0_i] | 0;
     HEAP32[13924] = $4783 & 255;
     L1551 : do {
      if ($4783 << 24 >> 24 == 92) {
       L1552 : while (1) {
        $4787 = HEAP32[13912] | 0;
        $4789 = (HEAP32[$4787 >> 2] | 0) + 1 | 0;
        HEAP32[$4787 >> 2] = $4789;
        $4790 = HEAP8[$4789] | 0;
        $4791 = $4790 & 255;
        HEAP32[13924] = $4791;
        if ($4790 << 24 >> 24 == 92) {
         $4794 = HEAP32[13912] | 0;
         $4795 = $4794 | 0;
         $4796 = HEAP32[$4795 >> 2] | 0;
         $4797 = $4794 + 4 | 0;
         $4798 = HEAP32[$4797 >> 2] | 0;
         if ($4796 >>> 0 < $4798 >>> 0) {
          $4812 = $4796;
          $4811 = $4798;
         } else {
          $4802 = HEAP32[$4794 + 8 >> 2] | 0;
          $_pre2_i_i_i = $4794 + 1056 | 0;
          if (($4802 | 0) == -1) {
           $len_0_i_i_i = 0;
          } else {
           $4805 = _read($4802 | 0, $_pre2_i_i_i | 0, 8192) | 0;
           $len_0_i_i_i = ($4805 | 0) < 0 ? 0 : $4805;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i;
          HEAP32[$4795 >> 2] = $_pre2_i_i_i;
          $4809 = $4794 + 1056 + $len_0_i_i_i | 0;
          HEAP32[$4797 >> 2] = $4809;
          HEAP8[$4809] = 92;
          $4812 = HEAP32[$4795 >> 2] | 0;
          $4811 = HEAP32[$4797 >> 2] | 0;
         }
         if ($4812 >>> 0 < $4811 >>> 0) {
          $_0_i_i_i = HEAPU8[$4812] | 0;
         } else {
          HEAP32[$4795 >> 2] = $4811;
          $_0_i_i_i = -1;
         }
         HEAP32[13924] = $_0_i_i_i;
         $4818 = $_0_i_i_i;
        } else {
         $4818 = $4791;
        }
        do {
         if (($4818 | 0) == 10) {
          $4821 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4821 >> 2] = (HEAP32[$4821 >> 2] | 0) + 1;
          $4825 = HEAP32[13912] | 0;
          $4827 = (HEAP32[$4825 >> 2] | 0) + 1 | 0;
          HEAP32[$4825 >> 2] = $4827;
          $4828 = HEAP8[$4827] | 0;
          $4829 = $4828 & 255;
          HEAP32[13924] = $4829;
          if ($4828 << 24 >> 24 != 92) {
           $4928 = $4829;
           break;
          }
          $4832 = HEAP32[13912] | 0;
          $4833 = $4832 | 0;
          $4834 = HEAP32[$4833 >> 2] | 0;
          $4835 = $4832 + 4 | 0;
          $4836 = HEAP32[$4835 >> 2] | 0;
          if ($4834 >>> 0 < $4836 >>> 0) {
           $4850 = $4834;
           $4849 = $4836;
          } else {
           $4840 = HEAP32[$4832 + 8 >> 2] | 0;
           $_pre2_i_i_i420 = $4832 + 1056 | 0;
           if (($4840 | 0) == -1) {
            $len_0_i_i_i422 = 0;
           } else {
            $4843 = _read($4840 | 0, $_pre2_i_i_i420 | 0, 8192) | 0;
            $len_0_i_i_i422 = ($4843 | 0) < 0 ? 0 : $4843;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i422;
           HEAP32[$4833 >> 2] = $_pre2_i_i_i420;
           $4847 = $4832 + 1056 + $len_0_i_i_i422 | 0;
           HEAP32[$4835 >> 2] = $4847;
           HEAP8[$4847] = 92;
           $4850 = HEAP32[$4833 >> 2] | 0;
           $4849 = HEAP32[$4835 >> 2] | 0;
          }
          if ($4850 >>> 0 < $4849 >>> 0) {
           $_0_i_i_i426 = HEAPU8[$4850] | 0;
          } else {
           HEAP32[$4833 >> 2] = $4849;
           $_0_i_i_i426 = -1;
          }
          HEAP32[13924] = $_0_i_i_i426;
          $4928 = $_0_i_i_i426;
         } else if (($4818 | 0) == 13) {
          $4858 = HEAP32[13912] | 0;
          $4860 = (HEAP32[$4858 >> 2] | 0) + 1 | 0;
          HEAP32[$4858 >> 2] = $4860;
          $4861 = HEAP8[$4860] | 0;
          $4862 = $4861 & 255;
          HEAP32[13924] = $4862;
          if ($4861 << 24 >> 24 == 92) {
           $4865 = HEAP32[13912] | 0;
           $4866 = $4865 | 0;
           $4867 = HEAP32[$4866 >> 2] | 0;
           $4868 = $4865 + 4 | 0;
           $4869 = HEAP32[$4868 >> 2] | 0;
           if ($4867 >>> 0 < $4869 >>> 0) {
            $4883 = $4867;
            $4882 = $4869;
           } else {
            $4873 = HEAP32[$4865 + 8 >> 2] | 0;
            $_pre2_i_i_i429 = $4865 + 1056 | 0;
            if (($4873 | 0) == -1) {
             $len_0_i_i_i431 = 0;
            } else {
             $4876 = _read($4873 | 0, $_pre2_i_i_i429 | 0, 8192) | 0;
             $len_0_i_i_i431 = ($4876 | 0) < 0 ? 0 : $4876;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i431;
            HEAP32[$4866 >> 2] = $_pre2_i_i_i429;
            $4880 = $4865 + 1056 + $len_0_i_i_i431 | 0;
            HEAP32[$4868 >> 2] = $4880;
            HEAP8[$4880] = 92;
            $4883 = HEAP32[$4866 >> 2] | 0;
            $4882 = HEAP32[$4868 >> 2] | 0;
           }
           if ($4883 >>> 0 < $4882 >>> 0) {
            $_0_i_i_i435 = HEAPU8[$4883] | 0;
           } else {
            HEAP32[$4866 >> 2] = $4882;
            $_0_i_i_i435 = -1;
           }
           HEAP32[13924] = $_0_i_i_i435;
           $4889 = $_0_i_i_i435;
          } else {
           $4889 = $4862;
          }
          if (($4889 | 0) != 10) {
           break L1552;
          }
          $4893 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$4893 >> 2] = (HEAP32[$4893 >> 2] | 0) + 1;
          $4897 = HEAP32[13912] | 0;
          $4899 = (HEAP32[$4897 >> 2] | 0) + 1 | 0;
          HEAP32[$4897 >> 2] = $4899;
          $4900 = HEAP8[$4899] | 0;
          $4901 = $4900 & 255;
          HEAP32[13924] = $4901;
          if ($4900 << 24 >> 24 != 92) {
           $4928 = $4901;
           break;
          }
          $4904 = HEAP32[13912] | 0;
          $4905 = $4904 | 0;
          $4906 = HEAP32[$4905 >> 2] | 0;
          $4907 = $4904 + 4 | 0;
          $4908 = HEAP32[$4907 >> 2] | 0;
          if ($4906 >>> 0 < $4908 >>> 0) {
           $4922 = $4906;
           $4921 = $4908;
          } else {
           $4912 = HEAP32[$4904 + 8 >> 2] | 0;
           $_pre2_i_i_i438 = $4904 + 1056 | 0;
           if (($4912 | 0) == -1) {
            $len_0_i_i_i440 = 0;
           } else {
            $4915 = _read($4912 | 0, $_pre2_i_i_i438 | 0, 8192) | 0;
            $len_0_i_i_i440 = ($4915 | 0) < 0 ? 0 : $4915;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i440;
           HEAP32[$4905 >> 2] = $_pre2_i_i_i438;
           $4919 = $4904 + 1056 + $len_0_i_i_i440 | 0;
           HEAP32[$4907 >> 2] = $4919;
           HEAP8[$4919] = 92;
           $4922 = HEAP32[$4905 >> 2] | 0;
           $4921 = HEAP32[$4907 >> 2] | 0;
          }
          if ($4922 >>> 0 < $4921 >>> 0) {
           $_0_i_i_i444 = HEAPU8[$4922] | 0;
          } else {
           HEAP32[$4905 >> 2] = $4921;
           $_0_i_i_i444 = -1;
          }
          HEAP32[13924] = $_0_i_i_i444;
          $4928 = $_0_i_i_i444;
         } else {
          break L1552;
         }
        } while (0);
        if (($4928 | 0) != 92) {
         break L1551;
        }
       }
       _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $4933 = HEAP32[HEAP32[13912] >> 2] | 0;
     $c_21_in = HEAP8[$4933] | 0;
     $p_26 = $4933;
     label = 1398;
    } else {
     $c_21_in = $4746;
     $p_26 = $4745;
     label = 1398;
    }
   } while (0);
   do {
    if ((label | 0) == 1398) {
     $c_21 = $c_21_in & 255;
     if (($c_21 | 0) == 42) {
      $4936 = _parse_comment($p_26) | 0;
      HEAP32[5310] = 32;
      $p_28 = $4936;
      $4947 = HEAP32[13912] | 0;
      $4948 = $4947 | 0;
      HEAP32[$4948 >> 2] = $p_28;
      STACKTOP = sp;
      return;
     } else if (($c_21 | 0) == 47) {
      $4938 = _parse_line_comment($p_26) | 0;
      HEAP32[5310] = 32;
      $p_28 = $4938;
      $4947 = HEAP32[13912] | 0;
      $4948 = $4947 | 0;
      HEAP32[$4948 >> 2] = $p_28;
      STACKTOP = sp;
      return;
     } else if (($c_21 | 0) == 61) {
      HEAP32[5310] = 175;
      $p_27 = $p_26 + 1 | 0;
      break L190;
     } else {
      $p_261556 = $p_26;
      break;
     }
    }
   } while (0);
   HEAP32[5310] = 47;
   $p_27 = $p_261556;
  } else if ((label | 0) == 1403) {
   HEAP32[5310] = $5;
   $p_27 = $p_0 + 1 | 0;
  } else if ((label | 0) == 1404) {
   _tcc_error(13136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $5, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $p_27 = $p_0;
  }
 } while (0);
 L1620 : do {
  if ((label | 0) == 144) {
   $p_31310 = $p_0 + 1 | 0;
   $529 = $527 & 255;
   if ((HEAP8[$529 + 21465 | 0] | 0) == 0) {
    $h_0_lcssa = $528;
    $p_3_lcssa = $p_31310;
    $_lcssa1309 = $527;
   } else {
    $h_01311 = $528;
    $p_31312 = $p_31310;
    $534 = $529;
    while (1) {
     $536 = $534 + ($h_01311 * 263 | 0) | 0;
     $p_3 = $p_31312 + 1 | 0;
     $537 = HEAP8[$p_3] | 0;
     $538 = $537 & 255;
     if ((HEAP8[$538 + 21465 | 0] | 0) == 0) {
      $h_0_lcssa = $536;
      $p_3_lcssa = $p_3;
      $_lcssa1309 = $537;
      break;
     } else {
      $h_01311 = $536;
      $p_31312 = $p_3;
      $534 = $538;
     }
    }
   }
   if ($_lcssa1309 << 24 >> 24 != 92) {
    $547 = $p_3_lcssa - $p_0 | 0;
    $549 = 21744 + (($h_0_lcssa & 8191) << 2) | 0;
    $550 = HEAP32[$549 >> 2] | 0;
    if (($550 | 0) == 0) {
     $pts_0_lcssa = $549;
    } else {
     $552 = $550;
     while (1) {
      if ((HEAP32[$552 + 24 >> 2] | 0) == ($547 | 0)) {
       if ((_memcmp($552 + 28 | 0, $p_0 | 0, $547 | 0) | 0) == 0) {
        $p_5 = $p_3_lcssa;
        $ts_0 = $552;
        label = 277;
        break L1620;
       }
      }
      $561 = $552 | 0;
      $562 = HEAP32[$561 >> 2] | 0;
      if (($562 | 0) == 0) {
       $pts_0_lcssa = $561;
       break;
      } else {
       $552 = $562;
      }
     }
    }
    $p_5 = $p_3_lcssa;
    $ts_0 = _tok_alloc_new($pts_0_lcssa, $p_0, $547) | 0;
    label = 277;
    break;
   }
   HEAP32[5298] = 0;
   if ($p_0 >>> 0 < $p_3_lcssa >>> 0) {
    $p1_01296 = $p_0;
    $567 = 0;
    while (1) {
     $568 = HEAP8[$p1_01296] | 0;
     $569 = $567 + 1 | 0;
     $570 = HEAP32[5300] | 0;
     if (($567 | 0) < ($570 | 0)) {
      $579 = HEAP32[5299] | 0;
     } else {
      $size_0_i_i148 = ($570 | 0) == 0 ? 8 : $570;
      while (1) {
       if (($size_0_i_i148 | 0) < ($569 | 0)) {
        $size_0_i_i148 = $size_0_i_i148 << 1;
       } else {
        break;
       }
      }
      $578 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i148) | 0;
      HEAP32[5301] = $578;
      HEAP32[5300] = $size_0_i_i148;
      HEAP32[5299] = $578;
      $579 = $578;
     }
     HEAP8[$579 + $567 | 0] = $568;
     HEAP32[5298] = $569;
     $581 = $p1_01296 + 1 | 0;
     if ($581 >>> 0 < $p_3_lcssa >>> 0) {
      $p1_01296 = $581;
      $567 = $569;
     } else {
      break;
     }
    }
   }
   $583 = HEAP8[$p_3_lcssa] | 0;
   if ($583 << 24 >> 24 != 92) {
    $c_1_ph = $583 & 255;
    $p_4_ph = $p_3_lcssa;
    label = 210;
    break;
   }
   $587 = HEAP32[13912] | 0;
   do {
    if ((HEAP32[$587 + 4 >> 2] | 0) >>> 0 > $p_3_lcssa >>> 0) {
     $_0_i141 = $p_3_lcssa;
     $620 = $587;
    } else {
     HEAP32[$587 >> 2] = $p_3_lcssa;
     $593 = HEAP32[13912] | 0;
     $594 = $593 | 0;
     $595 = HEAP32[$594 >> 2] | 0;
     $596 = $593 + 4 | 0;
     $597 = HEAP32[$596 >> 2] | 0;
     if ($595 >>> 0 < $597 >>> 0) {
      $611 = $595;
      $610 = $597;
     } else {
      $601 = HEAP32[$593 + 8 >> 2] | 0;
      $_pre2_i_i406 = $593 + 1056 | 0;
      if (($601 | 0) == -1) {
       $len_0_i_i408 = 0;
      } else {
       $604 = _read($601 | 0, $_pre2_i_i406 | 0, 8192) | 0;
       $len_0_i_i408 = ($604 | 0) < 0 ? 0 : $604;
      }
      HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i408;
      HEAP32[$594 >> 2] = $_pre2_i_i406;
      $608 = $593 + 1056 + $len_0_i_i408 | 0;
      HEAP32[$596 >> 2] = $608;
      HEAP8[$608] = 92;
      $611 = HEAP32[$594 >> 2] | 0;
      $610 = HEAP32[$596 >> 2] | 0;
     }
     if ($611 >>> 0 < $610 >>> 0) {
      $613 = HEAP8[$611] | 0;
      $615 = HEAP32[13912] | 0;
      $617 = HEAP32[$615 >> 2] | 0;
      if ($613 << 24 >> 24 == 92) {
       $_0_i141 = $617;
       $620 = $615;
       break;
      } else {
       $c_1_ph = $613 & 255;
       $p_4_ph = $617;
       label = 210;
       break L1620;
      }
     } else {
      HEAP32[$594 >> 2] = $610;
      $c_1_ph = -1;
      $p_4_ph = HEAP32[HEAP32[13912] >> 2] | 0;
      label = 210;
      break L1620;
     }
    }
   } while (0);
   HEAP32[$620 >> 2] = $_0_i141;
   $622 = HEAP8[$_0_i141] | 0;
   HEAP32[13924] = $622 & 255;
   L1660 : do {
    if ($622 << 24 >> 24 == 92) {
     L1661 : while (1) {
      $626 = HEAP32[13912] | 0;
      $628 = (HEAP32[$626 >> 2] | 0) + 1 | 0;
      HEAP32[$626 >> 2] = $628;
      $629 = HEAP8[$628] | 0;
      $630 = $629 & 255;
      HEAP32[13924] = $630;
      if ($629 << 24 >> 24 == 92) {
       $633 = HEAP32[13912] | 0;
       $634 = $633 | 0;
       $635 = HEAP32[$634 >> 2] | 0;
       $636 = $633 + 4 | 0;
       $637 = HEAP32[$636 >> 2] | 0;
       if ($635 >>> 0 < $637 >>> 0) {
        $651 = $635;
        $650 = $637;
       } else {
        $641 = HEAP32[$633 + 8 >> 2] | 0;
        $_pre2_i_i_i1203 = $633 + 1056 | 0;
        if (($641 | 0) == -1) {
         $len_0_i_i_i1205 = 0;
        } else {
         $644 = _read($641 | 0, $_pre2_i_i_i1203 | 0, 8192) | 0;
         $len_0_i_i_i1205 = ($644 | 0) < 0 ? 0 : $644;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1205;
        HEAP32[$634 >> 2] = $_pre2_i_i_i1203;
        $648 = $633 + 1056 + $len_0_i_i_i1205 | 0;
        HEAP32[$636 >> 2] = $648;
        HEAP8[$648] = 92;
        $651 = HEAP32[$634 >> 2] | 0;
        $650 = HEAP32[$636 >> 2] | 0;
       }
       if ($651 >>> 0 < $650 >>> 0) {
        $_0_i_i_i1209 = HEAPU8[$651] | 0;
       } else {
        HEAP32[$634 >> 2] = $650;
        $_0_i_i_i1209 = -1;
       }
       HEAP32[13924] = $_0_i_i_i1209;
       $657 = $_0_i_i_i1209;
      } else {
       $657 = $630;
      }
      do {
       if (($657 | 0) == 13) {
        $697 = HEAP32[13912] | 0;
        $699 = (HEAP32[$697 >> 2] | 0) + 1 | 0;
        HEAP32[$697 >> 2] = $699;
        $700 = HEAP8[$699] | 0;
        $701 = $700 & 255;
        HEAP32[13924] = $701;
        if ($700 << 24 >> 24 == 92) {
         $704 = HEAP32[13912] | 0;
         $705 = $704 | 0;
         $706 = HEAP32[$705 >> 2] | 0;
         $707 = $704 + 4 | 0;
         $708 = HEAP32[$707 >> 2] | 0;
         if ($706 >>> 0 < $708 >>> 0) {
          $722 = $706;
          $721 = $708;
         } else {
          $712 = HEAP32[$704 + 8 >> 2] | 0;
          $_pre2_i_i_i1221 = $704 + 1056 | 0;
          if (($712 | 0) == -1) {
           $len_0_i_i_i1223 = 0;
          } else {
           $715 = _read($712 | 0, $_pre2_i_i_i1221 | 0, 8192) | 0;
           $len_0_i_i_i1223 = ($715 | 0) < 0 ? 0 : $715;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1223;
          HEAP32[$705 >> 2] = $_pre2_i_i_i1221;
          $719 = $704 + 1056 + $len_0_i_i_i1223 | 0;
          HEAP32[$707 >> 2] = $719;
          HEAP8[$719] = 92;
          $722 = HEAP32[$705 >> 2] | 0;
          $721 = HEAP32[$707 >> 2] | 0;
         }
         if ($722 >>> 0 < $721 >>> 0) {
          $_0_i_i_i1227 = HEAPU8[$722] | 0;
         } else {
          HEAP32[$705 >> 2] = $721;
          $_0_i_i_i1227 = -1;
         }
         HEAP32[13924] = $_0_i_i_i1227;
         $728 = $_0_i_i_i1227;
        } else {
         $728 = $701;
        }
        if (($728 | 0) != 10) {
         break L1661;
        }
        $732 = (HEAP32[13912] | 0) + 16 | 0;
        HEAP32[$732 >> 2] = (HEAP32[$732 >> 2] | 0) + 1;
        $736 = HEAP32[13912] | 0;
        $738 = (HEAP32[$736 >> 2] | 0) + 1 | 0;
        HEAP32[$736 >> 2] = $738;
        $739 = HEAP8[$738] | 0;
        $740 = $739 & 255;
        HEAP32[13924] = $740;
        if ($739 << 24 >> 24 != 92) {
         $767 = $740;
         break;
        }
        $743 = HEAP32[13912] | 0;
        $744 = $743 | 0;
        $745 = HEAP32[$744 >> 2] | 0;
        $746 = $743 + 4 | 0;
        $747 = HEAP32[$746 >> 2] | 0;
        if ($745 >>> 0 < $747 >>> 0) {
         $761 = $745;
         $760 = $747;
        } else {
         $751 = HEAP32[$743 + 8 >> 2] | 0;
         $_pre2_i_i_i1230 = $743 + 1056 | 0;
         if (($751 | 0) == -1) {
          $len_0_i_i_i1232 = 0;
         } else {
          $754 = _read($751 | 0, $_pre2_i_i_i1230 | 0, 8192) | 0;
          $len_0_i_i_i1232 = ($754 | 0) < 0 ? 0 : $754;
         }
         HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1232;
         HEAP32[$744 >> 2] = $_pre2_i_i_i1230;
         $758 = $743 + 1056 + $len_0_i_i_i1232 | 0;
         HEAP32[$746 >> 2] = $758;
         HEAP8[$758] = 92;
         $761 = HEAP32[$744 >> 2] | 0;
         $760 = HEAP32[$746 >> 2] | 0;
        }
        if ($761 >>> 0 < $760 >>> 0) {
         $_0_i_i_i1236 = HEAPU8[$761] | 0;
        } else {
         HEAP32[$744 >> 2] = $760;
         $_0_i_i_i1236 = -1;
        }
        HEAP32[13924] = $_0_i_i_i1236;
        $767 = $_0_i_i_i1236;
       } else if (($657 | 0) == 10) {
        $660 = (HEAP32[13912] | 0) + 16 | 0;
        HEAP32[$660 >> 2] = (HEAP32[$660 >> 2] | 0) + 1;
        $664 = HEAP32[13912] | 0;
        $666 = (HEAP32[$664 >> 2] | 0) + 1 | 0;
        HEAP32[$664 >> 2] = $666;
        $667 = HEAP8[$666] | 0;
        $668 = $667 & 255;
        HEAP32[13924] = $668;
        if ($667 << 24 >> 24 != 92) {
         $767 = $668;
         break;
        }
        $671 = HEAP32[13912] | 0;
        $672 = $671 | 0;
        $673 = HEAP32[$672 >> 2] | 0;
        $674 = $671 + 4 | 0;
        $675 = HEAP32[$674 >> 2] | 0;
        if ($673 >>> 0 < $675 >>> 0) {
         $689 = $673;
         $688 = $675;
        } else {
         $679 = HEAP32[$671 + 8 >> 2] | 0;
         $_pre2_i_i_i1212 = $671 + 1056 | 0;
         if (($679 | 0) == -1) {
          $len_0_i_i_i1214 = 0;
         } else {
          $682 = _read($679 | 0, $_pre2_i_i_i1212 | 0, 8192) | 0;
          $len_0_i_i_i1214 = ($682 | 0) < 0 ? 0 : $682;
         }
         HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1214;
         HEAP32[$672 >> 2] = $_pre2_i_i_i1212;
         $686 = $671 + 1056 + $len_0_i_i_i1214 | 0;
         HEAP32[$674 >> 2] = $686;
         HEAP8[$686] = 92;
         $689 = HEAP32[$672 >> 2] | 0;
         $688 = HEAP32[$674 >> 2] | 0;
        }
        if ($689 >>> 0 < $688 >>> 0) {
         $_0_i_i_i1218 = HEAPU8[$689] | 0;
        } else {
         HEAP32[$672 >> 2] = $688;
         $_0_i_i_i1218 = -1;
        }
        HEAP32[13924] = $_0_i_i_i1218;
        $767 = $_0_i_i_i1218;
       } else {
        break L1661;
       }
      } while (0);
      if (($767 | 0) != 92) {
       break L1660;
      }
     }
     _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
   } while (0);
   $772 = HEAP32[HEAP32[13912] >> 2] | 0;
   $c_1_ph = HEAPU8[$772] | 0;
   $p_4_ph = $772;
   label = 210;
  } else if ((label | 0) == 337) {
   HEAP32[5298] = $storemerge;
   $c_3 = $c_3_ph;
   $p_7 = $p_7_ph;
   $1221 = $storemerge;
   L1719 : while (1) {
    $1222 = $1221 + 1 | 0;
    $1223 = HEAP32[5300] | 0;
    if (($1221 | 0) < ($1223 | 0)) {
     $1232 = HEAP32[5299] | 0;
    } else {
     $size_0_i_i105 = ($1223 | 0) == 0 ? 8 : $1223;
     while (1) {
      if (($size_0_i_i105 | 0) < ($1222 | 0)) {
       $size_0_i_i105 = $size_0_i_i105 << 1;
      } else {
       break;
      }
     }
     $1231 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i105) | 0;
     HEAP32[5301] = $1231;
     HEAP32[5300] = $size_0_i_i105;
     HEAP32[5299] = $1231;
     $1232 = $1231;
    }
    HEAP8[$1232 + $1221 | 0] = $c_3;
    HEAP32[5298] = $1222;
    $1235 = $p_7 + 1 | 0;
    $1236 = HEAP8[$1235] | 0;
    L1728 : do {
     if ($1236 << 24 >> 24 == 92) {
      $1239 = HEAP32[13912] | 0;
      do {
       if ((HEAP32[$1239 + 4 >> 2] | 0) >>> 0 > $1235 >>> 0) {
        $_0_i98 = $1235;
        $1271 = $1239;
       } else {
        HEAP32[$1239 >> 2] = $1235;
        $1245 = HEAP32[13912] | 0;
        $1246 = $1245 | 0;
        $1247 = HEAP32[$1246 >> 2] | 0;
        $1248 = $1245 + 4 | 0;
        $1249 = HEAP32[$1248 >> 2] | 0;
        if ($1247 >>> 0 < $1249 >>> 0) {
         $1263 = $1247;
         $1262 = $1249;
        } else {
         $1253 = HEAP32[$1245 + 8 >> 2] | 0;
         $_pre2_i_i354 = $1245 + 1056 | 0;
         if (($1253 | 0) == -1) {
          $len_0_i_i356 = 0;
         } else {
          $1256 = _read($1253 | 0, $_pre2_i_i354 | 0, 8192) | 0;
          $len_0_i_i356 = ($1256 | 0) < 0 ? 0 : $1256;
         }
         HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i356;
         HEAP32[$1246 >> 2] = $_pre2_i_i354;
         $1260 = $1245 + 1056 + $len_0_i_i356 | 0;
         HEAP32[$1248 >> 2] = $1260;
         HEAP8[$1260] = 92;
         $1263 = HEAP32[$1246 >> 2] | 0;
         $1262 = HEAP32[$1248 >> 2] | 0;
        }
        if ($1263 >>> 0 < $1262 >>> 0) {
         $1265 = HEAP8[$1263] | 0;
         $1266 = HEAP32[13912] | 0;
         $1268 = HEAP32[$1266 >> 2] | 0;
         if ($1265 << 24 >> 24 == 92) {
          $_0_i98 = $1268;
          $1271 = $1266;
          break;
         } else {
          $c_4_in = $1265;
          $p_8 = $1268;
          label = 394;
          break L1728;
         }
        } else {
         HEAP32[$1246 >> 2] = $1262;
         $p_81531 = HEAP32[HEAP32[13912] >> 2] | 0;
         $c_41534 = -1;
         label = 395;
         break L1728;
        }
       }
      } while (0);
      HEAP32[$1271 >> 2] = $_0_i98;
      $1273 = HEAP8[$_0_i98] | 0;
      HEAP32[13924] = $1273 & 255;
      L1742 : do {
       if ($1273 << 24 >> 24 == 92) {
        L1743 : while (1) {
         $1277 = HEAP32[13912] | 0;
         $1279 = (HEAP32[$1277 >> 2] | 0) + 1 | 0;
         HEAP32[$1277 >> 2] = $1279;
         $1280 = HEAP8[$1279] | 0;
         $1281 = $1280 & 255;
         HEAP32[13924] = $1281;
         if ($1280 << 24 >> 24 == 92) {
          $1284 = HEAP32[13912] | 0;
          $1285 = $1284 | 0;
          $1286 = HEAP32[$1285 >> 2] | 0;
          $1287 = $1284 + 4 | 0;
          $1288 = HEAP32[$1287 >> 2] | 0;
          if ($1286 >>> 0 < $1288 >>> 0) {
           $1302 = $1286;
           $1301 = $1288;
          } else {
           $1292 = HEAP32[$1284 + 8 >> 2] | 0;
           $_pre2_i_i_i1023 = $1284 + 1056 | 0;
           if (($1292 | 0) == -1) {
            $len_0_i_i_i1025 = 0;
           } else {
            $1295 = _read($1292 | 0, $_pre2_i_i_i1023 | 0, 8192) | 0;
            $len_0_i_i_i1025 = ($1295 | 0) < 0 ? 0 : $1295;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1025;
           HEAP32[$1285 >> 2] = $_pre2_i_i_i1023;
           $1299 = $1284 + 1056 + $len_0_i_i_i1025 | 0;
           HEAP32[$1287 >> 2] = $1299;
           HEAP8[$1299] = 92;
           $1302 = HEAP32[$1285 >> 2] | 0;
           $1301 = HEAP32[$1287 >> 2] | 0;
          }
          if ($1302 >>> 0 < $1301 >>> 0) {
           $_0_i_i_i1029 = HEAPU8[$1302] | 0;
          } else {
           HEAP32[$1285 >> 2] = $1301;
           $_0_i_i_i1029 = -1;
          }
          HEAP32[13924] = $_0_i_i_i1029;
          $1308 = $_0_i_i_i1029;
         } else {
          $1308 = $1281;
         }
         do {
          if (($1308 | 0) == 10) {
           $1311 = (HEAP32[13912] | 0) + 16 | 0;
           HEAP32[$1311 >> 2] = (HEAP32[$1311 >> 2] | 0) + 1;
           $1315 = HEAP32[13912] | 0;
           $1317 = (HEAP32[$1315 >> 2] | 0) + 1 | 0;
           HEAP32[$1315 >> 2] = $1317;
           $1318 = HEAP8[$1317] | 0;
           $1319 = $1318 & 255;
           HEAP32[13924] = $1319;
           if ($1318 << 24 >> 24 != 92) {
            $1418 = $1319;
            break;
           }
           $1322 = HEAP32[13912] | 0;
           $1323 = $1322 | 0;
           $1324 = HEAP32[$1323 >> 2] | 0;
           $1325 = $1322 + 4 | 0;
           $1326 = HEAP32[$1325 >> 2] | 0;
           if ($1324 >>> 0 < $1326 >>> 0) {
            $1340 = $1324;
            $1339 = $1326;
           } else {
            $1330 = HEAP32[$1322 + 8 >> 2] | 0;
            $_pre2_i_i_i1032 = $1322 + 1056 | 0;
            if (($1330 | 0) == -1) {
             $len_0_i_i_i1034 = 0;
            } else {
             $1333 = _read($1330 | 0, $_pre2_i_i_i1032 | 0, 8192) | 0;
             $len_0_i_i_i1034 = ($1333 | 0) < 0 ? 0 : $1333;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1034;
            HEAP32[$1323 >> 2] = $_pre2_i_i_i1032;
            $1337 = $1322 + 1056 + $len_0_i_i_i1034 | 0;
            HEAP32[$1325 >> 2] = $1337;
            HEAP8[$1337] = 92;
            $1340 = HEAP32[$1323 >> 2] | 0;
            $1339 = HEAP32[$1325 >> 2] | 0;
           }
           if ($1340 >>> 0 < $1339 >>> 0) {
            $_0_i_i_i1038 = HEAPU8[$1340] | 0;
           } else {
            HEAP32[$1323 >> 2] = $1339;
            $_0_i_i_i1038 = -1;
           }
           HEAP32[13924] = $_0_i_i_i1038;
           $1418 = $_0_i_i_i1038;
          } else if (($1308 | 0) == 13) {
           $1348 = HEAP32[13912] | 0;
           $1350 = (HEAP32[$1348 >> 2] | 0) + 1 | 0;
           HEAP32[$1348 >> 2] = $1350;
           $1351 = HEAP8[$1350] | 0;
           $1352 = $1351 & 255;
           HEAP32[13924] = $1352;
           if ($1351 << 24 >> 24 == 92) {
            $1355 = HEAP32[13912] | 0;
            $1356 = $1355 | 0;
            $1357 = HEAP32[$1356 >> 2] | 0;
            $1358 = $1355 + 4 | 0;
            $1359 = HEAP32[$1358 >> 2] | 0;
            if ($1357 >>> 0 < $1359 >>> 0) {
             $1373 = $1357;
             $1372 = $1359;
            } else {
             $1363 = HEAP32[$1355 + 8 >> 2] | 0;
             $_pre2_i_i_i1041 = $1355 + 1056 | 0;
             if (($1363 | 0) == -1) {
              $len_0_i_i_i1043 = 0;
             } else {
              $1366 = _read($1363 | 0, $_pre2_i_i_i1041 | 0, 8192) | 0;
              $len_0_i_i_i1043 = ($1366 | 0) < 0 ? 0 : $1366;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1043;
             HEAP32[$1356 >> 2] = $_pre2_i_i_i1041;
             $1370 = $1355 + 1056 + $len_0_i_i_i1043 | 0;
             HEAP32[$1358 >> 2] = $1370;
             HEAP8[$1370] = 92;
             $1373 = HEAP32[$1356 >> 2] | 0;
             $1372 = HEAP32[$1358 >> 2] | 0;
            }
            if ($1373 >>> 0 < $1372 >>> 0) {
             $_0_i_i_i1047 = HEAPU8[$1373] | 0;
            } else {
             HEAP32[$1356 >> 2] = $1372;
             $_0_i_i_i1047 = -1;
            }
            HEAP32[13924] = $_0_i_i_i1047;
            $1379 = $_0_i_i_i1047;
           } else {
            $1379 = $1352;
           }
           if (($1379 | 0) != 10) {
            break L1743;
           }
           $1383 = (HEAP32[13912] | 0) + 16 | 0;
           HEAP32[$1383 >> 2] = (HEAP32[$1383 >> 2] | 0) + 1;
           $1387 = HEAP32[13912] | 0;
           $1389 = (HEAP32[$1387 >> 2] | 0) + 1 | 0;
           HEAP32[$1387 >> 2] = $1389;
           $1390 = HEAP8[$1389] | 0;
           $1391 = $1390 & 255;
           HEAP32[13924] = $1391;
           if ($1390 << 24 >> 24 != 92) {
            $1418 = $1391;
            break;
           }
           $1394 = HEAP32[13912] | 0;
           $1395 = $1394 | 0;
           $1396 = HEAP32[$1395 >> 2] | 0;
           $1397 = $1394 + 4 | 0;
           $1398 = HEAP32[$1397 >> 2] | 0;
           if ($1396 >>> 0 < $1398 >>> 0) {
            $1412 = $1396;
            $1411 = $1398;
           } else {
            $1402 = HEAP32[$1394 + 8 >> 2] | 0;
            $_pre2_i_i_i1050 = $1394 + 1056 | 0;
            if (($1402 | 0) == -1) {
             $len_0_i_i_i1052 = 0;
            } else {
             $1405 = _read($1402 | 0, $_pre2_i_i_i1050 | 0, 8192) | 0;
             $len_0_i_i_i1052 = ($1405 | 0) < 0 ? 0 : $1405;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1052;
            HEAP32[$1395 >> 2] = $_pre2_i_i_i1050;
            $1409 = $1394 + 1056 + $len_0_i_i_i1052 | 0;
            HEAP32[$1397 >> 2] = $1409;
            HEAP8[$1409] = 92;
            $1412 = HEAP32[$1395 >> 2] | 0;
            $1411 = HEAP32[$1397 >> 2] | 0;
           }
           if ($1412 >>> 0 < $1411 >>> 0) {
            $_0_i_i_i1056 = HEAPU8[$1412] | 0;
           } else {
            HEAP32[$1395 >> 2] = $1411;
            $_0_i_i_i1056 = -1;
           }
           HEAP32[13924] = $_0_i_i_i1056;
           $1418 = $_0_i_i_i1056;
          } else {
           break L1743;
          }
         } while (0);
         if (($1418 | 0) != 92) {
          break L1742;
         }
        }
        _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
       }
      } while (0);
      $1423 = HEAP32[HEAP32[13912] >> 2] | 0;
      $c_4_in = HEAP8[$1423] | 0;
      $p_8 = $1423;
      label = 394;
     } else {
      $c_4_in = $1236;
      $p_8 = $1235;
      label = 394;
     }
    } while (0);
    if ((label | 0) == 394) {
     label = 0;
     $c_4 = $c_4_in & 255;
     if (($c_4 - 48 | 0) >>> 0 < 10 >>> 0) {
      $p_81532 = $p_8;
      $c_41535 = $c_4;
     } else {
      $p_81531 = $p_8;
      $c_41534 = $c_4;
      label = 395;
     }
    }
    do {
     if ((label | 0) == 395) {
      label = 0;
      if (($c_41534 - 97 | 0) >>> 0 < 26 >>> 0 | ($c_41534 - 65 | 0) >>> 0 < 26 >>> 0) {
       $p_81532 = $p_81531;
       $c_41535 = $c_41534;
       break;
      }
      if (($c_41534 | 0) == 95 | ($c_41534 | 0) == 46) {
       $p_81532 = $p_81531;
       $c_41535 = $c_41534;
       break;
      } else if (!(($c_41534 | 0) == 45 | ($c_41534 | 0) == 43)) {
       break L1719;
      }
      if (($c_3 | 0) == 112 | ($c_3 | 0) == 101 | ($c_3 | 0) == 80 | ($c_3 | 0) == 69) {
       $p_81532 = $p_81531;
       $c_41535 = $c_41534;
      } else {
       break L1719;
      }
     }
    } while (0);
    $c_3 = $c_41535;
    $p_7 = $p_81532;
    $1221 = HEAP32[5298] | 0;
   }
   $1430 = HEAP32[5298] | 0;
   $1431 = $1430 + 1 | 0;
   $1432 = HEAP32[5300] | 0;
   if (($1430 | 0) < ($1432 | 0)) {
    $1441 = HEAP32[5299] | 0;
   } else {
    $size_0_i_i92 = ($1432 | 0) == 0 ? 8 : $1432;
    while (1) {
     if (($size_0_i_i92 | 0) < ($1431 | 0)) {
      $size_0_i_i92 = $size_0_i_i92 << 1;
     } else {
      break;
     }
    }
    $1440 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i92) | 0;
    HEAP32[5301] = $1440;
    HEAP32[5300] = $size_0_i_i92;
    HEAP32[5299] = $1440;
    $1441 = $1440;
   }
   HEAP8[$1441 + $1430 | 0] = 0;
   HEAP32[5298] = $1431;
   HEAP32[5302] = 21192;
   HEAP32[5310] = 206;
   $p_27 = $p_81531;
  } else if ((label | 0) == 570) {
   $2031 = $str;
   _memset($2031 | 0, 0, 16) | 0;
   $2032 = _parse_pp_string($p_12, $c_7, $str) | 0;
   $2033 = $str | 0;
   $2034 = HEAP32[$2033 >> 2] | 0;
   $2035 = $2034 + 1 | 0;
   $2036 = $str + 8 | 0;
   $2037 = HEAP32[$2036 >> 2] | 0;
   if (($2034 | 0) < ($2037 | 0)) {
    $2048 = HEAP32[$str + 4 >> 2] | 0;
   } else {
    $size_0_i_i = ($2037 | 0) == 0 ? 8 : $2037;
    while (1) {
     if (($size_0_i_i | 0) < ($2035 | 0)) {
      $size_0_i_i = $size_0_i_i << 1;
     } else {
      break;
     }
    }
    $2044 = $str + 12 | 0;
    $2046 = _tcc_realloc(HEAP32[$2044 >> 2] | 0, $size_0_i_i) | 0;
    HEAP32[$2044 >> 2] = $2046;
    HEAP32[$2036 >> 2] = $size_0_i_i;
    HEAP32[$str + 4 >> 2] = $2046;
    $2048 = $2046;
   }
   HEAP8[$2048 + $2034 | 0] = 0;
   HEAP32[$2033 >> 2] = $2035;
   HEAP32[5298] = 0;
   $2051 = HEAP32[$str + 4 >> 2] | 0;
   $2052 = HEAP8[$2051] | 0;
   if ($2052 << 24 >> 24 == 0) {
    $2152 = 0;
   } else {
    $2054 = ($is_long_0 | 0) == 0;
    $p_025_i = $2051;
    $2057 = $2052;
    $2056 = 0;
    while (1) {
     $2058 = $2057 & 255;
     L1827 : do {
      if ($2057 << 24 >> 24 == 92) {
       $2061 = $p_025_i + 1 | 0;
       $2062 = HEAP8[$2061] | 0;
       $2063 = $2062 & 255;
       switch ($2063 | 0) {
       case 48:
       case 49:
       case 50:
       case 51:
       case 52:
       case 53:
       case 54:
       case 55:
        {
         $2065 = $2063 - 48 | 0;
         $2066 = $p_025_i + 2 | 0;
         $2067 = HEAP8[$2066] | 0;
         if (($2067 & -8) << 24 >> 24 != 48) {
          $p_4_i = $2066;
          $c_2_i = $2065;
          $2121 = $2056;
          break L1827;
         }
         $2074 = ($2065 << 3) - 48 + ($2067 & 255) | 0;
         $2075 = $p_025_i + 3 | 0;
         $2076 = HEAP8[$2075] | 0;
         if (($2076 & -8) << 24 >> 24 != 48) {
          $p_4_i = $2075;
          $c_2_i = $2074;
          $2121 = $2056;
          break L1827;
         }
         $p_4_i = $p_025_i + 4 | 0;
         $c_2_i = ($2074 << 3) - 48 + ($2076 & 255) | 0;
         $2121 = $2056;
         break L1827;
         break;
        }
       case 120:
       case 117:
       case 85:
        {
         $p_2_i = $p_025_i + 2 | 0;
         $n_1_i = 0;
         while (1) {
          $2088 = HEAP8[$p_2_i] | 0;
          $2089 = $2088 & 255;
          do {
           if (($2088 - 97 & 255) >>> 0 < 6 >>> 0) {
            $c_0_i68 = $2089 - 87 | 0;
           } else {
            if (($2088 - 65 & 255) >>> 0 < 6 >>> 0) {
             $c_0_i68 = $2089 - 55 | 0;
             break;
            }
            if (($2088 - 48 & 255) >>> 0 >= 10 >>> 0) {
             $p_4_i = $p_2_i;
             $c_2_i = $n_1_i;
             $2121 = $2056;
             break L1827;
            }
            $c_0_i68 = $2089 - 48 | 0;
           }
          } while (0);
          $p_2_i = $p_2_i + 1 | 0;
          $n_1_i = $c_0_i68 + ($n_1_i << 4) | 0;
         }
         break;
        }
       case 97:
        {
         $p_3_i = $2061;
         $c_1_i = 7;
         label = 601;
         break L1827;
         break;
        }
       case 98:
        {
         $p_3_i = $2061;
         $c_1_i = 8;
         label = 601;
         break L1827;
         break;
        }
       case 102:
        {
         $p_3_i = $2061;
         $c_1_i = 12;
         label = 601;
         break L1827;
         break;
        }
       case 110:
        {
         $p_3_i = $2061;
         $c_1_i = 10;
         label = 601;
         break L1827;
         break;
        }
       case 114:
        {
         $p_3_i = $2061;
         $c_1_i = 13;
         label = 601;
         break L1827;
         break;
        }
       case 116:
        {
         $p_3_i = $2061;
         $c_1_i = 9;
         label = 601;
         break L1827;
         break;
        }
       case 118:
        {
         $p_3_i = $2061;
         $c_1_i = 11;
         label = 601;
         break L1827;
         break;
        }
       case 101:
        {
         if ((HEAP32[1888] | 0) != 0) {
          $p_3_i = $2061;
          $c_1_i = 27;
          label = 601;
          break L1827;
         }
         break;
        }
       case 39:
       case 34:
       case 92:
       case 63:
        {
         $p_3_i = $2061;
         $c_1_i = $2063;
         label = 601;
         break L1827;
         break;
        }
       default:
        {}
       }
       if (($2062 - 33 & 255) >>> 0 < 94 >>> 0) {
        _tcc_warning(12968, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $2063, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $p_3_i = $2061;
        $c_1_i = $2063;
        label = 601;
        break;
       } else {
        _tcc_warning(12880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $2063, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $p_3_i = $2061;
        $c_1_i = $2063;
        label = 601;
        break;
       }
      } else {
       $p_3_i = $p_025_i;
       $c_1_i = $2058;
       label = 601;
      }
     } while (0);
     if ((label | 0) == 601) {
      label = 0;
      $p_4_i = $p_3_i + 1 | 0;
      $c_2_i = $c_1_i;
      $2121 = HEAP32[5298] | 0;
     }
     if ($2054) {
      $2123 = $2121 + 1 | 0;
      $2124 = HEAP32[5300] | 0;
      if (($2121 | 0) < ($2124 | 0)) {
       $2133 = HEAP32[5299] | 0;
      } else {
       $size_0_i_i20_i = ($2124 | 0) == 0 ? 8 : $2124;
       while (1) {
        if (($size_0_i_i20_i | 0) < ($2123 | 0)) {
         $size_0_i_i20_i = $size_0_i_i20_i << 1;
        } else {
         break;
        }
       }
       $2132 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i20_i) | 0;
       HEAP32[5301] = $2132;
       HEAP32[5300] = $size_0_i_i20_i;
       HEAP32[5299] = $2132;
       $2133 = $2132;
      }
      HEAP8[$2133 + $2121 | 0] = $c_2_i;
      $storemerge26_i = $2123;
     } else {
      $2137 = $2121 + 4 | 0;
      $2138 = HEAP32[5300] | 0;
      if (($2137 | 0) > ($2138 | 0)) {
       $size_0_i_i14_i = ($2138 | 0) == 0 ? 8 : $2138;
       while (1) {
        if (($size_0_i_i14_i | 0) < ($2137 | 0)) {
         $size_0_i_i14_i = $size_0_i_i14_i << 1;
        } else {
         break;
        }
       }
       $2146 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i14_i) | 0;
       HEAP32[5301] = $2146;
       HEAP32[5300] = $size_0_i_i14_i;
       HEAP32[5299] = $2146;
       $2147 = $2146;
      } else {
       $2147 = HEAP32[5299] | 0;
      }
      HEAP32[$2147 + $2121 >> 2] = $c_2_i;
      $storemerge26_i = $2137;
     }
     HEAP32[5298] = $storemerge26_i;
     $2150 = HEAP8[$p_4_i] | 0;
     if ($2150 << 24 >> 24 == 0) {
      $2152 = $storemerge26_i;
      break;
     } else {
      $p_025_i = $p_4_i;
      $2057 = $2150;
      $2056 = $storemerge26_i;
     }
    }
   }
   $2153 = ($is_long_0 | 0) == 0;
   if ($2153) {
    $2155 = $2152 + 1 | 0;
    $2156 = HEAP32[5300] | 0;
    if (($2152 | 0) < ($2156 | 0)) {
     $2165 = HEAP32[5299] | 0;
    } else {
     $size_0_i_i8_i = ($2156 | 0) == 0 ? 8 : $2156;
     while (1) {
      if (($size_0_i_i8_i | 0) < ($2155 | 0)) {
       $size_0_i_i8_i = $size_0_i_i8_i << 1;
      } else {
       break;
      }
     }
     $2164 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i8_i) | 0;
     HEAP32[5301] = $2164;
     HEAP32[5300] = $size_0_i_i8_i;
     HEAP32[5299] = $2164;
     $2165 = $2164;
    }
    HEAP8[$2165 + $2152 | 0] = 0;
    $storemerge_i = $2155;
   } else {
    $2168 = $2152 + 4 | 0;
    $2169 = HEAP32[5300] | 0;
    if (($2168 | 0) > ($2169 | 0)) {
     $size_0_i_i_i = ($2169 | 0) == 0 ? 8 : $2169;
     while (1) {
      if (($size_0_i_i_i | 0) < ($2168 | 0)) {
       $size_0_i_i_i = $size_0_i_i_i << 1;
      } else {
       break;
      }
     }
     $2177 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i_i) | 0;
     HEAP32[5301] = $2177;
     HEAP32[5300] = $size_0_i_i_i;
     HEAP32[5299] = $2177;
     $2178 = $2177;
    } else {
     $2178 = HEAP32[5299] | 0;
    }
    HEAP32[$2178 + $2152 >> 2] = 0;
    $storemerge_i = $2168;
   }
   HEAP32[5298] = $storemerge_i;
   _tcc_free(HEAP32[$str + 12 >> 2] | 0);
   _memset($2031 | 0, 0, 16) | 0;
   if (($c_7 | 0) != 39) {
    HEAP32[5302] = 21192;
    if ($2153) {
     HEAP32[5310] = 181;
     $p_27 = $2032;
     break;
    } else {
     HEAP32[5310] = 184;
     $p_27 = $2032;
     break;
    }
   }
   $2185 = ($is_long_0 | 0) != 0;
   $_ = $2185 ? 4 : 1;
   $2186 = HEAP32[5298] | 0;
   if (($2186 | 0) > ($_ | 0)) {
    $2190 = $2186;
   } else {
    _tcc_error(13432, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $2190 = HEAP32[5298] | 0;
   }
   if (($2190 | 0) > ($_ << 1 | 0)) {
    _tcc_warning(13312, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $2195 = HEAP32[5299] | 0;
   if ($2185) {
    HEAP32[5302] = HEAP32[$2195 >> 2];
    HEAP32[5310] = 183;
    $p_27 = $2032;
    break;
   } else {
    HEAP32[5302] = HEAP8[$2195] | 0;
    HEAP32[5310] = 180;
    $p_27 = $2032;
    break;
   }
  }
 } while (0);
 L1911 : do {
  if ((label | 0) == 210) {
   if ((HEAP8[$c_1_ph + 21465 | 0] | 0) == 0) {
    $p_4_lcssa = $p_4_ph;
   } else {
    $p_41294 = $p_4_ph;
    $c_11295_off0 = $c_1_ph & 255;
    while (1) {
     $780 = HEAP32[5298] | 0;
     $781 = $780 + 1 | 0;
     $782 = HEAP32[5300] | 0;
     if (($780 | 0) < ($782 | 0)) {
      $791 = HEAP32[5299] | 0;
     } else {
      $size_0_i_i129 = ($782 | 0) == 0 ? 8 : $782;
      while (1) {
       if (($size_0_i_i129 | 0) < ($781 | 0)) {
        $size_0_i_i129 = $size_0_i_i129 << 1;
       } else {
        break;
       }
      }
      $790 = _tcc_realloc(HEAP32[5301] | 0, $size_0_i_i129) | 0;
      HEAP32[5301] = $790;
      HEAP32[5300] = $size_0_i_i129;
      HEAP32[5299] = $790;
      $791 = $790;
     }
     HEAP8[$791 + $780 | 0] = $c_11295_off0;
     HEAP32[5298] = $781;
     $793 = $p_41294 + 1 | 0;
     $794 = HEAP8[$793] | 0;
     $795 = $794 & 255;
     L1924 : do {
      if ($794 << 24 >> 24 == 92) {
       $798 = HEAP32[13912] | 0;
       do {
        if ((HEAP32[$798 + 4 >> 2] | 0) >>> 0 > $793 >>> 0) {
         $_0_i122 = $793;
         $831 = $798;
        } else {
         HEAP32[$798 >> 2] = $793;
         $804 = HEAP32[13912] | 0;
         $805 = $804 | 0;
         $806 = HEAP32[$805 >> 2] | 0;
         $807 = $804 + 4 | 0;
         $808 = HEAP32[$807 >> 2] | 0;
         if ($806 >>> 0 < $808 >>> 0) {
          $822 = $806;
          $821 = $808;
         } else {
          $812 = HEAP32[$804 + 8 >> 2] | 0;
          $_pre2_i_i378 = $804 + 1056 | 0;
          if (($812 | 0) == -1) {
           $len_0_i_i380 = 0;
          } else {
           $815 = _read($812 | 0, $_pre2_i_i378 | 0, 8192) | 0;
           $len_0_i_i380 = ($815 | 0) < 0 ? 0 : $815;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i380;
          HEAP32[$805 >> 2] = $_pre2_i_i378;
          $819 = $804 + 1056 + $len_0_i_i380 | 0;
          HEAP32[$807 >> 2] = $819;
          HEAP8[$819] = 92;
          $822 = HEAP32[$805 >> 2] | 0;
          $821 = HEAP32[$807 >> 2] | 0;
         }
         if ($822 >>> 0 < $821 >>> 0) {
          $824 = HEAP8[$822] | 0;
          $826 = HEAP32[13912] | 0;
          $828 = HEAP32[$826 >> 2] | 0;
          if ($824 << 24 >> 24 == 92) {
           $_0_i122 = $828;
           $831 = $826;
           break;
          } else {
           $c_1_be = $824 & 255;
           $p_4_be = $828;
           break L1924;
          }
         } else {
          HEAP32[$805 >> 2] = $821;
          $c_1_be = -1;
          $p_4_be = HEAP32[HEAP32[13912] >> 2] | 0;
          break L1924;
         }
        }
       } while (0);
       HEAP32[$831 >> 2] = $_0_i122;
       $833 = HEAP8[$_0_i122] | 0;
       HEAP32[13924] = $833 & 255;
       L1938 : do {
        if ($833 << 24 >> 24 == 92) {
         L1939 : while (1) {
          $837 = HEAP32[13912] | 0;
          $839 = (HEAP32[$837 >> 2] | 0) + 1 | 0;
          HEAP32[$837 >> 2] = $839;
          $840 = HEAP8[$839] | 0;
          $841 = $840 & 255;
          HEAP32[13924] = $841;
          if ($840 << 24 >> 24 == 92) {
           $844 = HEAP32[13912] | 0;
           $845 = $844 | 0;
           $846 = HEAP32[$845 >> 2] | 0;
           $847 = $844 + 4 | 0;
           $848 = HEAP32[$847 >> 2] | 0;
           if ($846 >>> 0 < $848 >>> 0) {
            $862 = $846;
            $861 = $848;
           } else {
            $852 = HEAP32[$844 + 8 >> 2] | 0;
            $_pre2_i_i_i1095 = $844 + 1056 | 0;
            if (($852 | 0) == -1) {
             $len_0_i_i_i1097 = 0;
            } else {
             $855 = _read($852 | 0, $_pre2_i_i_i1095 | 0, 8192) | 0;
             $len_0_i_i_i1097 = ($855 | 0) < 0 ? 0 : $855;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1097;
            HEAP32[$845 >> 2] = $_pre2_i_i_i1095;
            $859 = $844 + 1056 + $len_0_i_i_i1097 | 0;
            HEAP32[$847 >> 2] = $859;
            HEAP8[$859] = 92;
            $862 = HEAP32[$845 >> 2] | 0;
            $861 = HEAP32[$847 >> 2] | 0;
           }
           if ($862 >>> 0 < $861 >>> 0) {
            $_0_i_i_i1101 = HEAPU8[$862] | 0;
           } else {
            HEAP32[$845 >> 2] = $861;
            $_0_i_i_i1101 = -1;
           }
           HEAP32[13924] = $_0_i_i_i1101;
           $868 = $_0_i_i_i1101;
          } else {
           $868 = $841;
          }
          do {
           if (($868 | 0) == 10) {
            $871 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$871 >> 2] = (HEAP32[$871 >> 2] | 0) + 1;
            $875 = HEAP32[13912] | 0;
            $877 = (HEAP32[$875 >> 2] | 0) + 1 | 0;
            HEAP32[$875 >> 2] = $877;
            $878 = HEAP8[$877] | 0;
            $879 = $878 & 255;
            HEAP32[13924] = $879;
            if ($878 << 24 >> 24 != 92) {
             $978 = $879;
             break;
            }
            $882 = HEAP32[13912] | 0;
            $883 = $882 | 0;
            $884 = HEAP32[$883 >> 2] | 0;
            $885 = $882 + 4 | 0;
            $886 = HEAP32[$885 >> 2] | 0;
            if ($884 >>> 0 < $886 >>> 0) {
             $900 = $884;
             $899 = $886;
            } else {
             $890 = HEAP32[$882 + 8 >> 2] | 0;
             $_pre2_i_i_i1104 = $882 + 1056 | 0;
             if (($890 | 0) == -1) {
              $len_0_i_i_i1106 = 0;
             } else {
              $893 = _read($890 | 0, $_pre2_i_i_i1104 | 0, 8192) | 0;
              $len_0_i_i_i1106 = ($893 | 0) < 0 ? 0 : $893;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1106;
             HEAP32[$883 >> 2] = $_pre2_i_i_i1104;
             $897 = $882 + 1056 + $len_0_i_i_i1106 | 0;
             HEAP32[$885 >> 2] = $897;
             HEAP8[$897] = 92;
             $900 = HEAP32[$883 >> 2] | 0;
             $899 = HEAP32[$885 >> 2] | 0;
            }
            if ($900 >>> 0 < $899 >>> 0) {
             $_0_i_i_i1110 = HEAPU8[$900] | 0;
            } else {
             HEAP32[$883 >> 2] = $899;
             $_0_i_i_i1110 = -1;
            }
            HEAP32[13924] = $_0_i_i_i1110;
            $978 = $_0_i_i_i1110;
           } else if (($868 | 0) == 13) {
            $908 = HEAP32[13912] | 0;
            $910 = (HEAP32[$908 >> 2] | 0) + 1 | 0;
            HEAP32[$908 >> 2] = $910;
            $911 = HEAP8[$910] | 0;
            $912 = $911 & 255;
            HEAP32[13924] = $912;
            if ($911 << 24 >> 24 == 92) {
             $915 = HEAP32[13912] | 0;
             $916 = $915 | 0;
             $917 = HEAP32[$916 >> 2] | 0;
             $918 = $915 + 4 | 0;
             $919 = HEAP32[$918 >> 2] | 0;
             if ($917 >>> 0 < $919 >>> 0) {
              $933 = $917;
              $932 = $919;
             } else {
              $923 = HEAP32[$915 + 8 >> 2] | 0;
              $_pre2_i_i_i1113 = $915 + 1056 | 0;
              if (($923 | 0) == -1) {
               $len_0_i_i_i1115 = 0;
              } else {
               $926 = _read($923 | 0, $_pre2_i_i_i1113 | 0, 8192) | 0;
               $len_0_i_i_i1115 = ($926 | 0) < 0 ? 0 : $926;
              }
              HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1115;
              HEAP32[$916 >> 2] = $_pre2_i_i_i1113;
              $930 = $915 + 1056 + $len_0_i_i_i1115 | 0;
              HEAP32[$918 >> 2] = $930;
              HEAP8[$930] = 92;
              $933 = HEAP32[$916 >> 2] | 0;
              $932 = HEAP32[$918 >> 2] | 0;
             }
             if ($933 >>> 0 < $932 >>> 0) {
              $_0_i_i_i1119 = HEAPU8[$933] | 0;
             } else {
              HEAP32[$916 >> 2] = $932;
              $_0_i_i_i1119 = -1;
             }
             HEAP32[13924] = $_0_i_i_i1119;
             $939 = $_0_i_i_i1119;
            } else {
             $939 = $912;
            }
            if (($939 | 0) != 10) {
             break L1939;
            }
            $943 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$943 >> 2] = (HEAP32[$943 >> 2] | 0) + 1;
            $947 = HEAP32[13912] | 0;
            $949 = (HEAP32[$947 >> 2] | 0) + 1 | 0;
            HEAP32[$947 >> 2] = $949;
            $950 = HEAP8[$949] | 0;
            $951 = $950 & 255;
            HEAP32[13924] = $951;
            if ($950 << 24 >> 24 != 92) {
             $978 = $951;
             break;
            }
            $954 = HEAP32[13912] | 0;
            $955 = $954 | 0;
            $956 = HEAP32[$955 >> 2] | 0;
            $957 = $954 + 4 | 0;
            $958 = HEAP32[$957 >> 2] | 0;
            if ($956 >>> 0 < $958 >>> 0) {
             $972 = $956;
             $971 = $958;
            } else {
             $962 = HEAP32[$954 + 8 >> 2] | 0;
             $_pre2_i_i_i1122 = $954 + 1056 | 0;
             if (($962 | 0) == -1) {
              $len_0_i_i_i1124 = 0;
             } else {
              $965 = _read($962 | 0, $_pre2_i_i_i1122 | 0, 8192) | 0;
              $len_0_i_i_i1124 = ($965 | 0) < 0 ? 0 : $965;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i1124;
             HEAP32[$955 >> 2] = $_pre2_i_i_i1122;
             $969 = $954 + 1056 + $len_0_i_i_i1124 | 0;
             HEAP32[$957 >> 2] = $969;
             HEAP8[$969] = 92;
             $972 = HEAP32[$955 >> 2] | 0;
             $971 = HEAP32[$957 >> 2] | 0;
            }
            if ($972 >>> 0 < $971 >>> 0) {
             $_0_i_i_i1128 = HEAPU8[$972] | 0;
            } else {
             HEAP32[$955 >> 2] = $971;
             $_0_i_i_i1128 = -1;
            }
            HEAP32[13924] = $_0_i_i_i1128;
            $978 = $_0_i_i_i1128;
           } else {
            break L1939;
           }
          } while (0);
          if (($978 | 0) != 92) {
           break L1938;
          }
         }
         _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
       } while (0);
       $983 = HEAP32[HEAP32[13912] >> 2] | 0;
       $c_1_be = HEAPU8[$983] | 0;
       $p_4_be = $983;
      } else {
       $c_1_be = $795;
       $p_4_be = $793;
      }
     } while (0);
     if ((HEAP8[$c_1_be + 21465 | 0] | 0) == 0) {
      $p_4_lcssa = $p_4_be;
      break;
     } else {
      $p_41294 = $p_4_be;
      $c_11295_off0 = $c_1_be & 255;
     }
    }
   }
   $990 = HEAP32[5299] | 0;
   $991 = HEAP32[5298] | 0;
   if (($991 | 0) > 0) {
    $i_03_i = 0;
    $h_04_i = 1;
    do {
     $h_04_i = (HEAPU8[$990 + $i_03_i | 0] | 0) + ($h_04_i * 263 | 0) | 0;
     $i_03_i = $i_03_i + 1 | 0;
    } while (($i_03_i | 0) < ($991 | 0));
    $h_0_lcssa_i = $h_04_i & 8191;
   } else {
    $h_0_lcssa_i = 1;
   }
   $1001 = 21744 + ($h_0_lcssa_i << 2) | 0;
   $1002 = HEAP32[$1001 >> 2] | 0;
   if (($1002 | 0) == 0) {
    $pts_0_lcssa_i = $1001;
   } else {
    $1004 = $1002;
    while (1) {
     if ((HEAP32[$1004 + 24 >> 2] | 0) == ($991 | 0)) {
      if ((_memcmp($1004 + 28 | 0, $990 | 0, $991 | 0) | 0) == 0) {
       $p_5 = $p_4_lcssa;
       $ts_0 = $1004;
       label = 277;
       break L1911;
      }
     }
     $1013 = $1004 | 0;
     $1014 = HEAP32[$1013 >> 2] | 0;
     if (($1014 | 0) == 0) {
      $pts_0_lcssa_i = $1013;
      break;
     } else {
      $1004 = $1014;
     }
    }
   }
   $p_5 = $p_4_lcssa;
   $ts_0 = _tok_alloc_new($pts_0_lcssa_i, $990, $991) | 0;
   label = 277;
  }
 } while (0);
 if ((label | 0) == 277) {
  HEAP32[5310] = HEAP32[$ts_0 + 20 >> 2];
  $p_27 = $p_5;
 }
 HEAP32[5308] = 0;
 $p_28 = $p_27;
 $4947 = HEAP32[13912] | 0;
 $4948 = $4947 | 0;
 HEAP32[$4948 >> 2] = $p_28;
 STACKTOP = sp;
 return;
}
function _expr_cond() {
 var $cval_i_sroa_4_i_i = 0, $sv_i = 0, $sv_sroa_4 = 0, $sv_sroa_7 = 0, $type = 0, $boolean = 0, $4 = 0, $6 = 0, $9 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $38 = 0, $44 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $54 = 0, $57 = 0, $58 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $75 = 0, $78 = 0, $79 = 0, $81 = 0, $_pr = 0, $91 = 0, $93 = 0, $95 = 0, $96 = 0, $98 = 0, $101 = 0, $102 = 0, $104 = 0, $107 = 0, $110 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $119 = 0, $122 = 0, $123 = 0, $125 = 0, $131 = 0, $_lcssa1292 = 0, $135 = 0, $137 = 0, $138 = 0, $140 = 0, $143 = 0, $144 = 0, $146 = 0, $149 = 0, $152 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $161 = 0, $164 = 0, $165 = 0, $167 = 0, $177 = 0, $179 = 0, $181 = 0, $183 = 0, $184 = 0, $186 = 0, $189 = 0, $190 = 0, $192 = 0, $195 = 0, $198 = 0, $201 = 0, $202 = 0, $204 = 0, $205 = 0, $207 = 0, $210 = 0, $211 = 0, $213 = 0, $219 = 0, $222 = 0, $224 = 0, $226 = 0, $227 = 0, $229 = 0, $232 = 0, $233 = 0, $235 = 0, $238 = 0, $241 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $250 = 0, $253 = 0, $254 = 0, $256 = 0, $_pr907 = 0, $266 = 0, $268 = 0, $270 = 0, $271 = 0, $273 = 0, $276 = 0, $277 = 0, $279 = 0, $282 = 0, $285 = 0, $288 = 0, $289 = 0, $291 = 0, $292 = 0, $294 = 0, $297 = 0, $298 = 0, $300 = 0, $306 = 0, $_lcssa1267 = 0, $310 = 0, $312 = 0, $313 = 0, $315 = 0, $318 = 0, $319 = 0, $321 = 0, $324 = 0, $327 = 0, $330 = 0, $331 = 0, $333 = 0, $334 = 0, $336 = 0, $339 = 0, $340 = 0, $342 = 0, $_pr906 = 0, $355 = 0, $357 = 0, $358 = 0, $360 = 0, $363 = 0, $364 = 0, $366 = 0, $369 = 0, $372 = 0, $375 = 0, $376 = 0, $378 = 0, $379 = 0, $381 = 0, $384 = 0, $385 = 0, $387 = 0, $393 = 0, $396 = 0, $398 = 0, $400 = 0, $401 = 0, $403 = 0, $406 = 0, $407 = 0, $409 = 0, $412 = 0, $415 = 0, $418 = 0, $419 = 0, $421 = 0, $422 = 0, $424 = 0, $427 = 0, $428 = 0, $430 = 0, $_pr909 = 0, $440 = 0, $442 = 0, $444 = 0, $445 = 0, $447 = 0, $450 = 0, $451 = 0, $453 = 0, $456 = 0, $459 = 0, $462 = 0, $463 = 0, $465 = 0, $466 = 0, $468 = 0, $471 = 0, $472 = 0, $474 = 0, $480 = 0, $_lcssa1167 = 0, $484 = 0, $486 = 0, $487 = 0, $489 = 0, $492 = 0, $493 = 0, $495 = 0, $498 = 0, $501 = 0, $504 = 0, $505 = 0, $507 = 0, $508 = 0, $510 = 0, $513 = 0, $514 = 0, $516 = 0, $526 = 0, $_lcssa1180 = 0, $529 = 0, $531 = 0, $532 = 0, $534 = 0, $537 = 0, $538 = 0, $540 = 0, $543 = 0, $546 = 0, $549 = 0, $550 = 0, $552 = 0, $553 = 0, $555 = 0, $558 = 0, $559 = 0, $561 = 0, $567 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $577 = 0, $580 = 0, $581 = 0, $583 = 0, $586 = 0, $589 = 0, $592 = 0, $593 = 0, $595 = 0, $596 = 0, $598 = 0, $601 = 0, $602 = 0, $604 = 0, $_pr912 = 0, $614 = 0, $616 = 0, $618 = 0, $619 = 0, $621 = 0, $624 = 0, $625 = 0, $627 = 0, $630 = 0, $633 = 0, $636 = 0, $637 = 0, $639 = 0, $640 = 0, $642 = 0, $645 = 0, $646 = 0, $648 = 0, $654 = 0, $_lcssa1216 = 0, $658 = 0, $660 = 0, $661 = 0, $663 = 0, $666 = 0, $667 = 0, $669 = 0, $672 = 0, $675 = 0, $678 = 0, $679 = 0, $681 = 0, $682 = 0, $684 = 0, $687 = 0, $688 = 0, $690 = 0, $703 = 0, $705 = 0, $707 = 0, $709 = 0, $710 = 0, $712 = 0, $715 = 0, $716 = 0, $718 = 0, $721 = 0, $724 = 0, $727 = 0, $728 = 0, $730 = 0, $731 = 0, $733 = 0, $736 = 0, $737 = 0, $739 = 0, $745 = 0, $748 = 0, $750 = 0, $752 = 0, $753 = 0, $755 = 0, $758 = 0, $759 = 0, $761 = 0, $764 = 0, $767 = 0, $770 = 0, $771 = 0, $773 = 0, $774 = 0, $776 = 0, $779 = 0, $780 = 0, $782 = 0, $_pr915 = 0, $792 = 0, $794 = 0, $796 = 0, $797 = 0, $799 = 0, $802 = 0, $803 = 0, $805 = 0, $808 = 0, $811 = 0, $814 = 0, $815 = 0, $817 = 0, $818 = 0, $820 = 0, $823 = 0, $824 = 0, $826 = 0, $832 = 0, $_lcssa972 = 0, $836 = 0, $838 = 0, $839 = 0, $841 = 0, $844 = 0, $845 = 0, $847 = 0, $850 = 0, $853 = 0, $856 = 0, $857 = 0, $859 = 0, $860 = 0, $862 = 0, $865 = 0, $866 = 0, $868 = 0, $878 = 0, $880 = 0, $882 = 0, $884 = 0, $885 = 0, $887 = 0, $890 = 0, $891 = 0, $893 = 0, $896 = 0, $899 = 0, $902 = 0, $903 = 0, $905 = 0, $906 = 0, $908 = 0, $911 = 0, $912 = 0, $914 = 0, $920 = 0, $923 = 0, $925 = 0, $927 = 0, $928 = 0, $930 = 0, $933 = 0, $934 = 0, $936 = 0, $939 = 0, $942 = 0, $945 = 0, $946 = 0, $948 = 0, $949 = 0, $951 = 0, $954 = 0, $955 = 0, $957 = 0, $_pr918 = 0, $967 = 0, $969 = 0, $971 = 0, $972 = 0, $974 = 0, $977 = 0, $978 = 0, $980 = 0, $983 = 0, $986 = 0, $989 = 0, $990 = 0, $992 = 0, $993 = 0, $995 = 0, $998 = 0, $999 = 0, $1001 = 0, $1007 = 0, $_lcssa1021 = 0, $1011 = 0, $1013 = 0, $1014 = 0, $1016 = 0, $1019 = 0, $1020 = 0, $1022 = 0, $1025 = 0, $1028 = 0, $1031 = 0, $1032 = 0, $1034 = 0, $1035 = 0, $1037 = 0, $1040 = 0, $1041 = 0, $1043 = 0, $_pr917 = 0, $1056 = 0, $1058 = 0, $1060 = 0, $1061 = 0, $1063 = 0, $1066 = 0, $1067 = 0, $1069 = 0, $1072 = 0, $1075 = 0, $1078 = 0, $1079 = 0, $1081 = 0, $1082 = 0, $1084 = 0, $1087 = 0, $1088 = 0, $1090 = 0, $1096 = 0, $1099 = 0, $1101 = 0, $1103 = 0, $1104 = 0, $1106 = 0, $1109 = 0, $1110 = 0, $1112 = 0, $1115 = 0, $1118 = 0, $1121 = 0, $1122 = 0, $1124 = 0, $1125 = 0, $1127 = 0, $1130 = 0, $1131 = 0, $1133 = 0, $_pr920 = 0, $1143 = 0, $1145 = 0, $1147 = 0, $1148 = 0, $1150 = 0, $1153 = 0, $1154 = 0, $1156 = 0, $1159 = 0, $1162 = 0, $1165 = 0, $1166 = 0, $1168 = 0, $1169 = 0, $1171 = 0, $1174 = 0, $1175 = 0, $1177 = 0, $1183 = 0, $_lcssa1069 = 0, $1187 = 0, $1189 = 0, $1190 = 0, $1192 = 0, $1195 = 0, $1196 = 0, $1198 = 0, $1201 = 0, $1204 = 0, $1207 = 0, $1208 = 0, $1210 = 0, $1211 = 0, $1213 = 0, $1216 = 0, $1217 = 0, $1219 = 0, $1229 = 0, $_lcssa1082 = 0, $1232 = 0, $1234 = 0, $1235 = 0, $1237 = 0, $1240 = 0, $1241 = 0, $1243 = 0, $1246 = 0, $1249 = 0, $1252 = 0, $1253 = 0, $1255 = 0, $1256 = 0, $1258 = 0, $1261 = 0, $1262 = 0, $1264 = 0, $1270 = 0, $1273 = 0, $1275 = 0, $1277 = 0, $1278 = 0, $1280 = 0, $1283 = 0, $1284 = 0, $1286 = 0, $1289 = 0, $1292 = 0, $1295 = 0, $1296 = 0, $1298 = 0, $1299 = 0, $1301 = 0, $1304 = 0, $1305 = 0, $1307 = 0, $_pr923 = 0, $1317 = 0, $1319 = 0, $1321 = 0, $1322 = 0, $1324 = 0, $1327 = 0, $1328 = 0, $1330 = 0, $1333 = 0, $1336 = 0, $1339 = 0, $1340 = 0, $1342 = 0, $1343 = 0, $1345 = 0, $1348 = 0, $1349 = 0, $1351 = 0, $1357 = 0, $_lcssa1118 = 0, $1361 = 0, $1363 = 0, $1364 = 0, $1366 = 0, $1369 = 0, $1370 = 0, $1372 = 0, $1375 = 0, $1378 = 0, $1381 = 0, $1382 = 0, $1384 = 0, $1385 = 0, $1387 = 0, $1390 = 0, $1391 = 0, $1393 = 0, $1410 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1420 = 0, $1423 = 0, $1440 = 0, $1443 = 0, $1460 = 0, $1463 = 0, $1482 = 0, $1485 = 0, $1500 = 0, $1503 = 0, $1519 = 0, $1523 = 0, $p_01_i_i = 0, $1528 = 0, $1534 = 0, $_lcssa = 0, $1537 = 0, $1538 = 0, $1542 = 0, $1547 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1561 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1570 = 0, $1573 = 0, $1578 = 0, $1581 = 0, $1584 = 0, $p_01_i = 0, $1589 = 0, $1602 = 0, $1605 = 0, $1608 = 0, $tt_0 = 0, $1625 = 0, $1627 = 0, $1629 = 0, $1631 = 0, $1633 = 0, $1634 = 0, $1636 = 0, $1637$0 = 0, $1637$1 = 0, $1638 = 0, $1639 = 0, $1640 = 0, $1642 = 0, $1643 = 0, $1645 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $1661 = 0, $_932 = 0, $1689 = 0, $1708 = 0, $1710 = 0, $1713 = 0, $1716 = 0, $1719 = 0, $1725 = 0, $1728 = 0, $1736 = 0, $_933 = 0, $1744 = 0, $1745 = 0, $1752 = 0, $_pre_i43 = 0, $1758 = 0, $1759 = 0, $1763 = 0, $1764 = 0, $1770 = 0, $rc_1 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1780 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1791 = 0, $_pre_i = 0, $1797 = 0, $1798 = 0, $1802 = 0, $1803 = 0, $1809 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $cval_i_sroa_4_i_i = sp | 0;
 $sv_i = sp + 16 | 0;
 $sv_sroa_4 = sp + 56 | 0;
 $sv_sroa_7 = sp + 64 | 0;
 $type = sp + 80 | 0;
 $boolean = sp + 88 | 0;
 if ((HEAP32[13920] | 0) == 0) {
  _expr_land();
  $1519 = HEAP32[5310] | 0;
  if (($1519 | 0) == 161) {
   $1523 = (HEAP32[5024] | 0) - 40 | 0;
   if ($1523 >>> 0 >= 56272 >>> 0) {
    $p_01_i_i = 56272;
    do {
     $1528 = HEAP16[$p_01_i_i + 8 >> 1] & 63;
     if ($1528 >>> 0 < 48 >>> 0) {
      _save_reg($1528);
     }
     $p_01_i_i = $p_01_i_i + 40 | 0;
    } while ($p_01_i_i >>> 0 <= $1523 >>> 0);
   }
   $1534 = _gtst(0, 0) | 0;
   if ((HEAP32[5310] | 0) == 161) {
    $1566 = $1534;
    while (1) {
     _next();
     _expr_land();
     $1567 = _gtst(0, $1566) | 0;
     if ((HEAP32[5310] | 0) == 161) {
      $1566 = $1567;
     } else {
      $_lcssa = $1567;
      break;
     }
    }
   } else {
    $_lcssa = $1534;
   }
   $1537 = $cval_i_sroa_4_i_i | 0;
   $1538 = HEAP32[5024] | 0;
   if ($1538 >>> 0 < 66472 >>> 0) {
    $1542 = $1538;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $1542 = HEAP32[5024] | 0;
   }
   do {
    if ($1542 >>> 0 < 56272 >>> 0) {
     $1554 = $1542;
    } else {
     $1547 = HEAPU16[$1542 + 8 >> 1] | 0;
     if (!(($1547 & 63 | 0) == 51 | ($1547 & 62 | 0) == 52)) {
      $1554 = $1542;
      break;
     }
     _gv(1) | 0;
     $1554 = HEAP32[5024] | 0;
    }
   } while (0);
   $1555 = $1554 + 40 | 0;
   HEAP32[5024] = $1555;
   $1556 = $1555;
   HEAP32[$1556 >> 2] = 0;
   HEAP32[$1556 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 52;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $1561 = HEAP32[5024] | 0;
   HEAP32[$1561 + 16 >> 2] = $_lcssa;
   $1565 = $1561 + 20 | 0;
   HEAP32[$1565 >> 2] = HEAP32[$1537 >> 2];
   HEAP32[$1565 + 4 >> 2] = HEAP32[$1537 + 4 >> 2];
   HEAP32[$1565 + 8 >> 2] = HEAP32[$1537 + 8 >> 2];
   $1570 = HEAP32[5310] | 0;
  } else {
   $1570 = $1519;
  }
  if (($1570 | 0) != 63) {
   STACKTOP = sp;
   return;
  }
  _next();
  $1573 = HEAP32[5024] | 0;
  do {
   if (($1573 | 0) != 56272) {
    $1578 = HEAP32[$1573 >> 2] & 15;
    if (($1578 - 9 | 0) >>> 0 < 2 >>> 0) {
     $1581 = 2;
    } else {
     $1581 = ($1578 | 0) != 8 ? 1 : 2;
    }
    _gv($1581) | 0;
    $1584 = (HEAP32[5024] | 0) - 40 | 0;
    if ($1584 >>> 0 < 56272 >>> 0) {
     break;
    } else {
     $p_01_i = 56272;
    }
    do {
     $1589 = HEAP16[$p_01_i + 8 >> 1] & 63;
     if ($1589 >>> 0 < 48 >>> 0) {
      _save_reg($1589);
     }
     $p_01_i = $p_01_i + 40 | 0;
    } while ($p_01_i >>> 0 <= $1584 >>> 0);
   }
  } while (0);
  do {
   if ((HEAP32[5310] | 0) == 58 & (HEAP32[1888] | 0) != 0) {
    _gv_dup();
    $tt_0 = _gtst(1, 0) | 0;
   } else {
    $1602 = _gtst(1, 0) | 0;
    _expr_eq();
    if ((HEAP32[5310] | 0) != 44) {
     $tt_0 = $1602;
     break;
    }
    while (1) {
     $1605 = HEAP32[5024] | 0;
     $1608 = HEAPU16[$1605 + 8 >> 1] | 0;
     do {
      if (($1608 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
       if (($1608 & 62 | 0) != 52) {
        break;
       }
       _gsym(HEAP32[$1605 + 16 >> 2] | 0);
      } else {
       _o(55517);
      }
     } while (0);
     HEAP32[5024] = (HEAP32[5024] | 0) - 40;
     _next();
     _expr_eq();
     if ((HEAP32[5310] | 0) != 44) {
      $tt_0 = $1602;
      break;
     }
    }
   }
  } while (0);
  $1625 = HEAP32[5024] | 0;
  $1627 = HEAP32[$1625 >> 2] | 0;
  $1629 = HEAP32[$1625 + 4 >> 2] | 0;
  $1631 = HEAP16[$1625 + 8 >> 1] | 0;
  $1633 = $1625 + 10 | 0;
  $1634 = $sv_sroa_4 | 0;
  HEAP16[$1634 >> 1] = HEAP16[$1633 >> 1] | 0;
  HEAP16[$1634 + 2 >> 1] = HEAP16[$1633 + 2 >> 1] | 0;
  HEAP16[$1634 + 4 >> 1] = HEAP16[$1633 + 4 >> 1] | 0;
  $1636 = $1625 + 16 | 0;
  $1637$0 = HEAP32[$1636 >> 2] | 0;
  $1637$1 = HEAP32[$1636 + 4 >> 2] | 0;
  $1638 = $1637$0;
  $1639 = $1625 + 24 | 0;
  $1640 = $sv_sroa_7 | 0;
  HEAP32[$1640 >> 2] = HEAP32[$1639 >> 2];
  HEAP32[$1640 + 4 >> 2] = HEAP32[$1639 + 4 >> 2];
  HEAP32[$1640 + 8 >> 2] = HEAP32[$1639 + 8 >> 2];
  HEAP32[$1640 + 12 >> 2] = HEAP32[$1639 + 12 >> 2];
  HEAP32[5024] = $1625 - 40;
  _skip(58);
  $1642 = _gjmp(0) | 0;
  _gsym($tt_0);
  _expr_cond();
  $1643 = HEAP32[5024] | 0;
  $1645 = HEAP32[$1643 >> 2] | 0;
  $1647 = HEAP32[$1643 + 4 >> 2] | 0;
  $1648 = $1627 & 15;
  $1649 = $1645 & 15;
  L49 : do {
   if (($1648 - 9 | 0) >>> 0 < 2 >>> 0) {
    label = 571;
   } else {
    if (($1648 | 0) == 8 | ($1649 - 9 | 0) >>> 0 < 2 >>> 0 | ($1649 | 0) == 8) {
     label = 571;
     break;
    }
    if (($1648 | 0) == 12 | ($1649 | 0) == 12) {
     $_932 = ($1627 & 31 | 0) == 28 | ($1645 & 31 | 0) == 28 ? 28 : 12;
     HEAP32[$type >> 2] = $_932;
     $1744 = $_932;
     break;
    }
    if (!(($1648 | 0) == 4 | ($1649 | 0) == 4)) {
     $1716 = ($1648 | 0) == 6;
     if ($1716 | ($1649 | 0) == 6) {
      $1719 = $type | 0;
      if ($1716) {
       HEAP32[$1719 >> 2] = $1627;
       HEAP32[$type + 4 >> 2] = $1629;
       $1744 = $1627;
       break;
      } else {
       HEAP32[$1719 >> 2] = $1645;
       HEAP32[$type + 4 >> 2] = $1647;
       $1744 = $1645;
       break;
      }
     }
     $1725 = ($1648 | 0) == 7;
     if ($1725 | ($1649 | 0) == 7) {
      $1728 = $type | 0;
      if ($1725) {
       HEAP32[$1728 >> 2] = $1627;
       HEAP32[$type + 4 >> 2] = $1629;
       $1744 = $1627;
       break;
      } else {
       HEAP32[$1728 >> 2] = $1645;
       HEAP32[$type + 4 >> 2] = $1647;
       $1744 = $1645;
       break;
      }
     } else {
      $1736 = $type | 0;
      if (($1648 | 0) == 3 | ($1649 | 0) == 3) {
       HEAP32[$1736 >> 2] = 3;
       $1744 = 3;
       break;
      } else {
       $_933 = ($1627 & 31 | 0) == 16 | ($1645 & 31 | 0) == 16 ? 16 : 0;
       HEAP32[$1736 >> 2] = $_933;
       $1744 = $_933;
       break;
      }
     }
    }
    do {
     if ((HEAP16[$1643 + 8 >> 1] & 831) == 48) {
      if (($1649 | 0) == 0) {
       if ((HEAP32[$1643 + 16 >> 2] | 0) != 0) {
        break;
       }
      } else if (($1649 | 0) == 12) {
       $1689 = $1643 + 16 | 0;
       if (!((HEAP32[$1689 >> 2] | 0) == 0 & (HEAP32[$1689 + 4 >> 2] | 0) == 0)) {
        break;
       }
      } else if (($1649 | 0) == 4) {
       if ((HEAP32[$1643 + 16 >> 2] | 0) != 0) {
        break;
       }
      } else {
       break;
      }
      HEAP32[$type >> 2] = $1627;
      HEAP32[$type + 4 >> 2] = $1629;
      $1744 = $1627;
      break L49;
     }
    } while (0);
    do {
     if (($1631 & 831) == 48) {
      if (($1648 | 0) == 0) {
       if (($1638 | 0) == 0) {
        label = 590;
       } else {
        label = 589;
        break;
       }
      } else if (($1648 | 0) == 12) {
       if (($1637$0 | 0) == 0 & ($1637$1 | 0) == 0) {
        label = 590;
       } else {
        label = 589;
        break;
       }
      } else if (($1648 | 0) == 4) {
       $1708 = $type | 0;
       if (($1638 | 0) == 0) {
        $1710 = $1708;
       } else {
        $1713 = $1708;
        break;
       }
      } else {
       label = 589;
       break;
      }
      if ((label | 0) == 590) {
       $1710 = $type | 0;
      }
      HEAP32[$1710 >> 2] = $1645;
      HEAP32[$type + 4 >> 2] = $1647;
      $1744 = $1645;
      break L49;
     } else {
      label = 589;
     }
    } while (0);
    if ((label | 0) == 589) {
     $1713 = $type | 0;
    }
    HEAP32[$1713 >> 2] = $1627;
    HEAP32[$type + 4 >> 2] = $1629;
    $1744 = $1627;
   }
  } while (0);
  do {
   if ((label | 0) == 571) {
    if (($1648 | 0) == 10 | ($1649 | 0) == 10) {
     HEAP32[$type >> 2] = 10;
     $1744 = 10;
     break;
    }
    $1661 = $type | 0;
    if (($1648 | 0) == 9 | ($1649 | 0) == 9) {
     HEAP32[$1661 >> 2] = 9;
     $1744 = 9;
     break;
    } else {
     HEAP32[$1661 >> 2] = 8;
     $1744 = 8;
     break;
    }
   }
  } while (0);
  _gen_cast($type);
  $1745 = HEAP32[5024] | 0;
  do {
   if ((HEAP32[$1745 >> 2] & 15 | 0) == 7) {
    $1752 = HEAP16[$1745 + 8 >> 1] | 0;
    if (($1752 & 64) == 0) {
     $1759 = $1745;
     $1758 = $1752;
    } else {
     _gv(1) | 0;
     $_pre_i43 = HEAP32[5024] | 0;
     $1759 = $_pre_i43;
     $1758 = HEAP16[$_pre_i43 + 8 >> 1] | 0;
    }
    HEAP16[$1759 + 8 >> 1] = $1758 & -257;
    $1763 = (HEAP32[5024] | 0) + 8 | 0;
    $1764 = HEAP16[$1763 >> 1] | 0;
    if (($1764 & 63) != 49) {
     break;
    }
    HEAP16[$1763 >> 1] = $1764 & -28992 | 306;
   }
  } while (0);
  $1770 = $1744 & 15;
  if (($1770 - 8 | 0) >>> 0 < 3 >>> 0) {
   $rc_1 = 2;
  } else {
   $rc_1 = ($1770 | 0) == 12 ? 4 : 1;
  }
  $1773 = _gv($rc_1) | 0;
  $1774 = _gjmp(0) | 0;
  _gsym($1642);
  $1775 = HEAP32[5024] | 0;
  HEAP32[$1775 >> 2] = $1627;
  HEAP32[$1775 + 4 >> 2] = $1629;
  HEAP16[$1775 + 8 >> 1] = $1631;
  $1780 = $1775 + 10 | 0;
  HEAP16[$1780 >> 1] = HEAP16[$1634 >> 1] | 0;
  HEAP16[$1780 + 2 >> 1] = HEAP16[$1634 + 2 >> 1] | 0;
  HEAP16[$1780 + 4 >> 1] = HEAP16[$1634 + 4 >> 1] | 0;
  $1782 = $1775 + 16 | 0;
  HEAP32[$1782 >> 2] = $1637$0;
  HEAP32[$1782 + 4 >> 2] = $1637$1;
  $1783 = $1775 + 24 | 0;
  HEAP32[$1783 >> 2] = HEAP32[$1640 >> 2];
  HEAP32[$1783 + 4 >> 2] = HEAP32[$1640 + 4 >> 2];
  HEAP32[$1783 + 8 >> 2] = HEAP32[$1640 + 8 >> 2];
  HEAP32[$1783 + 12 >> 2] = HEAP32[$1640 + 12 >> 2];
  _gen_cast($type);
  $1784 = HEAP32[5024] | 0;
  do {
   if ((HEAP32[$1784 >> 2] & 15 | 0) == 7) {
    $1791 = HEAP16[$1784 + 8 >> 1] | 0;
    if (($1791 & 64) == 0) {
     $1798 = $1784;
     $1797 = $1791;
    } else {
     _gv(1) | 0;
     $_pre_i = HEAP32[5024] | 0;
     $1798 = $_pre_i;
     $1797 = HEAP16[$_pre_i + 8 >> 1] | 0;
    }
    HEAP16[$1798 + 8 >> 1] = $1797 & -257;
    $1802 = (HEAP32[5024] | 0) + 8 | 0;
    $1803 = HEAP16[$1802 >> 1] | 0;
    if (($1803 & 63) != 49) {
     break;
    }
    HEAP16[$1802 >> 1] = $1803 & -28992 | 306;
   }
  } while (0);
  $1809 = _gv($rc_1) | 0;
  if (($1773 | 0) != ($1809 | 0)) {
   _save_reg($1773);
   HEAP32[$sv_i >> 2] = 0;
   HEAP16[$sv_i + 8 >> 1] = $1809;
   HEAP32[$sv_i + 16 >> 2] = 0;
   _load($1773, $sv_i);
  }
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $1773;
  _gsym($1774);
  STACKTOP = sp;
  return;
 }
 _expr_sum();
 $4 = HEAP32[5310] | 0;
 if (($4 - 1 | 0) >>> 0 < 2 >>> 0) {
  $9 = $4;
  while (1) {
   _next();
   _expr_sum();
   _gen_op($9);
   $10 = HEAP32[5310] | 0;
   if (($10 - 1 | 0) >>> 0 < 2 >>> 0) {
    $9 = $10;
   } else {
    $6 = $10;
    break;
   }
  }
 } else {
  $6 = $4;
 }
 if (($6 - 150 | 0) >>> 0 < 10 >>> 0 | ($6 & -2 | 0) == 146) {
  $15 = $6;
  while (1) {
   _next();
   _expr_sum();
   $16 = HEAP32[5310] | 0;
   if (($16 - 1 | 0) >>> 0 < 2 >>> 0) {
    $18 = $16;
    do {
     _next();
     _expr_sum();
     _gen_op($18);
     $18 = HEAP32[5310] | 0;
    } while (($18 - 1 | 0) >>> 0 < 2 >>> 0);
   }
   _gen_op($15);
   $21 = HEAP32[5310] | 0;
   if (($21 - 150 | 0) >>> 0 < 10 >>> 0 | ($21 & -2 | 0) == 146) {
    $15 = $21;
   } else {
    $12 = $21;
    break;
   }
  }
 } else {
  $12 = $6;
 }
 if (($12 & -2 | 0) == 148) {
  $26 = $12;
  while (1) {
   _next();
   _expr_sum();
   $27 = HEAP32[5310] | 0;
   if (($27 - 1 | 0) >>> 0 < 2 >>> 0) {
    $29 = $27;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($29);
     $30 = HEAP32[5310] | 0;
     if (($30 - 1 | 0) >>> 0 < 2 >>> 0) {
      $29 = $30;
     } else {
      $32 = $30;
      break;
     }
    }
   } else {
    $32 = $27;
   }
   if (($32 - 150 | 0) >>> 0 < 10 >>> 0 | ($32 & -2 | 0) == 146) {
    $35 = $32;
    do {
     _next();
     _expr_sum();
     $36 = HEAP32[5310] | 0;
     if (($36 - 1 | 0) >>> 0 < 2 >>> 0) {
      $38 = $36;
      do {
       _next();
       _expr_sum();
       _gen_op($38);
       $38 = HEAP32[5310] | 0;
      } while (($38 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($35);
     $35 = HEAP32[5310] | 0;
    } while (($35 - 150 | 0) >>> 0 < 10 >>> 0 | ($35 & -2 | 0) == 146);
   }
   _gen_op($26);
   $44 = HEAP32[5310] | 0;
   if (($44 & -2 | 0) == 148) {
    $26 = $44;
   } else {
    $24 = $44;
    break;
   }
  }
 } else {
  $24 = $12;
 }
 if (($24 | 0) == 38) {
  while (1) {
   _next();
   _expr_sum();
   $49 = HEAP32[5310] | 0;
   if (($49 - 1 | 0) >>> 0 < 2 >>> 0) {
    $51 = $49;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($51);
     $52 = HEAP32[5310] | 0;
     if (($52 - 1 | 0) >>> 0 < 2 >>> 0) {
      $51 = $52;
     } else {
      $54 = $52;
      break;
     }
    }
   } else {
    $54 = $49;
   }
   if (($54 - 150 | 0) >>> 0 < 10 >>> 0 | ($54 & -2 | 0) == 146) {
    $57 = $54;
    while (1) {
     _next();
     _expr_sum();
     $58 = HEAP32[5310] | 0;
     if (($58 - 1 | 0) >>> 0 < 2 >>> 0) {
      $60 = $58;
      do {
       _next();
       _expr_sum();
       _gen_op($60);
       $60 = HEAP32[5310] | 0;
      } while (($60 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($57);
     $63 = HEAP32[5310] | 0;
     if (($63 - 150 | 0) >>> 0 < 10 >>> 0 | ($63 & -2 | 0) == 146) {
      $57 = $63;
     } else {
      $66 = $63;
      break;
     }
    }
   } else {
    $66 = $54;
   }
   if (($66 & -2 | 0) == 148) {
    $69 = $66;
    do {
     _next();
     _expr_sum();
     $70 = HEAP32[5310] | 0;
     if (($70 - 1 | 0) >>> 0 < 2 >>> 0) {
      $72 = $70;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($72);
       $73 = HEAP32[5310] | 0;
       if (($73 - 1 | 0) >>> 0 < 2 >>> 0) {
        $72 = $73;
       } else {
        $75 = $73;
        break;
       }
      }
     } else {
      $75 = $70;
     }
     if (($75 - 150 | 0) >>> 0 < 10 >>> 0 | ($75 & -2 | 0) == 146) {
      $78 = $75;
      do {
       _next();
       _expr_sum();
       $79 = HEAP32[5310] | 0;
       if (($79 - 1 | 0) >>> 0 < 2 >>> 0) {
        $81 = $79;
        do {
         _next();
         _expr_sum();
         _gen_op($81);
         $81 = HEAP32[5310] | 0;
        } while (($81 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($78);
       $78 = HEAP32[5310] | 0;
      } while (($78 - 150 | 0) >>> 0 < 10 >>> 0 | ($78 & -2 | 0) == 146);
     }
     _gen_op($69);
     $69 = HEAP32[5310] | 0;
    } while (($69 & -2 | 0) == 148);
   }
   _gen_op(38);
   $_pr = HEAP32[5310] | 0;
   if (($_pr | 0) != 38) {
    $47 = $_pr;
    break;
   }
  }
 } else {
  $47 = $24;
 }
 if (($47 | 0) == 94) {
  while (1) {
   _next();
   _expr_sum();
   $93 = HEAP32[5310] | 0;
   if (($93 - 1 | 0) >>> 0 < 2 >>> 0) {
    $95 = $93;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($95);
     $96 = HEAP32[5310] | 0;
     if (($96 - 1 | 0) >>> 0 < 2 >>> 0) {
      $95 = $96;
     } else {
      $98 = $96;
      break;
     }
    }
   } else {
    $98 = $93;
   }
   if (($98 - 150 | 0) >>> 0 < 10 >>> 0 | ($98 & -2 | 0) == 146) {
    $101 = $98;
    while (1) {
     _next();
     _expr_sum();
     $102 = HEAP32[5310] | 0;
     if (($102 - 1 | 0) >>> 0 < 2 >>> 0) {
      $104 = $102;
      do {
       _next();
       _expr_sum();
       _gen_op($104);
       $104 = HEAP32[5310] | 0;
      } while (($104 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($101);
     $107 = HEAP32[5310] | 0;
     if (($107 - 150 | 0) >>> 0 < 10 >>> 0 | ($107 & -2 | 0) == 146) {
      $101 = $107;
     } else {
      $110 = $107;
      break;
     }
    }
   } else {
    $110 = $98;
   }
   if (($110 & -2 | 0) == 148) {
    $113 = $110;
    while (1) {
     _next();
     _expr_sum();
     $114 = HEAP32[5310] | 0;
     if (($114 - 1 | 0) >>> 0 < 2 >>> 0) {
      $116 = $114;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($116);
       $117 = HEAP32[5310] | 0;
       if (($117 - 1 | 0) >>> 0 < 2 >>> 0) {
        $116 = $117;
       } else {
        $119 = $117;
        break;
       }
      }
     } else {
      $119 = $114;
     }
     if (($119 - 150 | 0) >>> 0 < 10 >>> 0 | ($119 & -2 | 0) == 146) {
      $122 = $119;
      do {
       _next();
       _expr_sum();
       $123 = HEAP32[5310] | 0;
       if (($123 - 1 | 0) >>> 0 < 2 >>> 0) {
        $125 = $123;
        do {
         _next();
         _expr_sum();
         _gen_op($125);
         $125 = HEAP32[5310] | 0;
        } while (($125 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($122);
       $122 = HEAP32[5310] | 0;
      } while (($122 - 150 | 0) >>> 0 < 10 >>> 0 | ($122 & -2 | 0) == 146);
     }
     _gen_op($113);
     $131 = HEAP32[5310] | 0;
     if (($131 & -2 | 0) == 148) {
      $113 = $131;
     } else {
      $_lcssa1292 = $131;
      break;
     }
    }
   } else {
    $_lcssa1292 = $110;
   }
   if (($_lcssa1292 | 0) == 38) {
    do {
     _next();
     _expr_sum();
     $135 = HEAP32[5310] | 0;
     if (($135 - 1 | 0) >>> 0 < 2 >>> 0) {
      $137 = $135;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($137);
       $138 = HEAP32[5310] | 0;
       if (($138 - 1 | 0) >>> 0 < 2 >>> 0) {
        $137 = $138;
       } else {
        $140 = $138;
        break;
       }
      }
     } else {
      $140 = $135;
     }
     if (($140 - 150 | 0) >>> 0 < 10 >>> 0 | ($140 & -2 | 0) == 146) {
      $143 = $140;
      while (1) {
       _next();
       _expr_sum();
       $144 = HEAP32[5310] | 0;
       if (($144 - 1 | 0) >>> 0 < 2 >>> 0) {
        $146 = $144;
        do {
         _next();
         _expr_sum();
         _gen_op($146);
         $146 = HEAP32[5310] | 0;
        } while (($146 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($143);
       $149 = HEAP32[5310] | 0;
       if (($149 - 150 | 0) >>> 0 < 10 >>> 0 | ($149 & -2 | 0) == 146) {
        $143 = $149;
       } else {
        $152 = $149;
        break;
       }
      }
     } else {
      $152 = $140;
     }
     if (($152 & -2 | 0) == 148) {
      $155 = $152;
      do {
       _next();
       _expr_sum();
       $156 = HEAP32[5310] | 0;
       if (($156 - 1 | 0) >>> 0 < 2 >>> 0) {
        $158 = $156;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($158);
         $159 = HEAP32[5310] | 0;
         if (($159 - 1 | 0) >>> 0 < 2 >>> 0) {
          $158 = $159;
         } else {
          $161 = $159;
          break;
         }
        }
       } else {
        $161 = $156;
       }
       if (($161 - 150 | 0) >>> 0 < 10 >>> 0 | ($161 & -2 | 0) == 146) {
        $164 = $161;
        do {
         _next();
         _expr_sum();
         $165 = HEAP32[5310] | 0;
         if (($165 - 1 | 0) >>> 0 < 2 >>> 0) {
          $167 = $165;
          do {
           _next();
           _expr_sum();
           _gen_op($167);
           $167 = HEAP32[5310] | 0;
          } while (($167 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($164);
         $164 = HEAP32[5310] | 0;
        } while (($164 - 150 | 0) >>> 0 < 10 >>> 0 | ($164 & -2 | 0) == 146);
       }
       _gen_op($155);
       $155 = HEAP32[5310] | 0;
      } while (($155 & -2 | 0) == 148);
     }
     _gen_op(38);
    } while ((HEAP32[5310] | 0) == 38);
   }
   _gen_op(94);
   $177 = HEAP32[5310] | 0;
   if (($177 | 0) != 94) {
    $91 = $177;
    break;
   }
  }
 } else {
  $91 = $47;
 }
 if (($91 | 0) == 124) {
  while (1) {
   _next();
   _expr_sum();
   $181 = HEAP32[5310] | 0;
   if (($181 - 1 | 0) >>> 0 < 2 >>> 0) {
    $183 = $181;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($183);
     $184 = HEAP32[5310] | 0;
     if (($184 - 1 | 0) >>> 0 < 2 >>> 0) {
      $183 = $184;
     } else {
      $186 = $184;
      break;
     }
    }
   } else {
    $186 = $181;
   }
   if (($186 - 150 | 0) >>> 0 < 10 >>> 0 | ($186 & -2 | 0) == 146) {
    $189 = $186;
    while (1) {
     _next();
     _expr_sum();
     $190 = HEAP32[5310] | 0;
     if (($190 - 1 | 0) >>> 0 < 2 >>> 0) {
      $192 = $190;
      do {
       _next();
       _expr_sum();
       _gen_op($192);
       $192 = HEAP32[5310] | 0;
      } while (($192 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($189);
     $195 = HEAP32[5310] | 0;
     if (($195 - 150 | 0) >>> 0 < 10 >>> 0 | ($195 & -2 | 0) == 146) {
      $189 = $195;
     } else {
      $198 = $195;
      break;
     }
    }
   } else {
    $198 = $186;
   }
   if (($198 & -2 | 0) == 148) {
    $201 = $198;
    while (1) {
     _next();
     _expr_sum();
     $202 = HEAP32[5310] | 0;
     if (($202 - 1 | 0) >>> 0 < 2 >>> 0) {
      $204 = $202;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($204);
       $205 = HEAP32[5310] | 0;
       if (($205 - 1 | 0) >>> 0 < 2 >>> 0) {
        $204 = $205;
       } else {
        $207 = $205;
        break;
       }
      }
     } else {
      $207 = $202;
     }
     if (($207 - 150 | 0) >>> 0 < 10 >>> 0 | ($207 & -2 | 0) == 146) {
      $210 = $207;
      do {
       _next();
       _expr_sum();
       $211 = HEAP32[5310] | 0;
       if (($211 - 1 | 0) >>> 0 < 2 >>> 0) {
        $213 = $211;
        do {
         _next();
         _expr_sum();
         _gen_op($213);
         $213 = HEAP32[5310] | 0;
        } while (($213 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($210);
       $210 = HEAP32[5310] | 0;
      } while (($210 - 150 | 0) >>> 0 < 10 >>> 0 | ($210 & -2 | 0) == 146);
     }
     _gen_op($201);
     $219 = HEAP32[5310] | 0;
     if (($219 & -2 | 0) == 148) {
      $201 = $219;
     } else {
      $222 = $219;
      break;
     }
    }
   } else {
    $222 = $198;
   }
   if (($222 | 0) == 38) {
    while (1) {
     _next();
     _expr_sum();
     $224 = HEAP32[5310] | 0;
     if (($224 - 1 | 0) >>> 0 < 2 >>> 0) {
      $226 = $224;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($226);
       $227 = HEAP32[5310] | 0;
       if (($227 - 1 | 0) >>> 0 < 2 >>> 0) {
        $226 = $227;
       } else {
        $229 = $227;
        break;
       }
      }
     } else {
      $229 = $224;
     }
     if (($229 - 150 | 0) >>> 0 < 10 >>> 0 | ($229 & -2 | 0) == 146) {
      $232 = $229;
      while (1) {
       _next();
       _expr_sum();
       $233 = HEAP32[5310] | 0;
       if (($233 - 1 | 0) >>> 0 < 2 >>> 0) {
        $235 = $233;
        do {
         _next();
         _expr_sum();
         _gen_op($235);
         $235 = HEAP32[5310] | 0;
        } while (($235 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($232);
       $238 = HEAP32[5310] | 0;
       if (($238 - 150 | 0) >>> 0 < 10 >>> 0 | ($238 & -2 | 0) == 146) {
        $232 = $238;
       } else {
        $241 = $238;
        break;
       }
      }
     } else {
      $241 = $229;
     }
     if (($241 & -2 | 0) == 148) {
      $244 = $241;
      do {
       _next();
       _expr_sum();
       $245 = HEAP32[5310] | 0;
       if (($245 - 1 | 0) >>> 0 < 2 >>> 0) {
        $247 = $245;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($247);
         $248 = HEAP32[5310] | 0;
         if (($248 - 1 | 0) >>> 0 < 2 >>> 0) {
          $247 = $248;
         } else {
          $250 = $248;
          break;
         }
        }
       } else {
        $250 = $245;
       }
       if (($250 - 150 | 0) >>> 0 < 10 >>> 0 | ($250 & -2 | 0) == 146) {
        $253 = $250;
        do {
         _next();
         _expr_sum();
         $254 = HEAP32[5310] | 0;
         if (($254 - 1 | 0) >>> 0 < 2 >>> 0) {
          $256 = $254;
          do {
           _next();
           _expr_sum();
           _gen_op($256);
           $256 = HEAP32[5310] | 0;
          } while (($256 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($253);
         $253 = HEAP32[5310] | 0;
        } while (($253 - 150 | 0) >>> 0 < 10 >>> 0 | ($253 & -2 | 0) == 146);
       }
       _gen_op($244);
       $244 = HEAP32[5310] | 0;
      } while (($244 & -2 | 0) == 148);
     }
     _gen_op(38);
     $_pr907 = HEAP32[5310] | 0;
     if (($_pr907 | 0) != 38) {
      $266 = $_pr907;
      break;
     }
    }
   } else {
    $266 = $222;
   }
   if (($266 | 0) == 94) {
    do {
     _next();
     _expr_sum();
     $268 = HEAP32[5310] | 0;
     if (($268 - 1 | 0) >>> 0 < 2 >>> 0) {
      $270 = $268;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($270);
       $271 = HEAP32[5310] | 0;
       if (($271 - 1 | 0) >>> 0 < 2 >>> 0) {
        $270 = $271;
       } else {
        $273 = $271;
        break;
       }
      }
     } else {
      $273 = $268;
     }
     if (($273 - 150 | 0) >>> 0 < 10 >>> 0 | ($273 & -2 | 0) == 146) {
      $276 = $273;
      while (1) {
       _next();
       _expr_sum();
       $277 = HEAP32[5310] | 0;
       if (($277 - 1 | 0) >>> 0 < 2 >>> 0) {
        $279 = $277;
        do {
         _next();
         _expr_sum();
         _gen_op($279);
         $279 = HEAP32[5310] | 0;
        } while (($279 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($276);
       $282 = HEAP32[5310] | 0;
       if (($282 - 150 | 0) >>> 0 < 10 >>> 0 | ($282 & -2 | 0) == 146) {
        $276 = $282;
       } else {
        $285 = $282;
        break;
       }
      }
     } else {
      $285 = $273;
     }
     if (($285 & -2 | 0) == 148) {
      $288 = $285;
      while (1) {
       _next();
       _expr_sum();
       $289 = HEAP32[5310] | 0;
       if (($289 - 1 | 0) >>> 0 < 2 >>> 0) {
        $291 = $289;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($291);
         $292 = HEAP32[5310] | 0;
         if (($292 - 1 | 0) >>> 0 < 2 >>> 0) {
          $291 = $292;
         } else {
          $294 = $292;
          break;
         }
        }
       } else {
        $294 = $289;
       }
       if (($294 - 150 | 0) >>> 0 < 10 >>> 0 | ($294 & -2 | 0) == 146) {
        $297 = $294;
        do {
         _next();
         _expr_sum();
         $298 = HEAP32[5310] | 0;
         if (($298 - 1 | 0) >>> 0 < 2 >>> 0) {
          $300 = $298;
          do {
           _next();
           _expr_sum();
           _gen_op($300);
           $300 = HEAP32[5310] | 0;
          } while (($300 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($297);
         $297 = HEAP32[5310] | 0;
        } while (($297 - 150 | 0) >>> 0 < 10 >>> 0 | ($297 & -2 | 0) == 146);
       }
       _gen_op($288);
       $306 = HEAP32[5310] | 0;
       if (($306 & -2 | 0) == 148) {
        $288 = $306;
       } else {
        $_lcssa1267 = $306;
        break;
       }
      }
     } else {
      $_lcssa1267 = $285;
     }
     if (($_lcssa1267 | 0) == 38) {
      do {
       _next();
       _expr_sum();
       $310 = HEAP32[5310] | 0;
       if (($310 - 1 | 0) >>> 0 < 2 >>> 0) {
        $312 = $310;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($312);
         $313 = HEAP32[5310] | 0;
         if (($313 - 1 | 0) >>> 0 < 2 >>> 0) {
          $312 = $313;
         } else {
          $315 = $313;
          break;
         }
        }
       } else {
        $315 = $310;
       }
       if (($315 - 150 | 0) >>> 0 < 10 >>> 0 | ($315 & -2 | 0) == 146) {
        $318 = $315;
        while (1) {
         _next();
         _expr_sum();
         $319 = HEAP32[5310] | 0;
         if (($319 - 1 | 0) >>> 0 < 2 >>> 0) {
          $321 = $319;
          do {
           _next();
           _expr_sum();
           _gen_op($321);
           $321 = HEAP32[5310] | 0;
          } while (($321 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($318);
         $324 = HEAP32[5310] | 0;
         if (($324 - 150 | 0) >>> 0 < 10 >>> 0 | ($324 & -2 | 0) == 146) {
          $318 = $324;
         } else {
          $327 = $324;
          break;
         }
        }
       } else {
        $327 = $315;
       }
       if (($327 & -2 | 0) == 148) {
        $330 = $327;
        do {
         _next();
         _expr_sum();
         $331 = HEAP32[5310] | 0;
         if (($331 - 1 | 0) >>> 0 < 2 >>> 0) {
          $333 = $331;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($333);
           $334 = HEAP32[5310] | 0;
           if (($334 - 1 | 0) >>> 0 < 2 >>> 0) {
            $333 = $334;
           } else {
            $336 = $334;
            break;
           }
          }
         } else {
          $336 = $331;
         }
         if (($336 - 150 | 0) >>> 0 < 10 >>> 0 | ($336 & -2 | 0) == 146) {
          $339 = $336;
          do {
           _next();
           _expr_sum();
           $340 = HEAP32[5310] | 0;
           if (($340 - 1 | 0) >>> 0 < 2 >>> 0) {
            $342 = $340;
            do {
             _next();
             _expr_sum();
             _gen_op($342);
             $342 = HEAP32[5310] | 0;
            } while (($342 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($339);
           $339 = HEAP32[5310] | 0;
          } while (($339 - 150 | 0) >>> 0 < 10 >>> 0 | ($339 & -2 | 0) == 146);
         }
         _gen_op($330);
         $330 = HEAP32[5310] | 0;
        } while (($330 & -2 | 0) == 148);
       }
       _gen_op(38);
      } while ((HEAP32[5310] | 0) == 38);
     }
     _gen_op(94);
    } while ((HEAP32[5310] | 0) == 94);
   }
   _gen_op(124);
   $_pr906 = HEAP32[5310] | 0;
   if (($_pr906 | 0) != 124) {
    $179 = $_pr906;
    break;
   }
  }
 } else {
  $179 = $91;
 }
 if (($179 | 0) == 160) {
  while (1) {
   _next();
   _expr_sum();
   $355 = HEAP32[5310] | 0;
   if (($355 - 1 | 0) >>> 0 < 2 >>> 0) {
    $357 = $355;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($357);
     $358 = HEAP32[5310] | 0;
     if (($358 - 1 | 0) >>> 0 < 2 >>> 0) {
      $357 = $358;
     } else {
      $360 = $358;
      break;
     }
    }
   } else {
    $360 = $355;
   }
   if (($360 - 150 | 0) >>> 0 < 10 >>> 0 | ($360 & -2 | 0) == 146) {
    $363 = $360;
    while (1) {
     _next();
     _expr_sum();
     $364 = HEAP32[5310] | 0;
     if (($364 - 1 | 0) >>> 0 < 2 >>> 0) {
      $366 = $364;
      do {
       _next();
       _expr_sum();
       _gen_op($366);
       $366 = HEAP32[5310] | 0;
      } while (($366 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($363);
     $369 = HEAP32[5310] | 0;
     if (($369 - 150 | 0) >>> 0 < 10 >>> 0 | ($369 & -2 | 0) == 146) {
      $363 = $369;
     } else {
      $372 = $369;
      break;
     }
    }
   } else {
    $372 = $360;
   }
   if (($372 & -2 | 0) == 148) {
    $375 = $372;
    while (1) {
     _next();
     _expr_sum();
     $376 = HEAP32[5310] | 0;
     if (($376 - 1 | 0) >>> 0 < 2 >>> 0) {
      $378 = $376;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($378);
       $379 = HEAP32[5310] | 0;
       if (($379 - 1 | 0) >>> 0 < 2 >>> 0) {
        $378 = $379;
       } else {
        $381 = $379;
        break;
       }
      }
     } else {
      $381 = $376;
     }
     if (($381 - 150 | 0) >>> 0 < 10 >>> 0 | ($381 & -2 | 0) == 146) {
      $384 = $381;
      do {
       _next();
       _expr_sum();
       $385 = HEAP32[5310] | 0;
       if (($385 - 1 | 0) >>> 0 < 2 >>> 0) {
        $387 = $385;
        do {
         _next();
         _expr_sum();
         _gen_op($387);
         $387 = HEAP32[5310] | 0;
        } while (($387 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($384);
       $384 = HEAP32[5310] | 0;
      } while (($384 - 150 | 0) >>> 0 < 10 >>> 0 | ($384 & -2 | 0) == 146);
     }
     _gen_op($375);
     $393 = HEAP32[5310] | 0;
     if (($393 & -2 | 0) == 148) {
      $375 = $393;
     } else {
      $396 = $393;
      break;
     }
    }
   } else {
    $396 = $372;
   }
   if (($396 | 0) == 38) {
    while (1) {
     _next();
     _expr_sum();
     $398 = HEAP32[5310] | 0;
     if (($398 - 1 | 0) >>> 0 < 2 >>> 0) {
      $400 = $398;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($400);
       $401 = HEAP32[5310] | 0;
       if (($401 - 1 | 0) >>> 0 < 2 >>> 0) {
        $400 = $401;
       } else {
        $403 = $401;
        break;
       }
      }
     } else {
      $403 = $398;
     }
     if (($403 - 150 | 0) >>> 0 < 10 >>> 0 | ($403 & -2 | 0) == 146) {
      $406 = $403;
      while (1) {
       _next();
       _expr_sum();
       $407 = HEAP32[5310] | 0;
       if (($407 - 1 | 0) >>> 0 < 2 >>> 0) {
        $409 = $407;
        do {
         _next();
         _expr_sum();
         _gen_op($409);
         $409 = HEAP32[5310] | 0;
        } while (($409 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($406);
       $412 = HEAP32[5310] | 0;
       if (($412 - 150 | 0) >>> 0 < 10 >>> 0 | ($412 & -2 | 0) == 146) {
        $406 = $412;
       } else {
        $415 = $412;
        break;
       }
      }
     } else {
      $415 = $403;
     }
     if (($415 & -2 | 0) == 148) {
      $418 = $415;
      do {
       _next();
       _expr_sum();
       $419 = HEAP32[5310] | 0;
       if (($419 - 1 | 0) >>> 0 < 2 >>> 0) {
        $421 = $419;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($421);
         $422 = HEAP32[5310] | 0;
         if (($422 - 1 | 0) >>> 0 < 2 >>> 0) {
          $421 = $422;
         } else {
          $424 = $422;
          break;
         }
        }
       } else {
        $424 = $419;
       }
       if (($424 - 150 | 0) >>> 0 < 10 >>> 0 | ($424 & -2 | 0) == 146) {
        $427 = $424;
        do {
         _next();
         _expr_sum();
         $428 = HEAP32[5310] | 0;
         if (($428 - 1 | 0) >>> 0 < 2 >>> 0) {
          $430 = $428;
          do {
           _next();
           _expr_sum();
           _gen_op($430);
           $430 = HEAP32[5310] | 0;
          } while (($430 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($427);
         $427 = HEAP32[5310] | 0;
        } while (($427 - 150 | 0) >>> 0 < 10 >>> 0 | ($427 & -2 | 0) == 146);
       }
       _gen_op($418);
       $418 = HEAP32[5310] | 0;
      } while (($418 & -2 | 0) == 148);
     }
     _gen_op(38);
     $_pr909 = HEAP32[5310] | 0;
     if (($_pr909 | 0) != 38) {
      $440 = $_pr909;
      break;
     }
    }
   } else {
    $440 = $396;
   }
   if (($440 | 0) == 94) {
    while (1) {
     _next();
     _expr_sum();
     $442 = HEAP32[5310] | 0;
     if (($442 - 1 | 0) >>> 0 < 2 >>> 0) {
      $444 = $442;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($444);
       $445 = HEAP32[5310] | 0;
       if (($445 - 1 | 0) >>> 0 < 2 >>> 0) {
        $444 = $445;
       } else {
        $447 = $445;
        break;
       }
      }
     } else {
      $447 = $442;
     }
     if (($447 - 150 | 0) >>> 0 < 10 >>> 0 | ($447 & -2 | 0) == 146) {
      $450 = $447;
      while (1) {
       _next();
       _expr_sum();
       $451 = HEAP32[5310] | 0;
       if (($451 - 1 | 0) >>> 0 < 2 >>> 0) {
        $453 = $451;
        do {
         _next();
         _expr_sum();
         _gen_op($453);
         $453 = HEAP32[5310] | 0;
        } while (($453 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($450);
       $456 = HEAP32[5310] | 0;
       if (($456 - 150 | 0) >>> 0 < 10 >>> 0 | ($456 & -2 | 0) == 146) {
        $450 = $456;
       } else {
        $459 = $456;
        break;
       }
      }
     } else {
      $459 = $447;
     }
     if (($459 & -2 | 0) == 148) {
      $462 = $459;
      while (1) {
       _next();
       _expr_sum();
       $463 = HEAP32[5310] | 0;
       if (($463 - 1 | 0) >>> 0 < 2 >>> 0) {
        $465 = $463;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($465);
         $466 = HEAP32[5310] | 0;
         if (($466 - 1 | 0) >>> 0 < 2 >>> 0) {
          $465 = $466;
         } else {
          $468 = $466;
          break;
         }
        }
       } else {
        $468 = $463;
       }
       if (($468 - 150 | 0) >>> 0 < 10 >>> 0 | ($468 & -2 | 0) == 146) {
        $471 = $468;
        do {
         _next();
         _expr_sum();
         $472 = HEAP32[5310] | 0;
         if (($472 - 1 | 0) >>> 0 < 2 >>> 0) {
          $474 = $472;
          do {
           _next();
           _expr_sum();
           _gen_op($474);
           $474 = HEAP32[5310] | 0;
          } while (($474 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($471);
         $471 = HEAP32[5310] | 0;
        } while (($471 - 150 | 0) >>> 0 < 10 >>> 0 | ($471 & -2 | 0) == 146);
       }
       _gen_op($462);
       $480 = HEAP32[5310] | 0;
       if (($480 & -2 | 0) == 148) {
        $462 = $480;
       } else {
        $_lcssa1167 = $480;
        break;
       }
      }
     } else {
      $_lcssa1167 = $459;
     }
     if (($_lcssa1167 | 0) == 38) {
      do {
       _next();
       _expr_sum();
       $484 = HEAP32[5310] | 0;
       if (($484 - 1 | 0) >>> 0 < 2 >>> 0) {
        $486 = $484;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($486);
         $487 = HEAP32[5310] | 0;
         if (($487 - 1 | 0) >>> 0 < 2 >>> 0) {
          $486 = $487;
         } else {
          $489 = $487;
          break;
         }
        }
       } else {
        $489 = $484;
       }
       if (($489 - 150 | 0) >>> 0 < 10 >>> 0 | ($489 & -2 | 0) == 146) {
        $492 = $489;
        while (1) {
         _next();
         _expr_sum();
         $493 = HEAP32[5310] | 0;
         if (($493 - 1 | 0) >>> 0 < 2 >>> 0) {
          $495 = $493;
          do {
           _next();
           _expr_sum();
           _gen_op($495);
           $495 = HEAP32[5310] | 0;
          } while (($495 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($492);
         $498 = HEAP32[5310] | 0;
         if (($498 - 150 | 0) >>> 0 < 10 >>> 0 | ($498 & -2 | 0) == 146) {
          $492 = $498;
         } else {
          $501 = $498;
          break;
         }
        }
       } else {
        $501 = $489;
       }
       if (($501 & -2 | 0) == 148) {
        $504 = $501;
        do {
         _next();
         _expr_sum();
         $505 = HEAP32[5310] | 0;
         if (($505 - 1 | 0) >>> 0 < 2 >>> 0) {
          $507 = $505;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($507);
           $508 = HEAP32[5310] | 0;
           if (($508 - 1 | 0) >>> 0 < 2 >>> 0) {
            $507 = $508;
           } else {
            $510 = $508;
            break;
           }
          }
         } else {
          $510 = $505;
         }
         if (($510 - 150 | 0) >>> 0 < 10 >>> 0 | ($510 & -2 | 0) == 146) {
          $513 = $510;
          do {
           _next();
           _expr_sum();
           $514 = HEAP32[5310] | 0;
           if (($514 - 1 | 0) >>> 0 < 2 >>> 0) {
            $516 = $514;
            do {
             _next();
             _expr_sum();
             _gen_op($516);
             $516 = HEAP32[5310] | 0;
            } while (($516 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($513);
           $513 = HEAP32[5310] | 0;
          } while (($513 - 150 | 0) >>> 0 < 10 >>> 0 | ($513 & -2 | 0) == 146);
         }
         _gen_op($504);
         $504 = HEAP32[5310] | 0;
        } while (($504 & -2 | 0) == 148);
       }
       _gen_op(38);
      } while ((HEAP32[5310] | 0) == 38);
     }
     _gen_op(94);
     $526 = HEAP32[5310] | 0;
     if (($526 | 0) != 94) {
      $_lcssa1180 = $526;
      break;
     }
    }
   } else {
    $_lcssa1180 = $440;
   }
   if (($_lcssa1180 | 0) == 124) {
    do {
     _next();
     _expr_sum();
     $529 = HEAP32[5310] | 0;
     if (($529 - 1 | 0) >>> 0 < 2 >>> 0) {
      $531 = $529;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($531);
       $532 = HEAP32[5310] | 0;
       if (($532 - 1 | 0) >>> 0 < 2 >>> 0) {
        $531 = $532;
       } else {
        $534 = $532;
        break;
       }
      }
     } else {
      $534 = $529;
     }
     if (($534 - 150 | 0) >>> 0 < 10 >>> 0 | ($534 & -2 | 0) == 146) {
      $537 = $534;
      while (1) {
       _next();
       _expr_sum();
       $538 = HEAP32[5310] | 0;
       if (($538 - 1 | 0) >>> 0 < 2 >>> 0) {
        $540 = $538;
        do {
         _next();
         _expr_sum();
         _gen_op($540);
         $540 = HEAP32[5310] | 0;
        } while (($540 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($537);
       $543 = HEAP32[5310] | 0;
       if (($543 - 150 | 0) >>> 0 < 10 >>> 0 | ($543 & -2 | 0) == 146) {
        $537 = $543;
       } else {
        $546 = $543;
        break;
       }
      }
     } else {
      $546 = $534;
     }
     if (($546 & -2 | 0) == 148) {
      $549 = $546;
      while (1) {
       _next();
       _expr_sum();
       $550 = HEAP32[5310] | 0;
       if (($550 - 1 | 0) >>> 0 < 2 >>> 0) {
        $552 = $550;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($552);
         $553 = HEAP32[5310] | 0;
         if (($553 - 1 | 0) >>> 0 < 2 >>> 0) {
          $552 = $553;
         } else {
          $555 = $553;
          break;
         }
        }
       } else {
        $555 = $550;
       }
       if (($555 - 150 | 0) >>> 0 < 10 >>> 0 | ($555 & -2 | 0) == 146) {
        $558 = $555;
        do {
         _next();
         _expr_sum();
         $559 = HEAP32[5310] | 0;
         if (($559 - 1 | 0) >>> 0 < 2 >>> 0) {
          $561 = $559;
          do {
           _next();
           _expr_sum();
           _gen_op($561);
           $561 = HEAP32[5310] | 0;
          } while (($561 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($558);
         $558 = HEAP32[5310] | 0;
        } while (($558 - 150 | 0) >>> 0 < 10 >>> 0 | ($558 & -2 | 0) == 146);
       }
       _gen_op($549);
       $567 = HEAP32[5310] | 0;
       if (($567 & -2 | 0) == 148) {
        $549 = $567;
       } else {
        $570 = $567;
        break;
       }
      }
     } else {
      $570 = $546;
     }
     if (($570 | 0) == 38) {
      while (1) {
       _next();
       _expr_sum();
       $572 = HEAP32[5310] | 0;
       if (($572 - 1 | 0) >>> 0 < 2 >>> 0) {
        $574 = $572;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($574);
         $575 = HEAP32[5310] | 0;
         if (($575 - 1 | 0) >>> 0 < 2 >>> 0) {
          $574 = $575;
         } else {
          $577 = $575;
          break;
         }
        }
       } else {
        $577 = $572;
       }
       if (($577 - 150 | 0) >>> 0 < 10 >>> 0 | ($577 & -2 | 0) == 146) {
        $580 = $577;
        while (1) {
         _next();
         _expr_sum();
         $581 = HEAP32[5310] | 0;
         if (($581 - 1 | 0) >>> 0 < 2 >>> 0) {
          $583 = $581;
          do {
           _next();
           _expr_sum();
           _gen_op($583);
           $583 = HEAP32[5310] | 0;
          } while (($583 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($580);
         $586 = HEAP32[5310] | 0;
         if (($586 - 150 | 0) >>> 0 < 10 >>> 0 | ($586 & -2 | 0) == 146) {
          $580 = $586;
         } else {
          $589 = $586;
          break;
         }
        }
       } else {
        $589 = $577;
       }
       if (($589 & -2 | 0) == 148) {
        $592 = $589;
        do {
         _next();
         _expr_sum();
         $593 = HEAP32[5310] | 0;
         if (($593 - 1 | 0) >>> 0 < 2 >>> 0) {
          $595 = $593;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($595);
           $596 = HEAP32[5310] | 0;
           if (($596 - 1 | 0) >>> 0 < 2 >>> 0) {
            $595 = $596;
           } else {
            $598 = $596;
            break;
           }
          }
         } else {
          $598 = $593;
         }
         if (($598 - 150 | 0) >>> 0 < 10 >>> 0 | ($598 & -2 | 0) == 146) {
          $601 = $598;
          do {
           _next();
           _expr_sum();
           $602 = HEAP32[5310] | 0;
           if (($602 - 1 | 0) >>> 0 < 2 >>> 0) {
            $604 = $602;
            do {
             _next();
             _expr_sum();
             _gen_op($604);
             $604 = HEAP32[5310] | 0;
            } while (($604 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($601);
           $601 = HEAP32[5310] | 0;
          } while (($601 - 150 | 0) >>> 0 < 10 >>> 0 | ($601 & -2 | 0) == 146);
         }
         _gen_op($592);
         $592 = HEAP32[5310] | 0;
        } while (($592 & -2 | 0) == 148);
       }
       _gen_op(38);
       $_pr912 = HEAP32[5310] | 0;
       if (($_pr912 | 0) != 38) {
        $614 = $_pr912;
        break;
       }
      }
     } else {
      $614 = $570;
     }
     if (($614 | 0) == 94) {
      do {
       _next();
       _expr_sum();
       $616 = HEAP32[5310] | 0;
       if (($616 - 1 | 0) >>> 0 < 2 >>> 0) {
        $618 = $616;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($618);
         $619 = HEAP32[5310] | 0;
         if (($619 - 1 | 0) >>> 0 < 2 >>> 0) {
          $618 = $619;
         } else {
          $621 = $619;
          break;
         }
        }
       } else {
        $621 = $616;
       }
       if (($621 - 150 | 0) >>> 0 < 10 >>> 0 | ($621 & -2 | 0) == 146) {
        $624 = $621;
        while (1) {
         _next();
         _expr_sum();
         $625 = HEAP32[5310] | 0;
         if (($625 - 1 | 0) >>> 0 < 2 >>> 0) {
          $627 = $625;
          do {
           _next();
           _expr_sum();
           _gen_op($627);
           $627 = HEAP32[5310] | 0;
          } while (($627 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($624);
         $630 = HEAP32[5310] | 0;
         if (($630 - 150 | 0) >>> 0 < 10 >>> 0 | ($630 & -2 | 0) == 146) {
          $624 = $630;
         } else {
          $633 = $630;
          break;
         }
        }
       } else {
        $633 = $621;
       }
       if (($633 & -2 | 0) == 148) {
        $636 = $633;
        while (1) {
         _next();
         _expr_sum();
         $637 = HEAP32[5310] | 0;
         if (($637 - 1 | 0) >>> 0 < 2 >>> 0) {
          $639 = $637;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($639);
           $640 = HEAP32[5310] | 0;
           if (($640 - 1 | 0) >>> 0 < 2 >>> 0) {
            $639 = $640;
           } else {
            $642 = $640;
            break;
           }
          }
         } else {
          $642 = $637;
         }
         if (($642 - 150 | 0) >>> 0 < 10 >>> 0 | ($642 & -2 | 0) == 146) {
          $645 = $642;
          do {
           _next();
           _expr_sum();
           $646 = HEAP32[5310] | 0;
           if (($646 - 1 | 0) >>> 0 < 2 >>> 0) {
            $648 = $646;
            do {
             _next();
             _expr_sum();
             _gen_op($648);
             $648 = HEAP32[5310] | 0;
            } while (($648 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($645);
           $645 = HEAP32[5310] | 0;
          } while (($645 - 150 | 0) >>> 0 < 10 >>> 0 | ($645 & -2 | 0) == 146);
         }
         _gen_op($636);
         $654 = HEAP32[5310] | 0;
         if (($654 & -2 | 0) == 148) {
          $636 = $654;
         } else {
          $_lcssa1216 = $654;
          break;
         }
        }
       } else {
        $_lcssa1216 = $633;
       }
       if (($_lcssa1216 | 0) == 38) {
        do {
         _next();
         _expr_sum();
         $658 = HEAP32[5310] | 0;
         if (($658 - 1 | 0) >>> 0 < 2 >>> 0) {
          $660 = $658;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($660);
           $661 = HEAP32[5310] | 0;
           if (($661 - 1 | 0) >>> 0 < 2 >>> 0) {
            $660 = $661;
           } else {
            $663 = $661;
            break;
           }
          }
         } else {
          $663 = $658;
         }
         if (($663 - 150 | 0) >>> 0 < 10 >>> 0 | ($663 & -2 | 0) == 146) {
          $666 = $663;
          while (1) {
           _next();
           _expr_sum();
           $667 = HEAP32[5310] | 0;
           if (($667 - 1 | 0) >>> 0 < 2 >>> 0) {
            $669 = $667;
            do {
             _next();
             _expr_sum();
             _gen_op($669);
             $669 = HEAP32[5310] | 0;
            } while (($669 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($666);
           $672 = HEAP32[5310] | 0;
           if (($672 - 150 | 0) >>> 0 < 10 >>> 0 | ($672 & -2 | 0) == 146) {
            $666 = $672;
           } else {
            $675 = $672;
            break;
           }
          }
         } else {
          $675 = $663;
         }
         if (($675 & -2 | 0) == 148) {
          $678 = $675;
          do {
           _next();
           _expr_sum();
           $679 = HEAP32[5310] | 0;
           if (($679 - 1 | 0) >>> 0 < 2 >>> 0) {
            $681 = $679;
            while (1) {
             _next();
             _expr_sum();
             _gen_op($681);
             $682 = HEAP32[5310] | 0;
             if (($682 - 1 | 0) >>> 0 < 2 >>> 0) {
              $681 = $682;
             } else {
              $684 = $682;
              break;
             }
            }
           } else {
            $684 = $679;
           }
           if (($684 - 150 | 0) >>> 0 < 10 >>> 0 | ($684 & -2 | 0) == 146) {
            $687 = $684;
            do {
             _next();
             _expr_sum();
             $688 = HEAP32[5310] | 0;
             if (($688 - 1 | 0) >>> 0 < 2 >>> 0) {
              $690 = $688;
              do {
               _next();
               _expr_sum();
               _gen_op($690);
               $690 = HEAP32[5310] | 0;
              } while (($690 - 1 | 0) >>> 0 < 2 >>> 0);
             }
             _gen_op($687);
             $687 = HEAP32[5310] | 0;
            } while (($687 - 150 | 0) >>> 0 < 10 >>> 0 | ($687 & -2 | 0) == 146);
           }
           _gen_op($678);
           $678 = HEAP32[5310] | 0;
          } while (($678 & -2 | 0) == 148);
         }
         _gen_op(38);
        } while ((HEAP32[5310] | 0) == 38);
       }
       _gen_op(94);
      } while ((HEAP32[5310] | 0) == 94);
     }
     _gen_op(124);
    } while ((HEAP32[5310] | 0) == 124);
   }
   _gen_op(160);
   $703 = HEAP32[5310] | 0;
   if (($703 | 0) != 160) {
    $705 = $703;
    break;
   }
  }
 } else {
  $705 = $179;
 }
 while (1) {
  if (($705 | 0) == 63) {
   break;
  } else if (($705 | 0) != 161) {
   label = 620;
   break;
  }
  _next();
  _expr_sum();
  $707 = HEAP32[5310] | 0;
  if (($707 - 1 | 0) >>> 0 < 2 >>> 0) {
   $709 = $707;
   while (1) {
    _next();
    _expr_sum();
    _gen_op($709);
    $710 = HEAP32[5310] | 0;
    if (($710 - 1 | 0) >>> 0 < 2 >>> 0) {
     $709 = $710;
    } else {
     $712 = $710;
     break;
    }
   }
  } else {
   $712 = $707;
  }
  if (($712 - 150 | 0) >>> 0 < 10 >>> 0 | ($712 & -2 | 0) == 146) {
   $715 = $712;
   while (1) {
    _next();
    _expr_sum();
    $716 = HEAP32[5310] | 0;
    if (($716 - 1 | 0) >>> 0 < 2 >>> 0) {
     $718 = $716;
     do {
      _next();
      _expr_sum();
      _gen_op($718);
      $718 = HEAP32[5310] | 0;
     } while (($718 - 1 | 0) >>> 0 < 2 >>> 0);
    }
    _gen_op($715);
    $721 = HEAP32[5310] | 0;
    if (($721 - 150 | 0) >>> 0 < 10 >>> 0 | ($721 & -2 | 0) == 146) {
     $715 = $721;
    } else {
     $724 = $721;
     break;
    }
   }
  } else {
   $724 = $712;
  }
  if (($724 & -2 | 0) == 148) {
   $727 = $724;
   while (1) {
    _next();
    _expr_sum();
    $728 = HEAP32[5310] | 0;
    if (($728 - 1 | 0) >>> 0 < 2 >>> 0) {
     $730 = $728;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($730);
      $731 = HEAP32[5310] | 0;
      if (($731 - 1 | 0) >>> 0 < 2 >>> 0) {
       $730 = $731;
      } else {
       $733 = $731;
       break;
      }
     }
    } else {
     $733 = $728;
    }
    if (($733 - 150 | 0) >>> 0 < 10 >>> 0 | ($733 & -2 | 0) == 146) {
     $736 = $733;
     do {
      _next();
      _expr_sum();
      $737 = HEAP32[5310] | 0;
      if (($737 - 1 | 0) >>> 0 < 2 >>> 0) {
       $739 = $737;
       do {
        _next();
        _expr_sum();
        _gen_op($739);
        $739 = HEAP32[5310] | 0;
       } while (($739 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($736);
      $736 = HEAP32[5310] | 0;
     } while (($736 - 150 | 0) >>> 0 < 10 >>> 0 | ($736 & -2 | 0) == 146);
    }
    _gen_op($727);
    $745 = HEAP32[5310] | 0;
    if (($745 & -2 | 0) == 148) {
     $727 = $745;
    } else {
     $748 = $745;
     break;
    }
   }
  } else {
   $748 = $724;
  }
  if (($748 | 0) == 38) {
   while (1) {
    _next();
    _expr_sum();
    $750 = HEAP32[5310] | 0;
    if (($750 - 1 | 0) >>> 0 < 2 >>> 0) {
     $752 = $750;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($752);
      $753 = HEAP32[5310] | 0;
      if (($753 - 1 | 0) >>> 0 < 2 >>> 0) {
       $752 = $753;
      } else {
       $755 = $753;
       break;
      }
     }
    } else {
     $755 = $750;
    }
    if (($755 - 150 | 0) >>> 0 < 10 >>> 0 | ($755 & -2 | 0) == 146) {
     $758 = $755;
     while (1) {
      _next();
      _expr_sum();
      $759 = HEAP32[5310] | 0;
      if (($759 - 1 | 0) >>> 0 < 2 >>> 0) {
       $761 = $759;
       do {
        _next();
        _expr_sum();
        _gen_op($761);
        $761 = HEAP32[5310] | 0;
       } while (($761 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($758);
      $764 = HEAP32[5310] | 0;
      if (($764 - 150 | 0) >>> 0 < 10 >>> 0 | ($764 & -2 | 0) == 146) {
       $758 = $764;
      } else {
       $767 = $764;
       break;
      }
     }
    } else {
     $767 = $755;
    }
    if (($767 & -2 | 0) == 148) {
     $770 = $767;
     do {
      _next();
      _expr_sum();
      $771 = HEAP32[5310] | 0;
      if (($771 - 1 | 0) >>> 0 < 2 >>> 0) {
       $773 = $771;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($773);
        $774 = HEAP32[5310] | 0;
        if (($774 - 1 | 0) >>> 0 < 2 >>> 0) {
         $773 = $774;
        } else {
         $776 = $774;
         break;
        }
       }
      } else {
       $776 = $771;
      }
      if (($776 - 150 | 0) >>> 0 < 10 >>> 0 | ($776 & -2 | 0) == 146) {
       $779 = $776;
       do {
        _next();
        _expr_sum();
        $780 = HEAP32[5310] | 0;
        if (($780 - 1 | 0) >>> 0 < 2 >>> 0) {
         $782 = $780;
         do {
          _next();
          _expr_sum();
          _gen_op($782);
          $782 = HEAP32[5310] | 0;
         } while (($782 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($779);
        $779 = HEAP32[5310] | 0;
       } while (($779 - 150 | 0) >>> 0 < 10 >>> 0 | ($779 & -2 | 0) == 146);
      }
      _gen_op($770);
      $770 = HEAP32[5310] | 0;
     } while (($770 & -2 | 0) == 148);
    }
    _gen_op(38);
    $_pr915 = HEAP32[5310] | 0;
    if (($_pr915 | 0) != 38) {
     $792 = $_pr915;
     break;
    }
   }
  } else {
   $792 = $748;
  }
  if (($792 | 0) == 94) {
   while (1) {
    _next();
    _expr_sum();
    $794 = HEAP32[5310] | 0;
    if (($794 - 1 | 0) >>> 0 < 2 >>> 0) {
     $796 = $794;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($796);
      $797 = HEAP32[5310] | 0;
      if (($797 - 1 | 0) >>> 0 < 2 >>> 0) {
       $796 = $797;
      } else {
       $799 = $797;
       break;
      }
     }
    } else {
     $799 = $794;
    }
    if (($799 - 150 | 0) >>> 0 < 10 >>> 0 | ($799 & -2 | 0) == 146) {
     $802 = $799;
     while (1) {
      _next();
      _expr_sum();
      $803 = HEAP32[5310] | 0;
      if (($803 - 1 | 0) >>> 0 < 2 >>> 0) {
       $805 = $803;
       do {
        _next();
        _expr_sum();
        _gen_op($805);
        $805 = HEAP32[5310] | 0;
       } while (($805 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($802);
      $808 = HEAP32[5310] | 0;
      if (($808 - 150 | 0) >>> 0 < 10 >>> 0 | ($808 & -2 | 0) == 146) {
       $802 = $808;
      } else {
       $811 = $808;
       break;
      }
     }
    } else {
     $811 = $799;
    }
    if (($811 & -2 | 0) == 148) {
     $814 = $811;
     while (1) {
      _next();
      _expr_sum();
      $815 = HEAP32[5310] | 0;
      if (($815 - 1 | 0) >>> 0 < 2 >>> 0) {
       $817 = $815;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($817);
        $818 = HEAP32[5310] | 0;
        if (($818 - 1 | 0) >>> 0 < 2 >>> 0) {
         $817 = $818;
        } else {
         $820 = $818;
         break;
        }
       }
      } else {
       $820 = $815;
      }
      if (($820 - 150 | 0) >>> 0 < 10 >>> 0 | ($820 & -2 | 0) == 146) {
       $823 = $820;
       do {
        _next();
        _expr_sum();
        $824 = HEAP32[5310] | 0;
        if (($824 - 1 | 0) >>> 0 < 2 >>> 0) {
         $826 = $824;
         do {
          _next();
          _expr_sum();
          _gen_op($826);
          $826 = HEAP32[5310] | 0;
         } while (($826 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($823);
        $823 = HEAP32[5310] | 0;
       } while (($823 - 150 | 0) >>> 0 < 10 >>> 0 | ($823 & -2 | 0) == 146);
      }
      _gen_op($814);
      $832 = HEAP32[5310] | 0;
      if (($832 & -2 | 0) == 148) {
       $814 = $832;
      } else {
       $_lcssa972 = $832;
       break;
      }
     }
    } else {
     $_lcssa972 = $811;
    }
    if (($_lcssa972 | 0) == 38) {
     do {
      _next();
      _expr_sum();
      $836 = HEAP32[5310] | 0;
      if (($836 - 1 | 0) >>> 0 < 2 >>> 0) {
       $838 = $836;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($838);
        $839 = HEAP32[5310] | 0;
        if (($839 - 1 | 0) >>> 0 < 2 >>> 0) {
         $838 = $839;
        } else {
         $841 = $839;
         break;
        }
       }
      } else {
       $841 = $836;
      }
      if (($841 - 150 | 0) >>> 0 < 10 >>> 0 | ($841 & -2 | 0) == 146) {
       $844 = $841;
       while (1) {
        _next();
        _expr_sum();
        $845 = HEAP32[5310] | 0;
        if (($845 - 1 | 0) >>> 0 < 2 >>> 0) {
         $847 = $845;
         do {
          _next();
          _expr_sum();
          _gen_op($847);
          $847 = HEAP32[5310] | 0;
         } while (($847 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($844);
        $850 = HEAP32[5310] | 0;
        if (($850 - 150 | 0) >>> 0 < 10 >>> 0 | ($850 & -2 | 0) == 146) {
         $844 = $850;
        } else {
         $853 = $850;
         break;
        }
       }
      } else {
       $853 = $841;
      }
      if (($853 & -2 | 0) == 148) {
       $856 = $853;
       do {
        _next();
        _expr_sum();
        $857 = HEAP32[5310] | 0;
        if (($857 - 1 | 0) >>> 0 < 2 >>> 0) {
         $859 = $857;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($859);
          $860 = HEAP32[5310] | 0;
          if (($860 - 1 | 0) >>> 0 < 2 >>> 0) {
           $859 = $860;
          } else {
           $862 = $860;
           break;
          }
         }
        } else {
         $862 = $857;
        }
        if (($862 - 150 | 0) >>> 0 < 10 >>> 0 | ($862 & -2 | 0) == 146) {
         $865 = $862;
         do {
          _next();
          _expr_sum();
          $866 = HEAP32[5310] | 0;
          if (($866 - 1 | 0) >>> 0 < 2 >>> 0) {
           $868 = $866;
           do {
            _next();
            _expr_sum();
            _gen_op($868);
            $868 = HEAP32[5310] | 0;
           } while (($868 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($865);
          $865 = HEAP32[5310] | 0;
         } while (($865 - 150 | 0) >>> 0 < 10 >>> 0 | ($865 & -2 | 0) == 146);
        }
        _gen_op($856);
        $856 = HEAP32[5310] | 0;
       } while (($856 & -2 | 0) == 148);
      }
      _gen_op(38);
     } while ((HEAP32[5310] | 0) == 38);
    }
    _gen_op(94);
    $878 = HEAP32[5310] | 0;
    if (($878 | 0) != 94) {
     $880 = $878;
     break;
    }
   }
  } else {
   $880 = $792;
  }
  if (($880 | 0) == 124) {
   while (1) {
    _next();
    _expr_sum();
    $882 = HEAP32[5310] | 0;
    if (($882 - 1 | 0) >>> 0 < 2 >>> 0) {
     $884 = $882;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($884);
      $885 = HEAP32[5310] | 0;
      if (($885 - 1 | 0) >>> 0 < 2 >>> 0) {
       $884 = $885;
      } else {
       $887 = $885;
       break;
      }
     }
    } else {
     $887 = $882;
    }
    if (($887 - 150 | 0) >>> 0 < 10 >>> 0 | ($887 & -2 | 0) == 146) {
     $890 = $887;
     while (1) {
      _next();
      _expr_sum();
      $891 = HEAP32[5310] | 0;
      if (($891 - 1 | 0) >>> 0 < 2 >>> 0) {
       $893 = $891;
       do {
        _next();
        _expr_sum();
        _gen_op($893);
        $893 = HEAP32[5310] | 0;
       } while (($893 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($890);
      $896 = HEAP32[5310] | 0;
      if (($896 - 150 | 0) >>> 0 < 10 >>> 0 | ($896 & -2 | 0) == 146) {
       $890 = $896;
      } else {
       $899 = $896;
       break;
      }
     }
    } else {
     $899 = $887;
    }
    if (($899 & -2 | 0) == 148) {
     $902 = $899;
     while (1) {
      _next();
      _expr_sum();
      $903 = HEAP32[5310] | 0;
      if (($903 - 1 | 0) >>> 0 < 2 >>> 0) {
       $905 = $903;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($905);
        $906 = HEAP32[5310] | 0;
        if (($906 - 1 | 0) >>> 0 < 2 >>> 0) {
         $905 = $906;
        } else {
         $908 = $906;
         break;
        }
       }
      } else {
       $908 = $903;
      }
      if (($908 - 150 | 0) >>> 0 < 10 >>> 0 | ($908 & -2 | 0) == 146) {
       $911 = $908;
       do {
        _next();
        _expr_sum();
        $912 = HEAP32[5310] | 0;
        if (($912 - 1 | 0) >>> 0 < 2 >>> 0) {
         $914 = $912;
         do {
          _next();
          _expr_sum();
          _gen_op($914);
          $914 = HEAP32[5310] | 0;
         } while (($914 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($911);
        $911 = HEAP32[5310] | 0;
       } while (($911 - 150 | 0) >>> 0 < 10 >>> 0 | ($911 & -2 | 0) == 146);
      }
      _gen_op($902);
      $920 = HEAP32[5310] | 0;
      if (($920 & -2 | 0) == 148) {
       $902 = $920;
      } else {
       $923 = $920;
       break;
      }
     }
    } else {
     $923 = $899;
    }
    if (($923 | 0) == 38) {
     while (1) {
      _next();
      _expr_sum();
      $925 = HEAP32[5310] | 0;
      if (($925 - 1 | 0) >>> 0 < 2 >>> 0) {
       $927 = $925;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($927);
        $928 = HEAP32[5310] | 0;
        if (($928 - 1 | 0) >>> 0 < 2 >>> 0) {
         $927 = $928;
        } else {
         $930 = $928;
         break;
        }
       }
      } else {
       $930 = $925;
      }
      if (($930 - 150 | 0) >>> 0 < 10 >>> 0 | ($930 & -2 | 0) == 146) {
       $933 = $930;
       while (1) {
        _next();
        _expr_sum();
        $934 = HEAP32[5310] | 0;
        if (($934 - 1 | 0) >>> 0 < 2 >>> 0) {
         $936 = $934;
         do {
          _next();
          _expr_sum();
          _gen_op($936);
          $936 = HEAP32[5310] | 0;
         } while (($936 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($933);
        $939 = HEAP32[5310] | 0;
        if (($939 - 150 | 0) >>> 0 < 10 >>> 0 | ($939 & -2 | 0) == 146) {
         $933 = $939;
        } else {
         $942 = $939;
         break;
        }
       }
      } else {
       $942 = $930;
      }
      if (($942 & -2 | 0) == 148) {
       $945 = $942;
       do {
        _next();
        _expr_sum();
        $946 = HEAP32[5310] | 0;
        if (($946 - 1 | 0) >>> 0 < 2 >>> 0) {
         $948 = $946;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($948);
          $949 = HEAP32[5310] | 0;
          if (($949 - 1 | 0) >>> 0 < 2 >>> 0) {
           $948 = $949;
          } else {
           $951 = $949;
           break;
          }
         }
        } else {
         $951 = $946;
        }
        if (($951 - 150 | 0) >>> 0 < 10 >>> 0 | ($951 & -2 | 0) == 146) {
         $954 = $951;
         do {
          _next();
          _expr_sum();
          $955 = HEAP32[5310] | 0;
          if (($955 - 1 | 0) >>> 0 < 2 >>> 0) {
           $957 = $955;
           do {
            _next();
            _expr_sum();
            _gen_op($957);
            $957 = HEAP32[5310] | 0;
           } while (($957 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($954);
          $954 = HEAP32[5310] | 0;
         } while (($954 - 150 | 0) >>> 0 < 10 >>> 0 | ($954 & -2 | 0) == 146);
        }
        _gen_op($945);
        $945 = HEAP32[5310] | 0;
       } while (($945 & -2 | 0) == 148);
      }
      _gen_op(38);
      $_pr918 = HEAP32[5310] | 0;
      if (($_pr918 | 0) != 38) {
       $967 = $_pr918;
       break;
      }
     }
    } else {
     $967 = $923;
    }
    if (($967 | 0) == 94) {
     do {
      _next();
      _expr_sum();
      $969 = HEAP32[5310] | 0;
      if (($969 - 1 | 0) >>> 0 < 2 >>> 0) {
       $971 = $969;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($971);
        $972 = HEAP32[5310] | 0;
        if (($972 - 1 | 0) >>> 0 < 2 >>> 0) {
         $971 = $972;
        } else {
         $974 = $972;
         break;
        }
       }
      } else {
       $974 = $969;
      }
      if (($974 - 150 | 0) >>> 0 < 10 >>> 0 | ($974 & -2 | 0) == 146) {
       $977 = $974;
       while (1) {
        _next();
        _expr_sum();
        $978 = HEAP32[5310] | 0;
        if (($978 - 1 | 0) >>> 0 < 2 >>> 0) {
         $980 = $978;
         do {
          _next();
          _expr_sum();
          _gen_op($980);
          $980 = HEAP32[5310] | 0;
         } while (($980 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($977);
        $983 = HEAP32[5310] | 0;
        if (($983 - 150 | 0) >>> 0 < 10 >>> 0 | ($983 & -2 | 0) == 146) {
         $977 = $983;
        } else {
         $986 = $983;
         break;
        }
       }
      } else {
       $986 = $974;
      }
      if (($986 & -2 | 0) == 148) {
       $989 = $986;
       while (1) {
        _next();
        _expr_sum();
        $990 = HEAP32[5310] | 0;
        if (($990 - 1 | 0) >>> 0 < 2 >>> 0) {
         $992 = $990;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($992);
          $993 = HEAP32[5310] | 0;
          if (($993 - 1 | 0) >>> 0 < 2 >>> 0) {
           $992 = $993;
          } else {
           $995 = $993;
           break;
          }
         }
        } else {
         $995 = $990;
        }
        if (($995 - 150 | 0) >>> 0 < 10 >>> 0 | ($995 & -2 | 0) == 146) {
         $998 = $995;
         do {
          _next();
          _expr_sum();
          $999 = HEAP32[5310] | 0;
          if (($999 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1001 = $999;
           do {
            _next();
            _expr_sum();
            _gen_op($1001);
            $1001 = HEAP32[5310] | 0;
           } while (($1001 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($998);
          $998 = HEAP32[5310] | 0;
         } while (($998 - 150 | 0) >>> 0 < 10 >>> 0 | ($998 & -2 | 0) == 146);
        }
        _gen_op($989);
        $1007 = HEAP32[5310] | 0;
        if (($1007 & -2 | 0) == 148) {
         $989 = $1007;
        } else {
         $_lcssa1021 = $1007;
         break;
        }
       }
      } else {
       $_lcssa1021 = $986;
      }
      if (($_lcssa1021 | 0) == 38) {
       do {
        _next();
        _expr_sum();
        $1011 = HEAP32[5310] | 0;
        if (($1011 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1013 = $1011;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($1013);
          $1014 = HEAP32[5310] | 0;
          if (($1014 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1013 = $1014;
          } else {
           $1016 = $1014;
           break;
          }
         }
        } else {
         $1016 = $1011;
        }
        if (($1016 - 150 | 0) >>> 0 < 10 >>> 0 | ($1016 & -2 | 0) == 146) {
         $1019 = $1016;
         while (1) {
          _next();
          _expr_sum();
          $1020 = HEAP32[5310] | 0;
          if (($1020 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1022 = $1020;
           do {
            _next();
            _expr_sum();
            _gen_op($1022);
            $1022 = HEAP32[5310] | 0;
           } while (($1022 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($1019);
          $1025 = HEAP32[5310] | 0;
          if (($1025 - 150 | 0) >>> 0 < 10 >>> 0 | ($1025 & -2 | 0) == 146) {
           $1019 = $1025;
          } else {
           $1028 = $1025;
           break;
          }
         }
        } else {
         $1028 = $1016;
        }
        if (($1028 & -2 | 0) == 148) {
         $1031 = $1028;
         do {
          _next();
          _expr_sum();
          $1032 = HEAP32[5310] | 0;
          if (($1032 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1034 = $1032;
           while (1) {
            _next();
            _expr_sum();
            _gen_op($1034);
            $1035 = HEAP32[5310] | 0;
            if (($1035 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1034 = $1035;
            } else {
             $1037 = $1035;
             break;
            }
           }
          } else {
           $1037 = $1032;
          }
          if (($1037 - 150 | 0) >>> 0 < 10 >>> 0 | ($1037 & -2 | 0) == 146) {
           $1040 = $1037;
           do {
            _next();
            _expr_sum();
            $1041 = HEAP32[5310] | 0;
            if (($1041 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1043 = $1041;
             do {
              _next();
              _expr_sum();
              _gen_op($1043);
              $1043 = HEAP32[5310] | 0;
             } while (($1043 - 1 | 0) >>> 0 < 2 >>> 0);
            }
            _gen_op($1040);
            $1040 = HEAP32[5310] | 0;
           } while (($1040 - 150 | 0) >>> 0 < 10 >>> 0 | ($1040 & -2 | 0) == 146);
          }
          _gen_op($1031);
          $1031 = HEAP32[5310] | 0;
         } while (($1031 & -2 | 0) == 148);
        }
        _gen_op(38);
       } while ((HEAP32[5310] | 0) == 38);
      }
      _gen_op(94);
     } while ((HEAP32[5310] | 0) == 94);
    }
    _gen_op(124);
    $_pr917 = HEAP32[5310] | 0;
    if (($_pr917 | 0) != 124) {
     $1056 = $_pr917;
     break;
    }
   }
  } else {
   $1056 = $880;
  }
  if (($1056 | 0) == 160) {
   do {
    _next();
    _expr_sum();
    $1058 = HEAP32[5310] | 0;
    if (($1058 - 1 | 0) >>> 0 < 2 >>> 0) {
     $1060 = $1058;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($1060);
      $1061 = HEAP32[5310] | 0;
      if (($1061 - 1 | 0) >>> 0 < 2 >>> 0) {
       $1060 = $1061;
      } else {
       $1063 = $1061;
       break;
      }
     }
    } else {
     $1063 = $1058;
    }
    if (($1063 - 150 | 0) >>> 0 < 10 >>> 0 | ($1063 & -2 | 0) == 146) {
     $1066 = $1063;
     while (1) {
      _next();
      _expr_sum();
      $1067 = HEAP32[5310] | 0;
      if (($1067 - 1 | 0) >>> 0 < 2 >>> 0) {
       $1069 = $1067;
       do {
        _next();
        _expr_sum();
        _gen_op($1069);
        $1069 = HEAP32[5310] | 0;
       } while (($1069 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($1066);
      $1072 = HEAP32[5310] | 0;
      if (($1072 - 150 | 0) >>> 0 < 10 >>> 0 | ($1072 & -2 | 0) == 146) {
       $1066 = $1072;
      } else {
       $1075 = $1072;
       break;
      }
     }
    } else {
     $1075 = $1063;
    }
    if (($1075 & -2 | 0) == 148) {
     $1078 = $1075;
     while (1) {
      _next();
      _expr_sum();
      $1079 = HEAP32[5310] | 0;
      if (($1079 - 1 | 0) >>> 0 < 2 >>> 0) {
       $1081 = $1079;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($1081);
        $1082 = HEAP32[5310] | 0;
        if (($1082 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1081 = $1082;
        } else {
         $1084 = $1082;
         break;
        }
       }
      } else {
       $1084 = $1079;
      }
      if (($1084 - 150 | 0) >>> 0 < 10 >>> 0 | ($1084 & -2 | 0) == 146) {
       $1087 = $1084;
       do {
        _next();
        _expr_sum();
        $1088 = HEAP32[5310] | 0;
        if (($1088 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1090 = $1088;
         do {
          _next();
          _expr_sum();
          _gen_op($1090);
          $1090 = HEAP32[5310] | 0;
         } while (($1090 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($1087);
        $1087 = HEAP32[5310] | 0;
       } while (($1087 - 150 | 0) >>> 0 < 10 >>> 0 | ($1087 & -2 | 0) == 146);
      }
      _gen_op($1078);
      $1096 = HEAP32[5310] | 0;
      if (($1096 & -2 | 0) == 148) {
       $1078 = $1096;
      } else {
       $1099 = $1096;
       break;
      }
     }
    } else {
     $1099 = $1075;
    }
    if (($1099 | 0) == 38) {
     while (1) {
      _next();
      _expr_sum();
      $1101 = HEAP32[5310] | 0;
      if (($1101 - 1 | 0) >>> 0 < 2 >>> 0) {
       $1103 = $1101;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($1103);
        $1104 = HEAP32[5310] | 0;
        if (($1104 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1103 = $1104;
        } else {
         $1106 = $1104;
         break;
        }
       }
      } else {
       $1106 = $1101;
      }
      if (($1106 - 150 | 0) >>> 0 < 10 >>> 0 | ($1106 & -2 | 0) == 146) {
       $1109 = $1106;
       while (1) {
        _next();
        _expr_sum();
        $1110 = HEAP32[5310] | 0;
        if (($1110 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1112 = $1110;
         do {
          _next();
          _expr_sum();
          _gen_op($1112);
          $1112 = HEAP32[5310] | 0;
         } while (($1112 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($1109);
        $1115 = HEAP32[5310] | 0;
        if (($1115 - 150 | 0) >>> 0 < 10 >>> 0 | ($1115 & -2 | 0) == 146) {
         $1109 = $1115;
        } else {
         $1118 = $1115;
         break;
        }
       }
      } else {
       $1118 = $1106;
      }
      if (($1118 & -2 | 0) == 148) {
       $1121 = $1118;
       do {
        _next();
        _expr_sum();
        $1122 = HEAP32[5310] | 0;
        if (($1122 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1124 = $1122;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($1124);
          $1125 = HEAP32[5310] | 0;
          if (($1125 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1124 = $1125;
          } else {
           $1127 = $1125;
           break;
          }
         }
        } else {
         $1127 = $1122;
        }
        if (($1127 - 150 | 0) >>> 0 < 10 >>> 0 | ($1127 & -2 | 0) == 146) {
         $1130 = $1127;
         do {
          _next();
          _expr_sum();
          $1131 = HEAP32[5310] | 0;
          if (($1131 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1133 = $1131;
           do {
            _next();
            _expr_sum();
            _gen_op($1133);
            $1133 = HEAP32[5310] | 0;
           } while (($1133 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($1130);
          $1130 = HEAP32[5310] | 0;
         } while (($1130 - 150 | 0) >>> 0 < 10 >>> 0 | ($1130 & -2 | 0) == 146);
        }
        _gen_op($1121);
        $1121 = HEAP32[5310] | 0;
       } while (($1121 & -2 | 0) == 148);
      }
      _gen_op(38);
      $_pr920 = HEAP32[5310] | 0;
      if (($_pr920 | 0) != 38) {
       $1143 = $_pr920;
       break;
      }
     }
    } else {
     $1143 = $1099;
    }
    if (($1143 | 0) == 94) {
     while (1) {
      _next();
      _expr_sum();
      $1145 = HEAP32[5310] | 0;
      if (($1145 - 1 | 0) >>> 0 < 2 >>> 0) {
       $1147 = $1145;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($1147);
        $1148 = HEAP32[5310] | 0;
        if (($1148 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1147 = $1148;
        } else {
         $1150 = $1148;
         break;
        }
       }
      } else {
       $1150 = $1145;
      }
      if (($1150 - 150 | 0) >>> 0 < 10 >>> 0 | ($1150 & -2 | 0) == 146) {
       $1153 = $1150;
       while (1) {
        _next();
        _expr_sum();
        $1154 = HEAP32[5310] | 0;
        if (($1154 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1156 = $1154;
         do {
          _next();
          _expr_sum();
          _gen_op($1156);
          $1156 = HEAP32[5310] | 0;
         } while (($1156 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($1153);
        $1159 = HEAP32[5310] | 0;
        if (($1159 - 150 | 0) >>> 0 < 10 >>> 0 | ($1159 & -2 | 0) == 146) {
         $1153 = $1159;
        } else {
         $1162 = $1159;
         break;
        }
       }
      } else {
       $1162 = $1150;
      }
      if (($1162 & -2 | 0) == 148) {
       $1165 = $1162;
       while (1) {
        _next();
        _expr_sum();
        $1166 = HEAP32[5310] | 0;
        if (($1166 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1168 = $1166;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($1168);
          $1169 = HEAP32[5310] | 0;
          if (($1169 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1168 = $1169;
          } else {
           $1171 = $1169;
           break;
          }
         }
        } else {
         $1171 = $1166;
        }
        if (($1171 - 150 | 0) >>> 0 < 10 >>> 0 | ($1171 & -2 | 0) == 146) {
         $1174 = $1171;
         do {
          _next();
          _expr_sum();
          $1175 = HEAP32[5310] | 0;
          if (($1175 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1177 = $1175;
           do {
            _next();
            _expr_sum();
            _gen_op($1177);
            $1177 = HEAP32[5310] | 0;
           } while (($1177 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($1174);
          $1174 = HEAP32[5310] | 0;
         } while (($1174 - 150 | 0) >>> 0 < 10 >>> 0 | ($1174 & -2 | 0) == 146);
        }
        _gen_op($1165);
        $1183 = HEAP32[5310] | 0;
        if (($1183 & -2 | 0) == 148) {
         $1165 = $1183;
        } else {
         $_lcssa1069 = $1183;
         break;
        }
       }
      } else {
       $_lcssa1069 = $1162;
      }
      if (($_lcssa1069 | 0) == 38) {
       do {
        _next();
        _expr_sum();
        $1187 = HEAP32[5310] | 0;
        if (($1187 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1189 = $1187;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($1189);
          $1190 = HEAP32[5310] | 0;
          if (($1190 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1189 = $1190;
          } else {
           $1192 = $1190;
           break;
          }
         }
        } else {
         $1192 = $1187;
        }
        if (($1192 - 150 | 0) >>> 0 < 10 >>> 0 | ($1192 & -2 | 0) == 146) {
         $1195 = $1192;
         while (1) {
          _next();
          _expr_sum();
          $1196 = HEAP32[5310] | 0;
          if (($1196 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1198 = $1196;
           do {
            _next();
            _expr_sum();
            _gen_op($1198);
            $1198 = HEAP32[5310] | 0;
           } while (($1198 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($1195);
          $1201 = HEAP32[5310] | 0;
          if (($1201 - 150 | 0) >>> 0 < 10 >>> 0 | ($1201 & -2 | 0) == 146) {
           $1195 = $1201;
          } else {
           $1204 = $1201;
           break;
          }
         }
        } else {
         $1204 = $1192;
        }
        if (($1204 & -2 | 0) == 148) {
         $1207 = $1204;
         do {
          _next();
          _expr_sum();
          $1208 = HEAP32[5310] | 0;
          if (($1208 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1210 = $1208;
           while (1) {
            _next();
            _expr_sum();
            _gen_op($1210);
            $1211 = HEAP32[5310] | 0;
            if (($1211 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1210 = $1211;
            } else {
             $1213 = $1211;
             break;
            }
           }
          } else {
           $1213 = $1208;
          }
          if (($1213 - 150 | 0) >>> 0 < 10 >>> 0 | ($1213 & -2 | 0) == 146) {
           $1216 = $1213;
           do {
            _next();
            _expr_sum();
            $1217 = HEAP32[5310] | 0;
            if (($1217 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1219 = $1217;
             do {
              _next();
              _expr_sum();
              _gen_op($1219);
              $1219 = HEAP32[5310] | 0;
             } while (($1219 - 1 | 0) >>> 0 < 2 >>> 0);
            }
            _gen_op($1216);
            $1216 = HEAP32[5310] | 0;
           } while (($1216 - 150 | 0) >>> 0 < 10 >>> 0 | ($1216 & -2 | 0) == 146);
          }
          _gen_op($1207);
          $1207 = HEAP32[5310] | 0;
         } while (($1207 & -2 | 0) == 148);
        }
        _gen_op(38);
       } while ((HEAP32[5310] | 0) == 38);
      }
      _gen_op(94);
      $1229 = HEAP32[5310] | 0;
      if (($1229 | 0) != 94) {
       $_lcssa1082 = $1229;
       break;
      }
     }
    } else {
     $_lcssa1082 = $1143;
    }
    if (($_lcssa1082 | 0) == 124) {
     do {
      _next();
      _expr_sum();
      $1232 = HEAP32[5310] | 0;
      if (($1232 - 1 | 0) >>> 0 < 2 >>> 0) {
       $1234 = $1232;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($1234);
        $1235 = HEAP32[5310] | 0;
        if (($1235 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1234 = $1235;
        } else {
         $1237 = $1235;
         break;
        }
       }
      } else {
       $1237 = $1232;
      }
      if (($1237 - 150 | 0) >>> 0 < 10 >>> 0 | ($1237 & -2 | 0) == 146) {
       $1240 = $1237;
       while (1) {
        _next();
        _expr_sum();
        $1241 = HEAP32[5310] | 0;
        if (($1241 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1243 = $1241;
         do {
          _next();
          _expr_sum();
          _gen_op($1243);
          $1243 = HEAP32[5310] | 0;
         } while (($1243 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($1240);
        $1246 = HEAP32[5310] | 0;
        if (($1246 - 150 | 0) >>> 0 < 10 >>> 0 | ($1246 & -2 | 0) == 146) {
         $1240 = $1246;
        } else {
         $1249 = $1246;
         break;
        }
       }
      } else {
       $1249 = $1237;
      }
      if (($1249 & -2 | 0) == 148) {
       $1252 = $1249;
       while (1) {
        _next();
        _expr_sum();
        $1253 = HEAP32[5310] | 0;
        if (($1253 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1255 = $1253;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($1255);
          $1256 = HEAP32[5310] | 0;
          if (($1256 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1255 = $1256;
          } else {
           $1258 = $1256;
           break;
          }
         }
        } else {
         $1258 = $1253;
        }
        if (($1258 - 150 | 0) >>> 0 < 10 >>> 0 | ($1258 & -2 | 0) == 146) {
         $1261 = $1258;
         do {
          _next();
          _expr_sum();
          $1262 = HEAP32[5310] | 0;
          if (($1262 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1264 = $1262;
           do {
            _next();
            _expr_sum();
            _gen_op($1264);
            $1264 = HEAP32[5310] | 0;
           } while (($1264 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($1261);
          $1261 = HEAP32[5310] | 0;
         } while (($1261 - 150 | 0) >>> 0 < 10 >>> 0 | ($1261 & -2 | 0) == 146);
        }
        _gen_op($1252);
        $1270 = HEAP32[5310] | 0;
        if (($1270 & -2 | 0) == 148) {
         $1252 = $1270;
        } else {
         $1273 = $1270;
         break;
        }
       }
      } else {
       $1273 = $1249;
      }
      if (($1273 | 0) == 38) {
       while (1) {
        _next();
        _expr_sum();
        $1275 = HEAP32[5310] | 0;
        if (($1275 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1277 = $1275;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($1277);
          $1278 = HEAP32[5310] | 0;
          if (($1278 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1277 = $1278;
          } else {
           $1280 = $1278;
           break;
          }
         }
        } else {
         $1280 = $1275;
        }
        if (($1280 - 150 | 0) >>> 0 < 10 >>> 0 | ($1280 & -2 | 0) == 146) {
         $1283 = $1280;
         while (1) {
          _next();
          _expr_sum();
          $1284 = HEAP32[5310] | 0;
          if (($1284 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1286 = $1284;
           do {
            _next();
            _expr_sum();
            _gen_op($1286);
            $1286 = HEAP32[5310] | 0;
           } while (($1286 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($1283);
          $1289 = HEAP32[5310] | 0;
          if (($1289 - 150 | 0) >>> 0 < 10 >>> 0 | ($1289 & -2 | 0) == 146) {
           $1283 = $1289;
          } else {
           $1292 = $1289;
           break;
          }
         }
        } else {
         $1292 = $1280;
        }
        if (($1292 & -2 | 0) == 148) {
         $1295 = $1292;
         do {
          _next();
          _expr_sum();
          $1296 = HEAP32[5310] | 0;
          if (($1296 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1298 = $1296;
           while (1) {
            _next();
            _expr_sum();
            _gen_op($1298);
            $1299 = HEAP32[5310] | 0;
            if (($1299 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1298 = $1299;
            } else {
             $1301 = $1299;
             break;
            }
           }
          } else {
           $1301 = $1296;
          }
          if (($1301 - 150 | 0) >>> 0 < 10 >>> 0 | ($1301 & -2 | 0) == 146) {
           $1304 = $1301;
           do {
            _next();
            _expr_sum();
            $1305 = HEAP32[5310] | 0;
            if (($1305 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1307 = $1305;
             do {
              _next();
              _expr_sum();
              _gen_op($1307);
              $1307 = HEAP32[5310] | 0;
             } while (($1307 - 1 | 0) >>> 0 < 2 >>> 0);
            }
            _gen_op($1304);
            $1304 = HEAP32[5310] | 0;
           } while (($1304 - 150 | 0) >>> 0 < 10 >>> 0 | ($1304 & -2 | 0) == 146);
          }
          _gen_op($1295);
          $1295 = HEAP32[5310] | 0;
         } while (($1295 & -2 | 0) == 148);
        }
        _gen_op(38);
        $_pr923 = HEAP32[5310] | 0;
        if (($_pr923 | 0) != 38) {
         $1317 = $_pr923;
         break;
        }
       }
      } else {
       $1317 = $1273;
      }
      if (($1317 | 0) == 94) {
       do {
        _next();
        _expr_sum();
        $1319 = HEAP32[5310] | 0;
        if (($1319 - 1 | 0) >>> 0 < 2 >>> 0) {
         $1321 = $1319;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($1321);
          $1322 = HEAP32[5310] | 0;
          if (($1322 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1321 = $1322;
          } else {
           $1324 = $1322;
           break;
          }
         }
        } else {
         $1324 = $1319;
        }
        if (($1324 - 150 | 0) >>> 0 < 10 >>> 0 | ($1324 & -2 | 0) == 146) {
         $1327 = $1324;
         while (1) {
          _next();
          _expr_sum();
          $1328 = HEAP32[5310] | 0;
          if (($1328 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1330 = $1328;
           do {
            _next();
            _expr_sum();
            _gen_op($1330);
            $1330 = HEAP32[5310] | 0;
           } while (($1330 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($1327);
          $1333 = HEAP32[5310] | 0;
          if (($1333 - 150 | 0) >>> 0 < 10 >>> 0 | ($1333 & -2 | 0) == 146) {
           $1327 = $1333;
          } else {
           $1336 = $1333;
           break;
          }
         }
        } else {
         $1336 = $1324;
        }
        if (($1336 & -2 | 0) == 148) {
         $1339 = $1336;
         while (1) {
          _next();
          _expr_sum();
          $1340 = HEAP32[5310] | 0;
          if (($1340 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1342 = $1340;
           while (1) {
            _next();
            _expr_sum();
            _gen_op($1342);
            $1343 = HEAP32[5310] | 0;
            if (($1343 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1342 = $1343;
            } else {
             $1345 = $1343;
             break;
            }
           }
          } else {
           $1345 = $1340;
          }
          if (($1345 - 150 | 0) >>> 0 < 10 >>> 0 | ($1345 & -2 | 0) == 146) {
           $1348 = $1345;
           do {
            _next();
            _expr_sum();
            $1349 = HEAP32[5310] | 0;
            if (($1349 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1351 = $1349;
             do {
              _next();
              _expr_sum();
              _gen_op($1351);
              $1351 = HEAP32[5310] | 0;
             } while (($1351 - 1 | 0) >>> 0 < 2 >>> 0);
            }
            _gen_op($1348);
            $1348 = HEAP32[5310] | 0;
           } while (($1348 - 150 | 0) >>> 0 < 10 >>> 0 | ($1348 & -2 | 0) == 146);
          }
          _gen_op($1339);
          $1357 = HEAP32[5310] | 0;
          if (($1357 & -2 | 0) == 148) {
           $1339 = $1357;
          } else {
           $_lcssa1118 = $1357;
           break;
          }
         }
        } else {
         $_lcssa1118 = $1336;
        }
        if (($_lcssa1118 | 0) == 38) {
         do {
          _next();
          _expr_sum();
          $1361 = HEAP32[5310] | 0;
          if (($1361 - 1 | 0) >>> 0 < 2 >>> 0) {
           $1363 = $1361;
           while (1) {
            _next();
            _expr_sum();
            _gen_op($1363);
            $1364 = HEAP32[5310] | 0;
            if (($1364 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1363 = $1364;
            } else {
             $1366 = $1364;
             break;
            }
           }
          } else {
           $1366 = $1361;
          }
          if (($1366 - 150 | 0) >>> 0 < 10 >>> 0 | ($1366 & -2 | 0) == 146) {
           $1369 = $1366;
           while (1) {
            _next();
            _expr_sum();
            $1370 = HEAP32[5310] | 0;
            if (($1370 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1372 = $1370;
             do {
              _next();
              _expr_sum();
              _gen_op($1372);
              $1372 = HEAP32[5310] | 0;
             } while (($1372 - 1 | 0) >>> 0 < 2 >>> 0);
            }
            _gen_op($1369);
            $1375 = HEAP32[5310] | 0;
            if (($1375 - 150 | 0) >>> 0 < 10 >>> 0 | ($1375 & -2 | 0) == 146) {
             $1369 = $1375;
            } else {
             $1378 = $1375;
             break;
            }
           }
          } else {
           $1378 = $1366;
          }
          if (($1378 & -2 | 0) == 148) {
           $1381 = $1378;
           do {
            _next();
            _expr_sum();
            $1382 = HEAP32[5310] | 0;
            if (($1382 - 1 | 0) >>> 0 < 2 >>> 0) {
             $1384 = $1382;
             while (1) {
              _next();
              _expr_sum();
              _gen_op($1384);
              $1385 = HEAP32[5310] | 0;
              if (($1385 - 1 | 0) >>> 0 < 2 >>> 0) {
               $1384 = $1385;
              } else {
               $1387 = $1385;
               break;
              }
             }
            } else {
             $1387 = $1382;
            }
            if (($1387 - 150 | 0) >>> 0 < 10 >>> 0 | ($1387 & -2 | 0) == 146) {
             $1390 = $1387;
             do {
              _next();
              _expr_sum();
              $1391 = HEAP32[5310] | 0;
              if (($1391 - 1 | 0) >>> 0 < 2 >>> 0) {
               $1393 = $1391;
               do {
                _next();
                _expr_sum();
                _gen_op($1393);
                $1393 = HEAP32[5310] | 0;
               } while (($1393 - 1 | 0) >>> 0 < 2 >>> 0);
              }
              _gen_op($1390);
              $1390 = HEAP32[5310] | 0;
             } while (($1390 - 150 | 0) >>> 0 < 10 >>> 0 | ($1390 & -2 | 0) == 146);
            }
            _gen_op($1381);
            $1381 = HEAP32[5310] | 0;
           } while (($1381 & -2 | 0) == 148);
          }
          _gen_op(38);
         } while ((HEAP32[5310] | 0) == 38);
        }
        _gen_op(94);
       } while ((HEAP32[5310] | 0) == 94);
      }
      _gen_op(124);
     } while ((HEAP32[5310] | 0) == 124);
    }
    _gen_op(160);
   } while ((HEAP32[5310] | 0) == 160);
  }
  _gen_op(161);
  $705 = HEAP32[5310] | 0;
 }
 if ((label | 0) == 620) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$boolean >> 2] = 11;
 $1410 = HEAP32[5024] | 0;
 if ($1410 >>> 0 < 66472 >>> 0) {
  $1413 = $1410;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $1413 = HEAP32[5024] | 0;
 }
 $1414 = $1413 + 40 | 0;
 HEAP32[5024] = $1414;
 $1415 = $1414;
 $1416 = $1410;
 HEAP32[$1415 >> 2] = HEAP32[$1416 >> 2];
 HEAP32[$1415 + 4 >> 2] = HEAP32[$1416 + 4 >> 2];
 HEAP32[$1415 + 8 >> 2] = HEAP32[$1416 + 8 >> 2];
 HEAP32[$1415 + 12 >> 2] = HEAP32[$1416 + 12 >> 2];
 HEAP32[$1415 + 16 >> 2] = HEAP32[$1416 + 16 >> 2];
 HEAP32[$1415 + 20 >> 2] = HEAP32[$1416 + 20 >> 2];
 HEAP32[$1415 + 24 >> 2] = HEAP32[$1416 + 24 >> 2];
 HEAP32[$1415 + 28 >> 2] = HEAP32[$1416 + 28 >> 2];
 HEAP32[$1415 + 32 >> 2] = HEAP32[$1416 + 32 >> 2];
 HEAP32[$1415 + 36 >> 2] = HEAP32[$1416 + 36 >> 2];
 _gen_cast($boolean);
 $1417 = HEAP32[5024] | 0;
 $1420 = HEAP32[$1417 + 16 >> 2] | 0;
 $1423 = HEAPU16[$1417 + 8 >> 1] | 0;
 do {
  if (($1423 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
   if (($1423 & 62 | 0) != 52) {
    break;
   }
   _gsym($1420);
  } else {
   _o(55517);
  }
 } while (0);
 HEAP32[5024] = (HEAP32[5024] | 0) - 40;
 _next();
 do {
  if (!((HEAP32[5310] | 0) == 58 & (HEAP32[1888] | 0) != 0)) {
   $1440 = HEAP32[5024] | 0;
   $1443 = HEAPU16[$1440 + 8 >> 1] | 0;
   do {
    if (($1443 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
     if (($1443 & 62 | 0) != 52) {
      break;
     }
     _gsym(HEAP32[$1440 + 16 >> 2] | 0);
    } else {
     _o(55517);
    }
   } while (0);
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
   _expr_eq();
   if ((HEAP32[5310] | 0) != 44) {
    break;
   }
   do {
    $1460 = HEAP32[5024] | 0;
    $1463 = HEAPU16[$1460 + 8 >> 1] | 0;
    do {
     if (($1463 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
      if (($1463 & 62 | 0) != 52) {
       break;
      }
      _gsym(HEAP32[$1460 + 16 >> 2] | 0);
     } else {
      _o(55517);
     }
    } while (0);
    HEAP32[5024] = (HEAP32[5024] | 0) - 40;
    _next();
    _expr_eq();
   } while ((HEAP32[5310] | 0) == 44);
  }
 } while (0);
 if (($1420 | 0) == 0) {
  $1482 = HEAP32[5024] | 0;
  $1485 = HEAPU16[$1482 + 8 >> 1] | 0;
  do {
   if (($1485 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
    if (($1485 & 62 | 0) != 52) {
     break;
    }
    _gsym(HEAP32[$1482 + 16 >> 2] | 0);
   } else {
    _o(55517);
   }
  } while (0);
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  _skip(58);
  _expr_cond();
  STACKTOP = sp;
  return;
 } else {
  _skip(58);
  _expr_cond();
  $1500 = HEAP32[5024] | 0;
  $1503 = HEAPU16[$1500 + 8 >> 1] | 0;
  do {
   if (($1503 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
    if (($1503 & 62 | 0) != 52) {
     break;
    }
    _gsym(HEAP32[$1500 + 16 >> 2] | 0);
   } else {
    _o(55517);
   }
  } while (0);
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  STACKTOP = sp;
  return;
 }
}
function _gen_opic($op) {
 $op = $op | 0;
 var $cval_i_sroa_4 = 0, $tmp_i85_i = 0, $tmp_i80_i = 0, $cval_i79_i_sroa_4 = 0, $cval_i78_i_sroa_4 = 0, $tmp_i75_i = 0, $cval_i74_i_sroa_4 = 0, $tmp_i71_i = 0, $tmp_i68_i = 0, $cval_i67_i_sroa_4 = 0, $cval_i66_i_sroa_4 = 0, $cval_i65_i_sroa_4 = 0, $tmp_i62_i = 0, $tmp_i57_i = 0, $cval_i56_i_sroa_4 = 0, $cval_i_i_sroa_4 = 0, $tmp_i53_i = 0, $tmp_i47_i = 0, $tmp_i41_i = 0, $tmp_i37_i = 0, $tmp_i33_i = 0, $tmp_i_i_i = 0, $tmp_i29_i = 0, $tmp_i25_i = 0, $tmp_i21_i = 0, $tmp_i17_i = 0, $tmp_i13_i = 0, $tmp_i9_i = 0, $tmp_i3_i = 0, $tmp_i_i = 0, $tmp_i48 = 0, $tmp_i = 0, $1 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $18 = 0, $l1_0$0 = 0, $l1_0$1 = 0, $24 = 0, $27 = 0, $34 = 0, $l2_0$0 = 0, $l2_0$1 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $l1_1$0 = 0, $l1_1$1 = 0, $124 = 0, $130 = 0, $133 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $c2_0 = 0, $l2_1$0 = 0, $l2_1$1 = 0, $157 = 0, $163 = 0, $$etemp$16$1 = 0, $l2_285$0 = 0, $l2_285$1 = 0, $n_084 = 0, $n_0_lcssa$0 = 0, $n_0_lcssa$1 = 0, $183 = 0, $186 = 0, $189 = 0, $198 = 0, $_0 = 0, $205 = 0, $func_0_i = 0, $210 = 0, $211 = 0, $212 = 0, $216 = 0, $221 = 0, $228 = 0, $229 = 0, $230 = 0, $$etemp$29 = 0, $231$1 = 0, $236 = 0, $240 = 0, $243 = 0, $244 = 0, $245 = 0, $i_01_i_i_i = 0, $250 = 0, $251 = 0, $255 = 0, $256 = 0, $257 = 0, $261 = 0, $266 = 0, $273 = 0, $274 = 0, $275 = 0, $$etemp$38 = 0, $276$1 = 0, $281 = 0, $285 = 0, $290 = 0, $292 = 0, $293 = 0, $298 = 0, $305 = 0, $306 = 0, $308 = 0, $311 = 0, $315 = 0, $317 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $336 = 0, $337 = 0, $339 = 0, $340 = 0, $i_01_i42_i = 0, $342 = 0, $344 = 0, $345 = 0, $347 = 0, $348 = 0, $352 = 0, $354 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $373 = 0, $374 = 0, $376 = 0, $379 = 0, $380 = 0, $382 = 0, $384 = 0, $387 = 0, $388 = 0, $389 = 0, $394 = 0, $401 = 0, $402 = 0, $404 = 0, $407 = 0, $409 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $428 = 0, $430 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $449 = 0, $i_0_i78 = 0, $451 = 0, $453 = 0, $454 = 0, $i_01_i38_i = 0, $456 = 0, $458 = 0, $459 = 0, $461 = 0, $462 = 0, $466 = 0, $467 = 0, $469 = 0, $472 = 0, $473 = 0, $474 = 0, $476 = 0, $477 = 0, $i_01_i34_i = 0, $479 = 0, $481 = 0, $482 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $489 = 0, $490 = 0, $i_01_i30_i = 0, $492 = 0, $494 = 0, $495 = 0, $497 = 0, $498 = 0, $op1_0_i = 0, $501 = 0, $502 = 0, $504 = 0, $505 = 0, $i_01_i26_i = 0, $507 = 0, $509 = 0, $510 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $517 = 0, $518 = 0, $i_01_i22_i = 0, $520 = 0, $522 = 0, $523 = 0, $525 = 0, $526 = 0, $529 = 0, $530 = 0, $532 = 0, $533 = 0, $i_01_i18_i = 0, $535 = 0, $537 = 0, $538 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $545 = 0, $546 = 0, $i_01_i14_i = 0, $548 = 0, $550 = 0, $551 = 0, $553 = 0, $554 = 0, $556 = 0, $562 = 0, $565 = 0, $580 = 0, $582 = 0, $587 = 0, $588 = 0, $591 = 0, $598 = 0, $599 = 0, $601 = 0, $604 = 0, $608 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $629 = 0, $630 = 0, $632 = 0, $633 = 0, $i_01_i10_i = 0, $635 = 0, $637 = 0, $638 = 0, $640 = 0, $641 = 0, $642 = 0, $645 = 0, $648 = 0, $658 = 0, $659 = 0, $660 = 0, $662 = 0, $667 = 0, $674 = 0, $675 = 0, $677 = 0, $680 = 0, $684 = 0, $687 = 0, $701 = 0, $704 = 0, $705 = 0, $709 = 0, $714 = 0, $721 = 0, $722 = 0, $723 = 0, $$etemp$71 = 0, $724$1 = 0, $729 = 0, $733 = 0, $737 = 0, $738 = 0, $742 = 0, $747 = 0, $754 = 0, $755 = 0, $756 = 0, $$etemp$78 = 0, $757$1 = 0, $762 = 0, $766 = 0, $768 = 0, $769 = 0, $773 = 0, $778 = 0, $785 = 0, $786 = 0, $787 = 0, $$etemp$85 = 0, $788$1 = 0, $793 = 0, $797 = 0, $799 = 0, $800 = 0, $805 = 0, $812 = 0, $813 = 0, $815 = 0, $818 = 0, $820 = 0, $821 = 0, $826 = 0, $833 = 0, $834 = 0, $836 = 0, $839 = 0, $840 = 0, $841 = 0, $845 = 0, $850 = 0, $857 = 0, $858 = 0, $859 = 0, $$etemp$96 = 0, $860$1 = 0, $865 = 0, $869 = 0, $870 = 0, $871 = 0, $876 = 0, $883 = 0, $884 = 0, $886 = 0, $889 = 0, $890 = 0, $891 = 0, $892 = 0, $896 = 0, $901 = 0, $908 = 0, $909 = 0, $910 = 0, $$etemp$105 = 0, $911$1 = 0, $916 = 0, $920 = 0, $921 = 0, $925 = 0, $926 = 0, $928 = 0, $929 = 0, $i_01_i4_i = 0, $931 = 0, $933 = 0, $934 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $943 = 0, $948 = 0, $955 = 0, $956 = 0, $957 = 0, $$etemp$114 = 0, $958$1 = 0, $963 = 0, $967 = 0, $973 = 0, $974 = 0, $979 = 0, $986 = 0, $987 = 0, $989 = 0, $992 = 0, $994 = 0, $1000 = 0, $1003 = 0, $1022 = 0, $1023 = 0, $1028 = 0, $1035 = 0, $1036 = 0, $1038 = 0, $1041 = 0, $1045 = 0, $1047 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1066 = 0, $1067 = 0, $1069 = 0, $1070 = 0, $i_01_i_i = 0, $1072 = 0, $1074 = 0, $1075 = 0, $1077 = 0, $1078 = 0, $1082 = 0, $1084 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $1090 = 0, $1091 = 0, $1103 = 0, $1105 = 0, $1107 = 0, $1110 = 0, $1111 = 0, $op1_1_i_ph = 0, $1119 = 0, $a_0_i139 = 0, $b_0_i = 0, $op1_2_i = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1138 = 0, $1143 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1157 = 0, $1161 = 0, $52$0 = 0, $54$0 = 0, $62$0 = 0, $71$0 = 0, $73$0 = 0, $75$0 = 0, $77$0 = 0, $79$0 = 0, $81$0 = 0, $83$0 = 0, $174$0 = 0, $195$0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1064 | 0;
 $cval_i_sroa_4 = sp | 0;
 $tmp_i85_i = sp + 16 | 0;
 $tmp_i80_i = sp + 56 | 0;
 $cval_i79_i_sroa_4 = sp + 96 | 0;
 $cval_i78_i_sroa_4 = sp + 112 | 0;
 $tmp_i75_i = sp + 128 | 0;
 $cval_i74_i_sroa_4 = sp + 168 | 0;
 $tmp_i71_i = sp + 184 | 0;
 $tmp_i68_i = sp + 224 | 0;
 $cval_i67_i_sroa_4 = sp + 264 | 0;
 $cval_i66_i_sroa_4 = sp + 280 | 0;
 $cval_i65_i_sroa_4 = sp + 296 | 0;
 $tmp_i62_i = sp + 312 | 0;
 $tmp_i57_i = sp + 352 | 0;
 $cval_i56_i_sroa_4 = sp + 392 | 0;
 $cval_i_i_sroa_4 = sp + 408 | 0;
 $tmp_i53_i = sp + 424 | 0;
 $tmp_i47_i = sp + 464 | 0;
 $tmp_i41_i = sp + 504 | 0;
 $tmp_i37_i = sp + 544 | 0;
 $tmp_i33_i = sp + 584 | 0;
 $tmp_i_i_i = sp + 624 | 0;
 $tmp_i29_i = sp + 664 | 0;
 $tmp_i25_i = sp + 704 | 0;
 $tmp_i21_i = sp + 744 | 0;
 $tmp_i17_i = sp + 784 | 0;
 $tmp_i13_i = sp + 824 | 0;
 $tmp_i9_i = sp + 864 | 0;
 $tmp_i3_i = sp + 904 | 0;
 $tmp_i_i = sp + 944 | 0;
 $tmp_i48 = sp + 984 | 0;
 $tmp_i = sp + 1024 | 0;
 $1 = HEAP32[5024] | 0;
 $3 = HEAP32[$1 - 40 >> 2] | 0;
 $6 = HEAP32[$1 >> 2] | 0;
 $7 = $6 & 15;
 $8 = ($3 & 15 | 0) == 12;
 do {
  if ($8) {
   $11 = $1 - 40 + 16 | 0;
   $l1_0$1 = HEAP32[$11 + 4 >> 2] | 0;
   $l1_0$0 = HEAP32[$11 >> 2] | 0;
  } else {
   $18 = HEAP32[$1 - 40 + 16 >> 2] | 0;
   if (($3 & 16 | 0) == 0) {
    $l1_0$1 = ($18 | 0) < 0 | 0 ? -1 : 0;
    $l1_0$0 = $18;
    break;
   } else {
    $l1_0$1 = 0;
    $l1_0$0 = $18;
    break;
   }
  }
 } while (0);
 $24 = ($7 | 0) == 12;
 do {
  if ($24) {
   $27 = $1 + 16 | 0;
   $l2_0$1 = HEAP32[$27 + 4 >> 2] | 0;
   $l2_0$0 = HEAP32[$27 >> 2] | 0;
  } else {
   $34 = HEAP32[$1 + 16 >> 2] | 0;
   if (($6 & 16 | 0) == 0) {
    $l2_0$1 = ($34 | 0) < 0 | 0 ? -1 : 0;
    $l2_0$0 = $34;
    break;
   } else {
    $l2_0$1 = 0;
    $l2_0$0 = $34;
    break;
   }
  }
 } while (0);
 $43 = (HEAP16[$1 - 40 + 8 >> 1] & 831) == 48;
 $44 = $43 & 1;
 $46 = HEAP16[$1 + 8 >> 1] | 0;
 $48 = ($46 & 831) == 48;
 $49 = $48 & 1;
 L15 : do {
  if ($43 & $48) {
   L17 : do {
    switch ($op | 0) {
    case 43:
     {
      $52$0 = _i64Add($l2_0$0, $l2_0$1, $l1_0$0, $l1_0$1) | 0;
      $l1_1$1 = tempRet0;
      $l1_1$0 = $52$0;
      break;
     }
    case 45:
     {
      $54$0 = _i64Subtract($l1_0$0, $l1_0$1, $l2_0$0, $l2_0$1) | 0;
      $l1_1$1 = tempRet0;
      $l1_1$0 = $54$0;
      break;
     }
    case 38:
     {
      $l1_1$1 = $l2_0$1 & $l1_0$1;
      $l1_1$0 = $l2_0$0 & $l1_0$0;
      break;
     }
    case 94:
     {
      $l1_1$1 = $l2_0$1 ^ $l1_0$1;
      $l1_1$0 = $l2_0$0 ^ $l1_0$0;
      break;
     }
    case 124:
     {
      $l1_1$1 = $l2_0$1 | $l1_0$1;
      $l1_1$0 = $l2_0$0 | $l1_0$0;
      break;
     }
    case 42:
     {
      $62$0 = ___muldi3($l2_0$0, $l2_0$1, $l1_0$0, $l1_0$1) | 0;
      $l1_1$1 = tempRet0;
      $l1_1$0 = $62$0;
      break;
     }
    case 178:
    case 47:
    case 37:
    case 176:
    case 177:
     {
      if (($l2_0$0 | 0) == 0 & ($l2_0$1 | 0) == 0) {
       if ((HEAP32[13920] | 0) == 0) {
        $_0 = $op;
        break L15;
       }
       _tcc_error(19704, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $_0 = $op;
       break L15;
      }
      if (($op | 0) == 37) {
       $73$0 = ___remdi3($l1_0$0, $l1_0$1, $l2_0$0, $l2_0$1) | 0;
       $l1_1$1 = tempRet0;
       $l1_1$0 = $73$0;
       break L17;
      } else if (($op | 0) == 176) {
       $75$0 = ___udivdi3($l1_0$0, $l1_0$1, $l2_0$0, $l2_0$1) | 0;
       $l1_1$1 = tempRet0;
       $l1_1$0 = $75$0;
       break L17;
      } else if (($op | 0) == 177) {
       $77$0 = ___uremdi3($l1_0$0, $l1_0$1, $l2_0$0, $l2_0$1) | 0;
       $l1_1$1 = tempRet0;
       $l1_1$0 = $77$0;
       break L17;
      } else {
       $71$0 = ___divdi3($l1_0$0, $l1_0$1, $l2_0$0, $l2_0$1) | 0;
       $l1_1$1 = tempRet0;
       $l1_1$0 = $71$0;
       break L17;
      }
      break;
     }
    case 1:
     {
      $79$0 = _bitshift64Shl($l1_0$0 | 0, $l1_0$1 | 0, $l2_0$0 | 0) | 0;
      $l1_1$1 = tempRet0;
      $l1_1$0 = $79$0;
      break;
     }
    case 205:
     {
      $81$0 = _bitshift64Lshr($l1_0$0 | 0, $l1_0$1 | 0, $l2_0$0 | 0) | 0;
      $l1_1$1 = tempRet0;
      $l1_1$0 = $81$0;
      break;
     }
    case 2:
     {
      $83$0 = _bitshift64Ashr($l1_0$0 | 0, $l1_0$1 | 0, $l2_0$0 | 0) | 0;
      $l1_1$1 = tempRet0;
      $l1_1$0 = $83$0;
      break;
     }
    case 146:
     {
      $l1_1$1 = 0;
      $l1_1$0 = ($l1_0$1 >>> 0 < $l2_0$1 >>> 0 | $l1_0$1 >>> 0 == $l2_0$1 >>> 0 & $l1_0$0 >>> 0 < $l2_0$0 >>> 0) & 1;
      break;
     }
    case 147:
     {
      $l1_1$1 = 0;
      $l1_1$0 = $l1_0$1 >>> 0 >= $l2_0$1 >>> 0 & ($l1_0$1 >>> 0 > $l2_0$1 >>> 0 | $l1_0$0 >>> 0 >= $l2_0$0 >>> 0) & 1;
      break;
     }
    case 148:
     {
      $l1_1$1 = 0;
      $l1_1$0 = ($l1_0$0 | 0) == ($l2_0$0 | 0) & ($l1_0$1 | 0) == ($l2_0$1 | 0) & 1;
      break;
     }
    case 149:
     {
      $l1_1$1 = 0;
      $l1_1$0 = (($l1_0$0 | 0) != ($l2_0$0 | 0) | ($l1_0$1 | 0) != ($l2_0$1 | 0)) & 1;
      break;
     }
    case 150:
     {
      $l1_1$1 = 0;
      $l1_1$0 = $l1_0$1 >>> 0 <= $l2_0$1 >>> 0 & ($l1_0$1 >>> 0 < $l2_0$1 >>> 0 | $l1_0$0 >>> 0 <= $l2_0$0 >>> 0) & 1;
      break;
     }
    case 151:
     {
      $l1_1$1 = 0;
      $l1_1$0 = ($l1_0$1 >>> 0 > $l2_0$1 >>> 0 | $l1_0$1 >>> 0 == $l2_0$1 >>> 0 & $l1_0$0 >>> 0 > $l2_0$0 >>> 0) & 1;
      break;
     }
    case 156:
     {
      $l1_1$1 = 0;
      $l1_1$0 = (($l1_0$1 | 0) < ($l2_0$1 | 0) | ($l1_0$1 | 0) == ($l2_0$1 | 0) & $l1_0$0 >>> 0 < $l2_0$0 >>> 0) & 1;
      break;
     }
    case 157:
     {
      $l1_1$1 = 0;
      $l1_1$0 = ($l1_0$1 | 0) >= ($l2_0$1 | 0) & (($l1_0$1 | 0) > ($l2_0$1 | 0) | $l1_0$0 >>> 0 >= $l2_0$0 >>> 0) & 1;
      break;
     }
    case 158:
     {
      $l1_1$1 = 0;
      $l1_1$0 = ($l1_0$1 | 0) <= ($l2_0$1 | 0) & (($l1_0$1 | 0) < ($l2_0$1 | 0) | $l1_0$0 >>> 0 <= $l2_0$0 >>> 0) & 1;
      break;
     }
    case 159:
     {
      $l1_1$1 = 0;
      $l1_1$0 = (($l1_0$1 | 0) > ($l2_0$1 | 0) | ($l1_0$1 | 0) == ($l2_0$1 | 0) & $l1_0$0 >>> 0 > $l2_0$0 >>> 0) & 1;
      break;
     }
    case 160:
     {
      if (($l1_0$0 | 0) == 0 & ($l1_0$1 | 0) == 0) {
       $l1_1$1 = 0;
       $l1_1$0 = 0;
       break L17;
      }
      $l1_1$1 = 0;
      $l1_1$0 = (($l2_0$0 | 0) != 0 | ($l2_0$1 | 0) != 0) & 1;
      break;
     }
    case 161:
     {
      if (!(($l1_0$0 | 0) == 0 & ($l1_0$1 | 0) == 0)) {
       $l1_1$1 = 0;
       $l1_1$0 = 1;
       break L17;
      }
      $l1_1$1 = 0;
      $l1_1$0 = (($l2_0$0 | 0) != 0 | ($l2_0$1 | 0) != 0) & 1;
      break;
     }
    default:
     {
      $_0 = $op;
      break L15;
     }
    }
   } while (0);
   $124 = $1 - 40 + 16 | 0;
   HEAP32[$124 >> 2] = $l1_1$0;
   HEAP32[$124 + 4 >> 2] = $l1_1$1;
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
   STACKTOP = sp;
   return;
  } else {
   L54 : do {
    if ($43) {
     switch ($op | 0) {
     case 124:
     case 94:
     case 43:
     case 42:
     case 38:
      {
       break;
      }
     default:
      {
       $l2_1$1 = $l2_0$1;
       $l2_1$0 = $l2_0$0;
       $c2_0 = $49;
       break L54;
      }
     }
     $130 = $tmp_i;
     do {
      if ($1 >>> 0 < 56272 >>> 0) {
       $140 = $1;
      } else {
       $133 = $46 & 65535;
       if (!(($133 & 63 | 0) == 51 | ($133 & 62 | 0) == 52)) {
        $140 = $1;
        break;
       }
       _gv(1) | 0;
       $140 = HEAP32[5024] | 0;
      }
     } while (0);
     $141 = $140;
     HEAP32[$130 >> 2] = HEAP32[$141 >> 2];
     HEAP32[$130 + 4 >> 2] = HEAP32[$141 + 4 >> 2];
     HEAP32[$130 + 8 >> 2] = HEAP32[$141 + 8 >> 2];
     HEAP32[$130 + 12 >> 2] = HEAP32[$141 + 12 >> 2];
     HEAP32[$130 + 16 >> 2] = HEAP32[$141 + 16 >> 2];
     HEAP32[$130 + 20 >> 2] = HEAP32[$141 + 20 >> 2];
     HEAP32[$130 + 24 >> 2] = HEAP32[$141 + 24 >> 2];
     HEAP32[$130 + 28 >> 2] = HEAP32[$141 + 28 >> 2];
     HEAP32[$130 + 32 >> 2] = HEAP32[$141 + 32 >> 2];
     HEAP32[$130 + 36 >> 2] = HEAP32[$141 + 36 >> 2];
     $143 = $140 - 40 | 0;
     HEAP32[$141 >> 2] = HEAP32[$143 >> 2];
     HEAP32[$141 + 4 >> 2] = HEAP32[$143 + 4 >> 2];
     HEAP32[$141 + 8 >> 2] = HEAP32[$143 + 8 >> 2];
     HEAP32[$141 + 12 >> 2] = HEAP32[$143 + 12 >> 2];
     HEAP32[$141 + 16 >> 2] = HEAP32[$143 + 16 >> 2];
     HEAP32[$141 + 20 >> 2] = HEAP32[$143 + 20 >> 2];
     HEAP32[$141 + 24 >> 2] = HEAP32[$143 + 24 >> 2];
     HEAP32[$141 + 28 >> 2] = HEAP32[$143 + 28 >> 2];
     HEAP32[$141 + 32 >> 2] = HEAP32[$143 + 32 >> 2];
     HEAP32[$141 + 36 >> 2] = HEAP32[$143 + 36 >> 2];
     $146 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[$146 >> 2] = HEAP32[$130 >> 2];
     HEAP32[$146 + 4 >> 2] = HEAP32[$130 + 4 >> 2];
     HEAP32[$146 + 8 >> 2] = HEAP32[$130 + 8 >> 2];
     HEAP32[$146 + 12 >> 2] = HEAP32[$130 + 12 >> 2];
     HEAP32[$146 + 16 >> 2] = HEAP32[$130 + 16 >> 2];
     HEAP32[$146 + 20 >> 2] = HEAP32[$130 + 20 >> 2];
     HEAP32[$146 + 24 >> 2] = HEAP32[$130 + 24 >> 2];
     HEAP32[$146 + 28 >> 2] = HEAP32[$130 + 28 >> 2];
     HEAP32[$146 + 32 >> 2] = HEAP32[$130 + 32 >> 2];
     HEAP32[$146 + 36 >> 2] = HEAP32[$130 + 36 >> 2];
     $l2_1$1 = $l1_0$1;
     $l2_1$0 = $l1_0$0;
     $c2_0 = $44;
    } else {
     $l2_1$1 = $l2_0$1;
     $l2_1$0 = $l2_0$0;
     $c2_0 = $49;
    }
   } while (0);
   if (($c2_0 | 0) == 0) {
    $_0 = $op;
    break;
   }
   do {
    if (!((($op | 0) == 42 | ($op | 0) == 47 | ($op | 0) == 176 | ($op | 0) == 178) & (($l2_1$0 | 0) == 1 & ($l2_1$1 | 0) == 0))) {
     $157 = ($op | 0) == 45;
     $163 = ($l2_1$0 | 0) == 0 & ($l2_1$1 | 0) == 0;
     if ((($op | 0) == 43 | $157 | ($op | 0) == 124 | ($op | 0) == 94 | ($op | 0) == 1 | ($op | 0) == 205 | ($op | 0) == 2) & $163) {
      break;
     }
     if (($op | 0) == 38 & (($l2_1$0 | 0) == (-1 | 0) & ($l2_1$1 | 0) == (-1 | 0))) {
      break;
     }
     switch ($op | 0) {
     case 178:
     case 176:
     case 42:
      {
       break;
      }
     case 45:
     case 43:
      {
       $186 = HEAP32[5024] | 0;
       $189 = HEAPU16[$186 - 40 + 8 >> 1] | 0;
       if (!(($189 & 831 | 0) == 560 | ($189 & 319 | 0) == 50)) {
        $_0 = $op;
        break L15;
       }
       $195$0 = _i64Subtract(0, 0, $l2_1$0, $l2_1$1) | 0;
       HEAP32[5024] = $186 - 40;
       $198 = $186 - 40 + 16 | 0;
       HEAP32[$198 >> 2] = _i64Add(HEAP32[$198 >> 2] | 0, HEAP32[$198 + 4 >> 2] | 0, $157 ? $195$0 : $l2_1$0, $157 ? tempRet0 : $l2_1$1) | 0;
       HEAP32[$198 + 4 >> 2] = tempRet0;
       STACKTOP = sp;
       return;
      }
     default:
      {
       $_0 = $op;
       break L15;
      }
     }
     $$etemp$16$1 = 0;
     if (!(($l2_1$1 | 0) > ($$etemp$16$1 | 0) | ($l2_1$1 | 0) == ($$etemp$16$1 | 0) & $l2_1$0 >>> 0 > 0 >>> 0)) {
      $_0 = $op;
      break L15;
     }
     $174$0 = _i64Add($l2_1$0, $l2_1$1, -1, -1) | 0;
     if (!(($174$0 & $l2_1$0 | 0) == 0 & (tempRet0 & $l2_1$1 | 0) == 0)) {
      $_0 = $op;
      break L15;
     }
     if ($163) {
      $n_0_lcssa$1 = -1;
      $n_0_lcssa$0 = -1;
     } else {
      $n_084 = -1;
      $l2_285$1 = $l2_1$1;
      $l2_285$0 = $l2_1$0;
      do {
       $l2_285$0 = $l2_285$0 >>> 1 | $l2_285$1 << 31;
       $l2_285$1 = $l2_285$1 >> 1 | (($l2_285$1 | 0) < 0 | 0 ? -1 : 0) << 31;
       $n_084 = $n_084 + 1 | 0;
      } while (!(($l2_285$0 | 0) == 0 & ($l2_285$1 | 0) == 0));
      $n_0_lcssa$1 = ($n_084 | 0) < 0 | 0 ? -1 : 0;
      $n_0_lcssa$0 = $n_084;
     }
     $183 = (HEAP32[5024] | 0) + 16 | 0;
     HEAP32[$183 >> 2] = $n_0_lcssa$0;
     HEAP32[$183 + 4 >> 2] = $n_0_lcssa$1;
     if (($op | 0) == 178) {
      $_0 = 2;
      break L15;
     } else if (($op | 0) == 42) {
      $_0 = 1;
      break L15;
     } else {
      $_0 = 205;
      break L15;
     }
    }
   } while (0);
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
   STACKTOP = sp;
   return;
  }
 } while (0);
 if ((HEAP32[5338] | 0) != 0) {
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  STACKTOP = sp;
  return;
 }
 if (!($8 | $24)) {
  _gen_opi($_0);
  STACKTOP = sp;
  return;
 }
 $205 = $tmp_i48;
 L93 : do {
  switch ($_0 | 0) {
  case 176:
   {
    $func_0_i = 375;
    break;
   }
  case 37:
   {
    $func_0_i = 374;
    break;
   }
  case 177:
   {
    $func_0_i = 376;
    break;
   }
  case 47:
  case 178:
   {
    $func_0_i = 373;
    break;
   }
  case 94:
  case 38:
  case 124:
  case 42:
  case 43:
  case 45:
   {
    $290 = HEAP32[5024] | 0;
    $292 = HEAP32[$290 >> 2] | 0;
    $293 = $tmp_i53_i;
    do {
     if ($290 >>> 0 < 56272 >>> 0) {
      $305 = $290;
     } else {
      $298 = HEAPU16[$290 + 8 >> 1] | 0;
      if (!(($298 & 63 | 0) == 51 | ($298 & 62 | 0) == 52)) {
       $305 = $290;
       break;
      }
      _gv(1) | 0;
      $305 = HEAP32[5024] | 0;
     }
    } while (0);
    $306 = $305;
    HEAP32[$293 >> 2] = HEAP32[$306 >> 2];
    HEAP32[$293 + 4 >> 2] = HEAP32[$306 + 4 >> 2];
    HEAP32[$293 + 8 >> 2] = HEAP32[$306 + 8 >> 2];
    HEAP32[$293 + 12 >> 2] = HEAP32[$306 + 12 >> 2];
    HEAP32[$293 + 16 >> 2] = HEAP32[$306 + 16 >> 2];
    HEAP32[$293 + 20 >> 2] = HEAP32[$306 + 20 >> 2];
    HEAP32[$293 + 24 >> 2] = HEAP32[$306 + 24 >> 2];
    HEAP32[$293 + 28 >> 2] = HEAP32[$306 + 28 >> 2];
    HEAP32[$293 + 32 >> 2] = HEAP32[$306 + 32 >> 2];
    HEAP32[$293 + 36 >> 2] = HEAP32[$306 + 36 >> 2];
    $308 = $305 - 40 | 0;
    HEAP32[$306 >> 2] = HEAP32[$308 >> 2];
    HEAP32[$306 + 4 >> 2] = HEAP32[$308 + 4 >> 2];
    HEAP32[$306 + 8 >> 2] = HEAP32[$308 + 8 >> 2];
    HEAP32[$306 + 12 >> 2] = HEAP32[$308 + 12 >> 2];
    HEAP32[$306 + 16 >> 2] = HEAP32[$308 + 16 >> 2];
    HEAP32[$306 + 20 >> 2] = HEAP32[$308 + 20 >> 2];
    HEAP32[$306 + 24 >> 2] = HEAP32[$308 + 24 >> 2];
    HEAP32[$306 + 28 >> 2] = HEAP32[$308 + 28 >> 2];
    HEAP32[$306 + 32 >> 2] = HEAP32[$308 + 32 >> 2];
    HEAP32[$306 + 36 >> 2] = HEAP32[$308 + 36 >> 2];
    $311 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$311 >> 2] = HEAP32[$293 >> 2];
    HEAP32[$311 + 4 >> 2] = HEAP32[$293 + 4 >> 2];
    HEAP32[$311 + 8 >> 2] = HEAP32[$293 + 8 >> 2];
    HEAP32[$311 + 12 >> 2] = HEAP32[$293 + 12 >> 2];
    HEAP32[$311 + 16 >> 2] = HEAP32[$293 + 16 >> 2];
    HEAP32[$311 + 20 >> 2] = HEAP32[$293 + 20 >> 2];
    HEAP32[$311 + 24 >> 2] = HEAP32[$293 + 24 >> 2];
    HEAP32[$311 + 28 >> 2] = HEAP32[$293 + 28 >> 2];
    HEAP32[$311 + 32 >> 2] = HEAP32[$293 + 32 >> 2];
    HEAP32[$311 + 36 >> 2] = HEAP32[$293 + 36 >> 2];
    $315 = HEAP32[HEAP32[5024] >> 2] & 16;
    _gv(1) | 0;
    $317 = HEAP32[5024] | 0;
    if ($317 >>> 0 < 66472 >>> 0) {
     $320 = $317;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $320 = HEAP32[5024] | 0;
    }
    $321 = $320 + 40 | 0;
    HEAP32[5024] = $321;
    $322 = $321;
    $323 = $317;
    HEAP32[$322 >> 2] = HEAP32[$323 >> 2];
    HEAP32[$322 + 4 >> 2] = HEAP32[$323 + 4 >> 2];
    HEAP32[$322 + 8 >> 2] = HEAP32[$323 + 8 >> 2];
    HEAP32[$322 + 12 >> 2] = HEAP32[$323 + 12 >> 2];
    HEAP32[$322 + 16 >> 2] = HEAP32[$323 + 16 >> 2];
    HEAP32[$322 + 20 >> 2] = HEAP32[$323 + 20 >> 2];
    HEAP32[$322 + 24 >> 2] = HEAP32[$323 + 24 >> 2];
    HEAP32[$322 + 28 >> 2] = HEAP32[$323 + 28 >> 2];
    HEAP32[$322 + 32 >> 2] = HEAP32[$323 + 32 >> 2];
    HEAP32[$322 + 36 >> 2] = HEAP32[$323 + 36 >> 2];
    $324 = HEAP32[5024] | 0;
    HEAP16[$324 + 8 >> 1] = HEAP16[$324 - 40 + 10 >> 1] | 0;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
    HEAP32[HEAP32[5024] >> 2] = $315;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $315;
    $336 = $tmp_i41_i;
    $337 = HEAP32[5024] | 0;
    $339 = $337 - 80 | 0;
    HEAP32[$336 >> 2] = HEAP32[$339 >> 2];
    HEAP32[$336 + 4 >> 2] = HEAP32[$339 + 4 >> 2];
    HEAP32[$336 + 8 >> 2] = HEAP32[$339 + 8 >> 2];
    HEAP32[$336 + 12 >> 2] = HEAP32[$339 + 12 >> 2];
    HEAP32[$336 + 16 >> 2] = HEAP32[$339 + 16 >> 2];
    HEAP32[$336 + 20 >> 2] = HEAP32[$339 + 20 >> 2];
    HEAP32[$336 + 24 >> 2] = HEAP32[$339 + 24 >> 2];
    HEAP32[$336 + 28 >> 2] = HEAP32[$339 + 28 >> 2];
    HEAP32[$336 + 32 >> 2] = HEAP32[$339 + 32 >> 2];
    HEAP32[$336 + 36 >> 2] = HEAP32[$339 + 36 >> 2];
    $i_01_i42_i = -2;
    $340 = $337;
    while (1) {
     $342 = $i_01_i42_i + 1 | 0;
     $344 = $340 + ($i_01_i42_i * 40 | 0) | 0;
     $345 = $340 + ($342 * 40 | 0) | 0;
     HEAP32[$344 >> 2] = HEAP32[$345 >> 2];
     HEAP32[$344 + 4 >> 2] = HEAP32[$345 + 4 >> 2];
     HEAP32[$344 + 8 >> 2] = HEAP32[$345 + 8 >> 2];
     HEAP32[$344 + 12 >> 2] = HEAP32[$345 + 12 >> 2];
     HEAP32[$344 + 16 >> 2] = HEAP32[$345 + 16 >> 2];
     HEAP32[$344 + 20 >> 2] = HEAP32[$345 + 20 >> 2];
     HEAP32[$344 + 24 >> 2] = HEAP32[$345 + 24 >> 2];
     HEAP32[$344 + 28 >> 2] = HEAP32[$345 + 28 >> 2];
     HEAP32[$344 + 32 >> 2] = HEAP32[$345 + 32 >> 2];
     HEAP32[$344 + 36 >> 2] = HEAP32[$345 + 36 >> 2];
     $347 = HEAP32[5024] | 0;
     if (($342 | 0) == 0) {
      break;
     } else {
      $i_01_i42_i = $342;
      $340 = $347;
     }
    }
    $348 = $347;
    HEAP32[$348 >> 2] = HEAP32[$336 >> 2];
    HEAP32[$348 + 4 >> 2] = HEAP32[$336 + 4 >> 2];
    HEAP32[$348 + 8 >> 2] = HEAP32[$336 + 8 >> 2];
    HEAP32[$348 + 12 >> 2] = HEAP32[$336 + 12 >> 2];
    HEAP32[$348 + 16 >> 2] = HEAP32[$336 + 16 >> 2];
    HEAP32[$348 + 20 >> 2] = HEAP32[$336 + 20 >> 2];
    HEAP32[$348 + 24 >> 2] = HEAP32[$336 + 24 >> 2];
    HEAP32[$348 + 28 >> 2] = HEAP32[$336 + 28 >> 2];
    HEAP32[$348 + 32 >> 2] = HEAP32[$336 + 32 >> 2];
    HEAP32[$348 + 36 >> 2] = HEAP32[$336 + 36 >> 2];
    $352 = HEAP32[HEAP32[5024] >> 2] & 16;
    _gv(1) | 0;
    $354 = HEAP32[5024] | 0;
    if ($354 >>> 0 < 66472 >>> 0) {
     $357 = $354;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $357 = HEAP32[5024] | 0;
    }
    $358 = $357 + 40 | 0;
    HEAP32[5024] = $358;
    $359 = $358;
    $360 = $354;
    HEAP32[$359 >> 2] = HEAP32[$360 >> 2];
    HEAP32[$359 + 4 >> 2] = HEAP32[$360 + 4 >> 2];
    HEAP32[$359 + 8 >> 2] = HEAP32[$360 + 8 >> 2];
    HEAP32[$359 + 12 >> 2] = HEAP32[$360 + 12 >> 2];
    HEAP32[$359 + 16 >> 2] = HEAP32[$360 + 16 >> 2];
    HEAP32[$359 + 20 >> 2] = HEAP32[$360 + 20 >> 2];
    HEAP32[$359 + 24 >> 2] = HEAP32[$360 + 24 >> 2];
    HEAP32[$359 + 28 >> 2] = HEAP32[$360 + 28 >> 2];
    HEAP32[$359 + 32 >> 2] = HEAP32[$360 + 32 >> 2];
    HEAP32[$359 + 36 >> 2] = HEAP32[$360 + 36 >> 2];
    $361 = HEAP32[5024] | 0;
    HEAP16[$361 + 8 >> 1] = HEAP16[$361 - 40 + 10 >> 1] | 0;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
    HEAP32[HEAP32[5024] >> 2] = $352;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $352;
    $373 = HEAP32[5024] | 0;
    $374 = $373;
    HEAP32[$205 >> 2] = HEAP32[$374 >> 2];
    HEAP32[$205 + 4 >> 2] = HEAP32[$374 + 4 >> 2];
    HEAP32[$205 + 8 >> 2] = HEAP32[$374 + 8 >> 2];
    HEAP32[$205 + 12 >> 2] = HEAP32[$374 + 12 >> 2];
    HEAP32[$205 + 16 >> 2] = HEAP32[$374 + 16 >> 2];
    HEAP32[$205 + 20 >> 2] = HEAP32[$374 + 20 >> 2];
    HEAP32[$205 + 24 >> 2] = HEAP32[$374 + 24 >> 2];
    HEAP32[$205 + 28 >> 2] = HEAP32[$374 + 28 >> 2];
    HEAP32[$205 + 32 >> 2] = HEAP32[$374 + 32 >> 2];
    HEAP32[$205 + 36 >> 2] = HEAP32[$374 + 36 >> 2];
    $376 = $373 - 120 | 0;
    HEAP32[$374 >> 2] = HEAP32[$376 >> 2];
    HEAP32[$374 + 4 >> 2] = HEAP32[$376 + 4 >> 2];
    HEAP32[$374 + 8 >> 2] = HEAP32[$376 + 8 >> 2];
    HEAP32[$374 + 12 >> 2] = HEAP32[$376 + 12 >> 2];
    HEAP32[$374 + 16 >> 2] = HEAP32[$376 + 16 >> 2];
    HEAP32[$374 + 20 >> 2] = HEAP32[$376 + 20 >> 2];
    HEAP32[$374 + 24 >> 2] = HEAP32[$376 + 24 >> 2];
    HEAP32[$374 + 28 >> 2] = HEAP32[$376 + 28 >> 2];
    HEAP32[$374 + 32 >> 2] = HEAP32[$376 + 32 >> 2];
    HEAP32[$374 + 36 >> 2] = HEAP32[$376 + 36 >> 2];
    $379 = (HEAP32[5024] | 0) - 120 | 0;
    HEAP32[$379 >> 2] = HEAP32[$205 >> 2];
    HEAP32[$379 + 4 >> 2] = HEAP32[$205 + 4 >> 2];
    HEAP32[$379 + 8 >> 2] = HEAP32[$205 + 8 >> 2];
    HEAP32[$379 + 12 >> 2] = HEAP32[$205 + 12 >> 2];
    HEAP32[$379 + 16 >> 2] = HEAP32[$205 + 16 >> 2];
    HEAP32[$379 + 20 >> 2] = HEAP32[$205 + 20 >> 2];
    HEAP32[$379 + 24 >> 2] = HEAP32[$205 + 24 >> 2];
    HEAP32[$379 + 28 >> 2] = HEAP32[$205 + 28 >> 2];
    HEAP32[$379 + 32 >> 2] = HEAP32[$205 + 32 >> 2];
    HEAP32[$379 + 36 >> 2] = HEAP32[$205 + 36 >> 2];
    $380 = HEAP32[5024] | 0;
    $382 = $380 - 80 | 0;
    HEAP32[$205 >> 2] = HEAP32[$382 >> 2];
    HEAP32[$205 + 4 >> 2] = HEAP32[$382 + 4 >> 2];
    HEAP32[$205 + 8 >> 2] = HEAP32[$382 + 8 >> 2];
    HEAP32[$205 + 12 >> 2] = HEAP32[$382 + 12 >> 2];
    HEAP32[$205 + 16 >> 2] = HEAP32[$382 + 16 >> 2];
    HEAP32[$205 + 20 >> 2] = HEAP32[$382 + 20 >> 2];
    HEAP32[$205 + 24 >> 2] = HEAP32[$382 + 24 >> 2];
    HEAP32[$205 + 28 >> 2] = HEAP32[$382 + 28 >> 2];
    HEAP32[$205 + 32 >> 2] = HEAP32[$382 + 32 >> 2];
    HEAP32[$205 + 36 >> 2] = HEAP32[$382 + 36 >> 2];
    $384 = $380 - 120 | 0;
    HEAP32[$382 >> 2] = HEAP32[$384 >> 2];
    HEAP32[$382 + 4 >> 2] = HEAP32[$384 + 4 >> 2];
    HEAP32[$382 + 8 >> 2] = HEAP32[$384 + 8 >> 2];
    HEAP32[$382 + 12 >> 2] = HEAP32[$384 + 12 >> 2];
    HEAP32[$382 + 16 >> 2] = HEAP32[$384 + 16 >> 2];
    HEAP32[$382 + 20 >> 2] = HEAP32[$384 + 20 >> 2];
    HEAP32[$382 + 24 >> 2] = HEAP32[$384 + 24 >> 2];
    HEAP32[$382 + 28 >> 2] = HEAP32[$384 + 28 >> 2];
    HEAP32[$382 + 32 >> 2] = HEAP32[$384 + 32 >> 2];
    HEAP32[$382 + 36 >> 2] = HEAP32[$384 + 36 >> 2];
    $387 = (HEAP32[5024] | 0) - 120 | 0;
    HEAP32[$387 >> 2] = HEAP32[$205 >> 2];
    HEAP32[$387 + 4 >> 2] = HEAP32[$205 + 4 >> 2];
    HEAP32[$387 + 8 >> 2] = HEAP32[$205 + 8 >> 2];
    HEAP32[$387 + 12 >> 2] = HEAP32[$205 + 12 >> 2];
    HEAP32[$387 + 16 >> 2] = HEAP32[$205 + 16 >> 2];
    HEAP32[$387 + 20 >> 2] = HEAP32[$205 + 20 >> 2];
    HEAP32[$387 + 24 >> 2] = HEAP32[$205 + 24 >> 2];
    HEAP32[$387 + 28 >> 2] = HEAP32[$205 + 28 >> 2];
    HEAP32[$387 + 32 >> 2] = HEAP32[$205 + 32 >> 2];
    HEAP32[$387 + 36 >> 2] = HEAP32[$205 + 36 >> 2];
    $388 = $tmp_i47_i;
    $389 = HEAP32[5024] | 0;
    do {
     if ($389 >>> 0 < 56272 >>> 0) {
      $401 = $389;
     } else {
      $394 = HEAPU16[$389 + 8 >> 1] | 0;
      if (!(($394 & 63 | 0) == 51 | ($394 & 62 | 0) == 52)) {
       $401 = $389;
       break;
      }
      _gv(1) | 0;
      $401 = HEAP32[5024] | 0;
     }
    } while (0);
    $402 = $401;
    HEAP32[$388 >> 2] = HEAP32[$402 >> 2];
    HEAP32[$388 + 4 >> 2] = HEAP32[$402 + 4 >> 2];
    HEAP32[$388 + 8 >> 2] = HEAP32[$402 + 8 >> 2];
    HEAP32[$388 + 12 >> 2] = HEAP32[$402 + 12 >> 2];
    HEAP32[$388 + 16 >> 2] = HEAP32[$402 + 16 >> 2];
    HEAP32[$388 + 20 >> 2] = HEAP32[$402 + 20 >> 2];
    HEAP32[$388 + 24 >> 2] = HEAP32[$402 + 24 >> 2];
    HEAP32[$388 + 28 >> 2] = HEAP32[$402 + 28 >> 2];
    HEAP32[$388 + 32 >> 2] = HEAP32[$402 + 32 >> 2];
    HEAP32[$388 + 36 >> 2] = HEAP32[$402 + 36 >> 2];
    $404 = $401 - 40 | 0;
    HEAP32[$402 >> 2] = HEAP32[$404 >> 2];
    HEAP32[$402 + 4 >> 2] = HEAP32[$404 + 4 >> 2];
    HEAP32[$402 + 8 >> 2] = HEAP32[$404 + 8 >> 2];
    HEAP32[$402 + 12 >> 2] = HEAP32[$404 + 12 >> 2];
    HEAP32[$402 + 16 >> 2] = HEAP32[$404 + 16 >> 2];
    HEAP32[$402 + 20 >> 2] = HEAP32[$404 + 20 >> 2];
    HEAP32[$402 + 24 >> 2] = HEAP32[$404 + 24 >> 2];
    HEAP32[$402 + 28 >> 2] = HEAP32[$404 + 28 >> 2];
    HEAP32[$402 + 32 >> 2] = HEAP32[$404 + 32 >> 2];
    HEAP32[$402 + 36 >> 2] = HEAP32[$404 + 36 >> 2];
    $407 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$407 >> 2] = HEAP32[$388 >> 2];
    HEAP32[$407 + 4 >> 2] = HEAP32[$388 + 4 >> 2];
    HEAP32[$407 + 8 >> 2] = HEAP32[$388 + 8 >> 2];
    HEAP32[$407 + 12 >> 2] = HEAP32[$388 + 12 >> 2];
    HEAP32[$407 + 16 >> 2] = HEAP32[$388 + 16 >> 2];
    HEAP32[$407 + 20 >> 2] = HEAP32[$388 + 20 >> 2];
    HEAP32[$407 + 24 >> 2] = HEAP32[$388 + 24 >> 2];
    HEAP32[$407 + 28 >> 2] = HEAP32[$388 + 28 >> 2];
    HEAP32[$407 + 32 >> 2] = HEAP32[$388 + 32 >> 2];
    HEAP32[$407 + 36 >> 2] = HEAP32[$388 + 36 >> 2];
    if (($_0 | 0) == 42) {
     $409 = HEAP32[5024] | 0;
     if ($409 >>> 0 < 66472 >>> 0) {
      $413 = $409;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $413 = HEAP32[5024] | 0;
     }
     $414 = $413 + 40 | 0;
     HEAP32[5024] = $414;
     $415 = $414;
     $416 = $409 - 40 | 0;
     HEAP32[$415 >> 2] = HEAP32[$416 >> 2];
     HEAP32[$415 + 4 >> 2] = HEAP32[$416 + 4 >> 2];
     HEAP32[$415 + 8 >> 2] = HEAP32[$416 + 8 >> 2];
     HEAP32[$415 + 12 >> 2] = HEAP32[$416 + 12 >> 2];
     HEAP32[$415 + 16 >> 2] = HEAP32[$416 + 16 >> 2];
     HEAP32[$415 + 20 >> 2] = HEAP32[$416 + 20 >> 2];
     HEAP32[$415 + 24 >> 2] = HEAP32[$416 + 24 >> 2];
     HEAP32[$415 + 28 >> 2] = HEAP32[$416 + 28 >> 2];
     HEAP32[$415 + 32 >> 2] = HEAP32[$416 + 32 >> 2];
     HEAP32[$415 + 36 >> 2] = HEAP32[$416 + 36 >> 2];
     $417 = HEAP32[5024] | 0;
     if ($417 >>> 0 < 66472 >>> 0) {
      $421 = $417;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $421 = HEAP32[5024] | 0;
     }
     $422 = $421 + 40 | 0;
     HEAP32[5024] = $422;
     $423 = $422;
     $424 = $417 - 40 | 0;
     HEAP32[$423 >> 2] = HEAP32[$424 >> 2];
     HEAP32[$423 + 4 >> 2] = HEAP32[$424 + 4 >> 2];
     HEAP32[$423 + 8 >> 2] = HEAP32[$424 + 8 >> 2];
     HEAP32[$423 + 12 >> 2] = HEAP32[$424 + 12 >> 2];
     HEAP32[$423 + 16 >> 2] = HEAP32[$424 + 16 >> 2];
     HEAP32[$423 + 20 >> 2] = HEAP32[$424 + 20 >> 2];
     HEAP32[$423 + 24 >> 2] = HEAP32[$424 + 24 >> 2];
     HEAP32[$423 + 28 >> 2] = HEAP32[$424 + 28 >> 2];
     HEAP32[$423 + 32 >> 2] = HEAP32[$424 + 32 >> 2];
     HEAP32[$423 + 36 >> 2] = HEAP32[$424 + 36 >> 2];
     _gen_op(194);
     $428 = HEAP32[HEAP32[5024] >> 2] & 16;
     _gv(1) | 0;
     $430 = HEAP32[5024] | 0;
     if ($430 >>> 0 < 66472 >>> 0) {
      $433 = $430;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $433 = HEAP32[5024] | 0;
     }
     $434 = $433 + 40 | 0;
     HEAP32[5024] = $434;
     $435 = $434;
     $436 = $430;
     HEAP32[$435 >> 2] = HEAP32[$436 >> 2];
     HEAP32[$435 + 4 >> 2] = HEAP32[$436 + 4 >> 2];
     HEAP32[$435 + 8 >> 2] = HEAP32[$436 + 8 >> 2];
     HEAP32[$435 + 12 >> 2] = HEAP32[$436 + 12 >> 2];
     HEAP32[$435 + 16 >> 2] = HEAP32[$436 + 16 >> 2];
     HEAP32[$435 + 20 >> 2] = HEAP32[$436 + 20 >> 2];
     HEAP32[$435 + 24 >> 2] = HEAP32[$436 + 24 >> 2];
     HEAP32[$435 + 28 >> 2] = HEAP32[$436 + 28 >> 2];
     HEAP32[$435 + 32 >> 2] = HEAP32[$436 + 32 >> 2];
     HEAP32[$435 + 36 >> 2] = HEAP32[$436 + 36 >> 2];
     $437 = HEAP32[5024] | 0;
     HEAP16[$437 + 8 >> 1] = HEAP16[$437 - 40 + 10 >> 1] | 0;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
     HEAP32[HEAP32[5024] >> 2] = $428;
     HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $428;
     $449 = $tmp_i37_i;
     $i_0_i78 = 0;
     do {
      $451 = HEAP32[5024] | 0;
      $453 = $451 - 200 | 0;
      HEAP32[$449 >> 2] = HEAP32[$453 >> 2];
      HEAP32[$449 + 4 >> 2] = HEAP32[$453 + 4 >> 2];
      HEAP32[$449 + 8 >> 2] = HEAP32[$453 + 8 >> 2];
      HEAP32[$449 + 12 >> 2] = HEAP32[$453 + 12 >> 2];
      HEAP32[$449 + 16 >> 2] = HEAP32[$453 + 16 >> 2];
      HEAP32[$449 + 20 >> 2] = HEAP32[$453 + 20 >> 2];
      HEAP32[$449 + 24 >> 2] = HEAP32[$453 + 24 >> 2];
      HEAP32[$449 + 28 >> 2] = HEAP32[$453 + 28 >> 2];
      HEAP32[$449 + 32 >> 2] = HEAP32[$453 + 32 >> 2];
      HEAP32[$449 + 36 >> 2] = HEAP32[$453 + 36 >> 2];
      $i_01_i38_i = -5;
      $454 = $451;
      while (1) {
       $456 = $i_01_i38_i + 1 | 0;
       $458 = $454 + ($i_01_i38_i * 40 | 0) | 0;
       $459 = $454 + ($456 * 40 | 0) | 0;
       HEAP32[$458 >> 2] = HEAP32[$459 >> 2];
       HEAP32[$458 + 4 >> 2] = HEAP32[$459 + 4 >> 2];
       HEAP32[$458 + 8 >> 2] = HEAP32[$459 + 8 >> 2];
       HEAP32[$458 + 12 >> 2] = HEAP32[$459 + 12 >> 2];
       HEAP32[$458 + 16 >> 2] = HEAP32[$459 + 16 >> 2];
       HEAP32[$458 + 20 >> 2] = HEAP32[$459 + 20 >> 2];
       HEAP32[$458 + 24 >> 2] = HEAP32[$459 + 24 >> 2];
       HEAP32[$458 + 28 >> 2] = HEAP32[$459 + 28 >> 2];
       HEAP32[$458 + 32 >> 2] = HEAP32[$459 + 32 >> 2];
       HEAP32[$458 + 36 >> 2] = HEAP32[$459 + 36 >> 2];
       $461 = HEAP32[5024] | 0;
       if (($456 | 0) == 0) {
        break;
       } else {
        $i_01_i38_i = $456;
        $454 = $461;
       }
      }
      $462 = $461;
      HEAP32[$462 >> 2] = HEAP32[$449 >> 2];
      HEAP32[$462 + 4 >> 2] = HEAP32[$449 + 4 >> 2];
      HEAP32[$462 + 8 >> 2] = HEAP32[$449 + 8 >> 2];
      HEAP32[$462 + 12 >> 2] = HEAP32[$449 + 12 >> 2];
      HEAP32[$462 + 16 >> 2] = HEAP32[$449 + 16 >> 2];
      HEAP32[$462 + 20 >> 2] = HEAP32[$449 + 20 >> 2];
      HEAP32[$462 + 24 >> 2] = HEAP32[$449 + 24 >> 2];
      HEAP32[$462 + 28 >> 2] = HEAP32[$449 + 28 >> 2];
      HEAP32[$462 + 32 >> 2] = HEAP32[$449 + 32 >> 2];
      HEAP32[$462 + 36 >> 2] = HEAP32[$449 + 36 >> 2];
      $i_0_i78 = $i_0_i78 + 1 | 0;
     } while (($i_0_i78 | 0) < 4);
     $466 = HEAP32[5024] | 0;
     $467 = $466;
     HEAP32[$205 >> 2] = HEAP32[$467 >> 2];
     HEAP32[$205 + 4 >> 2] = HEAP32[$467 + 4 >> 2];
     HEAP32[$205 + 8 >> 2] = HEAP32[$467 + 8 >> 2];
     HEAP32[$205 + 12 >> 2] = HEAP32[$467 + 12 >> 2];
     HEAP32[$205 + 16 >> 2] = HEAP32[$467 + 16 >> 2];
     HEAP32[$205 + 20 >> 2] = HEAP32[$467 + 20 >> 2];
     HEAP32[$205 + 24 >> 2] = HEAP32[$467 + 24 >> 2];
     HEAP32[$205 + 28 >> 2] = HEAP32[$467 + 28 >> 2];
     HEAP32[$205 + 32 >> 2] = HEAP32[$467 + 32 >> 2];
     HEAP32[$205 + 36 >> 2] = HEAP32[$467 + 36 >> 2];
     $469 = $466 - 80 | 0;
     HEAP32[$467 >> 2] = HEAP32[$469 >> 2];
     HEAP32[$467 + 4 >> 2] = HEAP32[$469 + 4 >> 2];
     HEAP32[$467 + 8 >> 2] = HEAP32[$469 + 8 >> 2];
     HEAP32[$467 + 12 >> 2] = HEAP32[$469 + 12 >> 2];
     HEAP32[$467 + 16 >> 2] = HEAP32[$469 + 16 >> 2];
     HEAP32[$467 + 20 >> 2] = HEAP32[$469 + 20 >> 2];
     HEAP32[$467 + 24 >> 2] = HEAP32[$469 + 24 >> 2];
     HEAP32[$467 + 28 >> 2] = HEAP32[$469 + 28 >> 2];
     HEAP32[$467 + 32 >> 2] = HEAP32[$469 + 32 >> 2];
     HEAP32[$467 + 36 >> 2] = HEAP32[$469 + 36 >> 2];
     $472 = (HEAP32[5024] | 0) - 80 | 0;
     HEAP32[$472 >> 2] = HEAP32[$205 >> 2];
     HEAP32[$472 + 4 >> 2] = HEAP32[$205 + 4 >> 2];
     HEAP32[$472 + 8 >> 2] = HEAP32[$205 + 8 >> 2];
     HEAP32[$472 + 12 >> 2] = HEAP32[$205 + 12 >> 2];
     HEAP32[$472 + 16 >> 2] = HEAP32[$205 + 16 >> 2];
     HEAP32[$472 + 20 >> 2] = HEAP32[$205 + 20 >> 2];
     HEAP32[$472 + 24 >> 2] = HEAP32[$205 + 24 >> 2];
     HEAP32[$472 + 28 >> 2] = HEAP32[$205 + 28 >> 2];
     HEAP32[$472 + 32 >> 2] = HEAP32[$205 + 32 >> 2];
     HEAP32[$472 + 36 >> 2] = HEAP32[$205 + 36 >> 2];
     _gen_op(42);
     $473 = $tmp_i33_i;
     $474 = HEAP32[5024] | 0;
     $476 = $474 - 80 | 0;
     HEAP32[$473 >> 2] = HEAP32[$476 >> 2];
     HEAP32[$473 + 4 >> 2] = HEAP32[$476 + 4 >> 2];
     HEAP32[$473 + 8 >> 2] = HEAP32[$476 + 8 >> 2];
     HEAP32[$473 + 12 >> 2] = HEAP32[$476 + 12 >> 2];
     HEAP32[$473 + 16 >> 2] = HEAP32[$476 + 16 >> 2];
     HEAP32[$473 + 20 >> 2] = HEAP32[$476 + 20 >> 2];
     HEAP32[$473 + 24 >> 2] = HEAP32[$476 + 24 >> 2];
     HEAP32[$473 + 28 >> 2] = HEAP32[$476 + 28 >> 2];
     HEAP32[$473 + 32 >> 2] = HEAP32[$476 + 32 >> 2];
     HEAP32[$473 + 36 >> 2] = HEAP32[$476 + 36 >> 2];
     $i_01_i34_i = -2;
     $477 = $474;
     while (1) {
      $479 = $i_01_i34_i + 1 | 0;
      $481 = $477 + ($i_01_i34_i * 40 | 0) | 0;
      $482 = $477 + ($479 * 40 | 0) | 0;
      HEAP32[$481 >> 2] = HEAP32[$482 >> 2];
      HEAP32[$481 + 4 >> 2] = HEAP32[$482 + 4 >> 2];
      HEAP32[$481 + 8 >> 2] = HEAP32[$482 + 8 >> 2];
      HEAP32[$481 + 12 >> 2] = HEAP32[$482 + 12 >> 2];
      HEAP32[$481 + 16 >> 2] = HEAP32[$482 + 16 >> 2];
      HEAP32[$481 + 20 >> 2] = HEAP32[$482 + 20 >> 2];
      HEAP32[$481 + 24 >> 2] = HEAP32[$482 + 24 >> 2];
      HEAP32[$481 + 28 >> 2] = HEAP32[$482 + 28 >> 2];
      HEAP32[$481 + 32 >> 2] = HEAP32[$482 + 32 >> 2];
      HEAP32[$481 + 36 >> 2] = HEAP32[$482 + 36 >> 2];
      $484 = HEAP32[5024] | 0;
      if (($479 | 0) == 0) {
       break;
      } else {
       $i_01_i34_i = $479;
       $477 = $484;
      }
     }
     $485 = $484;
     HEAP32[$485 >> 2] = HEAP32[$473 >> 2];
     HEAP32[$485 + 4 >> 2] = HEAP32[$473 + 4 >> 2];
     HEAP32[$485 + 8 >> 2] = HEAP32[$473 + 8 >> 2];
     HEAP32[$485 + 12 >> 2] = HEAP32[$473 + 12 >> 2];
     HEAP32[$485 + 16 >> 2] = HEAP32[$473 + 16 >> 2];
     HEAP32[$485 + 20 >> 2] = HEAP32[$473 + 20 >> 2];
     HEAP32[$485 + 24 >> 2] = HEAP32[$473 + 24 >> 2];
     HEAP32[$485 + 28 >> 2] = HEAP32[$473 + 28 >> 2];
     HEAP32[$485 + 32 >> 2] = HEAP32[$473 + 32 >> 2];
     HEAP32[$485 + 36 >> 2] = HEAP32[$473 + 36 >> 2];
     $486 = $tmp_i29_i;
     $487 = HEAP32[5024] | 0;
     $489 = $487 - 80 | 0;
     HEAP32[$486 >> 2] = HEAP32[$489 >> 2];
     HEAP32[$486 + 4 >> 2] = HEAP32[$489 + 4 >> 2];
     HEAP32[$486 + 8 >> 2] = HEAP32[$489 + 8 >> 2];
     HEAP32[$486 + 12 >> 2] = HEAP32[$489 + 12 >> 2];
     HEAP32[$486 + 16 >> 2] = HEAP32[$489 + 16 >> 2];
     HEAP32[$486 + 20 >> 2] = HEAP32[$489 + 20 >> 2];
     HEAP32[$486 + 24 >> 2] = HEAP32[$489 + 24 >> 2];
     HEAP32[$486 + 28 >> 2] = HEAP32[$489 + 28 >> 2];
     HEAP32[$486 + 32 >> 2] = HEAP32[$489 + 32 >> 2];
     HEAP32[$486 + 36 >> 2] = HEAP32[$489 + 36 >> 2];
     $i_01_i30_i = -2;
     $490 = $487;
     while (1) {
      $492 = $i_01_i30_i + 1 | 0;
      $494 = $490 + ($i_01_i30_i * 40 | 0) | 0;
      $495 = $490 + ($492 * 40 | 0) | 0;
      HEAP32[$494 >> 2] = HEAP32[$495 >> 2];
      HEAP32[$494 + 4 >> 2] = HEAP32[$495 + 4 >> 2];
      HEAP32[$494 + 8 >> 2] = HEAP32[$495 + 8 >> 2];
      HEAP32[$494 + 12 >> 2] = HEAP32[$495 + 12 >> 2];
      HEAP32[$494 + 16 >> 2] = HEAP32[$495 + 16 >> 2];
      HEAP32[$494 + 20 >> 2] = HEAP32[$495 + 20 >> 2];
      HEAP32[$494 + 24 >> 2] = HEAP32[$495 + 24 >> 2];
      HEAP32[$494 + 28 >> 2] = HEAP32[$495 + 28 >> 2];
      HEAP32[$494 + 32 >> 2] = HEAP32[$495 + 32 >> 2];
      HEAP32[$494 + 36 >> 2] = HEAP32[$495 + 36 >> 2];
      $497 = HEAP32[5024] | 0;
      if (($492 | 0) == 0) {
       break;
      } else {
       $i_01_i30_i = $492;
       $490 = $497;
      }
     }
     $498 = $497;
     HEAP32[$498 >> 2] = HEAP32[$486 >> 2];
     HEAP32[$498 + 4 >> 2] = HEAP32[$486 + 4 >> 2];
     HEAP32[$498 + 8 >> 2] = HEAP32[$486 + 8 >> 2];
     HEAP32[$498 + 12 >> 2] = HEAP32[$486 + 12 >> 2];
     HEAP32[$498 + 16 >> 2] = HEAP32[$486 + 16 >> 2];
     HEAP32[$498 + 20 >> 2] = HEAP32[$486 + 20 >> 2];
     HEAP32[$498 + 24 >> 2] = HEAP32[$486 + 24 >> 2];
     HEAP32[$498 + 28 >> 2] = HEAP32[$486 + 28 >> 2];
     HEAP32[$498 + 32 >> 2] = HEAP32[$486 + 32 >> 2];
     HEAP32[$498 + 36 >> 2] = HEAP32[$486 + 36 >> 2];
     _gen_op(42);
     _gen_op(43);
     _gen_op(43);
    } else if (($_0 | 0) == 45) {
     $op1_0_i = 197;
     label = 115;
    } else if (($_0 | 0) == 43) {
     $op1_0_i = 195;
     label = 115;
    } else {
     _gen_op($_0);
     $529 = $tmp_i17_i;
     $530 = HEAP32[5024] | 0;
     $532 = $530 - 80 | 0;
     HEAP32[$529 >> 2] = HEAP32[$532 >> 2];
     HEAP32[$529 + 4 >> 2] = HEAP32[$532 + 4 >> 2];
     HEAP32[$529 + 8 >> 2] = HEAP32[$532 + 8 >> 2];
     HEAP32[$529 + 12 >> 2] = HEAP32[$532 + 12 >> 2];
     HEAP32[$529 + 16 >> 2] = HEAP32[$532 + 16 >> 2];
     HEAP32[$529 + 20 >> 2] = HEAP32[$532 + 20 >> 2];
     HEAP32[$529 + 24 >> 2] = HEAP32[$532 + 24 >> 2];
     HEAP32[$529 + 28 >> 2] = HEAP32[$532 + 28 >> 2];
     HEAP32[$529 + 32 >> 2] = HEAP32[$532 + 32 >> 2];
     HEAP32[$529 + 36 >> 2] = HEAP32[$532 + 36 >> 2];
     $i_01_i18_i = -2;
     $533 = $530;
     while (1) {
      $535 = $i_01_i18_i + 1 | 0;
      $537 = $533 + ($i_01_i18_i * 40 | 0) | 0;
      $538 = $533 + ($535 * 40 | 0) | 0;
      HEAP32[$537 >> 2] = HEAP32[$538 >> 2];
      HEAP32[$537 + 4 >> 2] = HEAP32[$538 + 4 >> 2];
      HEAP32[$537 + 8 >> 2] = HEAP32[$538 + 8 >> 2];
      HEAP32[$537 + 12 >> 2] = HEAP32[$538 + 12 >> 2];
      HEAP32[$537 + 16 >> 2] = HEAP32[$538 + 16 >> 2];
      HEAP32[$537 + 20 >> 2] = HEAP32[$538 + 20 >> 2];
      HEAP32[$537 + 24 >> 2] = HEAP32[$538 + 24 >> 2];
      HEAP32[$537 + 28 >> 2] = HEAP32[$538 + 28 >> 2];
      HEAP32[$537 + 32 >> 2] = HEAP32[$538 + 32 >> 2];
      HEAP32[$537 + 36 >> 2] = HEAP32[$538 + 36 >> 2];
      $540 = HEAP32[5024] | 0;
      if (($535 | 0) == 0) {
       break;
      } else {
       $i_01_i18_i = $535;
       $533 = $540;
      }
     }
     $541 = $540;
     HEAP32[$541 >> 2] = HEAP32[$529 >> 2];
     HEAP32[$541 + 4 >> 2] = HEAP32[$529 + 4 >> 2];
     HEAP32[$541 + 8 >> 2] = HEAP32[$529 + 8 >> 2];
     HEAP32[$541 + 12 >> 2] = HEAP32[$529 + 12 >> 2];
     HEAP32[$541 + 16 >> 2] = HEAP32[$529 + 16 >> 2];
     HEAP32[$541 + 20 >> 2] = HEAP32[$529 + 20 >> 2];
     HEAP32[$541 + 24 >> 2] = HEAP32[$529 + 24 >> 2];
     HEAP32[$541 + 28 >> 2] = HEAP32[$529 + 28 >> 2];
     HEAP32[$541 + 32 >> 2] = HEAP32[$529 + 32 >> 2];
     HEAP32[$541 + 36 >> 2] = HEAP32[$529 + 36 >> 2];
     $542 = $tmp_i13_i;
     $543 = HEAP32[5024] | 0;
     $545 = $543 - 80 | 0;
     HEAP32[$542 >> 2] = HEAP32[$545 >> 2];
     HEAP32[$542 + 4 >> 2] = HEAP32[$545 + 4 >> 2];
     HEAP32[$542 + 8 >> 2] = HEAP32[$545 + 8 >> 2];
     HEAP32[$542 + 12 >> 2] = HEAP32[$545 + 12 >> 2];
     HEAP32[$542 + 16 >> 2] = HEAP32[$545 + 16 >> 2];
     HEAP32[$542 + 20 >> 2] = HEAP32[$545 + 20 >> 2];
     HEAP32[$542 + 24 >> 2] = HEAP32[$545 + 24 >> 2];
     HEAP32[$542 + 28 >> 2] = HEAP32[$545 + 28 >> 2];
     HEAP32[$542 + 32 >> 2] = HEAP32[$545 + 32 >> 2];
     HEAP32[$542 + 36 >> 2] = HEAP32[$545 + 36 >> 2];
     $i_01_i14_i = -2;
     $546 = $543;
     while (1) {
      $548 = $i_01_i14_i + 1 | 0;
      $550 = $546 + ($i_01_i14_i * 40 | 0) | 0;
      $551 = $546 + ($548 * 40 | 0) | 0;
      HEAP32[$550 >> 2] = HEAP32[$551 >> 2];
      HEAP32[$550 + 4 >> 2] = HEAP32[$551 + 4 >> 2];
      HEAP32[$550 + 8 >> 2] = HEAP32[$551 + 8 >> 2];
      HEAP32[$550 + 12 >> 2] = HEAP32[$551 + 12 >> 2];
      HEAP32[$550 + 16 >> 2] = HEAP32[$551 + 16 >> 2];
      HEAP32[$550 + 20 >> 2] = HEAP32[$551 + 20 >> 2];
      HEAP32[$550 + 24 >> 2] = HEAP32[$551 + 24 >> 2];
      HEAP32[$550 + 28 >> 2] = HEAP32[$551 + 28 >> 2];
      HEAP32[$550 + 32 >> 2] = HEAP32[$551 + 32 >> 2];
      HEAP32[$550 + 36 >> 2] = HEAP32[$551 + 36 >> 2];
      $553 = HEAP32[5024] | 0;
      if (($548 | 0) == 0) {
       break;
      } else {
       $i_01_i14_i = $548;
       $546 = $553;
      }
     }
     $554 = $553;
     HEAP32[$554 >> 2] = HEAP32[$542 >> 2];
     HEAP32[$554 + 4 >> 2] = HEAP32[$542 + 4 >> 2];
     HEAP32[$554 + 8 >> 2] = HEAP32[$542 + 8 >> 2];
     HEAP32[$554 + 12 >> 2] = HEAP32[$542 + 12 >> 2];
     HEAP32[$554 + 16 >> 2] = HEAP32[$542 + 16 >> 2];
     HEAP32[$554 + 20 >> 2] = HEAP32[$542 + 20 >> 2];
     HEAP32[$554 + 24 >> 2] = HEAP32[$542 + 24 >> 2];
     HEAP32[$554 + 28 >> 2] = HEAP32[$542 + 28 >> 2];
     HEAP32[$554 + 32 >> 2] = HEAP32[$542 + 32 >> 2];
     HEAP32[$554 + 36 >> 2] = HEAP32[$542 + 36 >> 2];
     _gen_op($_0);
    }
    if ((label | 0) == 115) {
     _gen_op($op1_0_i);
     $501 = $tmp_i25_i;
     $502 = HEAP32[5024] | 0;
     $504 = $502 - 80 | 0;
     HEAP32[$501 >> 2] = HEAP32[$504 >> 2];
     HEAP32[$501 + 4 >> 2] = HEAP32[$504 + 4 >> 2];
     HEAP32[$501 + 8 >> 2] = HEAP32[$504 + 8 >> 2];
     HEAP32[$501 + 12 >> 2] = HEAP32[$504 + 12 >> 2];
     HEAP32[$501 + 16 >> 2] = HEAP32[$504 + 16 >> 2];
     HEAP32[$501 + 20 >> 2] = HEAP32[$504 + 20 >> 2];
     HEAP32[$501 + 24 >> 2] = HEAP32[$504 + 24 >> 2];
     HEAP32[$501 + 28 >> 2] = HEAP32[$504 + 28 >> 2];
     HEAP32[$501 + 32 >> 2] = HEAP32[$504 + 32 >> 2];
     HEAP32[$501 + 36 >> 2] = HEAP32[$504 + 36 >> 2];
     $i_01_i26_i = -2;
     $505 = $502;
     while (1) {
      $507 = $i_01_i26_i + 1 | 0;
      $509 = $505 + ($i_01_i26_i * 40 | 0) | 0;
      $510 = $505 + ($507 * 40 | 0) | 0;
      HEAP32[$509 >> 2] = HEAP32[$510 >> 2];
      HEAP32[$509 + 4 >> 2] = HEAP32[$510 + 4 >> 2];
      HEAP32[$509 + 8 >> 2] = HEAP32[$510 + 8 >> 2];
      HEAP32[$509 + 12 >> 2] = HEAP32[$510 + 12 >> 2];
      HEAP32[$509 + 16 >> 2] = HEAP32[$510 + 16 >> 2];
      HEAP32[$509 + 20 >> 2] = HEAP32[$510 + 20 >> 2];
      HEAP32[$509 + 24 >> 2] = HEAP32[$510 + 24 >> 2];
      HEAP32[$509 + 28 >> 2] = HEAP32[$510 + 28 >> 2];
      HEAP32[$509 + 32 >> 2] = HEAP32[$510 + 32 >> 2];
      HEAP32[$509 + 36 >> 2] = HEAP32[$510 + 36 >> 2];
      $512 = HEAP32[5024] | 0;
      if (($507 | 0) == 0) {
       break;
      } else {
       $i_01_i26_i = $507;
       $505 = $512;
      }
     }
     $513 = $512;
     HEAP32[$513 >> 2] = HEAP32[$501 >> 2];
     HEAP32[$513 + 4 >> 2] = HEAP32[$501 + 4 >> 2];
     HEAP32[$513 + 8 >> 2] = HEAP32[$501 + 8 >> 2];
     HEAP32[$513 + 12 >> 2] = HEAP32[$501 + 12 >> 2];
     HEAP32[$513 + 16 >> 2] = HEAP32[$501 + 16 >> 2];
     HEAP32[$513 + 20 >> 2] = HEAP32[$501 + 20 >> 2];
     HEAP32[$513 + 24 >> 2] = HEAP32[$501 + 24 >> 2];
     HEAP32[$513 + 28 >> 2] = HEAP32[$501 + 28 >> 2];
     HEAP32[$513 + 32 >> 2] = HEAP32[$501 + 32 >> 2];
     HEAP32[$513 + 36 >> 2] = HEAP32[$501 + 36 >> 2];
     $514 = $tmp_i21_i;
     $515 = HEAP32[5024] | 0;
     $517 = $515 - 80 | 0;
     HEAP32[$514 >> 2] = HEAP32[$517 >> 2];
     HEAP32[$514 + 4 >> 2] = HEAP32[$517 + 4 >> 2];
     HEAP32[$514 + 8 >> 2] = HEAP32[$517 + 8 >> 2];
     HEAP32[$514 + 12 >> 2] = HEAP32[$517 + 12 >> 2];
     HEAP32[$514 + 16 >> 2] = HEAP32[$517 + 16 >> 2];
     HEAP32[$514 + 20 >> 2] = HEAP32[$517 + 20 >> 2];
     HEAP32[$514 + 24 >> 2] = HEAP32[$517 + 24 >> 2];
     HEAP32[$514 + 28 >> 2] = HEAP32[$517 + 28 >> 2];
     HEAP32[$514 + 32 >> 2] = HEAP32[$517 + 32 >> 2];
     HEAP32[$514 + 36 >> 2] = HEAP32[$517 + 36 >> 2];
     $i_01_i22_i = -2;
     $518 = $515;
     while (1) {
      $520 = $i_01_i22_i + 1 | 0;
      $522 = $518 + ($i_01_i22_i * 40 | 0) | 0;
      $523 = $518 + ($520 * 40 | 0) | 0;
      HEAP32[$522 >> 2] = HEAP32[$523 >> 2];
      HEAP32[$522 + 4 >> 2] = HEAP32[$523 + 4 >> 2];
      HEAP32[$522 + 8 >> 2] = HEAP32[$523 + 8 >> 2];
      HEAP32[$522 + 12 >> 2] = HEAP32[$523 + 12 >> 2];
      HEAP32[$522 + 16 >> 2] = HEAP32[$523 + 16 >> 2];
      HEAP32[$522 + 20 >> 2] = HEAP32[$523 + 20 >> 2];
      HEAP32[$522 + 24 >> 2] = HEAP32[$523 + 24 >> 2];
      HEAP32[$522 + 28 >> 2] = HEAP32[$523 + 28 >> 2];
      HEAP32[$522 + 32 >> 2] = HEAP32[$523 + 32 >> 2];
      HEAP32[$522 + 36 >> 2] = HEAP32[$523 + 36 >> 2];
      $525 = HEAP32[5024] | 0;
      if (($520 | 0) == 0) {
       break;
      } else {
       $i_01_i22_i = $520;
       $518 = $525;
      }
     }
     $526 = $525;
     HEAP32[$526 >> 2] = HEAP32[$514 >> 2];
     HEAP32[$526 + 4 >> 2] = HEAP32[$514 + 4 >> 2];
     HEAP32[$526 + 8 >> 2] = HEAP32[$514 + 8 >> 2];
     HEAP32[$526 + 12 >> 2] = HEAP32[$514 + 12 >> 2];
     HEAP32[$526 + 16 >> 2] = HEAP32[$514 + 16 >> 2];
     HEAP32[$526 + 20 >> 2] = HEAP32[$514 + 20 >> 2];
     HEAP32[$526 + 24 >> 2] = HEAP32[$514 + 24 >> 2];
     HEAP32[$526 + 28 >> 2] = HEAP32[$514 + 28 >> 2];
     HEAP32[$526 + 32 >> 2] = HEAP32[$514 + 32 >> 2];
     HEAP32[$526 + 36 >> 2] = HEAP32[$514 + 36 >> 2];
     _gen_op($op1_0_i + 1 | 0);
    }
    _gv2(1, 1);
    $556 = HEAP32[5024] | 0;
    HEAP16[$556 - 40 + 10 >> 1] = HEAP16[$556 + 8 >> 1] | 0;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $292;
    $562 = HEAP32[5024] | 0;
    $565 = HEAPU16[$562 + 8 >> 1] | 0;
    do {
     if (($565 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
      if (($565 & 62 | 0) != 52) {
       break;
      }
      _gsym(HEAP32[$562 + 16 >> 2] | 0);
     } else {
      _o(55517);
     }
    } while (0);
    HEAP32[5024] = (HEAP32[5024] | 0) - 40;
    STACKTOP = sp;
    return;
   }
  case 2:
  case 205:
  case 1:
   {
    $580 = HEAP32[5024] | 0;
    $582 = HEAP16[$580 + 8 >> 1] | 0;
    if (($582 & 831) != 48) {
     if (($_0 | 0) == 2) {
      $func_0_i = 379;
      break L93;
     } else if (($_0 | 0) == 205) {
      $func_0_i = 380;
      break L93;
     } else if (($_0 | 0) == 1) {
      $func_0_i = 381;
      break L93;
     } else {
      STACKTOP = sp;
      return;
     }
    }
    $587 = HEAP32[$580 - 40 >> 2] | 0;
    $588 = $tmp_i57_i;
    do {
     if ($580 >>> 0 < 56272 >>> 0) {
      $598 = $580;
     } else {
      $591 = $582 & 65535;
      if (!(($591 & 63 | 0) == 51 | ($591 & 62 | 0) == 52)) {
       $598 = $580;
       break;
      }
      _gv(1) | 0;
      $598 = HEAP32[5024] | 0;
     }
    } while (0);
    $599 = $598;
    HEAP32[$588 >> 2] = HEAP32[$599 >> 2];
    HEAP32[$588 + 4 >> 2] = HEAP32[$599 + 4 >> 2];
    HEAP32[$588 + 8 >> 2] = HEAP32[$599 + 8 >> 2];
    HEAP32[$588 + 12 >> 2] = HEAP32[$599 + 12 >> 2];
    HEAP32[$588 + 16 >> 2] = HEAP32[$599 + 16 >> 2];
    HEAP32[$588 + 20 >> 2] = HEAP32[$599 + 20 >> 2];
    HEAP32[$588 + 24 >> 2] = HEAP32[$599 + 24 >> 2];
    HEAP32[$588 + 28 >> 2] = HEAP32[$599 + 28 >> 2];
    HEAP32[$588 + 32 >> 2] = HEAP32[$599 + 32 >> 2];
    HEAP32[$588 + 36 >> 2] = HEAP32[$599 + 36 >> 2];
    $601 = $598 - 40 | 0;
    HEAP32[$599 >> 2] = HEAP32[$601 >> 2];
    HEAP32[$599 + 4 >> 2] = HEAP32[$601 + 4 >> 2];
    HEAP32[$599 + 8 >> 2] = HEAP32[$601 + 8 >> 2];
    HEAP32[$599 + 12 >> 2] = HEAP32[$601 + 12 >> 2];
    HEAP32[$599 + 16 >> 2] = HEAP32[$601 + 16 >> 2];
    HEAP32[$599 + 20 >> 2] = HEAP32[$601 + 20 >> 2];
    HEAP32[$599 + 24 >> 2] = HEAP32[$601 + 24 >> 2];
    HEAP32[$599 + 28 >> 2] = HEAP32[$601 + 28 >> 2];
    HEAP32[$599 + 32 >> 2] = HEAP32[$601 + 32 >> 2];
    HEAP32[$599 + 36 >> 2] = HEAP32[$601 + 36 >> 2];
    $604 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$604 >> 2] = HEAP32[$588 >> 2];
    HEAP32[$604 + 4 >> 2] = HEAP32[$588 + 4 >> 2];
    HEAP32[$604 + 8 >> 2] = HEAP32[$588 + 8 >> 2];
    HEAP32[$604 + 12 >> 2] = HEAP32[$588 + 12 >> 2];
    HEAP32[$604 + 16 >> 2] = HEAP32[$588 + 16 >> 2];
    HEAP32[$604 + 20 >> 2] = HEAP32[$588 + 20 >> 2];
    HEAP32[$604 + 24 >> 2] = HEAP32[$588 + 24 >> 2];
    HEAP32[$604 + 28 >> 2] = HEAP32[$588 + 28 >> 2];
    HEAP32[$604 + 32 >> 2] = HEAP32[$588 + 32 >> 2];
    HEAP32[$604 + 36 >> 2] = HEAP32[$588 + 36 >> 2];
    $608 = HEAP32[HEAP32[5024] >> 2] & 16;
    _gv(1) | 0;
    $610 = HEAP32[5024] | 0;
    if ($610 >>> 0 < 66472 >>> 0) {
     $613 = $610;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $613 = HEAP32[5024] | 0;
    }
    $614 = $613 + 40 | 0;
    HEAP32[5024] = $614;
    $615 = $614;
    $616 = $610;
    HEAP32[$615 >> 2] = HEAP32[$616 >> 2];
    HEAP32[$615 + 4 >> 2] = HEAP32[$616 + 4 >> 2];
    HEAP32[$615 + 8 >> 2] = HEAP32[$616 + 8 >> 2];
    HEAP32[$615 + 12 >> 2] = HEAP32[$616 + 12 >> 2];
    HEAP32[$615 + 16 >> 2] = HEAP32[$616 + 16 >> 2];
    HEAP32[$615 + 20 >> 2] = HEAP32[$616 + 20 >> 2];
    HEAP32[$615 + 24 >> 2] = HEAP32[$616 + 24 >> 2];
    HEAP32[$615 + 28 >> 2] = HEAP32[$616 + 28 >> 2];
    HEAP32[$615 + 32 >> 2] = HEAP32[$616 + 32 >> 2];
    HEAP32[$615 + 36 >> 2] = HEAP32[$616 + 36 >> 2];
    $617 = HEAP32[5024] | 0;
    HEAP16[$617 + 8 >> 1] = HEAP16[$617 - 40 + 10 >> 1] | 0;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
    HEAP32[HEAP32[5024] >> 2] = $608;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $608;
    $629 = $tmp_i9_i;
    $630 = HEAP32[5024] | 0;
    $632 = $630 - 80 | 0;
    HEAP32[$629 >> 2] = HEAP32[$632 >> 2];
    HEAP32[$629 + 4 >> 2] = HEAP32[$632 + 4 >> 2];
    HEAP32[$629 + 8 >> 2] = HEAP32[$632 + 8 >> 2];
    HEAP32[$629 + 12 >> 2] = HEAP32[$632 + 12 >> 2];
    HEAP32[$629 + 16 >> 2] = HEAP32[$632 + 16 >> 2];
    HEAP32[$629 + 20 >> 2] = HEAP32[$632 + 20 >> 2];
    HEAP32[$629 + 24 >> 2] = HEAP32[$632 + 24 >> 2];
    HEAP32[$629 + 28 >> 2] = HEAP32[$632 + 28 >> 2];
    HEAP32[$629 + 32 >> 2] = HEAP32[$632 + 32 >> 2];
    HEAP32[$629 + 36 >> 2] = HEAP32[$632 + 36 >> 2];
    $i_01_i10_i = -2;
    $633 = $630;
    while (1) {
     $635 = $i_01_i10_i + 1 | 0;
     $637 = $633 + ($i_01_i10_i * 40 | 0) | 0;
     $638 = $633 + ($635 * 40 | 0) | 0;
     HEAP32[$637 >> 2] = HEAP32[$638 >> 2];
     HEAP32[$637 + 4 >> 2] = HEAP32[$638 + 4 >> 2];
     HEAP32[$637 + 8 >> 2] = HEAP32[$638 + 8 >> 2];
     HEAP32[$637 + 12 >> 2] = HEAP32[$638 + 12 >> 2];
     HEAP32[$637 + 16 >> 2] = HEAP32[$638 + 16 >> 2];
     HEAP32[$637 + 20 >> 2] = HEAP32[$638 + 20 >> 2];
     HEAP32[$637 + 24 >> 2] = HEAP32[$638 + 24 >> 2];
     HEAP32[$637 + 28 >> 2] = HEAP32[$638 + 28 >> 2];
     HEAP32[$637 + 32 >> 2] = HEAP32[$638 + 32 >> 2];
     HEAP32[$637 + 36 >> 2] = HEAP32[$638 + 36 >> 2];
     $640 = HEAP32[5024] | 0;
     if (($635 | 0) == 0) {
      break;
     } else {
      $i_01_i10_i = $635;
      $633 = $640;
     }
    }
    $641 = $640;
    HEAP32[$641 >> 2] = HEAP32[$629 >> 2];
    HEAP32[$641 + 4 >> 2] = HEAP32[$629 + 4 >> 2];
    HEAP32[$641 + 8 >> 2] = HEAP32[$629 + 8 >> 2];
    HEAP32[$641 + 12 >> 2] = HEAP32[$629 + 12 >> 2];
    HEAP32[$641 + 16 >> 2] = HEAP32[$629 + 16 >> 2];
    HEAP32[$641 + 20 >> 2] = HEAP32[$629 + 20 >> 2];
    HEAP32[$641 + 24 >> 2] = HEAP32[$629 + 24 >> 2];
    HEAP32[$641 + 28 >> 2] = HEAP32[$629 + 28 >> 2];
    HEAP32[$641 + 32 >> 2] = HEAP32[$629 + 32 >> 2];
    HEAP32[$641 + 36 >> 2] = HEAP32[$629 + 36 >> 2];
    $642 = HEAP32[5024] | 0;
    $645 = HEAP32[$642 + 16 >> 2] | 0;
    $648 = HEAPU16[$642 + 8 >> 1] | 0;
    do {
     if (($648 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
      if (($648 & 62 | 0) != 52) {
       break;
      }
      _gsym($645);
     } else {
      _o(55517);
     }
    } while (0);
    $658 = HEAP32[5024] | 0;
    $659 = $658 - 40 | 0;
    HEAP32[5024] = $659;
    $660 = ($_0 | 0) != 1;
    if ($660) {
     $662 = $tmp_i62_i;
     do {
      if ($659 >>> 0 < 56272 >>> 0) {
       $674 = $659;
      } else {
       $667 = HEAPU16[$658 - 40 + 8 >> 1] | 0;
       if (!(($667 & 63 | 0) == 51 | ($667 & 62 | 0) == 52)) {
        $674 = $659;
        break;
       }
       _gv(1) | 0;
       $674 = HEAP32[5024] | 0;
      }
     } while (0);
     $675 = $674;
     HEAP32[$662 >> 2] = HEAP32[$675 >> 2];
     HEAP32[$662 + 4 >> 2] = HEAP32[$675 + 4 >> 2];
     HEAP32[$662 + 8 >> 2] = HEAP32[$675 + 8 >> 2];
     HEAP32[$662 + 12 >> 2] = HEAP32[$675 + 12 >> 2];
     HEAP32[$662 + 16 >> 2] = HEAP32[$675 + 16 >> 2];
     HEAP32[$662 + 20 >> 2] = HEAP32[$675 + 20 >> 2];
     HEAP32[$662 + 24 >> 2] = HEAP32[$675 + 24 >> 2];
     HEAP32[$662 + 28 >> 2] = HEAP32[$675 + 28 >> 2];
     HEAP32[$662 + 32 >> 2] = HEAP32[$675 + 32 >> 2];
     HEAP32[$662 + 36 >> 2] = HEAP32[$675 + 36 >> 2];
     $677 = $674 - 40 | 0;
     HEAP32[$675 >> 2] = HEAP32[$677 >> 2];
     HEAP32[$675 + 4 >> 2] = HEAP32[$677 + 4 >> 2];
     HEAP32[$675 + 8 >> 2] = HEAP32[$677 + 8 >> 2];
     HEAP32[$675 + 12 >> 2] = HEAP32[$677 + 12 >> 2];
     HEAP32[$675 + 16 >> 2] = HEAP32[$677 + 16 >> 2];
     HEAP32[$675 + 20 >> 2] = HEAP32[$677 + 20 >> 2];
     HEAP32[$675 + 24 >> 2] = HEAP32[$677 + 24 >> 2];
     HEAP32[$675 + 28 >> 2] = HEAP32[$677 + 28 >> 2];
     HEAP32[$675 + 32 >> 2] = HEAP32[$677 + 32 >> 2];
     HEAP32[$675 + 36 >> 2] = HEAP32[$677 + 36 >> 2];
     $680 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[$680 >> 2] = HEAP32[$662 >> 2];
     HEAP32[$680 + 4 >> 2] = HEAP32[$662 + 4 >> 2];
     HEAP32[$680 + 8 >> 2] = HEAP32[$662 + 8 >> 2];
     HEAP32[$680 + 12 >> 2] = HEAP32[$662 + 12 >> 2];
     HEAP32[$680 + 16 >> 2] = HEAP32[$662 + 16 >> 2];
     HEAP32[$680 + 20 >> 2] = HEAP32[$662 + 20 >> 2];
     HEAP32[$680 + 24 >> 2] = HEAP32[$662 + 24 >> 2];
     HEAP32[$680 + 28 >> 2] = HEAP32[$662 + 28 >> 2];
     HEAP32[$680 + 32 >> 2] = HEAP32[$662 + 32 >> 2];
     HEAP32[$680 + 36 >> 2] = HEAP32[$662 + 36 >> 2];
    }
    if (($645 | 0) > 31) {
     $684 = HEAP32[5024] | 0;
     $687 = HEAPU16[$684 + 8 >> 1] | 0;
     do {
      if (($687 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
       if (($687 & 62 | 0) != 52) {
        break;
       }
       _gsym(HEAP32[$684 + 16 >> 2] | 0);
      } else {
       _o(55517);
      }
     } while (0);
     $701 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[5024] = $701;
     if (($645 | 0) > 32) {
      $704 = $645 - 32 | 0;
      $705 = $cval_i65_i_sroa_4 | 0;
      if ($701 >>> 0 < 66472 >>> 0) {
       $709 = $701;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $709 = HEAP32[5024] | 0;
      }
      do {
       if ($709 >>> 0 < 56272 >>> 0) {
        $721 = $709;
       } else {
        $714 = HEAPU16[$709 + 8 >> 1] | 0;
        if (!(($714 & 63 | 0) == 51 | ($714 & 62 | 0) == 52)) {
         $721 = $709;
         break;
        }
        _gv(1) | 0;
        $721 = HEAP32[5024] | 0;
       }
      } while (0);
      $722 = $721 + 40 | 0;
      HEAP32[5024] = $722;
      $723 = $722;
      $$etemp$71 = 21728;
      $724$1 = HEAP32[$$etemp$71 + 4 >> 2] | 0;
      HEAP32[$723 >> 2] = HEAP32[$$etemp$71 >> 2];
      HEAP32[$723 + 4 >> 2] = $724$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $729 = HEAP32[5024] | 0;
      HEAP32[$729 + 16 >> 2] = $704;
      $733 = $729 + 20 | 0;
      HEAP32[$733 >> 2] = HEAP32[$705 >> 2];
      HEAP32[$733 + 4 >> 2] = HEAP32[$705 + 4 >> 2];
      HEAP32[$733 + 8 >> 2] = HEAP32[$705 + 8 >> 2];
      _gen_op($_0);
     }
     if (($_0 | 0) == 2) {
      _gv_dup();
      $768 = $cval_i67_i_sroa_4 | 0;
      $769 = HEAP32[5024] | 0;
      if ($769 >>> 0 < 66472 >>> 0) {
       $773 = $769;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $773 = HEAP32[5024] | 0;
      }
      do {
       if ($773 >>> 0 < 56272 >>> 0) {
        $785 = $773;
       } else {
        $778 = HEAPU16[$773 + 8 >> 1] | 0;
        if (!(($778 & 63 | 0) == 51 | ($778 & 62 | 0) == 52)) {
         $785 = $773;
         break;
        }
        _gv(1) | 0;
        $785 = HEAP32[5024] | 0;
       }
      } while (0);
      $786 = $785 + 40 | 0;
      HEAP32[5024] = $786;
      $787 = $786;
      $$etemp$85 = 21728;
      $788$1 = HEAP32[$$etemp$85 + 4 >> 2] | 0;
      HEAP32[$787 >> 2] = HEAP32[$$etemp$85 >> 2];
      HEAP32[$787 + 4 >> 2] = $788$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $793 = HEAP32[5024] | 0;
      HEAP32[$793 + 16 >> 2] = 31;
      $797 = $793 + 20 | 0;
      HEAP32[$797 >> 2] = HEAP32[$768 >> 2];
      HEAP32[$797 + 4 >> 2] = HEAP32[$768 + 4 >> 2];
      HEAP32[$797 + 8 >> 2] = HEAP32[$768 + 8 >> 2];
      _gen_op(2);
     } else {
      $737 = $cval_i66_i_sroa_4 | 0;
      $738 = HEAP32[5024] | 0;
      if ($738 >>> 0 < 66472 >>> 0) {
       $742 = $738;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $742 = HEAP32[5024] | 0;
      }
      do {
       if ($742 >>> 0 < 56272 >>> 0) {
        $754 = $742;
       } else {
        $747 = HEAPU16[$742 + 8 >> 1] | 0;
        if (!(($747 & 63 | 0) == 51 | ($747 & 62 | 0) == 52)) {
         $754 = $742;
         break;
        }
        _gv(1) | 0;
        $754 = HEAP32[5024] | 0;
       }
      } while (0);
      $755 = $754 + 40 | 0;
      HEAP32[5024] = $755;
      $756 = $755;
      $$etemp$78 = 21728;
      $757$1 = HEAP32[$$etemp$78 + 4 >> 2] | 0;
      HEAP32[$756 >> 2] = HEAP32[$$etemp$78 >> 2];
      HEAP32[$756 + 4 >> 2] = $757$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $762 = HEAP32[5024] | 0;
      HEAP32[$762 + 16 >> 2] = 0;
      $766 = $762 + 20 | 0;
      HEAP32[$766 >> 2] = HEAP32[$737 >> 2];
      HEAP32[$766 + 4 >> 2] = HEAP32[$737 + 4 >> 2];
      HEAP32[$766 + 8 >> 2] = HEAP32[$737 + 8 >> 2];
     }
     $799 = $tmp_i68_i;
     $800 = HEAP32[5024] | 0;
     do {
      if ($800 >>> 0 < 56272 >>> 0) {
       $812 = $800;
      } else {
       $805 = HEAPU16[$800 + 8 >> 1] | 0;
       if (!(($805 & 63 | 0) == 51 | ($805 & 62 | 0) == 52)) {
        $812 = $800;
        break;
       }
       _gv(1) | 0;
       $812 = HEAP32[5024] | 0;
      }
     } while (0);
     $813 = $812;
     HEAP32[$799 >> 2] = HEAP32[$813 >> 2];
     HEAP32[$799 + 4 >> 2] = HEAP32[$813 + 4 >> 2];
     HEAP32[$799 + 8 >> 2] = HEAP32[$813 + 8 >> 2];
     HEAP32[$799 + 12 >> 2] = HEAP32[$813 + 12 >> 2];
     HEAP32[$799 + 16 >> 2] = HEAP32[$813 + 16 >> 2];
     HEAP32[$799 + 20 >> 2] = HEAP32[$813 + 20 >> 2];
     HEAP32[$799 + 24 >> 2] = HEAP32[$813 + 24 >> 2];
     HEAP32[$799 + 28 >> 2] = HEAP32[$813 + 28 >> 2];
     HEAP32[$799 + 32 >> 2] = HEAP32[$813 + 32 >> 2];
     HEAP32[$799 + 36 >> 2] = HEAP32[$813 + 36 >> 2];
     $815 = $812 - 40 | 0;
     HEAP32[$813 >> 2] = HEAP32[$815 >> 2];
     HEAP32[$813 + 4 >> 2] = HEAP32[$815 + 4 >> 2];
     HEAP32[$813 + 8 >> 2] = HEAP32[$815 + 8 >> 2];
     HEAP32[$813 + 12 >> 2] = HEAP32[$815 + 12 >> 2];
     HEAP32[$813 + 16 >> 2] = HEAP32[$815 + 16 >> 2];
     HEAP32[$813 + 20 >> 2] = HEAP32[$815 + 20 >> 2];
     HEAP32[$813 + 24 >> 2] = HEAP32[$815 + 24 >> 2];
     HEAP32[$813 + 28 >> 2] = HEAP32[$815 + 28 >> 2];
     HEAP32[$813 + 32 >> 2] = HEAP32[$815 + 32 >> 2];
     HEAP32[$813 + 36 >> 2] = HEAP32[$815 + 36 >> 2];
     $818 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[$818 >> 2] = HEAP32[$799 >> 2];
     HEAP32[$818 + 4 >> 2] = HEAP32[$799 + 4 >> 2];
     HEAP32[$818 + 8 >> 2] = HEAP32[$799 + 8 >> 2];
     HEAP32[$818 + 12 >> 2] = HEAP32[$799 + 12 >> 2];
     HEAP32[$818 + 16 >> 2] = HEAP32[$799 + 16 >> 2];
     HEAP32[$818 + 20 >> 2] = HEAP32[$799 + 20 >> 2];
     HEAP32[$818 + 24 >> 2] = HEAP32[$799 + 24 >> 2];
     HEAP32[$818 + 28 >> 2] = HEAP32[$799 + 28 >> 2];
     HEAP32[$818 + 32 >> 2] = HEAP32[$799 + 32 >> 2];
     HEAP32[$818 + 36 >> 2] = HEAP32[$799 + 36 >> 2];
    } else {
     $820 = $tmp_i71_i;
     $821 = HEAP32[5024] | 0;
     do {
      if ($821 >>> 0 < 56272 >>> 0) {
       $833 = $821;
      } else {
       $826 = HEAPU16[$821 + 8 >> 1] | 0;
       if (!(($826 & 63 | 0) == 51 | ($826 & 62 | 0) == 52)) {
        $833 = $821;
        break;
       }
       _gv(1) | 0;
       $833 = HEAP32[5024] | 0;
      }
     } while (0);
     $834 = $833;
     HEAP32[$820 >> 2] = HEAP32[$834 >> 2];
     HEAP32[$820 + 4 >> 2] = HEAP32[$834 + 4 >> 2];
     HEAP32[$820 + 8 >> 2] = HEAP32[$834 + 8 >> 2];
     HEAP32[$820 + 12 >> 2] = HEAP32[$834 + 12 >> 2];
     HEAP32[$820 + 16 >> 2] = HEAP32[$834 + 16 >> 2];
     HEAP32[$820 + 20 >> 2] = HEAP32[$834 + 20 >> 2];
     HEAP32[$820 + 24 >> 2] = HEAP32[$834 + 24 >> 2];
     HEAP32[$820 + 28 >> 2] = HEAP32[$834 + 28 >> 2];
     HEAP32[$820 + 32 >> 2] = HEAP32[$834 + 32 >> 2];
     HEAP32[$820 + 36 >> 2] = HEAP32[$834 + 36 >> 2];
     $836 = $833 - 40 | 0;
     HEAP32[$834 >> 2] = HEAP32[$836 >> 2];
     HEAP32[$834 + 4 >> 2] = HEAP32[$836 + 4 >> 2];
     HEAP32[$834 + 8 >> 2] = HEAP32[$836 + 8 >> 2];
     HEAP32[$834 + 12 >> 2] = HEAP32[$836 + 12 >> 2];
     HEAP32[$834 + 16 >> 2] = HEAP32[$836 + 16 >> 2];
     HEAP32[$834 + 20 >> 2] = HEAP32[$836 + 20 >> 2];
     HEAP32[$834 + 24 >> 2] = HEAP32[$836 + 24 >> 2];
     HEAP32[$834 + 28 >> 2] = HEAP32[$836 + 28 >> 2];
     HEAP32[$834 + 32 >> 2] = HEAP32[$836 + 32 >> 2];
     HEAP32[$834 + 36 >> 2] = HEAP32[$836 + 36 >> 2];
     $839 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[$839 >> 2] = HEAP32[$820 >> 2];
     HEAP32[$839 + 4 >> 2] = HEAP32[$820 + 4 >> 2];
     HEAP32[$839 + 8 >> 2] = HEAP32[$820 + 8 >> 2];
     HEAP32[$839 + 12 >> 2] = HEAP32[$820 + 12 >> 2];
     HEAP32[$839 + 16 >> 2] = HEAP32[$820 + 16 >> 2];
     HEAP32[$839 + 20 >> 2] = HEAP32[$820 + 20 >> 2];
     HEAP32[$839 + 24 >> 2] = HEAP32[$820 + 24 >> 2];
     HEAP32[$839 + 28 >> 2] = HEAP32[$820 + 28 >> 2];
     HEAP32[$839 + 32 >> 2] = HEAP32[$820 + 32 >> 2];
     HEAP32[$839 + 36 >> 2] = HEAP32[$820 + 36 >> 2];
     _gv_dup();
     $840 = $cval_i74_i_sroa_4 | 0;
     $841 = HEAP32[5024] | 0;
     if ($841 >>> 0 < 66472 >>> 0) {
      $845 = $841;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $845 = HEAP32[5024] | 0;
     }
     do {
      if ($845 >>> 0 < 56272 >>> 0) {
       $857 = $845;
      } else {
       $850 = HEAPU16[$845 + 8 >> 1] | 0;
       if (!(($850 & 63 | 0) == 51 | ($850 & 62 | 0) == 52)) {
        $857 = $845;
        break;
       }
       _gv(1) | 0;
       $857 = HEAP32[5024] | 0;
      }
     } while (0);
     $858 = $857 + 40 | 0;
     HEAP32[5024] = $858;
     $859 = $858;
     $$etemp$96 = 21728;
     $860$1 = HEAP32[$$etemp$96 + 4 >> 2] | 0;
     HEAP32[$859 >> 2] = HEAP32[$$etemp$96 >> 2];
     HEAP32[$859 + 4 >> 2] = $860$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $865 = HEAP32[5024] | 0;
     HEAP32[$865 + 16 >> 2] = $645;
     $869 = $865 + 20 | 0;
     HEAP32[$869 >> 2] = HEAP32[$840 >> 2];
     HEAP32[$869 + 4 >> 2] = HEAP32[$840 + 4 >> 2];
     HEAP32[$869 + 8 >> 2] = HEAP32[$840 + 8 >> 2];
     _gen_op($_0);
     $870 = $tmp_i75_i;
     $871 = HEAP32[5024] | 0;
     do {
      if ($871 >>> 0 < 56272 >>> 0) {
       $883 = $871;
      } else {
       $876 = HEAPU16[$871 + 8 >> 1] | 0;
       if (!(($876 & 63 | 0) == 51 | ($876 & 62 | 0) == 52)) {
        $883 = $871;
        break;
       }
       _gv(1) | 0;
       $883 = HEAP32[5024] | 0;
      }
     } while (0);
     $884 = $883;
     HEAP32[$870 >> 2] = HEAP32[$884 >> 2];
     HEAP32[$870 + 4 >> 2] = HEAP32[$884 + 4 >> 2];
     HEAP32[$870 + 8 >> 2] = HEAP32[$884 + 8 >> 2];
     HEAP32[$870 + 12 >> 2] = HEAP32[$884 + 12 >> 2];
     HEAP32[$870 + 16 >> 2] = HEAP32[$884 + 16 >> 2];
     HEAP32[$870 + 20 >> 2] = HEAP32[$884 + 20 >> 2];
     HEAP32[$870 + 24 >> 2] = HEAP32[$884 + 24 >> 2];
     HEAP32[$870 + 28 >> 2] = HEAP32[$884 + 28 >> 2];
     HEAP32[$870 + 32 >> 2] = HEAP32[$884 + 32 >> 2];
     HEAP32[$870 + 36 >> 2] = HEAP32[$884 + 36 >> 2];
     $886 = $883 - 40 | 0;
     HEAP32[$884 >> 2] = HEAP32[$886 >> 2];
     HEAP32[$884 + 4 >> 2] = HEAP32[$886 + 4 >> 2];
     HEAP32[$884 + 8 >> 2] = HEAP32[$886 + 8 >> 2];
     HEAP32[$884 + 12 >> 2] = HEAP32[$886 + 12 >> 2];
     HEAP32[$884 + 16 >> 2] = HEAP32[$886 + 16 >> 2];
     HEAP32[$884 + 20 >> 2] = HEAP32[$886 + 20 >> 2];
     HEAP32[$884 + 24 >> 2] = HEAP32[$886 + 24 >> 2];
     HEAP32[$884 + 28 >> 2] = HEAP32[$886 + 28 >> 2];
     HEAP32[$884 + 32 >> 2] = HEAP32[$886 + 32 >> 2];
     HEAP32[$884 + 36 >> 2] = HEAP32[$886 + 36 >> 2];
     $889 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[$889 >> 2] = HEAP32[$870 >> 2];
     HEAP32[$889 + 4 >> 2] = HEAP32[$870 + 4 >> 2];
     HEAP32[$889 + 8 >> 2] = HEAP32[$870 + 8 >> 2];
     HEAP32[$889 + 12 >> 2] = HEAP32[$870 + 12 >> 2];
     HEAP32[$889 + 16 >> 2] = HEAP32[$870 + 16 >> 2];
     HEAP32[$889 + 20 >> 2] = HEAP32[$870 + 20 >> 2];
     HEAP32[$889 + 24 >> 2] = HEAP32[$870 + 24 >> 2];
     HEAP32[$889 + 28 >> 2] = HEAP32[$870 + 28 >> 2];
     HEAP32[$889 + 32 >> 2] = HEAP32[$870 + 32 >> 2];
     HEAP32[$889 + 36 >> 2] = HEAP32[$870 + 36 >> 2];
     $890 = 32 - $645 | 0;
     $891 = $cval_i78_i_sroa_4 | 0;
     $892 = HEAP32[5024] | 0;
     if ($892 >>> 0 < 66472 >>> 0) {
      $896 = $892;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $896 = HEAP32[5024] | 0;
     }
     do {
      if ($896 >>> 0 < 56272 >>> 0) {
       $908 = $896;
      } else {
       $901 = HEAPU16[$896 + 8 >> 1] | 0;
       if (!(($901 & 63 | 0) == 51 | ($901 & 62 | 0) == 52)) {
        $908 = $896;
        break;
       }
       _gv(1) | 0;
       $908 = HEAP32[5024] | 0;
      }
     } while (0);
     $909 = $908 + 40 | 0;
     HEAP32[5024] = $909;
     $910 = $909;
     $$etemp$105 = 21728;
     $911$1 = HEAP32[$$etemp$105 + 4 >> 2] | 0;
     HEAP32[$910 >> 2] = HEAP32[$$etemp$105 >> 2];
     HEAP32[$910 + 4 >> 2] = $911$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $916 = HEAP32[5024] | 0;
     HEAP32[$916 + 16 >> 2] = $890;
     $920 = $916 + 20 | 0;
     HEAP32[$920 >> 2] = HEAP32[$891 >> 2];
     HEAP32[$920 + 4 >> 2] = HEAP32[$891 + 4 >> 2];
     HEAP32[$920 + 8 >> 2] = HEAP32[$891 + 8 >> 2];
     $921 = ($_0 | 0) == 1;
     if ($921) {
      _gen_op(205);
     } else {
      _gen_op(1);
     }
     $925 = $tmp_i3_i;
     $926 = HEAP32[5024] | 0;
     $928 = $926 - 80 | 0;
     HEAP32[$925 >> 2] = HEAP32[$928 >> 2];
     HEAP32[$925 + 4 >> 2] = HEAP32[$928 + 4 >> 2];
     HEAP32[$925 + 8 >> 2] = HEAP32[$928 + 8 >> 2];
     HEAP32[$925 + 12 >> 2] = HEAP32[$928 + 12 >> 2];
     HEAP32[$925 + 16 >> 2] = HEAP32[$928 + 16 >> 2];
     HEAP32[$925 + 20 >> 2] = HEAP32[$928 + 20 >> 2];
     HEAP32[$925 + 24 >> 2] = HEAP32[$928 + 24 >> 2];
     HEAP32[$925 + 28 >> 2] = HEAP32[$928 + 28 >> 2];
     HEAP32[$925 + 32 >> 2] = HEAP32[$928 + 32 >> 2];
     HEAP32[$925 + 36 >> 2] = HEAP32[$928 + 36 >> 2];
     $i_01_i4_i = -2;
     $929 = $926;
     while (1) {
      $931 = $i_01_i4_i + 1 | 0;
      $933 = $929 + ($i_01_i4_i * 40 | 0) | 0;
      $934 = $929 + ($931 * 40 | 0) | 0;
      HEAP32[$933 >> 2] = HEAP32[$934 >> 2];
      HEAP32[$933 + 4 >> 2] = HEAP32[$934 + 4 >> 2];
      HEAP32[$933 + 8 >> 2] = HEAP32[$934 + 8 >> 2];
      HEAP32[$933 + 12 >> 2] = HEAP32[$934 + 12 >> 2];
      HEAP32[$933 + 16 >> 2] = HEAP32[$934 + 16 >> 2];
      HEAP32[$933 + 20 >> 2] = HEAP32[$934 + 20 >> 2];
      HEAP32[$933 + 24 >> 2] = HEAP32[$934 + 24 >> 2];
      HEAP32[$933 + 28 >> 2] = HEAP32[$934 + 28 >> 2];
      HEAP32[$933 + 32 >> 2] = HEAP32[$934 + 32 >> 2];
      HEAP32[$933 + 36 >> 2] = HEAP32[$934 + 36 >> 2];
      $936 = HEAP32[5024] | 0;
      if (($931 | 0) == 0) {
       break;
      } else {
       $i_01_i4_i = $931;
       $929 = $936;
      }
     }
     $937 = $936;
     HEAP32[$937 >> 2] = HEAP32[$925 >> 2];
     HEAP32[$937 + 4 >> 2] = HEAP32[$925 + 4 >> 2];
     HEAP32[$937 + 8 >> 2] = HEAP32[$925 + 8 >> 2];
     HEAP32[$937 + 12 >> 2] = HEAP32[$925 + 12 >> 2];
     HEAP32[$937 + 16 >> 2] = HEAP32[$925 + 16 >> 2];
     HEAP32[$937 + 20 >> 2] = HEAP32[$925 + 20 >> 2];
     HEAP32[$937 + 24 >> 2] = HEAP32[$925 + 24 >> 2];
     HEAP32[$937 + 28 >> 2] = HEAP32[$925 + 28 >> 2];
     HEAP32[$937 + 32 >> 2] = HEAP32[$925 + 32 >> 2];
     HEAP32[$937 + 36 >> 2] = HEAP32[$925 + 36 >> 2];
     $938 = $cval_i79_i_sroa_4 | 0;
     $939 = HEAP32[5024] | 0;
     if ($939 >>> 0 < 66472 >>> 0) {
      $943 = $939;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $943 = HEAP32[5024] | 0;
     }
     do {
      if ($943 >>> 0 < 56272 >>> 0) {
       $955 = $943;
      } else {
       $948 = HEAPU16[$943 + 8 >> 1] | 0;
       if (!(($948 & 63 | 0) == 51 | ($948 & 62 | 0) == 52)) {
        $955 = $943;
        break;
       }
       _gv(1) | 0;
       $955 = HEAP32[5024] | 0;
      }
     } while (0);
     $956 = $955 + 40 | 0;
     HEAP32[5024] = $956;
     $957 = $956;
     $$etemp$114 = 21728;
     $958$1 = HEAP32[$$etemp$114 + 4 >> 2] | 0;
     HEAP32[$957 >> 2] = HEAP32[$$etemp$114 >> 2];
     HEAP32[$957 + 4 >> 2] = $958$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $963 = HEAP32[5024] | 0;
     HEAP32[$963 + 16 >> 2] = $645;
     $967 = $963 + 20 | 0;
     HEAP32[$967 >> 2] = HEAP32[$938 >> 2];
     HEAP32[$967 + 4 >> 2] = HEAP32[$938 + 4 >> 2];
     HEAP32[$967 + 8 >> 2] = HEAP32[$938 + 8 >> 2];
     if ($921) {
      _gen_op(1);
     } else {
      _gen_op(205);
     }
     _gen_op(124);
    }
    if ($660) {
     $973 = $tmp_i80_i;
     $974 = HEAP32[5024] | 0;
     do {
      if ($974 >>> 0 < 56272 >>> 0) {
       $986 = $974;
      } else {
       $979 = HEAPU16[$974 + 8 >> 1] | 0;
       if (!(($979 & 63 | 0) == 51 | ($979 & 62 | 0) == 52)) {
        $986 = $974;
        break;
       }
       _gv(1) | 0;
       $986 = HEAP32[5024] | 0;
      }
     } while (0);
     $987 = $986;
     HEAP32[$973 >> 2] = HEAP32[$987 >> 2];
     HEAP32[$973 + 4 >> 2] = HEAP32[$987 + 4 >> 2];
     HEAP32[$973 + 8 >> 2] = HEAP32[$987 + 8 >> 2];
     HEAP32[$973 + 12 >> 2] = HEAP32[$987 + 12 >> 2];
     HEAP32[$973 + 16 >> 2] = HEAP32[$987 + 16 >> 2];
     HEAP32[$973 + 20 >> 2] = HEAP32[$987 + 20 >> 2];
     HEAP32[$973 + 24 >> 2] = HEAP32[$987 + 24 >> 2];
     HEAP32[$973 + 28 >> 2] = HEAP32[$987 + 28 >> 2];
     HEAP32[$973 + 32 >> 2] = HEAP32[$987 + 32 >> 2];
     HEAP32[$973 + 36 >> 2] = HEAP32[$987 + 36 >> 2];
     $989 = $986 - 40 | 0;
     HEAP32[$987 >> 2] = HEAP32[$989 >> 2];
     HEAP32[$987 + 4 >> 2] = HEAP32[$989 + 4 >> 2];
     HEAP32[$987 + 8 >> 2] = HEAP32[$989 + 8 >> 2];
     HEAP32[$987 + 12 >> 2] = HEAP32[$989 + 12 >> 2];
     HEAP32[$987 + 16 >> 2] = HEAP32[$989 + 16 >> 2];
     HEAP32[$987 + 20 >> 2] = HEAP32[$989 + 20 >> 2];
     HEAP32[$987 + 24 >> 2] = HEAP32[$989 + 24 >> 2];
     HEAP32[$987 + 28 >> 2] = HEAP32[$989 + 28 >> 2];
     HEAP32[$987 + 32 >> 2] = HEAP32[$989 + 32 >> 2];
     HEAP32[$987 + 36 >> 2] = HEAP32[$989 + 36 >> 2];
     $992 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[$992 >> 2] = HEAP32[$973 >> 2];
     HEAP32[$992 + 4 >> 2] = HEAP32[$973 + 4 >> 2];
     HEAP32[$992 + 8 >> 2] = HEAP32[$973 + 8 >> 2];
     HEAP32[$992 + 12 >> 2] = HEAP32[$973 + 12 >> 2];
     HEAP32[$992 + 16 >> 2] = HEAP32[$973 + 16 >> 2];
     HEAP32[$992 + 20 >> 2] = HEAP32[$973 + 20 >> 2];
     HEAP32[$992 + 24 >> 2] = HEAP32[$973 + 24 >> 2];
     HEAP32[$992 + 28 >> 2] = HEAP32[$973 + 28 >> 2];
     HEAP32[$992 + 32 >> 2] = HEAP32[$973 + 32 >> 2];
     HEAP32[$992 + 36 >> 2] = HEAP32[$973 + 36 >> 2];
    }
    _gv2(1, 1);
    $994 = HEAP32[5024] | 0;
    HEAP16[$994 - 40 + 10 >> 1] = HEAP16[$994 + 8 >> 1] | 0;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $587;
    $1000 = HEAP32[5024] | 0;
    $1003 = HEAPU16[$1000 + 8 >> 1] | 0;
    do {
     if (($1003 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
      if (($1003 & 62 | 0) != 52) {
       break;
      }
      _gsym(HEAP32[$1000 + 16 >> 2] | 0);
     } else {
      _o(55517);
     }
    } while (0);
    HEAP32[5024] = (HEAP32[5024] | 0) - 40;
    STACKTOP = sp;
    return;
   }
  default:
   {
    $1022 = $tmp_i85_i;
    $1023 = HEAP32[5024] | 0;
    do {
     if ($1023 >>> 0 < 56272 >>> 0) {
      $1035 = $1023;
     } else {
      $1028 = HEAPU16[$1023 + 8 >> 1] | 0;
      if (!(($1028 & 63 | 0) == 51 | ($1028 & 62 | 0) == 52)) {
       $1035 = $1023;
       break;
      }
      _gv(1) | 0;
      $1035 = HEAP32[5024] | 0;
     }
    } while (0);
    $1036 = $1035;
    HEAP32[$1022 >> 2] = HEAP32[$1036 >> 2];
    HEAP32[$1022 + 4 >> 2] = HEAP32[$1036 + 4 >> 2];
    HEAP32[$1022 + 8 >> 2] = HEAP32[$1036 + 8 >> 2];
    HEAP32[$1022 + 12 >> 2] = HEAP32[$1036 + 12 >> 2];
    HEAP32[$1022 + 16 >> 2] = HEAP32[$1036 + 16 >> 2];
    HEAP32[$1022 + 20 >> 2] = HEAP32[$1036 + 20 >> 2];
    HEAP32[$1022 + 24 >> 2] = HEAP32[$1036 + 24 >> 2];
    HEAP32[$1022 + 28 >> 2] = HEAP32[$1036 + 28 >> 2];
    HEAP32[$1022 + 32 >> 2] = HEAP32[$1036 + 32 >> 2];
    HEAP32[$1022 + 36 >> 2] = HEAP32[$1036 + 36 >> 2];
    $1038 = $1035 - 40 | 0;
    HEAP32[$1036 >> 2] = HEAP32[$1038 >> 2];
    HEAP32[$1036 + 4 >> 2] = HEAP32[$1038 + 4 >> 2];
    HEAP32[$1036 + 8 >> 2] = HEAP32[$1038 + 8 >> 2];
    HEAP32[$1036 + 12 >> 2] = HEAP32[$1038 + 12 >> 2];
    HEAP32[$1036 + 16 >> 2] = HEAP32[$1038 + 16 >> 2];
    HEAP32[$1036 + 20 >> 2] = HEAP32[$1038 + 20 >> 2];
    HEAP32[$1036 + 24 >> 2] = HEAP32[$1038 + 24 >> 2];
    HEAP32[$1036 + 28 >> 2] = HEAP32[$1038 + 28 >> 2];
    HEAP32[$1036 + 32 >> 2] = HEAP32[$1038 + 32 >> 2];
    HEAP32[$1036 + 36 >> 2] = HEAP32[$1038 + 36 >> 2];
    $1041 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$1041 >> 2] = HEAP32[$1022 >> 2];
    HEAP32[$1041 + 4 >> 2] = HEAP32[$1022 + 4 >> 2];
    HEAP32[$1041 + 8 >> 2] = HEAP32[$1022 + 8 >> 2];
    HEAP32[$1041 + 12 >> 2] = HEAP32[$1022 + 12 >> 2];
    HEAP32[$1041 + 16 >> 2] = HEAP32[$1022 + 16 >> 2];
    HEAP32[$1041 + 20 >> 2] = HEAP32[$1022 + 20 >> 2];
    HEAP32[$1041 + 24 >> 2] = HEAP32[$1022 + 24 >> 2];
    HEAP32[$1041 + 28 >> 2] = HEAP32[$1022 + 28 >> 2];
    HEAP32[$1041 + 32 >> 2] = HEAP32[$1022 + 32 >> 2];
    HEAP32[$1041 + 36 >> 2] = HEAP32[$1022 + 36 >> 2];
    $1045 = HEAP32[HEAP32[5024] >> 2] & 16;
    _gv(1) | 0;
    $1047 = HEAP32[5024] | 0;
    if ($1047 >>> 0 < 66472 >>> 0) {
     $1050 = $1047;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $1050 = HEAP32[5024] | 0;
    }
    $1051 = $1050 + 40 | 0;
    HEAP32[5024] = $1051;
    $1052 = $1051;
    $1053 = $1047;
    HEAP32[$1052 >> 2] = HEAP32[$1053 >> 2];
    HEAP32[$1052 + 4 >> 2] = HEAP32[$1053 + 4 >> 2];
    HEAP32[$1052 + 8 >> 2] = HEAP32[$1053 + 8 >> 2];
    HEAP32[$1052 + 12 >> 2] = HEAP32[$1053 + 12 >> 2];
    HEAP32[$1052 + 16 >> 2] = HEAP32[$1053 + 16 >> 2];
    HEAP32[$1052 + 20 >> 2] = HEAP32[$1053 + 20 >> 2];
    HEAP32[$1052 + 24 >> 2] = HEAP32[$1053 + 24 >> 2];
    HEAP32[$1052 + 28 >> 2] = HEAP32[$1053 + 28 >> 2];
    HEAP32[$1052 + 32 >> 2] = HEAP32[$1053 + 32 >> 2];
    HEAP32[$1052 + 36 >> 2] = HEAP32[$1053 + 36 >> 2];
    $1054 = HEAP32[5024] | 0;
    HEAP16[$1054 + 8 >> 1] = HEAP16[$1054 - 40 + 10 >> 1] | 0;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
    HEAP32[HEAP32[5024] >> 2] = $1045;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $1045;
    $1066 = $tmp_i_i;
    $1067 = HEAP32[5024] | 0;
    $1069 = $1067 - 80 | 0;
    HEAP32[$1066 >> 2] = HEAP32[$1069 >> 2];
    HEAP32[$1066 + 4 >> 2] = HEAP32[$1069 + 4 >> 2];
    HEAP32[$1066 + 8 >> 2] = HEAP32[$1069 + 8 >> 2];
    HEAP32[$1066 + 12 >> 2] = HEAP32[$1069 + 12 >> 2];
    HEAP32[$1066 + 16 >> 2] = HEAP32[$1069 + 16 >> 2];
    HEAP32[$1066 + 20 >> 2] = HEAP32[$1069 + 20 >> 2];
    HEAP32[$1066 + 24 >> 2] = HEAP32[$1069 + 24 >> 2];
    HEAP32[$1066 + 28 >> 2] = HEAP32[$1069 + 28 >> 2];
    HEAP32[$1066 + 32 >> 2] = HEAP32[$1069 + 32 >> 2];
    HEAP32[$1066 + 36 >> 2] = HEAP32[$1069 + 36 >> 2];
    $i_01_i_i = -2;
    $1070 = $1067;
    while (1) {
     $1072 = $i_01_i_i + 1 | 0;
     $1074 = $1070 + ($i_01_i_i * 40 | 0) | 0;
     $1075 = $1070 + ($1072 * 40 | 0) | 0;
     HEAP32[$1074 >> 2] = HEAP32[$1075 >> 2];
     HEAP32[$1074 + 4 >> 2] = HEAP32[$1075 + 4 >> 2];
     HEAP32[$1074 + 8 >> 2] = HEAP32[$1075 + 8 >> 2];
     HEAP32[$1074 + 12 >> 2] = HEAP32[$1075 + 12 >> 2];
     HEAP32[$1074 + 16 >> 2] = HEAP32[$1075 + 16 >> 2];
     HEAP32[$1074 + 20 >> 2] = HEAP32[$1075 + 20 >> 2];
     HEAP32[$1074 + 24 >> 2] = HEAP32[$1075 + 24 >> 2];
     HEAP32[$1074 + 28 >> 2] = HEAP32[$1075 + 28 >> 2];
     HEAP32[$1074 + 32 >> 2] = HEAP32[$1075 + 32 >> 2];
     HEAP32[$1074 + 36 >> 2] = HEAP32[$1075 + 36 >> 2];
     $1077 = HEAP32[5024] | 0;
     if (($1072 | 0) == 0) {
      break;
     } else {
      $i_01_i_i = $1072;
      $1070 = $1077;
     }
    }
    $1078 = $1077;
    HEAP32[$1078 >> 2] = HEAP32[$1066 >> 2];
    HEAP32[$1078 + 4 >> 2] = HEAP32[$1066 + 4 >> 2];
    HEAP32[$1078 + 8 >> 2] = HEAP32[$1066 + 8 >> 2];
    HEAP32[$1078 + 12 >> 2] = HEAP32[$1066 + 12 >> 2];
    HEAP32[$1078 + 16 >> 2] = HEAP32[$1066 + 16 >> 2];
    HEAP32[$1078 + 20 >> 2] = HEAP32[$1066 + 20 >> 2];
    HEAP32[$1078 + 24 >> 2] = HEAP32[$1066 + 24 >> 2];
    HEAP32[$1078 + 28 >> 2] = HEAP32[$1066 + 28 >> 2];
    HEAP32[$1078 + 32 >> 2] = HEAP32[$1066 + 32 >> 2];
    HEAP32[$1078 + 36 >> 2] = HEAP32[$1066 + 36 >> 2];
    $1082 = HEAP32[HEAP32[5024] >> 2] & 16;
    _gv(1) | 0;
    $1084 = HEAP32[5024] | 0;
    if ($1084 >>> 0 < 66472 >>> 0) {
     $1087 = $1084;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $1087 = HEAP32[5024] | 0;
    }
    $1088 = $1087 + 40 | 0;
    HEAP32[5024] = $1088;
    $1089 = $1088;
    $1090 = $1084;
    HEAP32[$1089 >> 2] = HEAP32[$1090 >> 2];
    HEAP32[$1089 + 4 >> 2] = HEAP32[$1090 + 4 >> 2];
    HEAP32[$1089 + 8 >> 2] = HEAP32[$1090 + 8 >> 2];
    HEAP32[$1089 + 12 >> 2] = HEAP32[$1090 + 12 >> 2];
    HEAP32[$1089 + 16 >> 2] = HEAP32[$1090 + 16 >> 2];
    HEAP32[$1089 + 20 >> 2] = HEAP32[$1090 + 20 >> 2];
    HEAP32[$1089 + 24 >> 2] = HEAP32[$1090 + 24 >> 2];
    HEAP32[$1089 + 28 >> 2] = HEAP32[$1090 + 28 >> 2];
    HEAP32[$1089 + 32 >> 2] = HEAP32[$1090 + 32 >> 2];
    HEAP32[$1089 + 36 >> 2] = HEAP32[$1090 + 36 >> 2];
    $1091 = HEAP32[5024] | 0;
    HEAP16[$1091 + 8 >> 1] = HEAP16[$1091 - 40 + 10 >> 1] | 0;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
    HEAP32[HEAP32[5024] >> 2] = $1082;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $1082;
    $1103 = HEAP32[5024] | 0;
    $1105 = $1103 - 40 | 0;
    HEAP32[$205 >> 2] = HEAP32[$1105 >> 2];
    HEAP32[$205 + 4 >> 2] = HEAP32[$1105 + 4 >> 2];
    HEAP32[$205 + 8 >> 2] = HEAP32[$1105 + 8 >> 2];
    HEAP32[$205 + 12 >> 2] = HEAP32[$1105 + 12 >> 2];
    HEAP32[$205 + 16 >> 2] = HEAP32[$1105 + 16 >> 2];
    HEAP32[$205 + 20 >> 2] = HEAP32[$1105 + 20 >> 2];
    HEAP32[$205 + 24 >> 2] = HEAP32[$1105 + 24 >> 2];
    HEAP32[$205 + 28 >> 2] = HEAP32[$1105 + 28 >> 2];
    HEAP32[$205 + 32 >> 2] = HEAP32[$1105 + 32 >> 2];
    HEAP32[$205 + 36 >> 2] = HEAP32[$1105 + 36 >> 2];
    $1107 = $1103 - 80 | 0;
    HEAP32[$1105 >> 2] = HEAP32[$1107 >> 2];
    HEAP32[$1105 + 4 >> 2] = HEAP32[$1107 + 4 >> 2];
    HEAP32[$1105 + 8 >> 2] = HEAP32[$1107 + 8 >> 2];
    HEAP32[$1105 + 12 >> 2] = HEAP32[$1107 + 12 >> 2];
    HEAP32[$1105 + 16 >> 2] = HEAP32[$1107 + 16 >> 2];
    HEAP32[$1105 + 20 >> 2] = HEAP32[$1107 + 20 >> 2];
    HEAP32[$1105 + 24 >> 2] = HEAP32[$1107 + 24 >> 2];
    HEAP32[$1105 + 28 >> 2] = HEAP32[$1107 + 28 >> 2];
    HEAP32[$1105 + 32 >> 2] = HEAP32[$1107 + 32 >> 2];
    HEAP32[$1105 + 36 >> 2] = HEAP32[$1107 + 36 >> 2];
    $1110 = (HEAP32[5024] | 0) - 80 | 0;
    HEAP32[$1110 >> 2] = HEAP32[$205 >> 2];
    HEAP32[$1110 + 4 >> 2] = HEAP32[$205 + 4 >> 2];
    HEAP32[$1110 + 8 >> 2] = HEAP32[$205 + 8 >> 2];
    HEAP32[$1110 + 12 >> 2] = HEAP32[$205 + 12 >> 2];
    HEAP32[$1110 + 16 >> 2] = HEAP32[$205 + 16 >> 2];
    HEAP32[$1110 + 20 >> 2] = HEAP32[$205 + 20 >> 2];
    HEAP32[$1110 + 24 >> 2] = HEAP32[$205 + 24 >> 2];
    HEAP32[$1110 + 28 >> 2] = HEAP32[$205 + 28 >> 2];
    HEAP32[$1110 + 32 >> 2] = HEAP32[$205 + 32 >> 2];
    HEAP32[$1110 + 36 >> 2] = HEAP32[$205 + 36 >> 2];
    $1111 = ($_0 | 0) == 156;
    do {
     if ($1111) {
      $op1_1_i_ph = 158;
      label = 232;
     } else {
      if (($_0 | 0) == 146) {
       $op1_1_i_ph = 150;
       label = 232;
       break;
      } else if (($_0 | 0) == 159) {
       $op1_1_i_ph = 157;
       label = 232;
       break;
      }
      if (($_0 | 0) == 151) {
       $op1_1_i_ph = 147;
       label = 232;
       break;
      }
      _gen_op($_0);
      if (($_0 | 0) == 149) {
       label = 236;
      } else {
       label = 234;
      }
     }
    } while (0);
    if ((label | 0) == 232) {
     _gen_op($op1_1_i_ph);
     label = 234;
    }
    do {
     if ((label | 0) == 234) {
      $1119 = _gtst(1, 0) | 0;
      if (($_0 | 0) == 148) {
       $b_0_i = 0;
       $a_0_i139 = $1119;
       break;
      }
      if (($1119 | 0) == 0) {
       label = 236;
       break;
      }
      $b_0_i = _oad(34063, 0) | 0;
      $a_0_i139 = $1119;
     }
    } while (0);
    if ((label | 0) == 236) {
     $b_0_i = _gtst(0, 0) | 0;
     $a_0_i139 = 0;
    }
    do {
     if ($1111) {
      $op1_2_i = 146;
     } else {
      if (($_0 | 0) == 159) {
       $op1_2_i = 151;
       break;
      } else if (($_0 | 0) == 158) {
       $op1_2_i = 150;
       break;
      } else {
       $op1_2_i = ($_0 | 0) == 157 ? 147 : $_0;
       break;
      }
     }
    } while (0);
    _gen_op($op1_2_i);
    $1132 = _gtst(1, $a_0_i139) | 0;
    _gsym($b_0_i);
    $1133 = $cval_i_sroa_4 | 0;
    $1134 = HEAP32[5024] | 0;
    if ($1134 >>> 0 < 66472 >>> 0) {
     $1138 = $1134;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $1138 = HEAP32[5024] | 0;
    }
    do {
     if ($1138 >>> 0 < 56272 >>> 0) {
      $1150 = $1138;
     } else {
      $1143 = HEAPU16[$1138 + 8 >> 1] | 0;
      if (!(($1143 & 63 | 0) == 51 | ($1143 & 62 | 0) == 52)) {
       $1150 = $1138;
       break;
      }
      _gv(1) | 0;
      $1150 = HEAP32[5024] | 0;
     }
    } while (0);
    $1151 = $1150 + 40 | 0;
    HEAP32[5024] = $1151;
    $1152 = $1151;
    HEAP32[$1152 >> 2] = 0;
    HEAP32[$1152 + 4 >> 2] = 0;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 53;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $1157 = HEAP32[5024] | 0;
    HEAP32[$1157 + 16 >> 2] = $1132;
    $1161 = $1157 + 20 | 0;
    HEAP32[$1161 >> 2] = HEAP32[$1133 >> 2];
    HEAP32[$1161 + 4 >> 2] = HEAP32[$1133 + 4 >> 2];
    HEAP32[$1161 + 8 >> 2] = HEAP32[$1133 + 8 >> 2];
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $210 = $cval_i56_i_sroa_4 | 0;
 $211 = _external_global_sym($func_0_i, 55624, 0) | 0;
 $212 = HEAP32[5024] | 0;
 if ($212 >>> 0 < 66472 >>> 0) {
  $216 = $212;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $216 = HEAP32[5024] | 0;
 }
 do {
  if ($216 >>> 0 < 56272 >>> 0) {
   $228 = $216;
  } else {
   $221 = HEAPU16[$216 + 8 >> 1] | 0;
   if (!(($221 & 63 | 0) == 51 | ($221 & 62 | 0) == 52)) {
    $228 = $216;
    break;
   }
   _gv(1) | 0;
   $228 = HEAP32[5024] | 0;
  }
 } while (0);
 $229 = $228 + 40 | 0;
 HEAP32[5024] = $229;
 $230 = $229;
 $$etemp$29 = 55624;
 $231$1 = HEAP32[$$etemp$29 + 4 >> 2] | 0;
 HEAP32[$230 >> 2] = HEAP32[$$etemp$29 >> 2];
 HEAP32[$230 + 4 >> 2] = $231$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 560;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $236 = HEAP32[5024] | 0;
 HEAP32[$236 + 16 >> 2] = 0;
 $240 = $236 + 20 | 0;
 HEAP32[$240 >> 2] = HEAP32[$210 >> 2];
 HEAP32[$240 + 4 >> 2] = HEAP32[$210 + 4 >> 2];
 HEAP32[$240 + 8 >> 2] = HEAP32[$210 + 8 >> 2];
 HEAP32[(HEAP32[5024] | 0) + 32 >> 2] = $211;
 $243 = HEAP32[5024] | 0;
 $244 = $tmp_i_i_i;
 $245 = $243;
 HEAP32[$244 >> 2] = HEAP32[$245 >> 2];
 HEAP32[$244 + 4 >> 2] = HEAP32[$245 + 4 >> 2];
 HEAP32[$244 + 8 >> 2] = HEAP32[$245 + 8 >> 2];
 HEAP32[$244 + 12 >> 2] = HEAP32[$245 + 12 >> 2];
 HEAP32[$244 + 16 >> 2] = HEAP32[$245 + 16 >> 2];
 HEAP32[$244 + 20 >> 2] = HEAP32[$245 + 20 >> 2];
 HEAP32[$244 + 24 >> 2] = HEAP32[$245 + 24 >> 2];
 HEAP32[$244 + 28 >> 2] = HEAP32[$245 + 28 >> 2];
 HEAP32[$244 + 32 >> 2] = HEAP32[$245 + 32 >> 2];
 HEAP32[$244 + 36 >> 2] = HEAP32[$245 + 36 >> 2];
 $i_01_i_i_i = 0;
 do {
  $250 = $243 + ((-$i_01_i_i_i | 0) * 40 | 0) | 0;
  $251 = $243 + (~$i_01_i_i_i * 40 | 0) | 0;
  HEAP32[$250 >> 2] = HEAP32[$251 >> 2];
  HEAP32[$250 + 4 >> 2] = HEAP32[$251 + 4 >> 2];
  HEAP32[$250 + 8 >> 2] = HEAP32[$251 + 8 >> 2];
  HEAP32[$250 + 12 >> 2] = HEAP32[$251 + 12 >> 2];
  HEAP32[$250 + 16 >> 2] = HEAP32[$251 + 16 >> 2];
  HEAP32[$250 + 20 >> 2] = HEAP32[$251 + 20 >> 2];
  HEAP32[$250 + 24 >> 2] = HEAP32[$251 + 24 >> 2];
  HEAP32[$250 + 28 >> 2] = HEAP32[$251 + 28 >> 2];
  HEAP32[$250 + 32 >> 2] = HEAP32[$251 + 32 >> 2];
  HEAP32[$250 + 36 >> 2] = HEAP32[$251 + 36 >> 2];
  $i_01_i_i_i = $i_01_i_i_i + 1 | 0;
 } while (($i_01_i_i_i | 0) < 2);
 $255 = $243 - 80 | 0;
 HEAP32[$255 >> 2] = HEAP32[$244 >> 2];
 HEAP32[$255 + 4 >> 2] = HEAP32[$244 + 4 >> 2];
 HEAP32[$255 + 8 >> 2] = HEAP32[$244 + 8 >> 2];
 HEAP32[$255 + 12 >> 2] = HEAP32[$244 + 12 >> 2];
 HEAP32[$255 + 16 >> 2] = HEAP32[$244 + 16 >> 2];
 HEAP32[$255 + 20 >> 2] = HEAP32[$244 + 20 >> 2];
 HEAP32[$255 + 24 >> 2] = HEAP32[$244 + 24 >> 2];
 HEAP32[$255 + 28 >> 2] = HEAP32[$244 + 28 >> 2];
 HEAP32[$255 + 32 >> 2] = HEAP32[$244 + 32 >> 2];
 HEAP32[$255 + 36 >> 2] = HEAP32[$244 + 36 >> 2];
 _gfunc_call(2);
 $256 = $cval_i_i_sroa_4 | 0;
 $257 = HEAP32[5024] | 0;
 if ($257 >>> 0 < 66472 >>> 0) {
  $261 = $257;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $261 = HEAP32[5024] | 0;
 }
 do {
  if ($261 >>> 0 < 56272 >>> 0) {
   $273 = $261;
  } else {
   $266 = HEAPU16[$261 + 8 >> 1] | 0;
   if (!(($266 & 63 | 0) == 51 | ($266 & 62 | 0) == 52)) {
    $273 = $261;
    break;
   }
   _gv(1) | 0;
   $273 = HEAP32[5024] | 0;
  }
 } while (0);
 $274 = $273 + 40 | 0;
 HEAP32[5024] = $274;
 $275 = $274;
 $$etemp$38 = 21728;
 $276$1 = HEAP32[$$etemp$38 + 4 >> 2] | 0;
 HEAP32[$275 >> 2] = HEAP32[$$etemp$38 >> 2];
 HEAP32[$275 + 4 >> 2] = $276$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $281 = HEAP32[5024] | 0;
 HEAP32[$281 + 16 >> 2] = 0;
 $285 = $281 + 20 | 0;
 HEAP32[$285 >> 2] = HEAP32[$256 >> 2];
 HEAP32[$285 + 4 >> 2] = HEAP32[$256 + 4 >> 2];
 HEAP32[$285 + 8 >> 2] = HEAP32[$256 + 8 >> 2];
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 0;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 2;
 STACKTOP = sp;
 return;
}
function _preprocess($is_bof) {
 $is_bof = $is_bof | 0;
 var $buf = 0, $buf1 = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $n_0_ph_i_i227 = 0, $p_0_i_i229 = 0, $n_0_i_i230 = 0, $tab_0_i_i231 = 0, $28 = 0, $p_1_i_i234_ph = 0, $_pr = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $_0 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $n_0_ph_i_i215 = 0, $p_0_i_i217 = 0, $n_0_i_i218 = 0, $tab_0_i_i219 = 0, $71 = 0, $p_1_i_i222_ph = 0, $_pr238 = 0, $80 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $n_0_ph_i_i203 = 0, $p_0_i_i205 = 0, $n_0_i_i206 = 0, $tab_0_i_i207 = 0, $109 = 0, $p_1_i_i210_ph = 0, $_pr240 = 0, $117 = 0, $118 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $127 = 0, $131 = 0, $134 = 0, $135 = 0, $148 = 0, $150 = 0, $c_0 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $168 = 0, $_pre2_i_i_i = 0, $171 = 0, $len_0_i_i_i = 0, $175 = 0, $177 = 0, $178 = 0, $_0_i_i_i = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $q_0281 = 0, $197 = 0, $q_1 = 0, $200 = 0, $202 = 0, $203 = 0, $204 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $215 = 0, $_pre2_i_i_i67 = 0, $218 = 0, $len_0_i_i_i69 = 0, $222 = 0, $224 = 0, $225 = 0, $_0_i_i_i73 = 0, $231 = 0, $234 = 0, $238 = 0, $240 = 0, $241 = 0, $242 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $253 = 0, $_pre2_i_i_i76 = 0, $256 = 0, $len_0_i_i_i78 = 0, $260 = 0, $262 = 0, $263 = 0, $_0_i_i_i82 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $286 = 0, $_pre2_i_i_i85 = 0, $289 = 0, $len_0_i_i_i87 = 0, $293 = 0, $295 = 0, $296 = 0, $_0_i_i_i91 = 0, $302 = 0, $306 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $325 = 0, $_pre2_i_i_i94 = 0, $328 = 0, $len_0_i_i_i96 = 0, $332 = 0, $334 = 0, $335 = 0, $_0_i_i_i100 = 0, $341 = 0, $343 = 0, $_0_i11 = 0, $345 = 0, $q_0_be = 0, $349 = 0, $351 = 0, $352 = 0, $353 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $364 = 0, $_pre2_i_i_i12 = 0, $367 = 0, $len_0_i_i_i14 = 0, $371 = 0, $373 = 0, $374 = 0, $_0_i_i_i18 = 0, $q_0_lcssa = 0, $381 = 0, $382 = 0, $384 = 0, $390 = 0, $phitmp418 = 0, $395 = 0, $404 = 0, $c_1 = 0, $407 = 0, $408 = 0, $409 = 0, $414 = 0, $416 = 0, $420 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $i_0276 = 0, $436 = 0, $443 = 0, $path_0_in = 0, $i_1 = 0, $460 = 0, $f_0268 = 0, $468 = 0, $469 = 0, $471 = 0, $h_02_i_i = 0, $s_01_i_i = 0, $h_0_lcssa_i_i = 0, $i_01_i = 0, $480 = 0, $i_02_i = 0, $487 = 0, $495 = 0, $i_2 = 0, $527 = 0, $_pre_phi = 0, $c_2 = 0, $533 = 0, $535 = 0, $537 = 0, $538 = 0, $539 = 0, $n_0_ph_i_i191 = 0, $p_0_i_i193 = 0, $n_0_i_i194 = 0, $tab_0_i_i195 = 0, $558 = 0, $p_1_i_i198_ph = 0, $_pr245 = 0, $566 = 0, $567 = 0, $570 = 0, $583 = 0, $_0_i25 = 0, $c_3 = 0, $595 = 0, $599 = 0, $602 = 0, $606 = 0, $608 = 0, $_pre406 = 0, $613 = 0, $614 = 0, $616 = 0, $618 = 0, $622 = 0, $624 = 0, $629 = 0, $c_4 = 0, $634 = 0, $c_5 = 0, $a_1_i_ph = 0, $start_of_line_0_i_ph = 0, $in_warn_or_error_0_i_ph = 0, $p_1_i_ph = 0, $648 = 0, $start_of_line_0_i_ph296 = 0, $in_warn_or_error_0_i_ph297 = 0, $p_1_i_ph298 = 0, $p_1_i = 0, $650 = 0, $655 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $670 = 0, $_pre2_i_i_i46 = 0, $673 = 0, $len_0_i_i_i48 = 0, $677 = 0, $679 = 0, $680 = 0, $684 = 0, $687 = 0, $690 = 0, $691 = 0, $693 = 0, $694 = 0, $695 = 0, $698 = 0, $699 = 0, $700 = 0, $701 = 0, $702 = 0, $706 = 0, $_pre2_i_i_i162 = 0, $709 = 0, $len_0_i_i_i164 = 0, $713 = 0, $715 = 0, $716 = 0, $_0_i_i_i168 = 0, $722 = 0, $725 = 0, $729 = 0, $731 = 0, $732 = 0, $733 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $740 = 0, $744 = 0, $_pre2_i_i_i171 = 0, $747 = 0, $len_0_i_i_i173 = 0, $751 = 0, $753 = 0, $754 = 0, $_0_i_i_i177 = 0, $762 = 0, $764 = 0, $765 = 0, $766 = 0, $769 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $777 = 0, $_pre2_i_i_i180 = 0, $780 = 0, $len_0_i_i_i182 = 0, $784 = 0, $786 = 0, $787 = 0, $_0_i_i_i186 = 0, $793 = 0, $797 = 0, $801 = 0, $803 = 0, $804 = 0, $805 = 0, $808 = 0, $809 = 0, $810 = 0, $811 = 0, $812 = 0, $816 = 0, $_pre2_i_i_i153 = 0, $819 = 0, $len_0_i_i_i155 = 0, $823 = 0, $825 = 0, $826 = 0, $_0_i_i_i159 = 0, $832 = 0, $850 = 0, $851 = 0, $857 = 0, $863 = 0, $864 = 0, $865 = 0, $878 = 0, $885 = 0, $886 = 0, $887 = 0, $889 = 0, $898 = 0, $900 = 0, $902 = 0, $903 = 0, $904 = 0, $n_0_ph_i_i143 = 0, $p_0_i_i145 = 0, $n_0_i_i146 = 0, $tab_0_i_i147 = 0, $923 = 0, $p_1_i_i150_ph = 0, $_pr248 = 0, $931 = 0, $932 = 0, $935 = 0, $948 = 0, $962 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $q_2 = 0, $976 = 0, $q_3 = 0, $979 = 0, $981 = 0, $982 = 0, $983 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $990 = 0, $994 = 0, $_pre2_i_i_i103 = 0, $997 = 0, $len_0_i_i_i105 = 0, $1001 = 0, $1003 = 0, $1004 = 0, $_0_i_i_i109 = 0, $1010 = 0, $1013 = 0, $1017 = 0, $1019 = 0, $1020 = 0, $1021 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1032 = 0, $_pre2_i_i_i112 = 0, $1035 = 0, $len_0_i_i_i114 = 0, $1039 = 0, $1041 = 0, $1042 = 0, $_0_i_i_i118 = 0, $1050 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $1060 = 0, $1061 = 0, $1065 = 0, $_pre2_i_i_i121 = 0, $1068 = 0, $len_0_i_i_i123 = 0, $1072 = 0, $1074 = 0, $1075 = 0, $_0_i_i_i127 = 0, $1081 = 0, $1085 = 0, $1089 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $1100 = 0, $1104 = 0, $_pre2_i_i_i130 = 0, $1107 = 0, $len_0_i_i_i132 = 0, $1111 = 0, $1113 = 0, $1114 = 0, $_0_i_i_i136 = 0, $1120 = 0, $1122 = 0, $_0_i31 = 0, $1126 = 0, $1128 = 0, $1129 = 0, $1130 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1141 = 0, $_pre2_i_i_i33 = 0, $1144 = 0, $len_0_i_i_i35 = 0, $1148 = 0, $1150 = 0, $1151 = 0, $_0_i_i_i39 = 0, $1162 = 0, $1165 = 0, $1168 = 0, $1169 = 0, $1172 = 0, $1177 = 0, $1181 = 0, $1182 = 0, $1187 = 0, $1190 = 0, $1192 = 0, $1196 = 0, $_off_i = 0, $val_0_i = 0, $1204 = 0, $1207 = 0, $1212 = 0, $1217 = 0, $1220 = 0, $1222 = 0, $1224 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $n_0_ph_i_i = 0, $p_0_i_i = 0, $n_0_i_i = 0, $tab_0_i_i = 0, $1247 = 0, $p_1_i_i_ph = 0, $_pr253 = 0, $1255 = 0, $1256 = 0, $1259 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 $buf = sp | 0;
 $buf1 = sp + 1024 | 0;
 $1 = HEAP32[5314] | 0;
 $2 = HEAP32[5336] | 0;
 HEAP32[5336] = 7;
 L1 : while (1) {
  $3 = HEAP32[5350] | 0;
  L3 : do {
   if (($3 | 0) == 0) {
    _next_nomacro1();
    $40 = HEAP32[5310] | 0;
   } else {
    $5 = HEAP32[$3 >> 2] | 0;
    HEAP32[5310] = $5;
    if (($5 | 0) == 0) {
     $41 = 0;
     break L1;
    } else {
     $7 = $3;
    }
    L5 : while (1) {
     $8 = $7 + 4 | 0;
     $9 = HEAP32[$7 >> 2] | 0;
     HEAP32[5310] = $9;
     switch ($9 | 0) {
     case 179:
     case 200:
     case 180:
     case 183:
     case 185:
     case 186:
      {
       HEAP32[5302] = HEAP32[$8 >> 2];
       $p_1_i_i234_ph = $7 + 8 | 0;
       break;
      }
     case 181:
     case 184:
     case 206:
      {
       HEAP32[5302] = $8;
       HEAP32[$7 + 8 >> 2] = $7 + 20;
       $p_1_i_i234_ph = $7 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
       break;
      }
     case 193:
      {
       $n_0_ph_i_i227 = 3;
       label = 9;
       break;
      }
     case 192:
     case 201:
     case 202:
      {
       $n_0_ph_i_i227 = 2;
       label = 9;
       break;
      }
     default:
      {
       break L5;
      }
     }
     if ((label | 0) == 9) {
      label = 0;
      $tab_0_i_i231 = 21208;
      $n_0_i_i230 = $n_0_ph_i_i227;
      $p_0_i_i229 = $8;
      while (1) {
       HEAP32[$tab_0_i_i231 >> 2] = HEAP32[$p_0_i_i229 >> 2];
       $28 = $n_0_i_i230 - 1 | 0;
       if (($28 | 0) == 0) {
        break;
       } else {
        $tab_0_i_i231 = $tab_0_i_i231 + 4 | 0;
        $n_0_i_i230 = $28;
        $p_0_i_i229 = $p_0_i_i229 + 4 | 0;
       }
      }
      $p_1_i_i234_ph = $7 + ($n_0_ph_i_i227 + 1 << 2) | 0;
     }
     $_pr = HEAP32[5310] | 0;
     HEAP32[5350] = $p_1_i_i234_ph;
     if (($_pr | 0) != 186) {
      $40 = $_pr;
      break L3;
     }
     HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
     $36 = HEAP32[5350] | 0;
     $37 = HEAP32[$36 >> 2] | 0;
     HEAP32[5310] = $37;
     if (($37 | 0) == 0) {
      $41 = 0;
      break L1;
     } else {
      $7 = $36;
     }
    }
    HEAP32[5350] = $8;
    $40 = $9;
   }
  } while (0);
  switch ($40 | 0) {
  case 32:
  case 12:
  case 11:
  case 9:
  case 13:
   {
    break;
   }
  default:
   {
    $41 = $40;
    break L1;
   }
  }
 }
 $42 = $1 + 724 | 0;
 $43 = $1 + 724 | 0;
 $44 = $1 + 468 | 0;
 $_0 = $is_bof;
 $45 = $41;
 L22 : while (1) {
  L24 : do {
   switch ($45 | 0) {
   case 321:
    {
     label = 33;
     break L22;
     break;
    }
   case 259:
    {
     $c_3 = _expr_preprocess() | 0;
     label = 188;
     break;
    }
   case 316:
    {
     $c_2 = 0;
     label = 166;
     break;
    }
   case 317:
    {
     $c_2 = 1;
     label = 166;
     break;
    }
   case 313:
    {
     label = 18;
     break L22;
     break;
    }
   case 314:
   case 315:
    {
     label = 52;
     break L22;
     break;
    }
   case 324:
    {
     label = 298;
     break L22;
     break;
    }
   case 322:
   case 323:
    {
     label = 303;
     break L22;
     break;
    }
   case 319:
    {
     label = 276;
     break L22;
     break;
    }
   case 260:
    {
     $602 = HEAP32[$42 >> 2] | 0;
     if (($602 | 0) == ($44 | 0)) {
      _tcc_error(17328, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $606 = HEAP32[$42 >> 2] | 0;
     } else {
      $606 = $602;
     }
     $608 = HEAP32[$606 - 4 >> 2] | 0;
     if (($608 & 2 | 0) == 0) {
      $614 = $606;
      $613 = $608;
     } else {
      _tcc_error(17136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $_pre406 = HEAP32[$42 >> 2] | 0;
      $614 = $_pre406;
      $613 = HEAP32[$_pre406 - 4 >> 2] | 0;
     }
     $616 = $613 ^ 3;
     HEAP32[$614 - 4 >> 2] = $616;
     $c_4 = $616;
     label = 202;
     break;
    }
   case 318:
    {
     $618 = HEAP32[$42 >> 2] | 0;
     if (($618 | 0) == ($44 | 0)) {
      _tcc_error(17e3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $622 = HEAP32[$42 >> 2] | 0;
     } else {
      $622 = $618;
     }
     $624 = HEAP32[$622 - 4 >> 2] | 0;
     if (($624 | 0) > 1) {
      _tcc_error(16824, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     } else {
      if (($624 | 0) == 1) {
       break L24;
      }
     }
     $629 = _expr_preprocess() | 0;
     HEAP32[(HEAP32[$42 >> 2] | 0) - 4 >> 2] = $629;
     $c_4 = $629;
     label = 202;
     break;
    }
   case 325:
    {
     label = 363;
     break L22;
     break;
    }
   case 206:
   case 33:
   case 10:
    {
     $1220 = $45;
     break L22;
     break;
    }
   default:
    {
     label = 381;
     break L22;
    }
   }
  } while (0);
  do {
   if ((label | 0) == 166) {
    label = 0;
    L44 : while (1) {
     $533 = HEAP32[5350] | 0;
     L46 : do {
      if (($533 | 0) == 0) {
       _next_nomacro1();
       $570 = HEAP32[5310] | 0;
      } else {
       $535 = HEAP32[$533 >> 2] | 0;
       HEAP32[5310] = $535;
       if (($535 | 0) == 0) {
        label = 182;
        break L44;
       } else {
        $537 = $533;
       }
       L48 : while (1) {
        $538 = $537 + 4 | 0;
        $539 = HEAP32[$537 >> 2] | 0;
        HEAP32[5310] = $539;
        switch ($539 | 0) {
        case 179:
        case 200:
        case 180:
        case 183:
        case 185:
        case 186:
         {
          HEAP32[5302] = HEAP32[$538 >> 2];
          $p_1_i_i198_ph = $537 + 8 | 0;
          break;
         }
        case 181:
        case 184:
        case 206:
         {
          HEAP32[5302] = $538;
          HEAP32[$537 + 8 >> 2] = $537 + 20;
          $p_1_i_i198_ph = $537 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
          break;
         }
        case 193:
         {
          $n_0_ph_i_i191 = 3;
          label = 174;
          break;
         }
        case 192:
        case 201:
        case 202:
         {
          $n_0_ph_i_i191 = 2;
          label = 174;
          break;
         }
        default:
         {
          break L48;
         }
        }
        if ((label | 0) == 174) {
         label = 0;
         $tab_0_i_i195 = 21208;
         $n_0_i_i194 = $n_0_ph_i_i191;
         $p_0_i_i193 = $538;
         while (1) {
          HEAP32[$tab_0_i_i195 >> 2] = HEAP32[$p_0_i_i193 >> 2];
          $558 = $n_0_i_i194 - 1 | 0;
          if (($558 | 0) == 0) {
           break;
          } else {
           $tab_0_i_i195 = $tab_0_i_i195 + 4 | 0;
           $n_0_i_i194 = $558;
           $p_0_i_i193 = $p_0_i_i193 + 4 | 0;
          }
         }
         $p_1_i_i198_ph = $537 + ($n_0_ph_i_i191 + 1 << 2) | 0;
        }
        $_pr245 = HEAP32[5310] | 0;
        HEAP32[5350] = $p_1_i_i198_ph;
        if (($_pr245 | 0) != 186) {
         $570 = $_pr245;
         break L46;
        }
        HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
        $566 = HEAP32[5350] | 0;
        $567 = HEAP32[$566 >> 2] | 0;
        HEAP32[5310] = $567;
        if (($567 | 0) == 0) {
         label = 182;
         break L44;
        } else {
         $537 = $566;
        }
       }
       HEAP32[5350] = $538;
       $570 = $539;
      }
     } while (0);
     switch ($570 | 0) {
     case 32:
     case 12:
     case 11:
     case 9:
     case 13:
      {
       break;
      }
     default:
      {
       label = 181;
       break L44;
      }
     }
    }
    if ((label | 0) == 181) {
     label = 0;
     if (($570 | 0) < 256) {
      label = 182;
     }
    }
    if ((label | 0) == 182) {
     label = 0;
     _tcc_error(17872, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = ($c_2 | 0) != 0 ? 17776 : 55752, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    if (($_0 | 0) != 0 & ($c_2 | 0) != 0) {
     HEAP32[(HEAP32[13912] | 0) + 20 >> 2] = HEAP32[5310];
    }
    $583 = (HEAP32[5310] | 0) - 256 | 0;
    if ($583 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
     $_0_i25 = (HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($583 << 2) >> 2] | 0) + 4 >> 2] | 0) != 0 | 0;
    } else {
     $_0_i25 = 0;
    }
    $c_3 = $_0_i25 ^ $c_2;
    label = 188;
   } else if ((label | 0) == 202) {
    label = 0;
    $634 = HEAP32[13912] | 0;
    if ((HEAP32[$42 >> 2] | 0) != ((HEAP32[$634 + 28 >> 2] | 0) + 4 | 0)) {
     $c_5 = $c_4;
     label = 204;
     break;
    }
    HEAP32[$634 + 20 >> 2] = 0;
    $c_5 = $c_4;
    label = 204;
   }
  } while (0);
  if ((label | 0) == 188) {
   label = 0;
   $595 = HEAP32[$42 >> 2] | 0;
   if ($595 >>> 0 < $43 >>> 0) {
    $599 = $595;
   } else {
    _tcc_error(17496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $599 = HEAP32[$42 >> 2] | 0;
   }
   HEAP32[$42 >> 2] = $599 + 4;
   HEAP32[$599 >> 2] = $c_3;
   $c_5 = $c_3;
   label = 204;
  }
  if ((label | 0) == 204) {
   label = 0;
   if (($c_5 & 1 | 0) != 0) {
    label = 384;
    break;
   }
  }
  $p_1_i_ph = HEAP32[HEAP32[13912] >> 2] | 0;
  $in_warn_or_error_0_i_ph = 0;
  $start_of_line_0_i_ph = 1;
  $a_1_i_ph = 0;
  L85 : while (1) {
   $648 = ($a_1_i_ph | 0) == 0;
   $p_1_i_ph298 = $p_1_i_ph;
   $in_warn_or_error_0_i_ph297 = $in_warn_or_error_0_i_ph;
   $start_of_line_0_i_ph296 = $start_of_line_0_i_ph;
   L87 : while (1) {
    $p_1_i = $p_1_i_ph298;
    L89 : while (1) {
     $650 = HEAPU8[$p_1_i] | 0;
     switch ($650 | 0) {
     case 32:
     case 9:
     case 12:
     case 11:
     case 13:
      {
       $p_1_i = $p_1_i + 1 | 0;
       continue L89;
       break;
      }
     case 10:
      {
       label = 210;
       break L89;
       break;
      }
     case 92:
      {
       break;
      }
     case 34:
     case 39:
      {
       label = 260;
       break L87;
       break;
      }
     case 47:
      {
       label = 262;
       break L87;
       break;
      }
     case 35:
      {
       break L89;
       break;
      }
     default:
      {
       break L87;
      }
     }
     HEAP32[HEAP32[13912] >> 2] = $p_1_i;
     $662 = HEAP32[13912] | 0;
     $663 = $662 | 0;
     $664 = HEAP32[$663 >> 2] | 0;
     $665 = $662 + 4 | 0;
     $666 = HEAP32[$665 >> 2] | 0;
     if ($664 >>> 0 < $666 >>> 0) {
      $680 = $664;
      $679 = $666;
     } else {
      $670 = HEAP32[$662 + 8 >> 2] | 0;
      $_pre2_i_i_i46 = $662 + 1056 | 0;
      if (($670 | 0) == -1) {
       $len_0_i_i_i48 = 0;
      } else {
       $673 = _read($670 | 0, $_pre2_i_i_i46 | 0, 8192) | 0;
       $len_0_i_i_i48 = ($673 | 0) < 0 ? 0 : $673;
      }
      HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i48;
      HEAP32[$663 >> 2] = $_pre2_i_i_i46;
      $677 = $662 + 1056 + $len_0_i_i_i48 | 0;
      HEAP32[$665 >> 2] = $677;
      HEAP8[$677] = 92;
      $680 = HEAP32[$663 >> 2] | 0;
      $679 = HEAP32[$665 >> 2] | 0;
     }
     L100 : do {
      if ($680 >>> 0 < $679 >>> 0) {
       if ((HEAP8[$680] | 0) != 92) {
        break;
       }
       $684 = HEAP32[13912] | 0;
       $687 = HEAP8[HEAP32[$684 >> 2] | 0] | 0;
       HEAP32[13924] = $687 & 255;
       if ($687 << 24 >> 24 == 92) {
        $690 = $684;
       } else {
        break;
       }
       while (1) {
        $691 = $690 | 0;
        $693 = (HEAP32[$691 >> 2] | 0) + 1 | 0;
        HEAP32[$691 >> 2] = $693;
        $694 = HEAP8[$693] | 0;
        $695 = $694 & 255;
        HEAP32[13924] = $695;
        if ($694 << 24 >> 24 == 92) {
         $698 = HEAP32[13912] | 0;
         $699 = $698 | 0;
         $700 = HEAP32[$699 >> 2] | 0;
         $701 = $698 + 4 | 0;
         $702 = HEAP32[$701 >> 2] | 0;
         if ($700 >>> 0 < $702 >>> 0) {
          $716 = $700;
          $715 = $702;
         } else {
          $706 = HEAP32[$698 + 8 >> 2] | 0;
          $_pre2_i_i_i162 = $698 + 1056 | 0;
          if (($706 | 0) == -1) {
           $len_0_i_i_i164 = 0;
          } else {
           $709 = _read($706 | 0, $_pre2_i_i_i162 | 0, 8192) | 0;
           $len_0_i_i_i164 = ($709 | 0) < 0 ? 0 : $709;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i164;
          HEAP32[$699 >> 2] = $_pre2_i_i_i162;
          $713 = $698 + 1056 + $len_0_i_i_i164 | 0;
          HEAP32[$701 >> 2] = $713;
          HEAP8[$713] = 92;
          $716 = HEAP32[$699 >> 2] | 0;
          $715 = HEAP32[$701 >> 2] | 0;
         }
         if ($716 >>> 0 < $715 >>> 0) {
          $_0_i_i_i168 = HEAPU8[$716] | 0;
         } else {
          HEAP32[$699 >> 2] = $715;
          $_0_i_i_i168 = -1;
         }
         HEAP32[13924] = $_0_i_i_i168;
         $722 = $_0_i_i_i168;
        } else {
         $722 = $695;
        }
        do {
         if (($722 | 0) == 10) {
          $725 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$725 >> 2] = (HEAP32[$725 >> 2] | 0) + 1;
          $729 = HEAP32[13912] | 0;
          $731 = (HEAP32[$729 >> 2] | 0) + 1 | 0;
          HEAP32[$729 >> 2] = $731;
          $732 = HEAP8[$731] | 0;
          $733 = $732 & 255;
          HEAP32[13924] = $733;
          if ($732 << 24 >> 24 != 92) {
           $832 = $733;
           break;
          }
          $736 = HEAP32[13912] | 0;
          $737 = $736 | 0;
          $738 = HEAP32[$737 >> 2] | 0;
          $739 = $736 + 4 | 0;
          $740 = HEAP32[$739 >> 2] | 0;
          if ($738 >>> 0 < $740 >>> 0) {
           $754 = $738;
           $753 = $740;
          } else {
           $744 = HEAP32[$736 + 8 >> 2] | 0;
           $_pre2_i_i_i171 = $736 + 1056 | 0;
           if (($744 | 0) == -1) {
            $len_0_i_i_i173 = 0;
           } else {
            $747 = _read($744 | 0, $_pre2_i_i_i171 | 0, 8192) | 0;
            $len_0_i_i_i173 = ($747 | 0) < 0 ? 0 : $747;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i173;
           HEAP32[$737 >> 2] = $_pre2_i_i_i171;
           $751 = $736 + 1056 + $len_0_i_i_i173 | 0;
           HEAP32[$739 >> 2] = $751;
           HEAP8[$751] = 92;
           $754 = HEAP32[$737 >> 2] | 0;
           $753 = HEAP32[$739 >> 2] | 0;
          }
          if ($754 >>> 0 < $753 >>> 0) {
           $_0_i_i_i177 = HEAPU8[$754] | 0;
          } else {
           HEAP32[$737 >> 2] = $753;
           $_0_i_i_i177 = -1;
          }
          HEAP32[13924] = $_0_i_i_i177;
          $832 = $_0_i_i_i177;
         } else if (($722 | 0) == 13) {
          $762 = HEAP32[13912] | 0;
          $764 = (HEAP32[$762 >> 2] | 0) + 1 | 0;
          HEAP32[$762 >> 2] = $764;
          $765 = HEAP8[$764] | 0;
          $766 = $765 & 255;
          HEAP32[13924] = $766;
          if ($765 << 24 >> 24 == 92) {
           $769 = HEAP32[13912] | 0;
           $770 = $769 | 0;
           $771 = HEAP32[$770 >> 2] | 0;
           $772 = $769 + 4 | 0;
           $773 = HEAP32[$772 >> 2] | 0;
           if ($771 >>> 0 < $773 >>> 0) {
            $787 = $771;
            $786 = $773;
           } else {
            $777 = HEAP32[$769 + 8 >> 2] | 0;
            $_pre2_i_i_i180 = $769 + 1056 | 0;
            if (($777 | 0) == -1) {
             $len_0_i_i_i182 = 0;
            } else {
             $780 = _read($777 | 0, $_pre2_i_i_i180 | 0, 8192) | 0;
             $len_0_i_i_i182 = ($780 | 0) < 0 ? 0 : $780;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i182;
            HEAP32[$770 >> 2] = $_pre2_i_i_i180;
            $784 = $769 + 1056 + $len_0_i_i_i182 | 0;
            HEAP32[$772 >> 2] = $784;
            HEAP8[$784] = 92;
            $787 = HEAP32[$770 >> 2] | 0;
            $786 = HEAP32[$772 >> 2] | 0;
           }
           if ($787 >>> 0 < $786 >>> 0) {
            $_0_i_i_i186 = HEAPU8[$787] | 0;
           } else {
            HEAP32[$770 >> 2] = $786;
            $_0_i_i_i186 = -1;
           }
           HEAP32[13924] = $_0_i_i_i186;
           $793 = $_0_i_i_i186;
          } else {
           $793 = $766;
          }
          if (($793 | 0) != 10) {
           break L100;
          }
          $797 = (HEAP32[13912] | 0) + 16 | 0;
          HEAP32[$797 >> 2] = (HEAP32[$797 >> 2] | 0) + 1;
          $801 = HEAP32[13912] | 0;
          $803 = (HEAP32[$801 >> 2] | 0) + 1 | 0;
          HEAP32[$801 >> 2] = $803;
          $804 = HEAP8[$803] | 0;
          $805 = $804 & 255;
          HEAP32[13924] = $805;
          if ($804 << 24 >> 24 != 92) {
           $832 = $805;
           break;
          }
          $808 = HEAP32[13912] | 0;
          $809 = $808 | 0;
          $810 = HEAP32[$809 >> 2] | 0;
          $811 = $808 + 4 | 0;
          $812 = HEAP32[$811 >> 2] | 0;
          if ($810 >>> 0 < $812 >>> 0) {
           $826 = $810;
           $825 = $812;
          } else {
           $816 = HEAP32[$808 + 8 >> 2] | 0;
           $_pre2_i_i_i153 = $808 + 1056 | 0;
           if (($816 | 0) == -1) {
            $len_0_i_i_i155 = 0;
           } else {
            $819 = _read($816 | 0, $_pre2_i_i_i153 | 0, 8192) | 0;
            $len_0_i_i_i155 = ($819 | 0) < 0 ? 0 : $819;
           }
           HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i155;
           HEAP32[$809 >> 2] = $_pre2_i_i_i153;
           $823 = $808 + 1056 + $len_0_i_i_i155 | 0;
           HEAP32[$811 >> 2] = $823;
           HEAP8[$823] = 92;
           $826 = HEAP32[$809 >> 2] | 0;
           $825 = HEAP32[$811 >> 2] | 0;
          }
          if ($826 >>> 0 < $825 >>> 0) {
           $_0_i_i_i159 = HEAPU8[$826] | 0;
          } else {
           HEAP32[$809 >> 2] = $825;
           $_0_i_i_i159 = -1;
          }
          HEAP32[13924] = $_0_i_i_i159;
          $832 = $_0_i_i_i159;
         } else {
          break L100;
         }
        } while (0);
        if (($832 | 0) != 92) {
         break L100;
        }
        $690 = HEAP32[13912] | 0;
       }
      } else {
       HEAP32[$663 >> 2] = $679;
       _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 12408, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     $p_1_i = HEAP32[HEAP32[13912] >> 2] | 0;
    }
    if ((label | 0) == 210) {
     label = 0;
     $655 = (HEAP32[13912] | 0) + 16 | 0;
     HEAP32[$655 >> 2] = (HEAP32[$655 >> 2] | 0) + 1;
     $p_1_i_ph298 = $p_1_i + 1 | 0;
     $in_warn_or_error_0_i_ph297 = 0;
     $start_of_line_0_i_ph296 = 1;
     continue;
    }
    $857 = $p_1_i + 1 | 0;
    if (($start_of_line_0_i_ph296 | 0) == 0) {
     $p_1_i_ph = $857;
     $in_warn_or_error_0_i_ph = $in_warn_or_error_0_i_ph297;
     $start_of_line_0_i_ph = 0;
     $a_1_i_ph = $a_1_i_ph;
     continue L85;
    }
    HEAP32[HEAP32[13912] >> 2] = $857;
    _next_nomacro();
    $863 = HEAP32[13912] | 0;
    $864 = HEAP32[$863 >> 2] | 0;
    $865 = HEAP32[5310] | 0;
    if ($648) {
     switch ($865 | 0) {
     case 317:
     case 316:
     case 259:
      {
       label = 270;
       break L87;
       break;
      }
     case 319:
     case 318:
     case 260:
      {
       break L85;
       break;
      }
     default:
      {}
     }
    } else {
     if (($865 | 0) == 317 | ($865 | 0) == 316 | ($865 | 0) == 259) {
      label = 270;
      break;
     } else if (($865 | 0) == 319) {
      label = 271;
      break;
     }
    }
    if (($865 & -2 | 0) == 322) {
     $p_1_i_ph = $864;
     $in_warn_or_error_0_i_ph = 1;
     $start_of_line_0_i_ph = 0;
     $a_1_i_ph = $a_1_i_ph;
     continue L85;
    }
    if (($865 | 0) == 10) {
     $p_1_i_ph298 = $864;
     $in_warn_or_error_0_i_ph297 = 0;
     $start_of_line_0_i_ph296 = 1;
    } else {
     $p_1_i_ph = $864;
     $in_warn_or_error_0_i_ph = $in_warn_or_error_0_i_ph297;
     $start_of_line_0_i_ph = 0;
     $a_1_i_ph = $a_1_i_ph;
     continue L85;
    }
   }
   do {
    if ((label | 0) == 260) {
     label = 0;
     if (($in_warn_or_error_0_i_ph297 | 0) != 0) {
      break;
     }
     $p_1_i_ph = _parse_pp_string($p_1_i, $650, 0) | 0;
     $in_warn_or_error_0_i_ph = 0;
     $start_of_line_0_i_ph = 0;
     $a_1_i_ph = $a_1_i_ph;
     continue L85;
    } else if ((label | 0) == 262) {
     label = 0;
     if (($in_warn_or_error_0_i_ph297 | 0) != 0) {
      break;
     }
     HEAP32[HEAP32[13912] >> 2] = $p_1_i;
     HEAP32[13924] = HEAPU8[$p_1_i] | 0;
     _minp();
     $850 = HEAP32[HEAP32[13912] >> 2] | 0;
     $851 = HEAP32[13924] | 0;
     if (($851 | 0) == 42) {
      $p_1_i_ph = _parse_comment($850) | 0;
      $in_warn_or_error_0_i_ph = 0;
      $start_of_line_0_i_ph = 0;
      $a_1_i_ph = $a_1_i_ph;
      continue L85;
     } else if (($851 | 0) == 47) {
      $p_1_i_ph = _parse_line_comment($850) | 0;
      $in_warn_or_error_0_i_ph = 0;
      $start_of_line_0_i_ph = 0;
      $a_1_i_ph = $a_1_i_ph;
      continue L85;
     } else {
      $p_1_i_ph = $850;
      $in_warn_or_error_0_i_ph = 0;
      $start_of_line_0_i_ph = 0;
      $a_1_i_ph = $a_1_i_ph;
      continue L85;
     }
    } else if ((label | 0) == 270) {
     label = 0;
     $p_1_i_ph = $864;
     $in_warn_or_error_0_i_ph = $in_warn_or_error_0_i_ph297;
     $start_of_line_0_i_ph = 0;
     $a_1_i_ph = $a_1_i_ph + 1 | 0;
     continue L85;
    } else if ((label | 0) == 271) {
     label = 0;
     $p_1_i_ph = $864;
     $in_warn_or_error_0_i_ph = $in_warn_or_error_0_i_ph297;
     $start_of_line_0_i_ph = 0;
     $a_1_i_ph = $a_1_i_ph - 1 | 0;
     continue L85;
    }
   } while (0);
   $p_1_i_ph = $p_1_i + 1 | 0;
   $in_warn_or_error_0_i_ph = $in_warn_or_error_0_i_ph297;
   $start_of_line_0_i_ph = 0;
   $a_1_i_ph = $a_1_i_ph;
  }
  HEAP32[$863 >> 2] = $864;
  $_0 = 0;
  $45 = HEAP32[5310] | 0;
 }
 L182 : do {
  if ((label | 0) == 18) {
   L209 : while (1) {
    label = 0;
    $46 = HEAP32[5350] | 0;
    L211 : do {
     if (($46 | 0) == 0) {
      _next_nomacro1();
      $83 = HEAP32[5310] | 0;
     } else {
      $48 = HEAP32[$46 >> 2] | 0;
      HEAP32[5310] = $48;
      if (($48 | 0) == 0) {
       break L209;
      } else {
       $50 = $46;
      }
      L214 : while (1) {
       $51 = $50 + 4 | 0;
       $52 = HEAP32[$50 >> 2] | 0;
       HEAP32[5310] = $52;
       switch ($52 | 0) {
       case 193:
        {
         $n_0_ph_i_i215 = 3;
         label = 25;
         break;
        }
       case 179:
       case 200:
       case 180:
       case 183:
       case 185:
       case 186:
        {
         HEAP32[5302] = HEAP32[$51 >> 2];
         $p_1_i_i222_ph = $50 + 8 | 0;
         break;
        }
       case 181:
       case 184:
       case 206:
        {
         HEAP32[5302] = $51;
         HEAP32[$50 + 8 >> 2] = $50 + 20;
         $p_1_i_i222_ph = $50 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
         break;
        }
       case 192:
       case 201:
       case 202:
        {
         $n_0_ph_i_i215 = 2;
         label = 25;
         break;
        }
       default:
        {
         break L214;
        }
       }
       if ((label | 0) == 25) {
        label = 0;
        $tab_0_i_i219 = 21208;
        $n_0_i_i218 = $n_0_ph_i_i215;
        $p_0_i_i217 = $51;
        while (1) {
         HEAP32[$tab_0_i_i219 >> 2] = HEAP32[$p_0_i_i217 >> 2];
         $71 = $n_0_i_i218 - 1 | 0;
         if (($71 | 0) == 0) {
          break;
         } else {
          $tab_0_i_i219 = $tab_0_i_i219 + 4 | 0;
          $n_0_i_i218 = $71;
          $p_0_i_i217 = $p_0_i_i217 + 4 | 0;
         }
        }
        $p_1_i_i222_ph = $50 + ($n_0_ph_i_i215 + 1 << 2) | 0;
       }
       $_pr238 = HEAP32[5310] | 0;
       HEAP32[5350] = $p_1_i_i222_ph;
       if (($_pr238 | 0) != 186) {
        $83 = $_pr238;
        break L211;
       }
       HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
       $50 = HEAP32[5350] | 0;
       $80 = HEAP32[$50 >> 2] | 0;
       HEAP32[5310] = $80;
       if (($80 | 0) == 0) {
        break L209;
       }
      }
      HEAP32[5350] = $51;
      $83 = $52;
     }
    } while (0);
    switch ($83 | 0) {
    case 32:
    case 12:
    case 11:
    case 9:
    case 13:
     {
      label = 18;
      break;
     }
    default:
     {
      break L209;
     }
    }
   }
   _parse_define();
   label = 384;
  } else if ((label | 0) == 33) {
   L183 : while (1) {
    label = 0;
    $84 = HEAP32[5350] | 0;
    L185 : do {
     if (($84 | 0) == 0) {
      _next_nomacro1();
      $121 = HEAP32[5310] | 0;
     } else {
      $86 = HEAP32[$84 >> 2] | 0;
      HEAP32[5310] = $86;
      if (($86 | 0) == 0) {
       $122 = 0;
       break L183;
      } else {
       $88 = $84;
      }
      L188 : while (1) {
       $89 = $88 + 4 | 0;
       $90 = HEAP32[$88 >> 2] | 0;
       HEAP32[5310] = $90;
       switch ($90 | 0) {
       case 181:
       case 184:
       case 206:
        {
         HEAP32[5302] = $89;
         HEAP32[$88 + 8 >> 2] = $88 + 20;
         $p_1_i_i210_ph = $88 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
         break;
        }
       case 193:
        {
         $n_0_ph_i_i203 = 3;
         label = 40;
         break;
        }
       case 192:
       case 201:
       case 202:
        {
         $n_0_ph_i_i203 = 2;
         label = 40;
         break;
        }
       case 179:
       case 200:
       case 180:
       case 183:
       case 185:
       case 186:
        {
         HEAP32[5302] = HEAP32[$89 >> 2];
         $p_1_i_i210_ph = $88 + 8 | 0;
         break;
        }
       default:
        {
         break L188;
        }
       }
       if ((label | 0) == 40) {
        label = 0;
        $tab_0_i_i207 = 21208;
        $n_0_i_i206 = $n_0_ph_i_i203;
        $p_0_i_i205 = $89;
        while (1) {
         HEAP32[$tab_0_i_i207 >> 2] = HEAP32[$p_0_i_i205 >> 2];
         $109 = $n_0_i_i206 - 1 | 0;
         if (($109 | 0) == 0) {
          break;
         } else {
          $tab_0_i_i207 = $tab_0_i_i207 + 4 | 0;
          $n_0_i_i206 = $109;
          $p_0_i_i205 = $p_0_i_i205 + 4 | 0;
         }
        }
        $p_1_i_i210_ph = $88 + ($n_0_ph_i_i203 + 1 << 2) | 0;
       }
       $_pr240 = HEAP32[5310] | 0;
       HEAP32[5350] = $p_1_i_i210_ph;
       if (($_pr240 | 0) != 186) {
        $121 = $_pr240;
        break L185;
       }
       HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
       $117 = HEAP32[5350] | 0;
       $118 = HEAP32[$117 >> 2] | 0;
       HEAP32[5310] = $118;
       if (($118 | 0) == 0) {
        $122 = 0;
        break L183;
       } else {
        $88 = $117;
       }
      }
      HEAP32[5350] = $89;
      $121 = $90;
     }
    } while (0);
    switch ($121 | 0) {
    case 32:
    case 12:
    case 11:
    case 9:
    case 13:
     {
      label = 33;
      break;
     }
    default:
     {
      $122 = $121;
      break L183;
     }
    }
   }
   $123 = $122 - 256 | 0;
   $124 = HEAP32[5306] | 0;
   if ($123 >>> 0 >= ($124 - 256 | 0) >>> 0) {
    label = 384;
    break;
   }
   $127 = HEAP32[5316] | 0;
   $131 = HEAP32[(HEAP32[$127 + ($123 << 2) >> 2] | 0) + 4 >> 2] | 0;
   if (($131 | 0) == 0) {
    label = 384;
    break;
   }
   $134 = $131 | 0;
   $135 = HEAP32[$134 >> 2] | 0;
   if (($135 | 0) > 255 & ($135 | 0) < ($124 | 0)) {
    HEAP32[(HEAP32[$127 + ($135 - 256 << 2) >> 2] | 0) + 4 >> 2] = 0;
   }
   HEAP32[$134 >> 2] = 0;
   label = 384;
  } else if ((label | 0) == 52) {
   $148 = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
   HEAP32[13924] = $148;
   $150 = $148;
   L231 : while (1) {
    switch ($150 | 0) {
    case 32:
    case 12:
    case 11:
    case 9:
    case 13:
     {
      break;
     }
    case 60:
     {
      label = 55;
      break L231;
      break;
     }
    case 34:
     {
      $c_0 = 34;
      label = 56;
      break L231;
      break;
     }
    default:
     {
      label = 122;
      break L231;
     }
    }
    _minp();
    $150 = HEAP32[13924] | 0;
   }
   L234 : do {
    if ((label | 0) == 55) {
     $c_0 = 62;
     label = 56;
    } else if ((label | 0) == 122) {
     _next();
     $381 = $buf | 0;
     HEAP8[$381] = 0;
     $382 = HEAP32[5310] | 0;
     do {
      if (($382 | 0) == 181) {
       $384 = 181;
       label = 123;
      } else if (($382 | 0) == 10) {
       label = 124;
      } else {
       $390 = $382;
       do {
        _pstrcat($381, 1024, _get_tok_str($390, 21208) | 0) | 0;
        _next();
        $390 = HEAP32[5310] | 0;
       } while (($390 | 0) != 10);
       $phitmp418 = (HEAP8[$381] | 0) == 60;
       $395 = _strlen($381 | 0) | 0;
       if (!(($395 | 0) > 1 & $phitmp418)) {
        label = 124;
        break;
       }
       if ((HEAP8[$buf + ($395 - 1) | 0] | 0) != 62) {
        label = 124;
        break;
       }
       $404 = $395 - 2 | 0;
       _memmove($381 | 0, $buf + 1 | 0, $404 | 0) | 0;
       HEAP8[$buf + $404 | 0] = 0;
       $c_1 = 62;
       break L234;
      }
     } while (0);
     while (1) {
      if ((label | 0) == 123) {
       label = 0;
       if (($384 | 0) == 10) {
        $c_1 = 34;
        break L234;
       } else if (($384 | 0) != 181) {
        label = 124;
        continue;
       }
      } else if ((label | 0) == 124) {
       label = 0;
       _tcc_error(18480, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
      _pstrcat($381, 1024, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0) | 0;
      _next();
      $384 = HEAP32[5310] | 0;
      label = 123;
     }
    }
   } while (0);
   if ((label | 0) == 56) {
    $153 = HEAP32[13912] | 0;
    $155 = (HEAP32[$153 >> 2] | 0) + 1 | 0;
    HEAP32[$153 >> 2] = $155;
    $156 = HEAP8[$155] | 0;
    $157 = $156 & 255;
    HEAP32[13924] = $157;
    if ($156 << 24 >> 24 == 92) {
     $160 = HEAP32[13912] | 0;
     $161 = $160 | 0;
     $162 = HEAP32[$161 >> 2] | 0;
     $163 = $160 + 4 | 0;
     $164 = HEAP32[$163 >> 2] | 0;
     if ($162 >>> 0 < $164 >>> 0) {
      $178 = $162;
      $177 = $164;
     } else {
      $168 = HEAP32[$160 + 8 >> 2] | 0;
      $_pre2_i_i_i = $160 + 1056 | 0;
      if (($168 | 0) == -1) {
       $len_0_i_i_i = 0;
      } else {
       $171 = _read($168 | 0, $_pre2_i_i_i | 0, 8192) | 0;
       $len_0_i_i_i = ($171 | 0) < 0 ? 0 : $171;
      }
      HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i;
      HEAP32[$161 >> 2] = $_pre2_i_i_i;
      $175 = $160 + 1056 + $len_0_i_i_i | 0;
      HEAP32[$163 >> 2] = $175;
      HEAP8[$175] = 92;
      $178 = HEAP32[$161 >> 2] | 0;
      $177 = HEAP32[$163 >> 2] | 0;
     }
     if ($178 >>> 0 < $177 >>> 0) {
      $_0_i_i_i = HEAPU8[$178] | 0;
     } else {
      HEAP32[$161 >> 2] = $177;
      $_0_i_i_i = -1;
     }
     HEAP32[13924] = $_0_i_i_i;
     $184 = $_0_i_i_i;
    } else {
     $184 = $157;
    }
    $185 = $buf | 0;
    L263 : do {
     if (($184 | 0) == ($c_0 | 0)) {
      $q_0_lcssa = $185;
     } else {
      $187 = $buf;
      $q_0281 = $185;
      $188 = $184;
      while (1) {
       if (($188 | 0) == (-1 | 0) | ($188 | 0) == 10) {
        $q_0_lcssa = $q_0281;
        break L263;
       }
       if (($q_0281 - $187 | 0) >>> 0 < 1023 >>> 0) {
        HEAP8[$q_0281] = $188;
        $q_1 = $q_0281 + 1 | 0;
        $197 = HEAP32[13924] | 0;
       } else {
        $q_1 = $q_0281;
        $197 = $188;
       }
       do {
        if (($197 | 0) == 92) {
         L272 : while (1) {
          $200 = HEAP32[13912] | 0;
          $202 = (HEAP32[$200 >> 2] | 0) + 1 | 0;
          HEAP32[$200 >> 2] = $202;
          $203 = HEAP8[$202] | 0;
          $204 = $203 & 255;
          HEAP32[13924] = $204;
          if ($203 << 24 >> 24 == 92) {
           $207 = HEAP32[13912] | 0;
           $208 = $207 | 0;
           $209 = HEAP32[$208 >> 2] | 0;
           $210 = $207 + 4 | 0;
           $211 = HEAP32[$210 >> 2] | 0;
           if ($209 >>> 0 < $211 >>> 0) {
            $225 = $209;
            $224 = $211;
           } else {
            $215 = HEAP32[$207 + 8 >> 2] | 0;
            $_pre2_i_i_i67 = $207 + 1056 | 0;
            if (($215 | 0) == -1) {
             $len_0_i_i_i69 = 0;
            } else {
             $218 = _read($215 | 0, $_pre2_i_i_i67 | 0, 8192) | 0;
             $len_0_i_i_i69 = ($218 | 0) < 0 ? 0 : $218;
            }
            HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i69;
            HEAP32[$208 >> 2] = $_pre2_i_i_i67;
            $222 = $207 + 1056 + $len_0_i_i_i69 | 0;
            HEAP32[$210 >> 2] = $222;
            HEAP8[$222] = 92;
            $225 = HEAP32[$208 >> 2] | 0;
            $224 = HEAP32[$210 >> 2] | 0;
           }
           if ($225 >>> 0 < $224 >>> 0) {
            $_0_i_i_i73 = HEAPU8[$225] | 0;
           } else {
            HEAP32[$208 >> 2] = $224;
            $_0_i_i_i73 = -1;
           }
           HEAP32[13924] = $_0_i_i_i73;
           $231 = $_0_i_i_i73;
          } else {
           $231 = $204;
          }
          do {
           if (($231 | 0) == 10) {
            $234 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$234 >> 2] = (HEAP32[$234 >> 2] | 0) + 1;
            $238 = HEAP32[13912] | 0;
            $240 = (HEAP32[$238 >> 2] | 0) + 1 | 0;
            HEAP32[$238 >> 2] = $240;
            $241 = HEAP8[$240] | 0;
            $242 = $241 & 255;
            HEAP32[13924] = $242;
            if ($241 << 24 >> 24 != 92) {
             $341 = $242;
             break;
            }
            $245 = HEAP32[13912] | 0;
            $246 = $245 | 0;
            $247 = HEAP32[$246 >> 2] | 0;
            $248 = $245 + 4 | 0;
            $249 = HEAP32[$248 >> 2] | 0;
            if ($247 >>> 0 < $249 >>> 0) {
             $263 = $247;
             $262 = $249;
            } else {
             $253 = HEAP32[$245 + 8 >> 2] | 0;
             $_pre2_i_i_i76 = $245 + 1056 | 0;
             if (($253 | 0) == -1) {
              $len_0_i_i_i78 = 0;
             } else {
              $256 = _read($253 | 0, $_pre2_i_i_i76 | 0, 8192) | 0;
              $len_0_i_i_i78 = ($256 | 0) < 0 ? 0 : $256;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i78;
             HEAP32[$246 >> 2] = $_pre2_i_i_i76;
             $260 = $245 + 1056 + $len_0_i_i_i78 | 0;
             HEAP32[$248 >> 2] = $260;
             HEAP8[$260] = 92;
             $263 = HEAP32[$246 >> 2] | 0;
             $262 = HEAP32[$248 >> 2] | 0;
            }
            if ($263 >>> 0 < $262 >>> 0) {
             $_0_i_i_i82 = HEAPU8[$263] | 0;
            } else {
             HEAP32[$246 >> 2] = $262;
             $_0_i_i_i82 = -1;
            }
            HEAP32[13924] = $_0_i_i_i82;
            $341 = $_0_i_i_i82;
           } else if (($231 | 0) == 13) {
            $271 = HEAP32[13912] | 0;
            $273 = (HEAP32[$271 >> 2] | 0) + 1 | 0;
            HEAP32[$271 >> 2] = $273;
            $274 = HEAP8[$273] | 0;
            $275 = $274 & 255;
            HEAP32[13924] = $275;
            if ($274 << 24 >> 24 == 92) {
             $278 = HEAP32[13912] | 0;
             $279 = $278 | 0;
             $280 = HEAP32[$279 >> 2] | 0;
             $281 = $278 + 4 | 0;
             $282 = HEAP32[$281 >> 2] | 0;
             if ($280 >>> 0 < $282 >>> 0) {
              $296 = $280;
              $295 = $282;
             } else {
              $286 = HEAP32[$278 + 8 >> 2] | 0;
              $_pre2_i_i_i85 = $278 + 1056 | 0;
              if (($286 | 0) == -1) {
               $len_0_i_i_i87 = 0;
              } else {
               $289 = _read($286 | 0, $_pre2_i_i_i85 | 0, 8192) | 0;
               $len_0_i_i_i87 = ($289 | 0) < 0 ? 0 : $289;
              }
              HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i87;
              HEAP32[$279 >> 2] = $_pre2_i_i_i85;
              $293 = $278 + 1056 + $len_0_i_i_i87 | 0;
              HEAP32[$281 >> 2] = $293;
              HEAP8[$293] = 92;
              $296 = HEAP32[$279 >> 2] | 0;
              $295 = HEAP32[$281 >> 2] | 0;
             }
             if ($296 >>> 0 < $295 >>> 0) {
              $_0_i_i_i91 = HEAPU8[$296] | 0;
             } else {
              HEAP32[$279 >> 2] = $295;
              $_0_i_i_i91 = -1;
             }
             HEAP32[13924] = $_0_i_i_i91;
             $302 = $_0_i_i_i91;
            } else {
             $302 = $275;
            }
            if (($302 | 0) != 10) {
             $_0_i11 = 0;
             $343 = $302;
             break L272;
            }
            $306 = (HEAP32[13912] | 0) + 16 | 0;
            HEAP32[$306 >> 2] = (HEAP32[$306 >> 2] | 0) + 1;
            $310 = HEAP32[13912] | 0;
            $312 = (HEAP32[$310 >> 2] | 0) + 1 | 0;
            HEAP32[$310 >> 2] = $312;
            $313 = HEAP8[$312] | 0;
            $314 = $313 & 255;
            HEAP32[13924] = $314;
            if ($313 << 24 >> 24 != 92) {
             $341 = $314;
             break;
            }
            $317 = HEAP32[13912] | 0;
            $318 = $317 | 0;
            $319 = HEAP32[$318 >> 2] | 0;
            $320 = $317 + 4 | 0;
            $321 = HEAP32[$320 >> 2] | 0;
            if ($319 >>> 0 < $321 >>> 0) {
             $335 = $319;
             $334 = $321;
            } else {
             $325 = HEAP32[$317 + 8 >> 2] | 0;
             $_pre2_i_i_i94 = $317 + 1056 | 0;
             if (($325 | 0) == -1) {
              $len_0_i_i_i96 = 0;
             } else {
              $328 = _read($325 | 0, $_pre2_i_i_i94 | 0, 8192) | 0;
              $len_0_i_i_i96 = ($328 | 0) < 0 ? 0 : $328;
             }
             HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i96;
             HEAP32[$318 >> 2] = $_pre2_i_i_i94;
             $332 = $317 + 1056 + $len_0_i_i_i96 | 0;
             HEAP32[$320 >> 2] = $332;
             HEAP8[$332] = 92;
             $335 = HEAP32[$318 >> 2] | 0;
             $334 = HEAP32[$320 >> 2] | 0;
            }
            if ($335 >>> 0 < $334 >>> 0) {
             $_0_i_i_i100 = HEAPU8[$335] | 0;
            } else {
             HEAP32[$318 >> 2] = $334;
             $_0_i_i_i100 = -1;
            }
            HEAP32[13924] = $_0_i_i_i100;
            $341 = $_0_i_i_i100;
           } else {
            $_0_i11 = 0;
            $343 = $231;
            break L272;
           }
          } while (0);
          if (($341 | 0) != 92) {
           $_0_i11 = 1;
           $343 = $341;
           break;
          }
         }
         $q_0_be = $_0_i11 ? $q_1 - 1 | 0 : $q_1;
         $345 = $343;
        } else {
         $349 = HEAP32[13912] | 0;
         $351 = (HEAP32[$349 >> 2] | 0) + 1 | 0;
         HEAP32[$349 >> 2] = $351;
         $352 = HEAP8[$351] | 0;
         $353 = $352 & 255;
         HEAP32[13924] = $353;
         if ($352 << 24 >> 24 != 92) {
          $q_0_be = $q_1;
          $345 = $353;
          break;
         }
         $356 = HEAP32[13912] | 0;
         $357 = $356 | 0;
         $358 = HEAP32[$357 >> 2] | 0;
         $359 = $356 + 4 | 0;
         $360 = HEAP32[$359 >> 2] | 0;
         if ($358 >>> 0 < $360 >>> 0) {
          $374 = $358;
          $373 = $360;
         } else {
          $364 = HEAP32[$356 + 8 >> 2] | 0;
          $_pre2_i_i_i12 = $356 + 1056 | 0;
          if (($364 | 0) == -1) {
           $len_0_i_i_i14 = 0;
          } else {
           $367 = _read($364 | 0, $_pre2_i_i_i12 | 0, 8192) | 0;
           $len_0_i_i_i14 = ($367 | 0) < 0 ? 0 : $367;
          }
          HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i14;
          HEAP32[$357 >> 2] = $_pre2_i_i_i12;
          $371 = $356 + 1056 + $len_0_i_i_i14 | 0;
          HEAP32[$359 >> 2] = $371;
          HEAP8[$371] = 92;
          $374 = HEAP32[$357 >> 2] | 0;
          $373 = HEAP32[$359 >> 2] | 0;
         }
         if ($374 >>> 0 < $373 >>> 0) {
          $_0_i_i_i18 = HEAPU8[$374] | 0;
         } else {
          HEAP32[$357 >> 2] = $373;
          $_0_i_i_i18 = -1;
         }
         HEAP32[13924] = $_0_i_i_i18;
         $q_0_be = $q_1;
         $345 = $_0_i_i_i18;
        }
       } while (0);
       if (($345 | 0) == ($c_0 | 0)) {
        $q_0_lcssa = $q_0_be;
        break;
       } else {
        $q_0281 = $q_0_be;
        $188 = $345;
       }
      }
     }
    } while (0);
    HEAP8[$q_0_lcssa] = 0;
    _minp();
    $c_1 = $c_0;
   }
   $407 = $1 + 464 | 0;
   $408 = HEAP32[$407 >> 2] | 0;
   $409 = $1 + 336 | 0;
   if ($408 >>> 0 < ($1 + 464 | 0) >>> 0) {
    $414 = $408;
   } else {
    _tcc_error(18296, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $414 = HEAP32[$407 >> 2] | 0;
   }
   HEAP32[$414 >> 2] = HEAP32[13912];
   $416 = $1 + 124 | 0;
   $420 = (HEAP32[$1 + 132 >> 2] | 0) + (HEAP32[$416 >> 2] | 0) | 0;
   L346 : do {
    if (($420 | 0) > -2) {
     $422 = $1 + 120 | 0;
     $423 = $buf1 | 0;
     $424 = $1 + 128 | 0;
     $425 = $buf | 0;
     $426 = $1 + 2776 | 0;
     $427 = ($c_1 | 0) == 34;
     $i_0276 = -2;
     L349 : while (1) {
      do {
       if (($i_0276 | 0) == (-2 | 0)) {
        if ((HEAP8[$425] | 0) != 47) {
         $i_2 = -2;
         break;
        }
        HEAP8[$423] = 0;
        $i_1 = $420;
        label = 144;
       } else if (($i_0276 | 0) == (-1 | 0)) {
        if (!$427) {
         $i_2 = -1;
         break;
        }
        $436 = (HEAP32[13912] | 0) + 32 | 0;
        _pstrncpy($423, $436, (_tcc_basename($436) | 0) - $436 | 0) | 0;
        $i_1 = -1;
        label = 144;
       } else {
        $443 = HEAP32[$416 >> 2] | 0;
        if (($i_0276 | 0) < ($443 | 0)) {
         $path_0_in = (HEAP32[$422 >> 2] | 0) + ($i_0276 << 2) | 0;
        } else {
         $path_0_in = (HEAP32[$424 >> 2] | 0) + ($i_0276 - $443 << 2) | 0;
        }
        _pstrcpy($423, 1024, HEAP32[$path_0_in >> 2] | 0) | 0;
        _pstrcat($423, 1024, 18184) | 0;
        $i_1 = $i_0276;
        label = 144;
       }
      } while (0);
      L361 : do {
       if ((label | 0) == 144) {
        label = 0;
        _pstrcat($423, 1024, $425) | 0;
        do {
         if ((HEAP32[5310] | 0) == 315) {
          $460 = HEAP32[$407 >> 2] | 0;
          if ($460 >>> 0 < $409 >>> 0) {
           break;
          } else {
           $f_0268 = $460;
          }
          while (1) {
           $468 = $f_0268 - 4 | 0;
           if ((_strcmp((HEAP32[$f_0268 >> 2] | 0) + 32 | 0, $423 | 0) | 0) == 0) {
            $i_2 = $i_1;
            break L361;
           }
           if ($468 >>> 0 < $409 >>> 0) {
            break;
           } else {
            $f_0268 = $468;
           }
          }
         }
        } while (0);
        $469 = HEAP8[$423] | 0;
        if ($469 << 24 >> 24 == 0) {
         $h_0_lcssa_i_i = 1;
        } else {
         $s_01_i_i = $423;
         $h_02_i_i = 1;
         $471 = $469;
         do {
          $h_02_i_i = ($h_02_i_i * 263 | 0) + ($471 & 255) | 0;
          $s_01_i_i = $s_01_i_i + 1 | 0;
          $471 = HEAP8[$s_01_i_i] | 0;
         } while ($471 << 24 >> 24 != 0);
         $h_0_lcssa_i_i = $h_02_i_i & 511;
        }
        $i_01_i = HEAP32[$1 + 728 + ($h_0_lcssa_i_i << 2) >> 2] | 0;
        L374 : do {
         if (($i_01_i | 0) != 0) {
          $480 = HEAP32[$426 >> 2] | 0;
          $i_02_i = $i_01_i;
          while (1) {
           $487 = HEAP32[$480 + ($i_02_i - 1 << 2) >> 2] | 0;
           if ((_strcmp($487 + 8 | 0, $423 | 0) | 0) == 0) {
            break;
           }
           $i_02_i = HEAP32[$487 + 4 >> 2] | 0;
           if (($i_02_i | 0) == 0) {
            break L374;
           }
          }
          if (($487 | 0) == 0) {
           break;
          }
          $495 = (HEAP32[$487 >> 2] | 0) - 256 | 0;
          if ($495 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
           break;
          }
          if ((HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($495 << 2) >> 2] | 0) + 4 >> 2] | 0) != 0) {
           label = 384;
           break L182;
          }
         }
        } while (0);
        if ((_tcc_open($1, $423) | 0) < 0) {
         $i_2 = $i_1;
        } else {
         break L349;
        }
       }
      } while (0);
      $527 = $i_2 + 1 | 0;
      if (($527 | 0) < ($420 | 0)) {
       $i_0276 = $527;
      } else {
       $_pre_phi = $425;
       break L346;
      }
     }
     _dynarray_add($1 + 328 | 0, $1 + 332 | 0, _tcc_strdup($423) | 0);
     HEAP32[$407 >> 2] = (HEAP32[$407 >> 2] | 0) + 4;
     if ((HEAP32[$1 + 80 >> 2] | 0) != 0) {
      _put_stabs((HEAP32[13912] | 0) + 32 | 0, 130, 0, 0, 0);
     }
     HEAP32[5308] = HEAP32[5308] | 3;
     HEAP32[13924] = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
     HEAP32[5336] = $2;
     STACKTOP = sp;
     return;
    } else {
     $_pre_phi = $buf | 0;
    }
   } while (0);
   _tcc_error(18008, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $_pre_phi, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   label = 384;
  } else if ((label | 0) == 276) {
   $878 = HEAP32[$42 >> 2] | 0;
   if ($878 >>> 0 > (HEAP32[(HEAP32[13912] | 0) + 28 >> 2] | 0) >>> 0) {
    $885 = $878;
   } else {
    _tcc_error(16648, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $885 = HEAP32[$42 >> 2] | 0;
   }
   $886 = $885 - 4 | 0;
   HEAP32[$42 >> 2] = $886;
   $887 = HEAP32[13912] | 0;
   $889 = HEAP32[$887 + 20 >> 2] | 0;
   if (($889 | 0) == 0) {
    label = 384;
    break;
   }
   if (($886 | 0) != (HEAP32[$887 + 28 >> 2] | 0)) {
    label = 384;
    break;
   }
   HEAP32[$887 + 24 >> 2] = $889;
   HEAP32[(HEAP32[13912] | 0) + 20 >> 2] = 0;
   if ((HEAP32[5310] | 0) != 10) {
    L489 : while (1) {
     $898 = HEAP32[5350] | 0;
     L491 : while (1) {
      if (($898 | 0) == 0) {
       label = 294;
       break;
      }
      $900 = HEAP32[$898 >> 2] | 0;
      HEAP32[5310] = $900;
      if (($900 | 0) == 0) {
       continue L489;
      } else {
       $902 = $898;
      }
      while (1) {
       $903 = $902 + 4 | 0;
       $904 = HEAP32[$902 >> 2] | 0;
       HEAP32[5310] = $904;
       switch ($904 | 0) {
       case 179:
       case 200:
       case 180:
       case 183:
       case 185:
       case 186:
        {
         HEAP32[5302] = HEAP32[$903 >> 2];
         $p_1_i_i150_ph = $902 + 8 | 0;
         break;
        }
       case 181:
       case 184:
       case 206:
        {
         HEAP32[5302] = $903;
         HEAP32[$902 + 8 >> 2] = $902 + 20;
         $p_1_i_i150_ph = $902 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
         break;
        }
       case 193:
        {
         $n_0_ph_i_i143 = 3;
         label = 289;
         break;
        }
       case 192:
       case 201:
       case 202:
        {
         $n_0_ph_i_i143 = 2;
         label = 289;
         break;
        }
       default:
        {
         label = 285;
         break L491;
        }
       }
       if ((label | 0) == 289) {
        label = 0;
        $tab_0_i_i147 = 21208;
        $n_0_i_i146 = $n_0_ph_i_i143;
        $p_0_i_i145 = $903;
        while (1) {
         HEAP32[$tab_0_i_i147 >> 2] = HEAP32[$p_0_i_i145 >> 2];
         $923 = $n_0_i_i146 - 1 | 0;
         if (($923 | 0) == 0) {
          break;
         } else {
          $tab_0_i_i147 = $tab_0_i_i147 + 4 | 0;
          $n_0_i_i146 = $923;
          $p_0_i_i145 = $p_0_i_i145 + 4 | 0;
         }
        }
        $p_1_i_i150_ph = $902 + ($n_0_ph_i_i143 + 1 << 2) | 0;
       }
       $_pr248 = HEAP32[5310] | 0;
       HEAP32[5350] = $p_1_i_i150_ph;
       if (($_pr248 | 0) != 186) {
        $935 = $_pr248;
        break L491;
       }
       HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
       $931 = HEAP32[5350] | 0;
       $932 = HEAP32[$931 >> 2] | 0;
       HEAP32[5310] = $932;
       if (($932 | 0) == 0) {
        $898 = $931;
        continue L491;
       } else {
        $902 = $931;
       }
      }
     }
     if ((label | 0) == 285) {
      label = 0;
      HEAP32[5350] = $903;
      $935 = $904;
     } else if ((label | 0) == 294) {
      label = 0;
      _next_nomacro1();
      $935 = HEAP32[5310] | 0;
     }
     if (($935 | 0) == 32 | ($935 | 0) == 12 | ($935 | 0) == 11 | ($935 | 0) == 9) {
      continue;
     }
     if (($935 | 0) == 10) {
      break;
     }
    }
   }
   HEAP32[5308] = HEAP32[5308] | 4;
   HEAP32[5336] = $2;
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 298) {
   _next();
   if ((HEAP32[5310] | 0) != 179) {
    _tcc_error(16520, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = (HEAP32[5302] | 0) - 1;
   _next();
   $948 = HEAP32[5310] | 0;
   if (($948 | 0) == 10) {
    HEAP32[5336] = $2;
    STACKTOP = sp;
    return;
   } else if (($948 | 0) != 181) {
    _tcc_error(16520, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   _pstrcpy((HEAP32[13912] | 0) + 32 | 0, 1024, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0) | 0;
   label = 384;
  } else if ((label | 0) == 303) {
   $962 = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
   HEAP32[13924] = $962;
   $964 = $962;
   L399 : while (1) {
    switch ($964 | 0) {
    case 32:
    case 12:
    case 11:
    case 9:
    case 13:
     {
      break;
     }
    default:
     {
      break L399;
     }
    }
    _minp();
    $964 = HEAP32[13924] | 0;
   }
   $965 = $buf | 0;
   $966 = $buf;
   $q_2 = $965;
   $967 = $964;
   while (1) {
    if (($967 | 0) == (-1 | 0) | ($967 | 0) == 10) {
     break;
    }
    if (($q_2 - $966 | 0) >>> 0 < 1023 >>> 0) {
     HEAP8[$q_2] = $967;
     $q_3 = $q_2 + 1 | 0;
     $976 = HEAP32[13924] | 0;
    } else {
     $q_3 = $q_2;
     $976 = $967;
    }
    if (($976 | 0) != 92) {
     $1126 = HEAP32[13912] | 0;
     $1128 = (HEAP32[$1126 >> 2] | 0) + 1 | 0;
     HEAP32[$1126 >> 2] = $1128;
     $1129 = HEAP8[$1128] | 0;
     $1130 = $1129 & 255;
     HEAP32[13924] = $1130;
     if ($1129 << 24 >> 24 != 92) {
      $q_2 = $q_3;
      $967 = $1130;
      continue;
     }
     $1133 = HEAP32[13912] | 0;
     $1134 = $1133 | 0;
     $1135 = HEAP32[$1134 >> 2] | 0;
     $1136 = $1133 + 4 | 0;
     $1137 = HEAP32[$1136 >> 2] | 0;
     if ($1135 >>> 0 < $1137 >>> 0) {
      $1151 = $1135;
      $1150 = $1137;
     } else {
      $1141 = HEAP32[$1133 + 8 >> 2] | 0;
      $_pre2_i_i_i33 = $1133 + 1056 | 0;
      if (($1141 | 0) == -1) {
       $len_0_i_i_i35 = 0;
      } else {
       $1144 = _read($1141 | 0, $_pre2_i_i_i33 | 0, 8192) | 0;
       $len_0_i_i_i35 = ($1144 | 0) < 0 ? 0 : $1144;
      }
      HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i35;
      HEAP32[$1134 >> 2] = $_pre2_i_i_i33;
      $1148 = $1133 + 1056 + $len_0_i_i_i35 | 0;
      HEAP32[$1136 >> 2] = $1148;
      HEAP8[$1148] = 92;
      $1151 = HEAP32[$1134 >> 2] | 0;
      $1150 = HEAP32[$1136 >> 2] | 0;
     }
     if ($1151 >>> 0 < $1150 >>> 0) {
      $_0_i_i_i39 = HEAPU8[$1151] | 0;
     } else {
      HEAP32[$1134 >> 2] = $1150;
      $_0_i_i_i39 = -1;
     }
     HEAP32[13924] = $_0_i_i_i39;
     $q_2 = $q_3;
     $967 = $_0_i_i_i39;
     continue;
    }
    L422 : while (1) {
     $979 = HEAP32[13912] | 0;
     $981 = (HEAP32[$979 >> 2] | 0) + 1 | 0;
     HEAP32[$979 >> 2] = $981;
     $982 = HEAP8[$981] | 0;
     $983 = $982 & 255;
     HEAP32[13924] = $983;
     if ($982 << 24 >> 24 == 92) {
      $986 = HEAP32[13912] | 0;
      $987 = $986 | 0;
      $988 = HEAP32[$987 >> 2] | 0;
      $989 = $986 + 4 | 0;
      $990 = HEAP32[$989 >> 2] | 0;
      if ($988 >>> 0 < $990 >>> 0) {
       $1004 = $988;
       $1003 = $990;
      } else {
       $994 = HEAP32[$986 + 8 >> 2] | 0;
       $_pre2_i_i_i103 = $986 + 1056 | 0;
       if (($994 | 0) == -1) {
        $len_0_i_i_i105 = 0;
       } else {
        $997 = _read($994 | 0, $_pre2_i_i_i103 | 0, 8192) | 0;
        $len_0_i_i_i105 = ($997 | 0) < 0 ? 0 : $997;
       }
       HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i105;
       HEAP32[$987 >> 2] = $_pre2_i_i_i103;
       $1001 = $986 + 1056 + $len_0_i_i_i105 | 0;
       HEAP32[$989 >> 2] = $1001;
       HEAP8[$1001] = 92;
       $1004 = HEAP32[$987 >> 2] | 0;
       $1003 = HEAP32[$989 >> 2] | 0;
      }
      if ($1004 >>> 0 < $1003 >>> 0) {
       $_0_i_i_i109 = HEAPU8[$1004] | 0;
      } else {
       HEAP32[$987 >> 2] = $1003;
       $_0_i_i_i109 = -1;
      }
      HEAP32[13924] = $_0_i_i_i109;
      $1010 = $_0_i_i_i109;
     } else {
      $1010 = $983;
     }
     do {
      if (($1010 | 0) == 10) {
       $1013 = (HEAP32[13912] | 0) + 16 | 0;
       HEAP32[$1013 >> 2] = (HEAP32[$1013 >> 2] | 0) + 1;
       $1017 = HEAP32[13912] | 0;
       $1019 = (HEAP32[$1017 >> 2] | 0) + 1 | 0;
       HEAP32[$1017 >> 2] = $1019;
       $1020 = HEAP8[$1019] | 0;
       $1021 = $1020 & 255;
       HEAP32[13924] = $1021;
       if ($1020 << 24 >> 24 != 92) {
        $1120 = $1021;
        break;
       }
       $1024 = HEAP32[13912] | 0;
       $1025 = $1024 | 0;
       $1026 = HEAP32[$1025 >> 2] | 0;
       $1027 = $1024 + 4 | 0;
       $1028 = HEAP32[$1027 >> 2] | 0;
       if ($1026 >>> 0 < $1028 >>> 0) {
        $1042 = $1026;
        $1041 = $1028;
       } else {
        $1032 = HEAP32[$1024 + 8 >> 2] | 0;
        $_pre2_i_i_i112 = $1024 + 1056 | 0;
        if (($1032 | 0) == -1) {
         $len_0_i_i_i114 = 0;
        } else {
         $1035 = _read($1032 | 0, $_pre2_i_i_i112 | 0, 8192) | 0;
         $len_0_i_i_i114 = ($1035 | 0) < 0 ? 0 : $1035;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i114;
        HEAP32[$1025 >> 2] = $_pre2_i_i_i112;
        $1039 = $1024 + 1056 + $len_0_i_i_i114 | 0;
        HEAP32[$1027 >> 2] = $1039;
        HEAP8[$1039] = 92;
        $1042 = HEAP32[$1025 >> 2] | 0;
        $1041 = HEAP32[$1027 >> 2] | 0;
       }
       if ($1042 >>> 0 < $1041 >>> 0) {
        $_0_i_i_i118 = HEAPU8[$1042] | 0;
       } else {
        HEAP32[$1025 >> 2] = $1041;
        $_0_i_i_i118 = -1;
       }
       HEAP32[13924] = $_0_i_i_i118;
       $1120 = $_0_i_i_i118;
      } else if (($1010 | 0) == 13) {
       $1050 = HEAP32[13912] | 0;
       $1052 = (HEAP32[$1050 >> 2] | 0) + 1 | 0;
       HEAP32[$1050 >> 2] = $1052;
       $1053 = HEAP8[$1052] | 0;
       $1054 = $1053 & 255;
       HEAP32[13924] = $1054;
       if ($1053 << 24 >> 24 == 92) {
        $1057 = HEAP32[13912] | 0;
        $1058 = $1057 | 0;
        $1059 = HEAP32[$1058 >> 2] | 0;
        $1060 = $1057 + 4 | 0;
        $1061 = HEAP32[$1060 >> 2] | 0;
        if ($1059 >>> 0 < $1061 >>> 0) {
         $1075 = $1059;
         $1074 = $1061;
        } else {
         $1065 = HEAP32[$1057 + 8 >> 2] | 0;
         $_pre2_i_i_i121 = $1057 + 1056 | 0;
         if (($1065 | 0) == -1) {
          $len_0_i_i_i123 = 0;
         } else {
          $1068 = _read($1065 | 0, $_pre2_i_i_i121 | 0, 8192) | 0;
          $len_0_i_i_i123 = ($1068 | 0) < 0 ? 0 : $1068;
         }
         HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i123;
         HEAP32[$1058 >> 2] = $_pre2_i_i_i121;
         $1072 = $1057 + 1056 + $len_0_i_i_i123 | 0;
         HEAP32[$1060 >> 2] = $1072;
         HEAP8[$1072] = 92;
         $1075 = HEAP32[$1058 >> 2] | 0;
         $1074 = HEAP32[$1060 >> 2] | 0;
        }
        if ($1075 >>> 0 < $1074 >>> 0) {
         $_0_i_i_i127 = HEAPU8[$1075] | 0;
        } else {
         HEAP32[$1058 >> 2] = $1074;
         $_0_i_i_i127 = -1;
        }
        HEAP32[13924] = $_0_i_i_i127;
        $1081 = $_0_i_i_i127;
       } else {
        $1081 = $1054;
       }
       if (($1081 | 0) != 10) {
        $_0_i31 = 0;
        $1122 = $1081;
        break L422;
       }
       $1085 = (HEAP32[13912] | 0) + 16 | 0;
       HEAP32[$1085 >> 2] = (HEAP32[$1085 >> 2] | 0) + 1;
       $1089 = HEAP32[13912] | 0;
       $1091 = (HEAP32[$1089 >> 2] | 0) + 1 | 0;
       HEAP32[$1089 >> 2] = $1091;
       $1092 = HEAP8[$1091] | 0;
       $1093 = $1092 & 255;
       HEAP32[13924] = $1093;
       if ($1092 << 24 >> 24 != 92) {
        $1120 = $1093;
        break;
       }
       $1096 = HEAP32[13912] | 0;
       $1097 = $1096 | 0;
       $1098 = HEAP32[$1097 >> 2] | 0;
       $1099 = $1096 + 4 | 0;
       $1100 = HEAP32[$1099 >> 2] | 0;
       if ($1098 >>> 0 < $1100 >>> 0) {
        $1114 = $1098;
        $1113 = $1100;
       } else {
        $1104 = HEAP32[$1096 + 8 >> 2] | 0;
        $_pre2_i_i_i130 = $1096 + 1056 | 0;
        if (($1104 | 0) == -1) {
         $len_0_i_i_i132 = 0;
        } else {
         $1107 = _read($1104 | 0, $_pre2_i_i_i130 | 0, 8192) | 0;
         $len_0_i_i_i132 = ($1107 | 0) < 0 ? 0 : $1107;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i132;
        HEAP32[$1097 >> 2] = $_pre2_i_i_i130;
        $1111 = $1096 + 1056 + $len_0_i_i_i132 | 0;
        HEAP32[$1099 >> 2] = $1111;
        HEAP8[$1111] = 92;
        $1114 = HEAP32[$1097 >> 2] | 0;
        $1113 = HEAP32[$1099 >> 2] | 0;
       }
       if ($1114 >>> 0 < $1113 >>> 0) {
        $_0_i_i_i136 = HEAPU8[$1114] | 0;
       } else {
        HEAP32[$1097 >> 2] = $1113;
        $_0_i_i_i136 = -1;
       }
       HEAP32[13924] = $_0_i_i_i136;
       $1120 = $_0_i_i_i136;
      } else {
       $_0_i31 = 0;
       $1122 = $1010;
       break L422;
      }
     } while (0);
     if (($1120 | 0) != 92) {
      $_0_i31 = 1;
      $1122 = $1120;
      break;
     }
    }
    $q_2 = $_0_i31 ? $q_3 - 1 | 0 : $q_3;
    $967 = $1122;
   }
   HEAP8[$q_2] = 0;
   if (($45 | 0) == 322) {
    _tcc_error(16344, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $965, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    label = 384;
    break;
   } else {
    _tcc_warning(16232, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $965, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    label = 384;
    break;
   }
  } else if ((label | 0) == 363) {
   _next();
   $1162 = HEAP32[5310] | 0;
   if (($1162 | 0) != 370) {
    $1220 = $1162;
    break;
   }
   _next();
   $1165 = HEAP32[5310] | 0;
   if (($1165 | 0) != 40) {
    $1168 = _get_tok_str($1165, 21208) | 0;
    _tcc_error(18416, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 40, HEAP32[tempVarArgs + 8 >> 2] = $1168, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   _next();
   $1169 = HEAP32[5310] | 0;
   do {
    if (($1169 | 0) == 618) {
     _next();
     $1172 = HEAP32[$1 + 2816 >> 2] | 0;
     if ($1172 >>> 0 > ($1 + 2784 | 0) >>> 0) {
      $1177 = $1172;
      label = 369;
     } else {
      label = 368;
     }
    } else if (($1169 | 0) == 615) {
     _next();
     $1181 = $1 + 2816 | 0;
     $1182 = HEAP32[$1181 >> 2] | 0;
     if ($1182 >>> 0 >= ($1 + 2812 | 0) >>> 0) {
      label = 368;
      break;
     }
     HEAP32[$1181 >> 2] = $1182 + 4;
     $1187 = HEAP32[5310] | 0;
     if (($1187 | 0) != 44) {
      $1190 = _get_tok_str($1187, 21208) | 0;
      _tcc_error(18416, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 44, HEAP32[tempVarArgs + 8 >> 2] = $1190, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     _next();
     $1192 = HEAP32[5310] | 0;
     label = 374;
    } else if (($1169 | 0) == 41) {
     $val_0_i = 0;
    } else {
     $1192 = $1169;
     label = 374;
    }
   } while (0);
   if ((label | 0) == 368) {
    _tcc_error(12560, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $1177 = HEAP32[$1 + 2816 >> 2] | 0;
    label = 369;
   } else if ((label | 0) == 374) {
    if (($1192 | 0) == 179) {
     label = 376;
    } else {
     label = 375;
    }
    while (1) {
     if ((label | 0) == 375) {
      label = 0;
      _tcc_error(12456, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      label = 376;
      continue;
     } else if ((label | 0) == 376) {
      label = 0;
      $1196 = HEAP32[5302] | 0;
      $_off_i = $1196 - 1 | 0;
      if ($_off_i >>> 0 < 16 >>> 0 & ($_off_i & $1196 | 0) == 0) {
       break;
      } else {
       label = 375;
       continue;
      }
     }
    }
    _next();
    $val_0_i = $1196;
   }
   if ((label | 0) == 369) {
    HEAP32[$1 + 2816 >> 2] = $1177 - 4;
    label = 384;
    break;
   }
   HEAP32[HEAP32[$1 + 2816 >> 2] >> 2] = $val_0_i;
   $1204 = HEAP32[5310] | 0;
   if (($1204 | 0) != 41) {
    $1207 = _get_tok_str($1204, 21208) | 0;
    _tcc_error(18416, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 41, HEAP32[tempVarArgs + 8 >> 2] = $1207, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   _next();
   label = 384;
  } else if ((label | 0) == 381) {
   if (($2 & 8 | 0) == 0) {
    $1212 = _get_tok_str($45, 21208) | 0;
    _tcc_warning(16088, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $1212, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    label = 384;
    break;
   }
   $1217 = _parse_line_comment(HEAP32[HEAP32[13912] >> 2] | 0) | 0;
   HEAP32[HEAP32[13912] >> 2] = $1217;
   HEAP32[5336] = $2;
   STACKTOP = sp;
   return;
  }
 } while (0);
 L545 : while (1) {
  if ((label | 0) == 384) {
   label = 0;
   $1220 = HEAP32[5310] | 0;
  }
  if (($1220 | 0) == 10) {
   break;
  }
  while (1) {
   $1222 = HEAP32[5350] | 0;
   L551 : do {
    if (($1222 | 0) == 0) {
     _next_nomacro1();
     $1259 = HEAP32[5310] | 0;
    } else {
     $1224 = HEAP32[$1222 >> 2] | 0;
     HEAP32[5310] = $1224;
     if (($1224 | 0) == 0) {
      label = 384;
      continue L545;
     } else {
      $1226 = $1222;
     }
     L553 : while (1) {
      $1227 = $1226 + 4 | 0;
      $1228 = HEAP32[$1226 >> 2] | 0;
      HEAP32[5310] = $1228;
      switch ($1228 | 0) {
      case 179:
      case 200:
      case 180:
      case 183:
      case 185:
      case 186:
       {
        HEAP32[5302] = HEAP32[$1227 >> 2];
        $p_1_i_i_ph = $1226 + 8 | 0;
        break;
       }
      case 181:
      case 184:
      case 206:
       {
        HEAP32[5302] = $1227;
        HEAP32[$1226 + 8 >> 2] = $1226 + 20;
        $p_1_i_i_ph = $1226 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
        break;
       }
      case 193:
       {
        $n_0_ph_i_i = 3;
        label = 393;
        break;
       }
      case 192:
      case 201:
      case 202:
       {
        $n_0_ph_i_i = 2;
        label = 393;
        break;
       }
      default:
       {
        break L553;
       }
      }
      if ((label | 0) == 393) {
       label = 0;
       $tab_0_i_i = 21208;
       $n_0_i_i = $n_0_ph_i_i;
       $p_0_i_i = $1227;
       while (1) {
        HEAP32[$tab_0_i_i >> 2] = HEAP32[$p_0_i_i >> 2];
        $1247 = $n_0_i_i - 1 | 0;
        if (($1247 | 0) == 0) {
         break;
        } else {
         $tab_0_i_i = $tab_0_i_i + 4 | 0;
         $n_0_i_i = $1247;
         $p_0_i_i = $p_0_i_i + 4 | 0;
        }
       }
       $p_1_i_i_ph = $1226 + ($n_0_ph_i_i + 1 << 2) | 0;
      }
      $_pr253 = HEAP32[5310] | 0;
      HEAP32[5350] = $p_1_i_i_ph;
      if (($_pr253 | 0) != 186) {
       $1259 = $_pr253;
       break L551;
      }
      HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
      $1255 = HEAP32[5350] | 0;
      $1256 = HEAP32[$1255 >> 2] | 0;
      HEAP32[5310] = $1256;
      if (($1256 | 0) == 0) {
       label = 384;
       continue L545;
      } else {
       $1226 = $1255;
      }
     }
     HEAP32[5350] = $1227;
     $1259 = $1228;
    }
   } while (0);
   switch ($1259 | 0) {
   case 32:
   case 12:
   case 11:
   case 9:
   case 13:
    {
     break;
    }
   default:
    {
     label = 384;
     continue L545;
    }
   }
  }
 }
 HEAP32[5336] = $2;
 STACKTOP = sp;
 return;
}
function _unary() {
 var $cval_sroa_2_i142 = 0, $ad_i133 = 0, $n_i134 = 0, $ad_i = 0, $n_i = 0, $cval_i = 0, $cval_i_sroa_4_i = 0, $type_i = 0, $n = 0, $align = 0, $type = 0, $tmpcast = 0, $ad = 0, $boolean = 0, $type1 = 0, $type2 = 0, $ret_sroa_15 = 0, $1 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $12 = 0, $17 = 0, $24 = 0, $25 = 0, $26 = 0, $$etemp$1 = 0, $27$1 = 0, $32 = 0, $36 = 0, $38 = 0, $42 = 0, $47 = 0, $54 = 0, $55 = 0, $56 = 0, $63 = 0, $65 = 0, $69 = 0, $74 = 0, $81 = 0, $82 = 0, $83 = 0, $90 = 0, $92 = 0, $96 = 0, $101 = 0, $108 = 0, $109 = 0, $110 = 0, $117 = 0, $119 = 0, $123 = 0, $128 = 0, $135 = 0, $136 = 0, $137 = 0, $144 = 0, $146 = 0, $150 = 0, $155 = 0, $162 = 0, $163 = 0, $164 = 0, $171 = 0, $173 = 0, $177 = 0, $182 = 0, $189 = 0, $190 = 0, $191 = 0, $198 = 0, $204 = 0, $205 = 0, $208 = 0, $209 = 0, $214 = 0, $217 = 0, $219 = 0, $220 = 0, $221 = 0, $225 = 0, $230 = 0, $237 = 0, $238 = 0, $239 = 0, $240$1 = 0, $245 = 0, $249 = 0, $250 = 0, $254 = 0, $t_0 = 0, $t_0_ = 0, $262 = 0, $265 = 0, $266 = 0, $271 = 0, $_ = 0, $284 = 0, $288 = 0, $r_0_i93 = 0, $_0_i94 = 0, $r_1 = 0, $300 = 0, $301 = 0, $305 = 0, $310 = 0, $317 = 0, $318 = 0, $319 = 0, $320$1 = 0, $327 = 0, $335 = 0, $p_01_i87 = 0, $340 = 0, $346 = 0, $349 = 0, $368 = 0, $370 = 0, $_pre = 0, $383 = 0, $384 = 0, $387 = 0, $388 = 0, $389 = 0, $396 = 0, $398 = 0, $_pre_i81 = 0, $404 = 0, $405 = 0, $409 = 0, $410 = 0, $417 = 0, $420 = 0, $427 = 0, $436 = 0, $440 = 0, $p_01_i = 0, $445 = 0, $451 = 0, $452 = 0, $453 = 0, $457 = 0, $462 = 0, $469 = 0, $470 = 0, $471 = 0, $476 = 0, $480 = 0, $482 = 0, $483 = 0, $487 = 0, $492 = 0, $499 = 0, $500 = 0, $501 = 0, $$etemp$43 = 0, $502$1 = 0, $507 = 0, $511 = 0, $513 = 0, $520 = 0, $521 = 0, $525 = 0, $530 = 0, $537 = 0, $538 = 0, $539 = 0, $$etemp$50 = 0, $540$1 = 0, $545 = 0, $549 = 0, $553 = 0, $554 = 0, $555 = 0, $556$1 = 0, $559 = 0, $574 = 0, $585 = 0, $586 = 0, $590 = 0, $595 = 0, $602 = 0, $603 = 0, $604 = 0, $$etemp$61 = 0, $605$1 = 0, $610 = 0, $614 = 0, $619 = 0, $620 = 0, $621 = 0, $625 = 0, $630 = 0, $637 = 0, $638 = 0, $639 = 0, $$etemp$68 = 0, $640$1 = 0, $645 = 0, $649 = 0, $651 = 0, $652 = 0, $653 = 0, $657 = 0, $662 = 0, $669 = 0, $670 = 0, $671 = 0, $$etemp$75 = 0, $672$1 = 0, $677 = 0, $681 = 0, $684 = 0, $698 = 0, $701 = 0, $704 = 0, $705 = 0, $706 = 0, $710 = 0, $715 = 0, $722 = 0, $723 = 0, $724 = 0, $$etemp$90 = 0, $725$1 = 0, $730 = 0, $734 = 0, $736 = 0, $739 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $761 = 0, $763 = 0, $_lcssa161 = 0, $_lcssa160 = 0, $766 = 0, $767 = 0, $782 = 0, $783 = 0, $787 = 0, $792 = 0, $799 = 0, $800 = 0, $801 = 0, $$etemp$97 = 0, $802$1 = 0, $807 = 0, $811 = 0, $816 = 0, $820 = 0, $823 = 0, $825 = 0, $826 = 0, $830 = 0, $835 = 0, $842 = 0, $843 = 0, $844 = 0, $853 = 0, $857 = 0, $level_0164 = 0, $860 = 0, $863 = 0, $865 = 0, $866 = 0, $876 = 0, $877 = 0, $881 = 0, $886 = 0, $893 = 0, $894 = 0, $895 = 0, $$etemp$109 = 0, $896$1 = 0, $901 = 0, $905 = 0, $908 = 0, $910 = 0, $914 = 0, $915 = 0, $921 = 0, $s_0 = 0, $926 = 0, $927 = 0, $933 = 0, $934 = 0, $939 = 0, $942 = 0, $943 = 0, $947 = 0, $952 = 0, $959 = 0, $960 = 0, $961 = 0, $962 = 0, $963$1 = 0, $968 = 0, $972 = 0, $976 = 0, $980 = 0, $985 = 0, $992 = 0, $993 = 0, $994 = 0, $1001 = 0, $1003 = 0, $1007 = 0, $1012 = 0, $1019 = 0, $1020 = 0, $1021 = 0, $1028 = 0, $1030 = 0, $1034 = 0, $1039 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1055 = 0, $1058 = 0, $1066 = 0, $1071 = 0, $1078 = 0, $s_1 = 0, $1082 = 0, $1088 = 0, $_pre_phi = 0, $r_2_off0 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $1103 = 0, $1108 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119$1 = 0, $1124 = 0, $1128 = 0, $1129 = 0, $1139 = 0, $1140 = 0, $tmpcast_i = 0, $1142 = 0, $1143 = 0, $1147 = 0, $1150 = 0, $1152 = 0, $_pre233 = 0, $1156 = 0, $1157 = 0, $_pre_i13 = 0, $1163 = 0, $1164 = 0, $1168 = 0, $1169 = 0, $1175 = 0, $1182 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $s_2 = 0, $1189 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $$etemp$145 = 0, $1200$1 = 0, $1202 = 0, $1203 = 0, $1207 = 0, $1212 = 0, $1219 = 0, $1220 = 0, $1221 = 0, $$etemp$151 = 0, $1222$1 = 0, $1227 = 0, $1231 = 0, $1234 = 0, $1235 = 0, $1236$1 = 0, $1238 = 0, $1241 = 0, $1243 = 0, $1247 = 0, $r_0_i = 0, $_0_i = 0, $1253 = 0, $1264 = 0, $1271 = 0, $1274 = 0, $1292 = 0, $1294 = 0, $1304 = 0, $1305 = 0, $1306$1 = 0, $1314 = 0, $1320 = 0, $1322 = 0, $1323 = 0, $1329 = 0, $1334 = 0, $1335 = 0, $1336$0 = 0, $1336$1 = 0, $1337 = 0, $1341 = 0, $1346 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1360 = 0, $1364 = 0, $1365 = 0, $1368 = 0, $1370 = 0, $1372 = 0, $1373$0 = 0, $1373$1 = 0, $1375 = 0, $1378 = 0, $1379 = 0, $1380 = 0, $1381$0 = 0, $1381$1 = 0, $nb_args_0 = 0, $1384 = 0, $sa_0 = 0, $nb_args_1 = 0, $1386 = 0, $1390 = 0, $1401 = 0, $1402$0 = 0, $1402$1 = 0, $1405 = 0, $1408 = 0, $1412 = 0, $sa_1 = 0, $sa_2 = 0, $nb_args_2 = 0, $1425 = 0, $1427 = 0, $1431 = 0, $1436 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1450 = 0, $1454 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $cval_sroa_2_i142 = sp | 0;
 $ad_i133 = sp + 16 | 0;
 $n_i134 = sp + 32 | 0;
 $ad_i = sp + 40 | 0;
 $n_i = sp + 56 | 0;
 $cval_i = sp + 64 | 0;
 $cval_i_sroa_4_i = sp + 80 | 0;
 $type_i = sp + 96 | 0;
 $n = sp + 104 | 0;
 $align = sp + 112 | 0;
 $type = sp + 120 | 0;
 $tmpcast = $type;
 $ad = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $boolean = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $type1 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $type2 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $ret_sroa_15 = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $1 = HEAP32[5034] | 0;
 HEAP32[5034] = 0;
 L1 : while (1) {
  $3 = HEAP32[5310] | 0;
  switch ($3 | 0) {
  case 42:
   {
    label = 85;
    break L1;
    break;
   }
  case 38:
   {
    label = 86;
    break L1;
    break;
   }
  case 179:
  case 180:
  case 183:
   {
    label = 4;
    break L1;
    break;
   }
  case 365:
   {
    label = 148;
    break L1;
    break;
   }
  case 366:
   {
    label = 158;
    break L1;
    break;
   }
  case 367:
   {
    label = 174;
    break L1;
    break;
   }
  case 332:
   {
    label = 48;
    break L1;
    break;
   }
  case 164:
  case 162:
   {
    label = 184;
    break L1;
    break;
   }
  case 45:
   {
    label = 185;
    break L1;
    break;
   }
  case 126:
   {
    label = 107;
    break L1;
    break;
   }
  case 184:
   {
    label = 54;
    break L1;
    break;
   }
  case 181:
   {
    $t_0 = 1;
    label = 55;
    break L1;
    break;
   }
  case 301:
  case 304:
  case 305:
   {
    label = 121;
    break L1;
    break;
   }
  case 192:
   {
    label = 34;
    break L1;
    break;
   }
  case 291:
   {
    break;
   }
  case 334:
   {
    label = 212;
    break L1;
    break;
   }
  case 335:
   {
    label = 218;
    break L1;
    break;
   }
  case 40:
   {
    label = 56;
    break L1;
    break;
   }
  case 33:
   {
    label = 93;
    break L1;
    break;
   }
  case 200:
   {
    label = 10;
    break L1;
    break;
   }
  case 193:
   {
    label = 40;
    break L1;
    break;
   }
  case 201:
   {
    label = 16;
    break L1;
    break;
   }
  case 202:
   {
    label = 22;
    break L1;
    break;
   }
  case 185:
   {
    label = 28;
    break L1;
    break;
   }
  case 330:
   {
    label = 46;
    break L1;
    break;
   }
  case 160:
   {
    label = 191;
    break L1;
    break;
   }
  case 43:
   {
    label = 113;
    break L1;
    break;
   }
  case 333:
   {
    label = 206;
    break L1;
    break;
   }
  default:
   {
    label = 224;
    break L1;
   }
  }
  _next();
 }
 do {
  if ((label | 0) == 4) {
   $6 = HEAP32[5302] | 0;
   $7 = $cval_i_sroa_4_i | 0;
   $8 = HEAP32[5024] | 0;
   if ($8 >>> 0 < 66472 >>> 0) {
    $12 = $8;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $12 = HEAP32[5024] | 0;
   }
   do {
    if ($12 >>> 0 < 56272 >>> 0) {
     $24 = $12;
    } else {
     $17 = HEAPU16[$12 + 8 >> 1] | 0;
     if (!(($17 & 63 | 0) == 51 | ($17 & 62 | 0) == 52)) {
      $24 = $12;
      break;
     }
     _gv(1) | 0;
     $24 = HEAP32[5024] | 0;
    }
   } while (0);
   $25 = $24 + 40 | 0;
   HEAP32[5024] = $25;
   $26 = $25;
   $$etemp$1 = 21728;
   $27$1 = HEAP32[$$etemp$1 + 4 >> 2] | 0;
   HEAP32[$26 >> 2] = HEAP32[$$etemp$1 >> 2];
   HEAP32[$26 + 4 >> 2] = $27$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $32 = HEAP32[5024] | 0;
   HEAP32[$32 + 16 >> 2] = $6;
   $36 = $32 + 20 | 0;
   HEAP32[$36 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$36 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$36 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   _next();
  } else if ((label | 0) == 10) {
   $38 = HEAP32[5024] | 0;
   if ($38 >>> 0 < 66472 >>> 0) {
    $42 = $38;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $42 = HEAP32[5024] | 0;
   }
   do {
    if ($42 >>> 0 < 56272 >>> 0) {
     $54 = $42;
    } else {
     $47 = HEAPU16[$42 + 8 >> 1] | 0;
     if (!(($47 & 63 | 0) == 51 | ($47 & 62 | 0) == 52)) {
      $54 = $42;
      break;
     }
     _gv(1) | 0;
     $54 = HEAP32[5024] | 0;
    }
   } while (0);
   $55 = $54 + 40 | 0;
   HEAP32[5024] = $55;
   $56 = $55;
   HEAP32[$56 >> 2] = 16;
   HEAP32[$56 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $63 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$63 >> 2] = HEAP32[5302];
   HEAP32[$63 + 4 >> 2] = HEAP32[5303];
   HEAP32[$63 + 8 >> 2] = HEAP32[5304];
   HEAP32[$63 + 12 >> 2] = HEAP32[5305];
   _next();
  } else if ((label | 0) == 16) {
   $65 = HEAP32[5024] | 0;
   if ($65 >>> 0 < 66472 >>> 0) {
    $69 = $65;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $69 = HEAP32[5024] | 0;
   }
   do {
    if ($69 >>> 0 < 56272 >>> 0) {
     $81 = $69;
    } else {
     $74 = HEAPU16[$69 + 8 >> 1] | 0;
     if (!(($74 & 63 | 0) == 51 | ($74 & 62 | 0) == 52)) {
      $81 = $69;
      break;
     }
     _gv(1) | 0;
     $81 = HEAP32[5024] | 0;
    }
   } while (0);
   $82 = $81 + 40 | 0;
   HEAP32[5024] = $82;
   $83 = $82;
   HEAP32[$83 >> 2] = 12;
   HEAP32[$83 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $90 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$90 >> 2] = HEAP32[5302];
   HEAP32[$90 + 4 >> 2] = HEAP32[5303];
   HEAP32[$90 + 8 >> 2] = HEAP32[5304];
   HEAP32[$90 + 12 >> 2] = HEAP32[5305];
   _next();
  } else if ((label | 0) == 22) {
   $92 = HEAP32[5024] | 0;
   if ($92 >>> 0 < 66472 >>> 0) {
    $96 = $92;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $96 = HEAP32[5024] | 0;
   }
   do {
    if ($96 >>> 0 < 56272 >>> 0) {
     $108 = $96;
    } else {
     $101 = HEAPU16[$96 + 8 >> 1] | 0;
     if (!(($101 & 63 | 0) == 51 | ($101 & 62 | 0) == 52)) {
      $108 = $96;
      break;
     }
     _gv(1) | 0;
     $108 = HEAP32[5024] | 0;
    }
   } while (0);
   $109 = $108 + 40 | 0;
   HEAP32[5024] = $109;
   $110 = $109;
   HEAP32[$110 >> 2] = 28;
   HEAP32[$110 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $117 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$117 >> 2] = HEAP32[5302];
   HEAP32[$117 + 4 >> 2] = HEAP32[5303];
   HEAP32[$117 + 8 >> 2] = HEAP32[5304];
   HEAP32[$117 + 12 >> 2] = HEAP32[5305];
   _next();
  } else if ((label | 0) == 28) {
   $119 = HEAP32[5024] | 0;
   if ($119 >>> 0 < 66472 >>> 0) {
    $123 = $119;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $123 = HEAP32[5024] | 0;
   }
   do {
    if ($123 >>> 0 < 56272 >>> 0) {
     $135 = $123;
    } else {
     $128 = HEAPU16[$123 + 8 >> 1] | 0;
     if (!(($128 & 63 | 0) == 51 | ($128 & 62 | 0) == 52)) {
      $135 = $123;
      break;
     }
     _gv(1) | 0;
     $135 = HEAP32[5024] | 0;
    }
   } while (0);
   $136 = $135 + 40 | 0;
   HEAP32[5024] = $136;
   $137 = $136;
   HEAP32[$137 >> 2] = 8;
   HEAP32[$137 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $144 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$144 >> 2] = HEAP32[5302];
   HEAP32[$144 + 4 >> 2] = HEAP32[5303];
   HEAP32[$144 + 8 >> 2] = HEAP32[5304];
   HEAP32[$144 + 12 >> 2] = HEAP32[5305];
   _next();
  } else if ((label | 0) == 34) {
   $146 = HEAP32[5024] | 0;
   if ($146 >>> 0 < 66472 >>> 0) {
    $150 = $146;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $150 = HEAP32[5024] | 0;
   }
   do {
    if ($150 >>> 0 < 56272 >>> 0) {
     $162 = $150;
    } else {
     $155 = HEAPU16[$150 + 8 >> 1] | 0;
     if (!(($155 & 63 | 0) == 51 | ($155 & 62 | 0) == 52)) {
      $162 = $150;
      break;
     }
     _gv(1) | 0;
     $162 = HEAP32[5024] | 0;
    }
   } while (0);
   $163 = $162 + 40 | 0;
   HEAP32[5024] = $163;
   $164 = $163;
   HEAP32[$164 >> 2] = 9;
   HEAP32[$164 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $171 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$171 >> 2] = HEAP32[5302];
   HEAP32[$171 + 4 >> 2] = HEAP32[5303];
   HEAP32[$171 + 8 >> 2] = HEAP32[5304];
   HEAP32[$171 + 12 >> 2] = HEAP32[5305];
   _next();
  } else if ((label | 0) == 40) {
   $173 = HEAP32[5024] | 0;
   if ($173 >>> 0 < 66472 >>> 0) {
    $177 = $173;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $177 = HEAP32[5024] | 0;
   }
   do {
    if ($177 >>> 0 < 56272 >>> 0) {
     $189 = $177;
    } else {
     $182 = HEAPU16[$177 + 8 >> 1] | 0;
     if (!(($182 & 63 | 0) == 51 | ($182 & 62 | 0) == 52)) {
      $189 = $177;
      break;
     }
     _gv(1) | 0;
     $189 = HEAP32[5024] | 0;
    }
   } while (0);
   $190 = $189 + 40 | 0;
   HEAP32[5024] = $190;
   $191 = $190;
   HEAP32[$191 >> 2] = 10;
   HEAP32[$191 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $198 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$198 >> 2] = HEAP32[5302];
   HEAP32[$198 + 4 >> 2] = HEAP32[5303];
   HEAP32[$198 + 8 >> 2] = HEAP32[5304];
   HEAP32[$198 + 12 >> 2] = HEAP32[5305];
   _next();
  } else if ((label | 0) == 46) {
   if ((HEAP32[1888] | 0) != 0) {
    label = 48;
    break;
   }
   _next();
   label = 226;
  } else if ((label | 0) == 54) {
   $t_0 = 0;
   label = 55;
  } else if ((label | 0) == 56) {
   _next();
   if ((_parse_btype($tmpcast, $ad) | 0) == 0) {
    if ((HEAP32[5310] | 0) == 123) {
     $335 = HEAP32[5024] | 0;
     if ($335 >>> 0 >= 56272 >>> 0) {
      $p_01_i87 = 56272;
      do {
       $340 = HEAP16[$p_01_i87 + 8 >> 1] & 63;
       if ($340 >>> 0 < 48 >>> 0) {
        _save_reg($340);
       }
       $p_01_i87 = $p_01_i87 + 40 | 0;
      } while ($p_01_i87 >>> 0 <= $335 >>> 0);
     }
     _block(0, 0, 0, 0, 0, 1);
     _skip(41);
     break;
    }
    _expr_eq();
    if ((HEAP32[5310] | 0) == 44) {
     do {
      $346 = HEAP32[5024] | 0;
      $349 = HEAPU16[$346 + 8 >> 1] | 0;
      do {
       if (($349 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($349 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$346 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
      _next();
      _expr_eq();
     } while ((HEAP32[5310] | 0) == 44);
    }
    _skip(41);
    break;
   }
   _type_decl($tmpcast, $ad, $n, 1);
   _skip(41);
   if ((HEAP32[5310] | 0) == 123) {
    $_ = (HEAP32[13632] | 0) == 0 ? 50 : 48;
    $284 = HEAP32[$type >> 2] | 0;
    if (($284 & 32 | 0) == 0) {
     $288 = $284 & 15;
     if (($288 | 0) == 2) {
      $r_0_i93 = 8448;
      label = 61;
     } else if (($288 | 0) == 11 | ($288 | 0) == 1) {
      $r_0_i93 = 4352;
      label = 61;
     } else {
      $_0_i94 = 256;
     }
     if ((label | 0) == 61) {
      $_0_i94 = $r_0_i93 | $284 << 10 & 16384;
     }
     $r_1 = $_0_i94 | $_;
    } else {
     $r_1 = $_;
    }
    _memset($ad | 0, 0, 12) | 0;
    _decl_initializer_alloc($tmpcast, $ad, $r_1, 1, 0, 0, 0);
    break;
   }
   if (($1 | 0) == 0) {
    _unary();
    _gen_cast($tmpcast);
    break;
   }
   $300 = $cval_i;
   $301 = HEAP32[5024] | 0;
   if ($301 >>> 0 < 66472 >>> 0) {
    $305 = $301;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $305 = HEAP32[5024] | 0;
   }
   do {
    if ($305 >>> 0 < 56272 >>> 0) {
     $317 = $305;
    } else {
     $310 = HEAPU16[$305 + 8 >> 1] | 0;
     if (!(($310 & 63 | 0) == 51 | ($310 & 62 | 0) == 52)) {
      $317 = $305;
      break;
     }
     _gv(1) | 0;
     $317 = HEAP32[5024] | 0;
    }
   } while (0);
   $318 = $317 + 40 | 0;
   HEAP32[5024] = $318;
   $319 = $318;
   $320$1 = HEAP32[$type + 4 >> 2] | 0;
   HEAP32[$319 >> 2] = HEAP32[$type >> 2];
   HEAP32[$319 + 4 >> 2] = $320$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $327 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$327 >> 2] = HEAP32[$300 >> 2];
   HEAP32[$327 + 4 >> 2] = HEAP32[$300 + 4 >> 2];
   HEAP32[$327 + 8 >> 2] = HEAP32[$300 + 8 >> 2];
   HEAP32[$327 + 12 >> 2] = HEAP32[$300 + 12 >> 2];
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 85) {
   _next();
   _unary();
   _indir();
  } else if ((label | 0) == 86) {
   _next();
   _unary();
   $368 = HEAP32[5024] | 0;
   $370 = HEAP32[$368 >> 2] | 0;
   do {
    if (($370 & 15 | 0) != 6 & ($370 & 32 | 0) == 0 & ($370 & 49 | 0) == 0) {
     if ((HEAP16[$368 + 8 >> 1] & 256) != 0) {
      $384 = $368;
      $383 = $370;
      break;
     }
     _expect(16680);
     $_pre = HEAP32[5024] | 0;
     $384 = $_pre;
     $383 = HEAP32[$_pre >> 2] | 0;
    } else {
     $384 = $368;
     $383 = $370;
    }
   } while (0);
   $387 = $384 | 0;
   $388 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, $383, -1) | 0;
   $389 = $384 + 4 | 0;
   HEAP32[$388 + 20 >> 2] = HEAP32[$389 >> 2];
   HEAP32[$388 + 8 >> 2] = 0;
   HEAP32[$387 >> 2] = HEAP32[$387 >> 2] & 116608 | 4;
   HEAP32[$389 >> 2] = $388;
   $396 = HEAP32[5024] | 0;
   $398 = HEAP16[$396 + 8 >> 1] | 0;
   if (($398 & 64) == 0) {
    $405 = $396;
    $404 = $398;
   } else {
    _gv(1) | 0;
    $_pre_i81 = HEAP32[5024] | 0;
    $405 = $_pre_i81;
    $404 = HEAP16[$_pre_i81 + 8 >> 1] | 0;
   }
   HEAP16[$405 + 8 >> 1] = $404 & -257;
   $409 = (HEAP32[5024] | 0) + 8 | 0;
   $410 = HEAP16[$409 >> 1] | 0;
   if (($410 & 63) != 49) {
    break;
   }
   HEAP16[$409 >> 1] = $410 & -28992 | 306;
  } else if ((label | 0) == 93) {
   _next();
   _unary();
   $417 = HEAP32[5024] | 0;
   $420 = HEAPU16[$417 + 8 >> 1] | 0;
   if (($420 & 831 | 0) == 48) {
    HEAP32[$boolean >> 2] = 11;
    _gen_cast($boolean);
    $427 = (HEAP32[5024] | 0) + 16 | 0;
    HEAP32[$427 >> 2] = (HEAP32[$427 >> 2] | 0) == 0;
    break;
   }
   if (($420 & 63 | 0) == 51) {
    $436 = $417 + 16 | 0;
    HEAP32[$436 >> 2] = HEAP32[$436 >> 2] ^ 1;
    break;
   }
   $440 = $417 - 40 | 0;
   if ($440 >>> 0 >= 56272 >>> 0) {
    $p_01_i = 56272;
    do {
     $445 = HEAP16[$p_01_i + 8 >> 1] & 63;
     if ($445 >>> 0 < 48 >>> 0) {
      _save_reg($445);
     }
     $p_01_i = $p_01_i + 40 | 0;
    } while ($p_01_i >>> 0 <= $440 >>> 0);
   }
   $451 = _gtst(1, 0) | 0;
   $452 = $cval_i_sroa_4_i | 0;
   $453 = HEAP32[5024] | 0;
   if ($453 >>> 0 < 66472 >>> 0) {
    $457 = $453;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $457 = HEAP32[5024] | 0;
   }
   do {
    if ($457 >>> 0 < 56272 >>> 0) {
     $469 = $457;
    } else {
     $462 = HEAPU16[$457 + 8 >> 1] | 0;
     if (!(($462 & 63 | 0) == 51 | ($462 & 62 | 0) == 52)) {
      $469 = $457;
      break;
     }
     _gv(1) | 0;
     $469 = HEAP32[5024] | 0;
    }
   } while (0);
   $470 = $469 + 40 | 0;
   HEAP32[5024] = $470;
   $471 = $470;
   HEAP32[$471 >> 2] = 0;
   HEAP32[$471 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 52;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $476 = HEAP32[5024] | 0;
   HEAP32[$476 + 16 >> 2] = $451;
   $480 = $476 + 20 | 0;
   HEAP32[$480 >> 2] = HEAP32[$452 >> 2];
   HEAP32[$480 + 4 >> 2] = HEAP32[$452 + 4 >> 2];
   HEAP32[$480 + 8 >> 2] = HEAP32[$452 + 8 >> 2];
  } else if ((label | 0) == 107) {
   _next();
   _unary();
   $482 = $cval_i_sroa_4_i | 0;
   $483 = HEAP32[5024] | 0;
   if ($483 >>> 0 < 66472 >>> 0) {
    $487 = $483;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $487 = HEAP32[5024] | 0;
   }
   do {
    if ($487 >>> 0 < 56272 >>> 0) {
     $499 = $487;
    } else {
     $492 = HEAPU16[$487 + 8 >> 1] | 0;
     if (!(($492 & 63 | 0) == 51 | ($492 & 62 | 0) == 52)) {
      $499 = $487;
      break;
     }
     _gv(1) | 0;
     $499 = HEAP32[5024] | 0;
    }
   } while (0);
   $500 = $499 + 40 | 0;
   HEAP32[5024] = $500;
   $501 = $500;
   $$etemp$43 = 21728;
   $502$1 = HEAP32[$$etemp$43 + 4 >> 2] | 0;
   HEAP32[$501 >> 2] = HEAP32[$$etemp$43 >> 2];
   HEAP32[$501 + 4 >> 2] = $502$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $507 = HEAP32[5024] | 0;
   HEAP32[$507 + 16 >> 2] = -1;
   $511 = $507 + 20 | 0;
   HEAP32[$511 >> 2] = HEAP32[$482 >> 2];
   HEAP32[$511 + 4 >> 2] = HEAP32[$482 + 4 >> 2];
   HEAP32[$511 + 8 >> 2] = HEAP32[$482 + 8 >> 2];
   _gen_op(94);
  } else if ((label | 0) == 113) {
   _next();
   _unary();
   $513 = HEAP32[5024] | 0;
   if ((HEAP32[$513 >> 2] & 15 | 0) == 4) {
    _tcc_error(19872, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $520 = HEAP32[5024] | 0;
   } else {
    $520 = $513;
   }
   $521 = $cval_i_sroa_4_i | 0;
   if ($520 >>> 0 < 66472 >>> 0) {
    $525 = $520;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $525 = HEAP32[5024] | 0;
   }
   do {
    if ($525 >>> 0 < 56272 >>> 0) {
     $537 = $525;
    } else {
     $530 = HEAPU16[$525 + 8 >> 1] | 0;
     if (!(($530 & 63 | 0) == 51 | ($530 & 62 | 0) == 52)) {
      $537 = $525;
      break;
     }
     _gv(1) | 0;
     $537 = HEAP32[5024] | 0;
    }
   } while (0);
   $538 = $537 + 40 | 0;
   HEAP32[5024] = $538;
   $539 = $538;
   $$etemp$50 = 21728;
   $540$1 = HEAP32[$$etemp$50 + 4 >> 2] | 0;
   HEAP32[$539 >> 2] = HEAP32[$$etemp$50 >> 2];
   HEAP32[$539 + 4 >> 2] = $540$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $545 = HEAP32[5024] | 0;
   HEAP32[$545 + 16 >> 2] = 0;
   $549 = $545 + 20 | 0;
   HEAP32[$549 >> 2] = HEAP32[$521 >> 2];
   HEAP32[$549 + 4 >> 2] = HEAP32[$521 + 4 >> 2];
   HEAP32[$549 + 8 >> 2] = HEAP32[$521 + 8 >> 2];
   _gen_op(43);
  } else if ((label | 0) == 121) {
   _next();
   HEAP32[5034] = (HEAP32[5034] | 0) + 1;
   $553 = HEAP32[5338] | 0;
   HEAP32[5338] = 1;
   _unary();
   $554 = HEAP32[5024] | 0;
   $555 = $554;
   $556$1 = HEAP32[$555 + 4 >> 2] | 0;
   HEAP32[$type >> 2] = HEAP32[$555 >> 2];
   HEAP32[$type + 4 >> 2] = $556$1;
   $559 = HEAPU16[$554 + 8 >> 1] | 0;
   do {
    if (($559 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
     if (($559 & 62 | 0) != 52) {
      break;
     }
     _gsym(HEAP32[$554 + 16 >> 2] | 0);
    } else {
     _o(55517);
    }
   } while (0);
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
   HEAP32[5338] = $553;
   $574 = _type_size($tmpcast, $align) | 0;
   do {
    if (($3 | 0) == 301) {
     if ((HEAP32[$type >> 2] & 131072 | 0) != 0) {
      $619 = HEAP32[(HEAP32[$tmpcast + 4 >> 2] | 0) + 12 >> 2] | 0;
      $620 = $cval_sroa_2_i142 | 0;
      $621 = HEAP32[5024] | 0;
      if ($621 >>> 0 < 66472 >>> 0) {
       $625 = $621;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $625 = HEAP32[5024] | 0;
      }
      do {
       if ($625 >>> 0 < 56272 >>> 0) {
        $637 = $625;
       } else {
        $630 = HEAPU16[$625 + 8 >> 1] | 0;
        if (!(($630 & 63 | 0) == 51 | ($630 & 62 | 0) == 52)) {
         $637 = $625;
         break;
        }
        _gv(1) | 0;
        $637 = HEAP32[5024] | 0;
       }
      } while (0);
      $638 = $637 + 40 | 0;
      HEAP32[5024] = $638;
      $639 = $638;
      $$etemp$68 = 21728;
      $640$1 = HEAP32[$$etemp$68 + 4 >> 2] | 0;
      HEAP32[$639 >> 2] = HEAP32[$$etemp$68 >> 2];
      HEAP32[$639 + 4 >> 2] = $640$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $645 = HEAP32[5024] | 0;
      HEAP32[$645 + 16 >> 2] = $619;
      $649 = $645 + 20 | 0;
      HEAP32[$649 >> 2] = HEAP32[$620 >> 2];
      HEAP32[$649 + 4 >> 2] = HEAP32[$620 + 4 >> 2];
      HEAP32[$649 + 8 >> 2] = HEAP32[$620 + 8 >> 2];
      break;
     }
     if (($574 | 0) < 0) {
      _tcc_error(19368, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     $585 = $cval_i_sroa_4_i | 0;
     $586 = HEAP32[5024] | 0;
     if ($586 >>> 0 < 66472 >>> 0) {
      $590 = $586;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $590 = HEAP32[5024] | 0;
     }
     do {
      if ($590 >>> 0 < 56272 >>> 0) {
       $602 = $590;
      } else {
       $595 = HEAPU16[$590 + 8 >> 1] | 0;
       if (!(($595 & 63 | 0) == 51 | ($595 & 62 | 0) == 52)) {
        $602 = $590;
        break;
       }
       _gv(1) | 0;
       $602 = HEAP32[5024] | 0;
      }
     } while (0);
     $603 = $602 + 40 | 0;
     HEAP32[5024] = $603;
     $604 = $603;
     $$etemp$61 = 21320;
     $605$1 = HEAP32[$$etemp$61 + 4 >> 2] | 0;
     HEAP32[$604 >> 2] = HEAP32[$$etemp$61 >> 2];
     HEAP32[$604 + 4 >> 2] = $605$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $610 = HEAP32[5024] | 0;
     HEAP32[$610 + 16 >> 2] = $574;
     $614 = $610 + 20 | 0;
     HEAP32[$614 >> 2] = HEAP32[$585 >> 2];
     HEAP32[$614 + 4 >> 2] = HEAP32[$585 + 4 >> 2];
     HEAP32[$614 + 8 >> 2] = HEAP32[$585 + 8 >> 2];
    } else {
     $651 = HEAP32[$align >> 2] | 0;
     $652 = $cval_i_sroa_4_i | 0;
     $653 = HEAP32[5024] | 0;
     if ($653 >>> 0 < 66472 >>> 0) {
      $657 = $653;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $657 = HEAP32[5024] | 0;
     }
     do {
      if ($657 >>> 0 < 56272 >>> 0) {
       $669 = $657;
      } else {
       $662 = HEAPU16[$657 + 8 >> 1] | 0;
       if (!(($662 & 63 | 0) == 51 | ($662 & 62 | 0) == 52)) {
        $669 = $657;
        break;
       }
       _gv(1) | 0;
       $669 = HEAP32[5024] | 0;
      }
     } while (0);
     $670 = $669 + 40 | 0;
     HEAP32[5024] = $670;
     $671 = $670;
     $$etemp$75 = 21320;
     $672$1 = HEAP32[$$etemp$75 + 4 >> 2] | 0;
     HEAP32[$671 >> 2] = HEAP32[$$etemp$75 >> 2];
     HEAP32[$671 + 4 >> 2] = $672$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $677 = HEAP32[5024] | 0;
     HEAP32[$677 + 16 >> 2] = $651;
     $681 = $677 + 20 | 0;
     HEAP32[$681 >> 2] = HEAP32[$652 >> 2];
     HEAP32[$681 + 4 >> 2] = HEAP32[$652 + 4 >> 2];
     HEAP32[$681 + 8 >> 2] = HEAP32[$652 + 8 >> 2];
    }
   } while (0);
   $684 = HEAP32[5024] | 0;
   HEAP32[$684 >> 2] = HEAP32[$684 >> 2] | 16;
  } else if ((label | 0) == 148) {
   _next();
   _skip(40);
   if ((_parse_btype($type1, $ad_i) | 0) == 0) {
    _expect(12448);
   }
   _type_decl($type1, $ad_i, $n_i, 1);
   _skip(44);
   if ((_parse_btype($type2, $ad_i133) | 0) == 0) {
    _expect(12448);
   }
   _type_decl($type2, $ad_i133, $n_i134, 1);
   _skip(41);
   $698 = $type1 | 0;
   HEAP32[$698 >> 2] = HEAP32[$698 >> 2] & -6145;
   $701 = $type2 | 0;
   HEAP32[$701 >> 2] = HEAP32[$701 >> 2] & -6145;
   $704 = _compare_types($type1, $type2, 0) | 0;
   $705 = $cval_i_sroa_4_i | 0;
   $706 = HEAP32[5024] | 0;
   if ($706 >>> 0 < 66472 >>> 0) {
    $710 = $706;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $710 = HEAP32[5024] | 0;
   }
   do {
    if ($710 >>> 0 < 56272 >>> 0) {
     $722 = $710;
    } else {
     $715 = HEAPU16[$710 + 8 >> 1] | 0;
     if (!(($715 & 63 | 0) == 51 | ($715 & 62 | 0) == 52)) {
      $722 = $710;
      break;
     }
     _gv(1) | 0;
     $722 = HEAP32[5024] | 0;
    }
   } while (0);
   $723 = $722 + 40 | 0;
   HEAP32[5024] = $723;
   $724 = $723;
   $$etemp$90 = 21728;
   $725$1 = HEAP32[$$etemp$90 + 4 >> 2] | 0;
   HEAP32[$724 >> 2] = HEAP32[$$etemp$90 >> 2];
   HEAP32[$724 + 4 >> 2] = $725$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $730 = HEAP32[5024] | 0;
   HEAP32[$730 + 16 >> 2] = $704;
   $734 = $730 + 20 | 0;
   HEAP32[$734 >> 2] = HEAP32[$705 >> 2];
   HEAP32[$734 + 4 >> 2] = HEAP32[$705 + 4 >> 2];
   HEAP32[$734 + 8 >> 2] = HEAP32[$705 + 8 >> 2];
  } else if ((label | 0) == 158) {
   _next();
   _skip(40);
   $736 = HEAP32[5338] | 0;
   HEAP32[5338] = 1;
   _expr_eq();
   $739 = HEAP32[5024] | 0;
   $741 = HEAP16[$739 + 8 >> 1] | 0;
   if ((HEAP32[5310] | 0) == 44) {
    $743 = $739;
    $742 = $741;
    while (1) {
     $744 = $742 & 65535;
     do {
      if (($744 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
       if (($744 & 62 | 0) != 52) {
        break;
       }
       _gsym(HEAP32[$743 + 16 >> 2] | 0);
      } else {
       _o(55517);
      }
     } while (0);
     HEAP32[5024] = (HEAP32[5024] | 0) - 40;
     _next();
     _expr_eq();
     $761 = HEAP32[5024] | 0;
     $763 = HEAP16[$761 + 8 >> 1] | 0;
     if ((HEAP32[5310] | 0) == 44) {
      $743 = $761;
      $742 = $763;
     } else {
      $_lcssa160 = $761;
      $_lcssa161 = $763;
      break;
     }
    }
   } else {
    $_lcssa160 = $739;
    $_lcssa161 = $741;
   }
   $766 = ($_lcssa161 & 831) == 48 | 0;
   $767 = $_lcssa161 & 65535;
   do {
    if (($767 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
     if (($767 & 62 | 0) != 52) {
      break;
     }
     _gsym(HEAP32[$_lcssa160 + 16 >> 2] | 0);
    } else {
     _o(55517);
    }
   } while (0);
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
   HEAP32[5338] = $736;
   _skip(41);
   $782 = $cval_i_sroa_4_i | 0;
   $783 = HEAP32[5024] | 0;
   if ($783 >>> 0 < 66472 >>> 0) {
    $787 = $783;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $787 = HEAP32[5024] | 0;
   }
   do {
    if ($787 >>> 0 < 56272 >>> 0) {
     $799 = $787;
    } else {
     $792 = HEAPU16[$787 + 8 >> 1] | 0;
     if (!(($792 & 63 | 0) == 51 | ($792 & 62 | 0) == 52)) {
      $799 = $787;
      break;
     }
     _gv(1) | 0;
     $799 = HEAP32[5024] | 0;
    }
   } while (0);
   $800 = $799 + 40 | 0;
   HEAP32[5024] = $800;
   $801 = $800;
   $$etemp$97 = 21728;
   $802$1 = HEAP32[$$etemp$97 + 4 >> 2] | 0;
   HEAP32[$801 >> 2] = HEAP32[$$etemp$97 >> 2];
   HEAP32[$801 + 4 >> 2] = $802$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $807 = HEAP32[5024] | 0;
   HEAP32[$807 + 16 >> 2] = $766;
   $811 = $807 + 20 | 0;
   HEAP32[$811 >> 2] = HEAP32[$782 >> 2];
   HEAP32[$811 + 4 >> 2] = HEAP32[$782 + 4 >> 2];
   HEAP32[$811 + 8 >> 2] = HEAP32[$782 + 8 >> 2];
  } else if ((label | 0) == 174) {
   _next();
   _skip(40);
   if ((HEAP32[5310] | 0) == 179) {
    $816 = HEAP32[5302] | 0;
    if (($816 | 0) < 0) {
     label = 176;
    } else {
     $820 = $816;
    }
   } else {
    label = 176;
   }
   if ((label | 0) == 176) {
    _tcc_error(19024, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $820 = HEAP32[5302] | 0;
   }
   _next();
   _skip(41);
   $823 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, 3, -1) | 0;
   HEAP32[$823 + 8 >> 2] = 0;
   $825 = $cval_i_sroa_4_i | 0;
   $826 = HEAP32[5024] | 0;
   if ($826 >>> 0 < 66472 >>> 0) {
    $830 = $826;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $830 = HEAP32[5024] | 0;
   }
   do {
    if ($830 >>> 0 < 56272 >>> 0) {
     $842 = $830;
    } else {
     $835 = HEAPU16[$830 + 8 >> 1] | 0;
     if (!(($835 & 63 | 0) == 51 | ($835 & 62 | 0) == 52)) {
      $842 = $830;
      break;
     }
     _gv(1) | 0;
     $842 = HEAP32[5024] | 0;
    }
   } while (0);
   $843 = $842 + 40 | 0;
   HEAP32[5024] = $843;
   $844 = $843;
   HEAP32[$844 >> 2] = 4;
   HEAP32[$844 + 4 >> 2] = $823;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 50;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $853 = HEAP32[5024] | 0;
   HEAP32[$853 + 16 >> 2] = 0;
   $857 = $853 + 20 | 0;
   HEAP32[$857 >> 2] = HEAP32[$825 >> 2];
   HEAP32[$857 + 4 >> 2] = HEAP32[$825 + 4 >> 2];
   HEAP32[$857 + 8 >> 2] = HEAP32[$825 + 8 >> 2];
   if (($820 | 0) == 0) {
    break;
   } else {
    $level_0164 = $820;
   }
   do {
    $level_0164 = $level_0164 - 1 | 0;
    $860 = HEAP32[5024] | 0;
    $863 = $860 | 0;
    $865 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, HEAP32[$863 >> 2] | 0, -1) | 0;
    $866 = $860 + 4 | 0;
    HEAP32[$865 + 20 >> 2] = HEAP32[$866 >> 2];
    HEAP32[$865 + 8 >> 2] = 0;
    HEAP32[$863 >> 2] = HEAP32[$863 >> 2] & 116608 | 4;
    HEAP32[$866 >> 2] = $865;
    _indir();
   } while (($level_0164 | 0) != 0);
  } else if ((label | 0) == 184) {
   _next();
   _unary();
   _inc(0, $3);
  } else if ((label | 0) == 185) {
   _next();
   $876 = $cval_i_sroa_4_i | 0;
   $877 = HEAP32[5024] | 0;
   if ($877 >>> 0 < 66472 >>> 0) {
    $881 = $877;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $881 = HEAP32[5024] | 0;
   }
   do {
    if ($881 >>> 0 < 56272 >>> 0) {
     $893 = $881;
    } else {
     $886 = HEAPU16[$881 + 8 >> 1] | 0;
     if (!(($886 & 63 | 0) == 51 | ($886 & 62 | 0) == 52)) {
      $893 = $881;
      break;
     }
     _gv(1) | 0;
     $893 = HEAP32[5024] | 0;
    }
   } while (0);
   $894 = $893 + 40 | 0;
   HEAP32[5024] = $894;
   $895 = $894;
   $$etemp$109 = 21728;
   $896$1 = HEAP32[$$etemp$109 + 4 >> 2] | 0;
   HEAP32[$895 >> 2] = HEAP32[$$etemp$109 >> 2];
   HEAP32[$895 + 4 >> 2] = $896$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $901 = HEAP32[5024] | 0;
   HEAP32[$901 + 16 >> 2] = 0;
   $905 = $901 + 20 | 0;
   HEAP32[$905 >> 2] = HEAP32[$876 >> 2];
   HEAP32[$905 + 4 >> 2] = HEAP32[$876 + 4 >> 2];
   HEAP32[$905 + 8 >> 2] = HEAP32[$876 + 8 >> 2];
   _unary();
   _gen_op(45);
  } else if ((label | 0) == 191) {
   $908 = (HEAP32[1888] | 0) == 0;
   _next();
   if ($908) {
    label = 225;
    break;
   }
   $910 = HEAP32[5310] | 0;
   if (($910 | 0) < 313) {
    _expect(18752);
    $914 = HEAP32[5310] | 0;
   } else {
    $914 = $910;
   }
   $915 = _label_find($914) | 0;
   do {
    if (($915 | 0) == 0) {
     $s_0 = _label_push(54520, HEAP32[5310] | 0, 1) | 0;
    } else {
     $921 = $915 + 8 | 0;
     if ((HEAP32[$921 >> 2] | 0) != 2) {
      $s_0 = $915;
      break;
     }
     HEAP32[$921 >> 2] = 1;
     $s_0 = $915;
    }
   } while (0);
   $926 = $s_0 + 16 | 0;
   $927 = $926 | 0;
   if ((HEAP32[$927 >> 2] | 0) == 0) {
    HEAP32[$927 >> 2] = 3;
    $933 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, 3, -1) | 0;
    $934 = $s_0 + 20 | 0;
    HEAP32[$933 + 20 >> 2] = HEAP32[$934 >> 2];
    HEAP32[$933 + 8 >> 2] = 0;
    $939 = HEAP32[$927 >> 2] & 116352;
    HEAP32[$934 >> 2] = $933;
    HEAP32[$927 >> 2] = $939 | 260;
   }
   $942 = $cval_i_sroa_4_i | 0;
   $943 = HEAP32[5024] | 0;
   if ($943 >>> 0 < 66472 >>> 0) {
    $947 = $943;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $947 = HEAP32[5024] | 0;
   }
   do {
    if ($947 >>> 0 < 56272 >>> 0) {
     $959 = $947;
    } else {
     $952 = HEAPU16[$947 + 8 >> 1] | 0;
     if (!(($952 & 63 | 0) == 51 | ($952 & 62 | 0) == 52)) {
      $959 = $947;
      break;
     }
     _gv(1) | 0;
     $959 = HEAP32[5024] | 0;
    }
   } while (0);
   $960 = $959 + 40 | 0;
   HEAP32[5024] = $960;
   $961 = $926;
   $962 = $960;
   $963$1 = HEAP32[$961 + 4 >> 2] | 0;
   HEAP32[$962 >> 2] = HEAP32[$961 >> 2];
   HEAP32[$962 + 4 >> 2] = $963$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 560;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $968 = HEAP32[5024] | 0;
   HEAP32[$968 + 16 >> 2] = 0;
   $972 = $968 + 20 | 0;
   HEAP32[$972 >> 2] = HEAP32[$942 >> 2];
   HEAP32[$972 + 4 >> 2] = HEAP32[$942 + 4 >> 2];
   HEAP32[$972 + 8 >> 2] = HEAP32[$942 + 8 >> 2];
   HEAP32[(HEAP32[5024] | 0) + 32 >> 2] = $s_0;
   _next();
  } else if ((label | 0) == 206) {
   $976 = HEAP32[5024] | 0;
   if ($976 >>> 0 < 66472 >>> 0) {
    $980 = $976;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $980 = HEAP32[5024] | 0;
   }
   do {
    if ($980 >>> 0 < 56272 >>> 0) {
     $992 = $980;
    } else {
     $985 = HEAPU16[$980 + 8 >> 1] | 0;
     if (!(($985 & 63 | 0) == 51 | ($985 & 62 | 0) == 52)) {
      $992 = $980;
      break;
     }
     _gv(1) | 0;
     $992 = HEAP32[5024] | 0;
    }
   } while (0);
   $993 = $992 + 40 | 0;
   HEAP32[5024] = $993;
   $994 = $993;
   HEAP32[$994 >> 2] = 9;
   HEAP32[$994 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $1001 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$1001 >> 2] = 0;
   HEAP32[$1001 + 4 >> 2] = 2146959360;
   _next();
  } else if ((label | 0) == 212) {
   $1003 = HEAP32[5024] | 0;
   if ($1003 >>> 0 < 66472 >>> 0) {
    $1007 = $1003;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $1007 = HEAP32[5024] | 0;
   }
   do {
    if ($1007 >>> 0 < 56272 >>> 0) {
     $1019 = $1007;
    } else {
     $1012 = HEAPU16[$1007 + 8 >> 1] | 0;
     if (!(($1012 & 63 | 0) == 51 | ($1012 & 62 | 0) == 52)) {
      $1019 = $1007;
      break;
     }
     _gv(1) | 0;
     $1019 = HEAP32[5024] | 0;
    }
   } while (0);
   $1020 = $1019 + 40 | 0;
   HEAP32[5024] = $1020;
   $1021 = $1020;
   HEAP32[$1021 >> 2] = 9;
   HEAP32[$1021 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $1028 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$1028 >> 2] = 1;
   HEAP32[$1028 + 4 >> 2] = 2146435072;
   _next();
  } else if ((label | 0) == 218) {
   $1030 = HEAP32[5024] | 0;
   if ($1030 >>> 0 < 66472 >>> 0) {
    $1034 = $1030;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $1034 = HEAP32[5024] | 0;
   }
   do {
    if ($1034 >>> 0 < 56272 >>> 0) {
     $1046 = $1034;
    } else {
     $1039 = HEAPU16[$1034 + 8 >> 1] | 0;
     if (!(($1039 & 63 | 0) == 51 | ($1039 & 62 | 0) == 52)) {
      $1046 = $1034;
      break;
     }
     _gv(1) | 0;
     $1046 = HEAP32[5024] | 0;
    }
   } while (0);
   $1047 = $1046 + 40 | 0;
   HEAP32[5024] = $1047;
   $1048 = $1047;
   HEAP32[$1048 >> 2] = 9;
   HEAP32[$1048 + 4 >> 2] = 0;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $1055 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$1055 >> 2] = 0;
   HEAP32[$1055 + 4 >> 2] = 2146435072;
   _next();
  } else if ((label | 0) == 224) {
   _next();
   if (($3 | 0) < 313) {
    label = 225;
   } else {
    label = 226;
   }
  }
 } while (0);
 if ((label | 0) == 48) {
  $204 = (_strlen(HEAP32[13896] | 0) | 0) + 1 | 0;
  $205 = $type;
  HEAP32[$205 >> 2] = 1;
  $208 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, 1, -1) | 0;
  $209 = $tmpcast + 4 | 0;
  HEAP32[$208 + 20 >> 2] = HEAP32[$209 >> 2];
  HEAP32[$208 + 8 >> 2] = 0;
  $214 = HEAP32[$205 >> 2] & 116608;
  HEAP32[$209 >> 2] = $208;
  HEAP32[$205 >> 2] = $214 | 36;
  HEAP32[$208 + 12 >> 2] = $204;
  $217 = HEAP32[13916] | 0;
  $219 = HEAP32[$217 >> 2] | 0;
  $220 = $cval_i_sroa_4_i | 0;
  $221 = HEAP32[5024] | 0;
  if ($221 >>> 0 < 66472 >>> 0) {
   $225 = $221;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $225 = HEAP32[5024] | 0;
  }
  do {
   if ($225 >>> 0 < 56272 >>> 0) {
    $237 = $225;
   } else {
    $230 = HEAPU16[$225 + 8 >> 1] | 0;
    if (!(($230 & 63 | 0) == 51 | ($230 & 62 | 0) == 52)) {
     $237 = $225;
     break;
    }
    _gv(1) | 0;
    $237 = HEAP32[5024] | 0;
   }
  } while (0);
  $238 = $237 + 40 | 0;
  HEAP32[5024] = $238;
  $239 = $238;
  $240$1 = HEAP32[$type + 4 >> 2] | 0;
  HEAP32[$239 >> 2] = HEAP32[$type >> 2];
  HEAP32[$239 + 4 >> 2] = $240$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 560;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $245 = HEAP32[5024] | 0;
  HEAP32[$245 + 16 >> 2] = 0;
  $249 = $245 + 20 | 0;
  HEAP32[$249 >> 2] = HEAP32[$220 >> 2];
  HEAP32[$249 + 4 >> 2] = HEAP32[$220 + 4 >> 2];
  HEAP32[$249 + 8 >> 2] = HEAP32[$220 + 8 >> 2];
  $250 = _get_sym_ref($tmpcast, $217, $219, $204) | 0;
  HEAP32[(HEAP32[5024] | 0) + 32 >> 2] = $250;
  $254 = _section_ptr_add(HEAP32[13916] | 0, $204) | 0;
  _memcpy($254 | 0, HEAP32[13896] | 0, $204) | 0;
  _next();
 } else if ((label | 0) == 55) {
  $t_0_ = (HEAP32[(HEAP32[5314] | 0) + 60 >> 2] | 0) == 0 ? $t_0 : $t_0 | 2048;
  $262 = $type;
  HEAP32[$262 >> 2] = $t_0_;
  $265 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, $t_0_, -1) | 0;
  $266 = $tmpcast + 4 | 0;
  HEAP32[$265 + 20 >> 2] = HEAP32[$266 >> 2];
  HEAP32[$265 + 8 >> 2] = 0;
  $271 = HEAP32[$262 >> 2] & 116608;
  HEAP32[$266 >> 2] = $265;
  HEAP32[$262 >> 2] = $271 | 36;
  _memset($ad | 0, 0, 12) | 0;
  _decl_initializer_alloc($tmpcast, $ad, 48, 2, 0, 0, 0);
 } else if ((label | 0) == 225) {
  _expect(18448);
  label = 226;
 }
 do {
  if ((label | 0) == 226) {
   $1058 = $3 - 256 | 0;
   if ($1058 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
    $1066 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($1058 << 2) >> 2] | 0) + 16 >> 2] | 0;
    if (($1066 | 0) == 0) {
     label = 228;
    } else {
     $s_1 = $1066;
    }
   } else {
    label = 228;
   }
   if ((label | 0) == 228) {
    if ((HEAP32[5310] | 0) != 40) {
     $1071 = _get_tok_str($3, 0) | 0;
     _tcc_error(18264, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $1071, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    if ((HEAP32[(HEAP32[5314] | 0) + 76 >> 2] | 0) != 0) {
     $1078 = _get_tok_str($3, 0) | 0;
     _tcc_warning(18104, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $1078, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    $s_1 = _external_global_sym($3, 55624, 0) | 0;
   }
   $1082 = $s_1 + 16 | 0;
   do {
    if ((HEAP32[$1082 >> 2] & 1295 | 0) == 1286) {
     $1088 = $s_1 + 12 | 0;
     if ((HEAP32[$1088 >> 2] | 0) != 0) {
      $r_2_off0 = 560;
      $_pre_phi = $1088;
      break;
     }
     _put_extern_sym($s_1, HEAP32[5312] | 0, 0, 0);
     $r_2_off0 = 560;
     $_pre_phi = $1088;
    } else {
     $r_2_off0 = HEAP32[$s_1 + 8 >> 2] & 65535;
     $_pre_phi = $s_1 + 12 | 0;
    }
   } while (0);
   $1097 = HEAP32[$_pre_phi >> 2] | 0;
   $1098 = $cval_i_sroa_4_i | 0;
   $1099 = HEAP32[5024] | 0;
   if ($1099 >>> 0 < 66472 >>> 0) {
    $1103 = $1099;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $1103 = HEAP32[5024] | 0;
   }
   do {
    if ($1103 >>> 0 < 56272 >>> 0) {
     $1115 = $1103;
    } else {
     $1108 = HEAPU16[$1103 + 8 >> 1] | 0;
     if (!(($1108 & 63 | 0) == 51 | ($1108 & 62 | 0) == 52)) {
      $1115 = $1103;
      break;
     }
     _gv(1) | 0;
     $1115 = HEAP32[5024] | 0;
    }
   } while (0);
   $1116 = $1115 + 40 | 0;
   HEAP32[5024] = $1116;
   $1117 = $1082;
   $1118 = $1116;
   $1119$1 = HEAP32[$1117 + 4 >> 2] | 0;
   HEAP32[$1118 >> 2] = HEAP32[$1117 >> 2];
   HEAP32[$1118 + 4 >> 2] = $1119$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $r_2_off0;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $1124 = HEAP32[5024] | 0;
   HEAP32[$1124 + 16 >> 2] = $1097;
   $1128 = $1124 + 20 | 0;
   HEAP32[$1128 >> 2] = HEAP32[$1098 >> 2];
   HEAP32[$1128 + 4 >> 2] = HEAP32[$1098 + 4 >> 2];
   HEAP32[$1128 + 8 >> 2] = HEAP32[$1098 + 8 >> 2];
   $1129 = HEAP32[5024] | 0;
   if ((HEAP16[$1129 + 8 >> 1] & 512) == 0) {
    break;
   }
   HEAP32[$1129 + 32 >> 2] = $s_1;
   HEAP32[(HEAP32[5024] | 0) + 16 >> 2] = 0;
  }
 } while (0);
 $1139 = $cval_i_sroa_4_i | 0;
 $1140 = $ret_sroa_15 | 0;
 $tmpcast_i = $type_i;
 $1142 = $type_i;
 L339 : while (1) {
  $1143 = HEAP32[5310] | 0;
  switch ($1143 | 0) {
  case 91:
   {
    _next();
    _expr_eq();
    if ((HEAP32[5310] | 0) == 44) {
     do {
      $1271 = HEAP32[5024] | 0;
      $1274 = HEAPU16[$1271 + 8 >> 1] | 0;
      do {
       if (($1274 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($1274 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$1271 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
      _next();
      _expr_eq();
     } while ((HEAP32[5310] | 0) == 44);
    }
    _gen_op(43);
    _indir();
    _skip(93);
    continue L339;
    break;
   }
  case 40:
   {
    $1292 = HEAP32[5024] | 0;
    $1294 = HEAP32[$1292 >> 2] | 0;
    do {
     if (($1294 & 15 | 0) == 6) {
      $1314 = $1292 + 8 | 0;
      HEAP16[$1314 >> 1] = HEAP16[$1314 >> 1] & -257;
     } else {
      if (($1294 & 47 | 0) == 4) {
       $1304 = (HEAP32[$1292 + 4 >> 2] | 0) + 16 | 0;
       $1305 = $1292;
       $1306$1 = HEAP32[$1304 + 4 >> 2] | 0;
       HEAP32[$1305 >> 2] = HEAP32[$1304 >> 2];
       HEAP32[$1305 + 4 >> 2] = $1306$1;
       if ((HEAP32[HEAP32[5024] >> 2] & 15 | 0) == 6) {
        break;
       }
      }
      _expect(17752);
     }
    } while (0);
    $1320 = HEAP32[(HEAP32[5024] | 0) + 4 >> 2] | 0;
    _next();
    $1322 = HEAP32[$1320 + 24 >> 2] | 0;
    $1323 = $1320 + 16 | 0;
    do {
     if ((HEAP32[$1323 >> 2] & 15 | 0) == 7) {
      $1329 = _type_size($1323, $align) | 0;
      $1334 = (HEAP32[5356] | 0) - $1329 & -(HEAP32[$align >> 2] | 0);
      HEAP32[5356] = $1334;
      $1335 = $1323;
      $1336$0 = HEAP32[$1335 >> 2] | 0;
      $1336$1 = HEAP32[$1335 + 4 >> 2] | 0;
      $1337 = HEAP32[5024] | 0;
      if ($1337 >>> 0 < 66472 >>> 0) {
       $1341 = $1337;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $1341 = HEAP32[5024] | 0;
      }
      do {
       if ($1341 >>> 0 < 56272 >>> 0) {
        $1353 = $1341;
       } else {
        $1346 = HEAPU16[$1341 + 8 >> 1] | 0;
        if (!(($1346 & 63 | 0) == 51 | ($1346 & 62 | 0) == 52)) {
         $1353 = $1341;
         break;
        }
        _gv(1) | 0;
        $1353 = HEAP32[5024] | 0;
       }
      } while (0);
      $1354 = $1353 + 40 | 0;
      HEAP32[5024] = $1354;
      $1355 = $1354;
      HEAP32[$1355 >> 2] = 0;
      HEAP32[$1355 + 4 >> 2] = 0;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 50;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $1360 = HEAP32[5024] | 0;
      HEAP32[$1360 + 16 >> 2] = $1334;
      $1364 = $1360 + 20 | 0;
      HEAP32[$1364 >> 2] = HEAP32[$1139 >> 2];
      HEAP32[$1364 + 4 >> 2] = HEAP32[$1139 + 4 >> 2];
      HEAP32[$1364 + 8 >> 2] = HEAP32[$1139 + 8 >> 2];
      $1365 = HEAP32[5024] | 0;
      $1368 = HEAP32[$1365 + 16 >> 2] | 0;
      $1370 = $1365 + 20 | 0;
      HEAP32[$1140 >> 2] = HEAP32[$1370 >> 2];
      HEAP32[$1140 + 4 >> 2] = HEAP32[$1370 + 4 >> 2];
      HEAP32[$1140 + 8 >> 2] = HEAP32[$1370 + 8 >> 2];
      $nb_args_0 = 1;
      $1381$1 = $1336$1;
      $1381$0 = $1336$0;
      $1380 = 306;
      $1379 = 48;
      $1378 = $1368;
     } else {
      $1372 = $1323;
      $1373$0 = HEAP32[$1372 >> 2] | 0;
      $1373$1 = HEAP32[$1372 + 4 >> 2] | 0;
      $1375 = $1373$0 & 15;
      if (($1375 - 8 | 0) >>> 0 < 3 >>> 0) {
       $nb_args_0 = 0;
       $1381$1 = $1373$1;
       $1381$0 = $1373$0;
       $1380 = 3;
       $1379 = 48;
       $1378 = 0;
       break;
      }
      $nb_args_0 = 0;
      $1381$1 = $1373$1;
      $1381$0 = $1373$0;
      $1380 = 0;
      $1379 = ($1375 | 0) == 12 ? 2 : 48;
      $1378 = 0;
     }
    } while (0);
    L372 : do {
     if ((HEAP32[5310] | 0) == 41) {
      $nb_args_2 = $nb_args_0;
      $sa_2 = $1322;
     } else {
      $1384 = $1320 + 12 | 0;
      $nb_args_1 = $nb_args_0;
      $sa_0 = $1322;
      while (1) {
       _expr_eq();
       $1386 = HEAP32[$1384 >> 2] | 0;
       do {
        if (($1386 | 0) == 2) {
         label = 297;
        } else {
         $1390 = ($sa_0 | 0) == 0;
         if (($1386 | 0) == 3 & $1390) {
          label = 297;
          break;
         }
         if ($1390) {
          _tcc_error(12528, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
          STACKTOP = tempVarArgs;
          $sa_1 = 0;
          $1412 = $nb_args_1 + 1 | 0;
          break;
         } else {
          $1401 = $sa_0 + 16 | 0;
          $1402$0 = HEAP32[$1401 >> 2] | 0;
          $1402$1 = HEAP32[$1401 + 4 >> 2] | 0;
          HEAP32[$type_i >> 2] = $1402$0;
          HEAP32[$type_i + 4 >> 2] = $1402$1;
          HEAP32[$1142 >> 2] = $1402$0 & -2049;
          _gen_assign_cast($tmpcast_i);
          $1408 = $nb_args_1 + 1 | 0;
          label = 303;
          break;
         }
        }
       } while (0);
       if ((label | 0) == 297) {
        label = 0;
        if ((HEAP32[HEAP32[5024] >> 2] & 15 | 0) == 8) {
         HEAP32[$1142 >> 2] = 9;
         _gen_cast($tmpcast_i);
        }
        $1405 = $nb_args_1 + 1 | 0;
        if (($sa_0 | 0) == 0) {
         $sa_1 = 0;
         $1412 = $1405;
        } else {
         $1408 = $1405;
         label = 303;
        }
       }
       if ((label | 0) == 303) {
        label = 0;
        $sa_1 = HEAP32[$sa_0 + 24 >> 2] | 0;
        $1412 = $1408;
       }
       if ((HEAP32[5310] | 0) == 41) {
        $nb_args_2 = $1412;
        $sa_2 = $sa_1;
        break L372;
       }
       _skip(44);
       $nb_args_1 = $1412;
       $sa_0 = $sa_1;
      }
     }
    } while (0);
    if (($sa_2 | 0) != 0) {
     _tcc_error(17600, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    _skip(41);
    if ((HEAP32[5338] | 0) == 0) {
     _gfunc_call($nb_args_2);
     $1427 = HEAP32[5024] | 0;
    } else {
     $1425 = (HEAP32[5024] | 0) + (~$nb_args_2 * 40 | 0) | 0;
     HEAP32[5024] = $1425;
     $1427 = $1425;
    }
    if ($1427 >>> 0 < 66472 >>> 0) {
     $1431 = $1427;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $1431 = HEAP32[5024] | 0;
    }
    do {
     if ($1431 >>> 0 < 56272 >>> 0) {
      $1443 = $1431;
     } else {
      $1436 = HEAPU16[$1431 + 8 >> 1] | 0;
      if (!(($1436 & 63 | 0) == 51 | ($1436 & 62 | 0) == 52)) {
       $1443 = $1431;
       break;
      }
      _gv(1) | 0;
      $1443 = HEAP32[5024] | 0;
     }
    } while (0);
    $1444 = $1443 + 40 | 0;
    HEAP32[5024] = $1444;
    $1445 = $1444;
    HEAP32[$1445 >> 2] = $1381$0;
    HEAP32[$1445 + 4 >> 2] = $1381$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $1380;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $1450 = HEAP32[5024] | 0;
    HEAP32[$1450 + 16 >> 2] = $1378;
    $1454 = $1450 + 20 | 0;
    HEAP32[$1454 >> 2] = HEAP32[$1140 >> 2];
    HEAP32[$1454 + 4 >> 2] = HEAP32[$1140 + 4 >> 2];
    HEAP32[$1454 + 8 >> 2] = HEAP32[$1140 + 8 >> 2];
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = $1379;
    continue L339;
    break;
   }
  case 164:
  case 162:
   {
    _inc(1, $1143);
    _next();
    continue L339;
    break;
   }
  case 203:
   {
    _indir();
    break;
   }
  case 46:
   {
    break;
   }
  default:
   {
    break L339;
   }
  }
  $1147 = HEAP32[5024] | 0;
  $1150 = HEAP32[$1147 >> 2] & 6144;
  $1152 = HEAP16[$1147 + 8 >> 1] | 0;
  if (($1152 & 256) == 0) {
   _expect(16680);
   $_pre233 = HEAP32[5024] | 0;
   $1157 = $_pre233;
   $1156 = HEAP16[$_pre233 + 8 >> 1] | 0;
  } else {
   $1157 = $1147;
   $1156 = $1152;
  }
  if (($1156 & 64) == 0) {
   $1164 = $1157;
   $1163 = $1156;
  } else {
   _gv(1) | 0;
   $_pre_i13 = HEAP32[5024] | 0;
   $1164 = $_pre_i13;
   $1163 = HEAP16[$_pre_i13 + 8 >> 1] | 0;
  }
  HEAP16[$1164 + 8 >> 1] = $1163 & -257;
  $1168 = (HEAP32[5024] | 0) + 8 | 0;
  $1169 = HEAP16[$1168 >> 1] | 0;
  if (($1169 & 63) == 49) {
   HEAP16[$1168 >> 1] = $1169 & -28992 | 306;
  }
  _next();
  $1175 = HEAP32[5024] | 0;
  if ((HEAP32[$1175 >> 2] & 15 | 0) == 7) {
   $1182 = $1175;
  } else {
   _expect(17968);
   $1182 = HEAP32[5024] | 0;
  }
  $1184 = HEAP32[$1182 + 4 >> 2] | 0;
  $1185 = HEAP32[5310] | 0;
  $1186 = $1185 | 536870912;
  HEAP32[5310] = $1186;
  $s_2 = $1184;
  while (1) {
   $1189 = HEAP32[$s_2 + 24 >> 2] | 0;
   if (($1189 | 0) == 0) {
    label = 259;
    break;
   }
   if ((HEAP32[$1189 >> 2] | 0) == ($1186 | 0)) {
    $1198 = $1189;
    $1197 = $1182;
    break;
   } else {
    $s_2 = $1189;
   }
  }
  if ((label | 0) == 259) {
   label = 0;
   $1196 = _get_tok_str($1185 & -536870913, 0) | 0;
   _tcc_error(17848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $1196, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $1198 = 0;
   $1197 = HEAP32[5024] | 0;
  }
  $1199 = $1197;
  $$etemp$145 = 55688;
  $1200$1 = HEAP32[$$etemp$145 + 4 >> 2] | 0;
  HEAP32[$1199 >> 2] = HEAP32[$$etemp$145 >> 2];
  HEAP32[$1199 + 4 >> 2] = $1200$1;
  $1202 = HEAP32[$1198 + 12 >> 2] | 0;
  $1203 = HEAP32[5024] | 0;
  if ($1203 >>> 0 < 66472 >>> 0) {
   $1207 = $1203;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $1207 = HEAP32[5024] | 0;
  }
  do {
   if ($1207 >>> 0 < 56272 >>> 0) {
    $1219 = $1207;
   } else {
    $1212 = HEAPU16[$1207 + 8 >> 1] | 0;
    if (!(($1212 & 63 | 0) == 51 | ($1212 & 62 | 0) == 52)) {
     $1219 = $1207;
     break;
    }
    _gv(1) | 0;
    $1219 = HEAP32[5024] | 0;
   }
  } while (0);
  $1220 = $1219 + 40 | 0;
  HEAP32[5024] = $1220;
  $1221 = $1220;
  $$etemp$151 = 21728;
  $1222$1 = HEAP32[$$etemp$151 + 4 >> 2] | 0;
  HEAP32[$1221 >> 2] = HEAP32[$$etemp$151 >> 2];
  HEAP32[$1221 + 4 >> 2] = $1222$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $1227 = HEAP32[5024] | 0;
  HEAP32[$1227 + 16 >> 2] = $1202;
  $1231 = $1227 + 20 | 0;
  HEAP32[$1231 >> 2] = HEAP32[$1139 >> 2];
  HEAP32[$1231 + 4 >> 2] = HEAP32[$1139 + 4 >> 2];
  HEAP32[$1231 + 8 >> 2] = HEAP32[$1139 + 8 >> 2];
  _gen_op(43);
  $1234 = $1198 + 16 | 0;
  $1235 = HEAP32[5024] | 0;
  $1236$1 = HEAP32[$1234 + 4 >> 2] | 0;
  HEAP32[$1235 >> 2] = HEAP32[$1234 >> 2];
  HEAP32[$1235 + 4 >> 2] = $1236$1;
  $1238 = HEAP32[5024] | 0;
  HEAP32[$1238 >> 2] = HEAP32[$1238 >> 2] | $1150;
  $1241 = HEAP32[5024] | 0;
  $1243 = HEAP32[$1241 >> 2] | 0;
  do {
   if (($1243 & 32 | 0) == 0) {
    $1247 = $1243 & 15;
    if (($1247 | 0) == 2) {
     $r_0_i = 8448;
     label = 268;
    } else if (($1247 | 0) == 11 | ($1247 | 0) == 1) {
     $r_0_i = 4352;
     label = 268;
    } else {
     $_0_i = 256;
    }
    if ((label | 0) == 268) {
     label = 0;
     $_0_i = $r_0_i | $1243 << 10 & 16384;
    }
    $1253 = $1241 + 8 | 0;
    HEAP16[$1253 >> 1] = HEAPU16[$1253 >> 1] | 0 | $_0_i;
    if ((HEAP32[(HEAP32[5314] | 0) + 84 >> 2] | 0) == 0) {
     break;
    }
    $1264 = (HEAP32[5024] | 0) + 8 | 0;
    HEAP16[$1264 >> 1] = HEAP16[$1264 >> 1] | 2048;
   }
  } while (0);
  _next();
 }
 STACKTOP = sp;
 return;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $35 = 0, $40 = 0, $45 = 0, $56 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $100 = 0, $105 = 0, $106 = 0, $109 = 0, $111 = 0, $117 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $132 = 0, $133 = 0, $_pre_phi = 0, $F4_0 = 0, $145 = 0, $150 = 0, $152 = 0, $153 = 0, $155 = 0, $157 = 0, $159 = 0, $161 = 0, $163 = 0, $165 = 0, $167 = 0, $172 = 0, $rsize_0_i = 0, $v_0_i = 0, $t_0_i = 0, $179 = 0, $183 = 0, $185 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $196 = 0, $197 = 0, $201 = 0, $203 = 0, $207 = 0, $211 = 0, $215 = 0, $220 = 0, $221 = 0, $224 = 0, $225 = 0, $RP_0_i = 0, $R_0_i = 0, $227 = 0, $228 = 0, $231 = 0, $232 = 0, $R_1_i = 0, $242 = 0, $244 = 0, $258 = 0, $274 = 0, $286 = 0, $300 = 0, $304 = 0, $315 = 0, $318 = 0, $319 = 0, $320 = 0, $322 = 0, $323 = 0, $324 = 0, $330 = 0, $331 = 0, $_pre_phi_i = 0, $F1_0_i = 0, $347 = 0, $348 = 0, $349 = 0, $352 = 0, $353 = 0, $360 = 0, $361 = 0, $364 = 0, $366 = 0, $369 = 0, $374 = 0, $idx_0_i = 0, $382 = 0, $390 = 0, $rst_0_i = 0, $sizebits_0_i = 0, $t_0_i16 = 0, $rsize_0_i17 = 0, $v_0_i18 = 0, $395 = 0, $396 = 0, $rsize_1_i = 0, $v_1_i = 0, $402 = 0, $405 = 0, $rst_1_i = 0, $t_1_i = 0, $rsize_2_i = 0, $v_2_i = 0, $413 = 0, $416 = 0, $421 = 0, $423 = 0, $424 = 0, $426 = 0, $428 = 0, $430 = 0, $432 = 0, $434 = 0, $436 = 0, $438 = 0, $t_2_ph_i = 0, $v_334_i = 0, $rsize_333_i = 0, $t_232_i = 0, $448 = 0, $449 = 0, $_rsize_3_i = 0, $t_2_v_3_i = 0, $451 = 0, $454 = 0, $v_3_lcssa_i = 0, $rsize_3_lcssa_i = 0, $462 = 0, $463 = 0, $466 = 0, $467 = 0, $471 = 0, $473 = 0, $477 = 0, $481 = 0, $485 = 0, $490 = 0, $491 = 0, $494 = 0, $495 = 0, $RP_0_i19 = 0, $R_0_i20 = 0, $497 = 0, $498 = 0, $501 = 0, $502 = 0, $R_1_i22 = 0, $512 = 0, $514 = 0, $528 = 0, $544 = 0, $556 = 0, $570 = 0, $574 = 0, $585 = 0, $588 = 0, $590 = 0, $591 = 0, $592 = 0, $598 = 0, $599 = 0, $_pre_phi_i28 = 0, $F5_0_i = 0, $611 = 0, $612 = 0, $619 = 0, $620 = 0, $623 = 0, $625 = 0, $628 = 0, $633 = 0, $I7_0_i = 0, $640 = 0, $647 = 0, $648 = 0, $661 = 0, $667 = 0, $K12_029_i = 0, $T_028_i = 0, $681 = 0, $682 = 0, $T_0_lcssa_i = 0, $696 = 0, $697 = 0, $699 = 0, $nb_0 = 0, $714 = 0, $717 = 0, $718 = 0, $721 = 0, $736 = 0, $743 = 0, $746 = 0, $747 = 0, $748 = 0, $762 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $791 = 0, $794 = 0, $sp_0_i_i = 0, $796 = 0, $797 = 0, $800 = 0, $806 = 0, $809 = 0, $812 = 0, $813 = 0, $814 = 0, $ssize_0_i = 0, $824 = 0, $825 = 0, $829 = 0, $835 = 0, $840 = 0, $843 = 0, $ssize_1_i = 0, $br_0_i = 0, $br_030_i = 0, $ssize_129_i = 0, $850 = 0, $855 = 0, $859 = 0, $ssize_2_i = 0, $tsize_03141_i = 0, $tsize_1_i = 0, $874 = 0, $875 = 0, $882 = 0, $884 = 0, $tbase_245_i = 0, $tsize_244_i = 0, $886 = 0, $891 = 0, $894 = 0, $i_02_i_i = 0, $901 = 0, $903 = 0, $910 = 0, $916 = 0, $919 = 0, $sp_073_i = 0, $927 = 0, $928 = 0, $929 = 0, $934 = 0, $941 = 0, $946 = 0, $948 = 0, $949 = 0, $951 = 0, $957 = 0, $960 = 0, $970 = 0, $sp_166_i = 0, $972 = 0, $977 = 0, $984 = 0, $988 = 0, $995 = 0, $998 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $_sum_i19_i = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1021 = 0, $1030 = 0, $_sum2_i21_i = 0, $1039 = 0, $1043 = 0, $1044 = 0, $1049 = 0, $1052 = 0, $1055 = 0, $1078 = 0, $_pre_phi63_i_i = 0, $1083 = 0, $1086 = 0, $1089 = 0, $1094 = 0, $1099 = 0, $1103 = 0, $_sum67_i_i = 0, $1109 = 0, $1110 = 0, $1114 = 0, $1115 = 0, $RP_0_i_i = 0, $R_0_i_i = 0, $1117 = 0, $1118 = 0, $1121 = 0, $1122 = 0, $R_1_i_i = 0, $1134 = 0, $1136 = 0, $1150 = 0, $_sum3233_i_i = 0, $1167 = 0, $1180 = 0, $qsize_0_i_i = 0, $oldfirst_0_i_i = 0, $1196 = 0, $1204 = 0, $1207 = 0, $1209 = 0, $1210 = 0, $1211 = 0, $1217 = 0, $1218 = 0, $_pre_phi_i23_i = 0, $F4_0_i_i = 0, $1230 = 0, $1231 = 0, $1238 = 0, $1239 = 0, $1242 = 0, $1244 = 0, $1247 = 0, $1252 = 0, $I7_0_i_i = 0, $1259 = 0, $1266 = 0, $1267 = 0, $1280 = 0, $1286 = 0, $K8_057_i_i = 0, $T_056_i_i = 0, $1300 = 0, $1301 = 0, $T_0_lcssa_i26_i = 0, $1315 = 0, $1316 = 0, $1318 = 0, $1331 = 0, $sp_0_i_i_i = 0, $1334 = 0, $1338 = 0, $1339 = 0, $1345 = 0, $1352 = 0, $1353 = 0, $1357 = 0, $1358 = 0, $1362 = 0, $1368 = 0, $1371 = 0, $1381 = 0, $1384 = 0, $1385 = 0, $1393 = 0, $1396 = 0, $1402 = 0, $1405 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $1415 = 0, $1416 = 0, $_pre_phi_i_i = 0, $F_0_i_i = 0, $1426 = 0, $1427 = 0, $1434 = 0, $1435 = 0, $1438 = 0, $1440 = 0, $1443 = 0, $1448 = 0, $I1_0_i_i = 0, $1455 = 0, $1459 = 0, $1460 = 0, $1469 = 0, $1475 = 0, $K2_016_i_i = 0, $T_015_i_i = 0, $1489 = 0, $1490 = 0, $T_0_lcssa_i_i = 0, $1501 = 0, $1502 = 0, $1504 = 0, $1513 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $mem_0 = 0, label = 0;
 do {
  if ($bytes >>> 0 < 245 >>> 0) {
   if ($bytes >>> 0 < 11 >>> 0) {
    $8 = 16;
   } else {
    $8 = $bytes + 11 & -8;
   }
   $9 = $8 >>> 3;
   $10 = HEAP32[13940] | 0;
   $11 = $10 >>> ($9 >>> 0);
   if (($11 & 3 | 0) != 0) {
    $17 = ($11 & 1 ^ 1) + $9 | 0;
    $18 = $17 << 1;
    $20 = 55800 + ($18 << 2) | 0;
    $21 = 55800 + ($18 + 2 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22 + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    do {
     if (($20 | 0) == ($24 | 0)) {
      HEAP32[13940] = $10 & ~(1 << $17);
     } else {
      if ($24 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
       _abort();
       return 0;
      }
      $35 = $24 + 12 | 0;
      if ((HEAP32[$35 >> 2] | 0) == ($22 | 0)) {
       HEAP32[$35 >> 2] = $20;
       HEAP32[$21 >> 2] = $24;
       break;
      } else {
       _abort();
       return 0;
      }
     }
    } while (0);
    $40 = $17 << 3;
    HEAP32[$22 + 4 >> 2] = $40 | 3;
    $45 = $22 + ($40 | 4) | 0;
    HEAP32[$45 >> 2] = HEAP32[$45 >> 2] | 1;
    $mem_0 = $23;
    return $mem_0 | 0;
   }
   if ($8 >>> 0 <= (HEAP32[13942] | 0) >>> 0) {
    $nb_0 = $8;
    break;
   }
   if (($11 | 0) != 0) {
    $56 = 2 << $9;
    $59 = $11 << $9 & ($56 | -$56);
    $62 = ($59 & -$59) - 1 | 0;
    $64 = $62 >>> 12 & 16;
    $65 = $62 >>> ($64 >>> 0);
    $67 = $65 >>> 5 & 8;
    $69 = $65 >>> ($67 >>> 0);
    $71 = $69 >>> 2 & 4;
    $73 = $69 >>> ($71 >>> 0);
    $75 = $73 >>> 1 & 2;
    $77 = $73 >>> ($75 >>> 0);
    $79 = $77 >>> 1 & 1;
    $82 = ($67 | $64 | $71 | $75 | $79) + ($77 >>> ($79 >>> 0)) | 0;
    $83 = $82 << 1;
    $85 = 55800 + ($83 << 2) | 0;
    $86 = 55800 + ($83 + 2 << 2) | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = $87 + 8 | 0;
    $89 = HEAP32[$88 >> 2] | 0;
    do {
     if (($85 | 0) == ($89 | 0)) {
      HEAP32[13940] = $10 & ~(1 << $82);
     } else {
      if ($89 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
       _abort();
       return 0;
      }
      $100 = $89 + 12 | 0;
      if ((HEAP32[$100 >> 2] | 0) == ($87 | 0)) {
       HEAP32[$100 >> 2] = $85;
       HEAP32[$86 >> 2] = $89;
       break;
      } else {
       _abort();
       return 0;
      }
     }
    } while (0);
    $105 = $82 << 3;
    $106 = $105 - $8 | 0;
    HEAP32[$87 + 4 >> 2] = $8 | 3;
    $109 = $87;
    $111 = $109 + $8 | 0;
    HEAP32[$109 + ($8 | 4) >> 2] = $106 | 1;
    HEAP32[$109 + $105 >> 2] = $106;
    $117 = HEAP32[13942] | 0;
    if (($117 | 0) != 0) {
     $120 = HEAP32[13945] | 0;
     $121 = $117 >>> 3;
     $122 = $121 << 1;
     $124 = 55800 + ($122 << 2) | 0;
     $125 = HEAP32[13940] | 0;
     $126 = 1 << $121;
     do {
      if (($125 & $126 | 0) == 0) {
       HEAP32[13940] = $125 | $126;
       $F4_0 = $124;
       $_pre_phi = 55800 + ($122 + 2 << 2) | 0;
      } else {
       $132 = 55800 + ($122 + 2 << 2) | 0;
       $133 = HEAP32[$132 >> 2] | 0;
       if ($133 >>> 0 >= (HEAP32[13944] | 0) >>> 0) {
        $F4_0 = $133;
        $_pre_phi = $132;
        break;
       }
       _abort();
       return 0;
      }
     } while (0);
     HEAP32[$_pre_phi >> 2] = $120;
     HEAP32[$F4_0 + 12 >> 2] = $120;
     HEAP32[$120 + 8 >> 2] = $F4_0;
     HEAP32[$120 + 12 >> 2] = $124;
    }
    HEAP32[13942] = $106;
    HEAP32[13945] = $111;
    $mem_0 = $88;
    return $mem_0 | 0;
   }
   $145 = HEAP32[13941] | 0;
   if (($145 | 0) == 0) {
    $nb_0 = $8;
    break;
   }
   $150 = ($145 & -$145) - 1 | 0;
   $152 = $150 >>> 12 & 16;
   $153 = $150 >>> ($152 >>> 0);
   $155 = $153 >>> 5 & 8;
   $157 = $153 >>> ($155 >>> 0);
   $159 = $157 >>> 2 & 4;
   $161 = $157 >>> ($159 >>> 0);
   $163 = $161 >>> 1 & 2;
   $165 = $161 >>> ($163 >>> 0);
   $167 = $165 >>> 1 & 1;
   $172 = HEAP32[56064 + (($155 | $152 | $159 | $163 | $167) + ($165 >>> ($167 >>> 0)) << 2) >> 2] | 0;
   $t_0_i = $172;
   $v_0_i = $172;
   $rsize_0_i = (HEAP32[$172 + 4 >> 2] & -8) - $8 | 0;
   while (1) {
    $179 = HEAP32[$t_0_i + 16 >> 2] | 0;
    if (($179 | 0) == 0) {
     $183 = HEAP32[$t_0_i + 20 >> 2] | 0;
     if (($183 | 0) == 0) {
      break;
     } else {
      $185 = $183;
     }
    } else {
     $185 = $179;
    }
    $189 = (HEAP32[$185 + 4 >> 2] & -8) - $8 | 0;
    $190 = $189 >>> 0 < $rsize_0_i >>> 0;
    $t_0_i = $185;
    $v_0_i = $190 ? $185 : $v_0_i;
    $rsize_0_i = $190 ? $189 : $rsize_0_i;
   }
   $192 = $v_0_i;
   $193 = HEAP32[13944] | 0;
   if ($192 >>> 0 < $193 >>> 0) {
    _abort();
    return 0;
   }
   $196 = $192 + $8 | 0;
   $197 = $196;
   if ($192 >>> 0 >= $196 >>> 0) {
    _abort();
    return 0;
   }
   $201 = HEAP32[$v_0_i + 24 >> 2] | 0;
   $203 = HEAP32[$v_0_i + 12 >> 2] | 0;
   do {
    if (($203 | 0) == ($v_0_i | 0)) {
     $220 = $v_0_i + 20 | 0;
     $221 = HEAP32[$220 >> 2] | 0;
     if (($221 | 0) == 0) {
      $224 = $v_0_i + 16 | 0;
      $225 = HEAP32[$224 >> 2] | 0;
      if (($225 | 0) == 0) {
       $R_1_i = 0;
       break;
      } else {
       $R_0_i = $225;
       $RP_0_i = $224;
      }
     } else {
      $R_0_i = $221;
      $RP_0_i = $220;
     }
     while (1) {
      $227 = $R_0_i + 20 | 0;
      $228 = HEAP32[$227 >> 2] | 0;
      if (($228 | 0) != 0) {
       $R_0_i = $228;
       $RP_0_i = $227;
       continue;
      }
      $231 = $R_0_i + 16 | 0;
      $232 = HEAP32[$231 >> 2] | 0;
      if (($232 | 0) == 0) {
       break;
      } else {
       $R_0_i = $232;
       $RP_0_i = $231;
      }
     }
     if ($RP_0_i >>> 0 < $193 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$RP_0_i >> 2] = 0;
      $R_1_i = $R_0_i;
      break;
     }
    } else {
     $207 = HEAP32[$v_0_i + 8 >> 2] | 0;
     if ($207 >>> 0 < $193 >>> 0) {
      _abort();
      return 0;
     }
     $211 = $207 + 12 | 0;
     if ((HEAP32[$211 >> 2] | 0) != ($v_0_i | 0)) {
      _abort();
      return 0;
     }
     $215 = $203 + 8 | 0;
     if ((HEAP32[$215 >> 2] | 0) == ($v_0_i | 0)) {
      HEAP32[$211 >> 2] = $203;
      HEAP32[$215 >> 2] = $207;
      $R_1_i = $203;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   L199 : do {
    if (($201 | 0) != 0) {
     $242 = $v_0_i + 28 | 0;
     $244 = 56064 + (HEAP32[$242 >> 2] << 2) | 0;
     do {
      if (($v_0_i | 0) == (HEAP32[$244 >> 2] | 0)) {
       HEAP32[$244 >> 2] = $R_1_i;
       if (($R_1_i | 0) != 0) {
        break;
       }
       HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$242 >> 2]);
       break L199;
      } else {
       if ($201 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
        return 0;
       }
       $258 = $201 + 16 | 0;
       if ((HEAP32[$258 >> 2] | 0) == ($v_0_i | 0)) {
        HEAP32[$258 >> 2] = $R_1_i;
       } else {
        HEAP32[$201 + 20 >> 2] = $R_1_i;
       }
       if (($R_1_i | 0) == 0) {
        break L199;
       }
      }
     } while (0);
     if ($R_1_i >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
      return 0;
     }
     HEAP32[$R_1_i + 24 >> 2] = $201;
     $274 = HEAP32[$v_0_i + 16 >> 2] | 0;
     do {
      if (($274 | 0) != 0) {
       if ($274 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
        return 0;
       } else {
        HEAP32[$R_1_i + 16 >> 2] = $274;
        HEAP32[$274 + 24 >> 2] = $R_1_i;
        break;
       }
      }
     } while (0);
     $286 = HEAP32[$v_0_i + 20 >> 2] | 0;
     if (($286 | 0) == 0) {
      break;
     }
     if ($286 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$R_1_i + 20 >> 2] = $286;
      HEAP32[$286 + 24 >> 2] = $R_1_i;
      break;
     }
    }
   } while (0);
   if ($rsize_0_i >>> 0 < 16 >>> 0) {
    $300 = $rsize_0_i + $8 | 0;
    HEAP32[$v_0_i + 4 >> 2] = $300 | 3;
    $304 = $192 + ($300 + 4) | 0;
    HEAP32[$304 >> 2] = HEAP32[$304 >> 2] | 1;
   } else {
    HEAP32[$v_0_i + 4 >> 2] = $8 | 3;
    HEAP32[$192 + ($8 | 4) >> 2] = $rsize_0_i | 1;
    HEAP32[$192 + ($rsize_0_i + $8) >> 2] = $rsize_0_i;
    $315 = HEAP32[13942] | 0;
    if (($315 | 0) != 0) {
     $318 = HEAP32[13945] | 0;
     $319 = $315 >>> 3;
     $320 = $319 << 1;
     $322 = 55800 + ($320 << 2) | 0;
     $323 = HEAP32[13940] | 0;
     $324 = 1 << $319;
     do {
      if (($323 & $324 | 0) == 0) {
       HEAP32[13940] = $323 | $324;
       $F1_0_i = $322;
       $_pre_phi_i = 55800 + ($320 + 2 << 2) | 0;
      } else {
       $330 = 55800 + ($320 + 2 << 2) | 0;
       $331 = HEAP32[$330 >> 2] | 0;
       if ($331 >>> 0 >= (HEAP32[13944] | 0) >>> 0) {
        $F1_0_i = $331;
        $_pre_phi_i = $330;
        break;
       }
       _abort();
       return 0;
      }
     } while (0);
     HEAP32[$_pre_phi_i >> 2] = $318;
     HEAP32[$F1_0_i + 12 >> 2] = $318;
     HEAP32[$318 + 8 >> 2] = $F1_0_i;
     HEAP32[$318 + 12 >> 2] = $322;
    }
    HEAP32[13942] = $rsize_0_i;
    HEAP32[13945] = $197;
   }
   $mem_0 = $v_0_i + 8 | 0;
   return $mem_0 | 0;
  } else {
   if ($bytes >>> 0 > 4294967231 >>> 0) {
    $nb_0 = -1;
    break;
   }
   $347 = $bytes + 11 | 0;
   $348 = $347 & -8;
   $349 = HEAP32[13941] | 0;
   if (($349 | 0) == 0) {
    $nb_0 = $348;
    break;
   }
   $352 = -$348 | 0;
   $353 = $347 >>> 8;
   do {
    if (($353 | 0) == 0) {
     $idx_0_i = 0;
    } else {
     if ($348 >>> 0 > 16777215 >>> 0) {
      $idx_0_i = 31;
      break;
     }
     $360 = ($353 + 1048320 | 0) >>> 16 & 8;
     $361 = $353 << $360;
     $364 = ($361 + 520192 | 0) >>> 16 & 4;
     $366 = $361 << $364;
     $369 = ($366 + 245760 | 0) >>> 16 & 2;
     $374 = 14 - ($364 | $360 | $369) + ($366 << $369 >>> 15) | 0;
     $idx_0_i = $348 >>> (($374 + 7 | 0) >>> 0) & 1 | $374 << 1;
    }
   } while (0);
   $382 = HEAP32[56064 + ($idx_0_i << 2) >> 2] | 0;
   L9 : do {
    if (($382 | 0) == 0) {
     $v_2_i = 0;
     $rsize_2_i = $352;
     $t_1_i = 0;
    } else {
     if (($idx_0_i | 0) == 31) {
      $390 = 0;
     } else {
      $390 = 25 - ($idx_0_i >>> 1) | 0;
     }
     $v_0_i18 = 0;
     $rsize_0_i17 = $352;
     $t_0_i16 = $382;
     $sizebits_0_i = $348 << $390;
     $rst_0_i = 0;
     while (1) {
      $395 = HEAP32[$t_0_i16 + 4 >> 2] & -8;
      $396 = $395 - $348 | 0;
      if ($396 >>> 0 < $rsize_0_i17 >>> 0) {
       if (($395 | 0) == ($348 | 0)) {
        $v_2_i = $t_0_i16;
        $rsize_2_i = $396;
        $t_1_i = $t_0_i16;
        break L9;
       } else {
        $v_1_i = $t_0_i16;
        $rsize_1_i = $396;
       }
      } else {
       $v_1_i = $v_0_i18;
       $rsize_1_i = $rsize_0_i17;
      }
      $402 = HEAP32[$t_0_i16 + 20 >> 2] | 0;
      $405 = HEAP32[$t_0_i16 + 16 + ($sizebits_0_i >>> 31 << 2) >> 2] | 0;
      $rst_1_i = ($402 | 0) == 0 | ($402 | 0) == ($405 | 0) ? $rst_0_i : $402;
      if (($405 | 0) == 0) {
       $v_2_i = $v_1_i;
       $rsize_2_i = $rsize_1_i;
       $t_1_i = $rst_1_i;
       break;
      } else {
       $v_0_i18 = $v_1_i;
       $rsize_0_i17 = $rsize_1_i;
       $t_0_i16 = $405;
       $sizebits_0_i = $sizebits_0_i << 1;
       $rst_0_i = $rst_1_i;
      }
     }
    }
   } while (0);
   if (($t_1_i | 0) == 0 & ($v_2_i | 0) == 0) {
    $413 = 2 << $idx_0_i;
    $416 = $349 & ($413 | -$413);
    if (($416 | 0) == 0) {
     $nb_0 = $348;
     break;
    }
    $421 = ($416 & -$416) - 1 | 0;
    $423 = $421 >>> 12 & 16;
    $424 = $421 >>> ($423 >>> 0);
    $426 = $424 >>> 5 & 8;
    $428 = $424 >>> ($426 >>> 0);
    $430 = $428 >>> 2 & 4;
    $432 = $428 >>> ($430 >>> 0);
    $434 = $432 >>> 1 & 2;
    $436 = $432 >>> ($434 >>> 0);
    $438 = $436 >>> 1 & 1;
    $t_2_ph_i = HEAP32[56064 + (($426 | $423 | $430 | $434 | $438) + ($436 >>> ($438 >>> 0)) << 2) >> 2] | 0;
   } else {
    $t_2_ph_i = $t_1_i;
   }
   if (($t_2_ph_i | 0) == 0) {
    $rsize_3_lcssa_i = $rsize_2_i;
    $v_3_lcssa_i = $v_2_i;
   } else {
    $t_232_i = $t_2_ph_i;
    $rsize_333_i = $rsize_2_i;
    $v_334_i = $v_2_i;
    while (1) {
     $448 = (HEAP32[$t_232_i + 4 >> 2] & -8) - $348 | 0;
     $449 = $448 >>> 0 < $rsize_333_i >>> 0;
     $_rsize_3_i = $449 ? $448 : $rsize_333_i;
     $t_2_v_3_i = $449 ? $t_232_i : $v_334_i;
     $451 = HEAP32[$t_232_i + 16 >> 2] | 0;
     if (($451 | 0) != 0) {
      $t_232_i = $451;
      $rsize_333_i = $_rsize_3_i;
      $v_334_i = $t_2_v_3_i;
      continue;
     }
     $454 = HEAP32[$t_232_i + 20 >> 2] | 0;
     if (($454 | 0) == 0) {
      $rsize_3_lcssa_i = $_rsize_3_i;
      $v_3_lcssa_i = $t_2_v_3_i;
      break;
     } else {
      $t_232_i = $454;
      $rsize_333_i = $_rsize_3_i;
      $v_334_i = $t_2_v_3_i;
     }
    }
   }
   if (($v_3_lcssa_i | 0) == 0) {
    $nb_0 = $348;
    break;
   }
   if ($rsize_3_lcssa_i >>> 0 >= ((HEAP32[13942] | 0) - $348 | 0) >>> 0) {
    $nb_0 = $348;
    break;
   }
   $462 = $v_3_lcssa_i;
   $463 = HEAP32[13944] | 0;
   if ($462 >>> 0 < $463 >>> 0) {
    _abort();
    return 0;
   }
   $466 = $462 + $348 | 0;
   $467 = $466;
   if ($462 >>> 0 >= $466 >>> 0) {
    _abort();
    return 0;
   }
   $471 = HEAP32[$v_3_lcssa_i + 24 >> 2] | 0;
   $473 = HEAP32[$v_3_lcssa_i + 12 >> 2] | 0;
   do {
    if (($473 | 0) == ($v_3_lcssa_i | 0)) {
     $490 = $v_3_lcssa_i + 20 | 0;
     $491 = HEAP32[$490 >> 2] | 0;
     if (($491 | 0) == 0) {
      $494 = $v_3_lcssa_i + 16 | 0;
      $495 = HEAP32[$494 >> 2] | 0;
      if (($495 | 0) == 0) {
       $R_1_i22 = 0;
       break;
      } else {
       $R_0_i20 = $495;
       $RP_0_i19 = $494;
      }
     } else {
      $R_0_i20 = $491;
      $RP_0_i19 = $490;
     }
     while (1) {
      $497 = $R_0_i20 + 20 | 0;
      $498 = HEAP32[$497 >> 2] | 0;
      if (($498 | 0) != 0) {
       $R_0_i20 = $498;
       $RP_0_i19 = $497;
       continue;
      }
      $501 = $R_0_i20 + 16 | 0;
      $502 = HEAP32[$501 >> 2] | 0;
      if (($502 | 0) == 0) {
       break;
      } else {
       $R_0_i20 = $502;
       $RP_0_i19 = $501;
      }
     }
     if ($RP_0_i19 >>> 0 < $463 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$RP_0_i19 >> 2] = 0;
      $R_1_i22 = $R_0_i20;
      break;
     }
    } else {
     $477 = HEAP32[$v_3_lcssa_i + 8 >> 2] | 0;
     if ($477 >>> 0 < $463 >>> 0) {
      _abort();
      return 0;
     }
     $481 = $477 + 12 | 0;
     if ((HEAP32[$481 >> 2] | 0) != ($v_3_lcssa_i | 0)) {
      _abort();
      return 0;
     }
     $485 = $473 + 8 | 0;
     if ((HEAP32[$485 >> 2] | 0) == ($v_3_lcssa_i | 0)) {
      HEAP32[$481 >> 2] = $473;
      HEAP32[$485 >> 2] = $477;
      $R_1_i22 = $473;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   L59 : do {
    if (($471 | 0) != 0) {
     $512 = $v_3_lcssa_i + 28 | 0;
     $514 = 56064 + (HEAP32[$512 >> 2] << 2) | 0;
     do {
      if (($v_3_lcssa_i | 0) == (HEAP32[$514 >> 2] | 0)) {
       HEAP32[$514 >> 2] = $R_1_i22;
       if (($R_1_i22 | 0) != 0) {
        break;
       }
       HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$512 >> 2]);
       break L59;
      } else {
       if ($471 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
        return 0;
       }
       $528 = $471 + 16 | 0;
       if ((HEAP32[$528 >> 2] | 0) == ($v_3_lcssa_i | 0)) {
        HEAP32[$528 >> 2] = $R_1_i22;
       } else {
        HEAP32[$471 + 20 >> 2] = $R_1_i22;
       }
       if (($R_1_i22 | 0) == 0) {
        break L59;
       }
      }
     } while (0);
     if ($R_1_i22 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
      return 0;
     }
     HEAP32[$R_1_i22 + 24 >> 2] = $471;
     $544 = HEAP32[$v_3_lcssa_i + 16 >> 2] | 0;
     do {
      if (($544 | 0) != 0) {
       if ($544 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
        return 0;
       } else {
        HEAP32[$R_1_i22 + 16 >> 2] = $544;
        HEAP32[$544 + 24 >> 2] = $R_1_i22;
        break;
       }
      }
     } while (0);
     $556 = HEAP32[$v_3_lcssa_i + 20 >> 2] | 0;
     if (($556 | 0) == 0) {
      break;
     }
     if ($556 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$R_1_i22 + 20 >> 2] = $556;
      HEAP32[$556 + 24 >> 2] = $R_1_i22;
      break;
     }
    }
   } while (0);
   L87 : do {
    if ($rsize_3_lcssa_i >>> 0 < 16 >>> 0) {
     $570 = $rsize_3_lcssa_i + $348 | 0;
     HEAP32[$v_3_lcssa_i + 4 >> 2] = $570 | 3;
     $574 = $462 + ($570 + 4) | 0;
     HEAP32[$574 >> 2] = HEAP32[$574 >> 2] | 1;
    } else {
     HEAP32[$v_3_lcssa_i + 4 >> 2] = $348 | 3;
     HEAP32[$462 + ($348 | 4) >> 2] = $rsize_3_lcssa_i | 1;
     HEAP32[$462 + ($rsize_3_lcssa_i + $348) >> 2] = $rsize_3_lcssa_i;
     $585 = $rsize_3_lcssa_i >>> 3;
     if ($rsize_3_lcssa_i >>> 0 < 256 >>> 0) {
      $588 = $585 << 1;
      $590 = 55800 + ($588 << 2) | 0;
      $591 = HEAP32[13940] | 0;
      $592 = 1 << $585;
      do {
       if (($591 & $592 | 0) == 0) {
        HEAP32[13940] = $591 | $592;
        $F5_0_i = $590;
        $_pre_phi_i28 = 55800 + ($588 + 2 << 2) | 0;
       } else {
        $598 = 55800 + ($588 + 2 << 2) | 0;
        $599 = HEAP32[$598 >> 2] | 0;
        if ($599 >>> 0 >= (HEAP32[13944] | 0) >>> 0) {
         $F5_0_i = $599;
         $_pre_phi_i28 = $598;
         break;
        }
        _abort();
        return 0;
       }
      } while (0);
      HEAP32[$_pre_phi_i28 >> 2] = $467;
      HEAP32[$F5_0_i + 12 >> 2] = $467;
      HEAP32[$462 + ($348 + 8) >> 2] = $F5_0_i;
      HEAP32[$462 + ($348 + 12) >> 2] = $590;
      break;
     }
     $611 = $466;
     $612 = $rsize_3_lcssa_i >>> 8;
     do {
      if (($612 | 0) == 0) {
       $I7_0_i = 0;
      } else {
       if ($rsize_3_lcssa_i >>> 0 > 16777215 >>> 0) {
        $I7_0_i = 31;
        break;
       }
       $619 = ($612 + 1048320 | 0) >>> 16 & 8;
       $620 = $612 << $619;
       $623 = ($620 + 520192 | 0) >>> 16 & 4;
       $625 = $620 << $623;
       $628 = ($625 + 245760 | 0) >>> 16 & 2;
       $633 = 14 - ($623 | $619 | $628) + ($625 << $628 >>> 15) | 0;
       $I7_0_i = $rsize_3_lcssa_i >>> (($633 + 7 | 0) >>> 0) & 1 | $633 << 1;
      }
     } while (0);
     $640 = 56064 + ($I7_0_i << 2) | 0;
     HEAP32[$462 + ($348 + 28) >> 2] = $I7_0_i;
     HEAP32[$462 + ($348 + 20) >> 2] = 0;
     HEAP32[$462 + ($348 + 16) >> 2] = 0;
     $647 = HEAP32[13941] | 0;
     $648 = 1 << $I7_0_i;
     if (($647 & $648 | 0) == 0) {
      HEAP32[13941] = $647 | $648;
      HEAP32[$640 >> 2] = $611;
      HEAP32[$462 + ($348 + 24) >> 2] = $640;
      HEAP32[$462 + ($348 + 12) >> 2] = $611;
      HEAP32[$462 + ($348 + 8) >> 2] = $611;
      break;
     }
     $661 = HEAP32[$640 >> 2] | 0;
     if (($I7_0_i | 0) == 31) {
      $667 = 0;
     } else {
      $667 = 25 - ($I7_0_i >>> 1) | 0;
     }
     L108 : do {
      if ((HEAP32[$661 + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa_i | 0)) {
       $T_0_lcssa_i = $661;
      } else {
       $T_028_i = $661;
       $K12_029_i = $rsize_3_lcssa_i << $667;
       while (1) {
        $681 = $T_028_i + 16 + ($K12_029_i >>> 31 << 2) | 0;
        $682 = HEAP32[$681 >> 2] | 0;
        if (($682 | 0) == 0) {
         break;
        }
        if ((HEAP32[$682 + 4 >> 2] & -8 | 0) == ($rsize_3_lcssa_i | 0)) {
         $T_0_lcssa_i = $682;
         break L108;
        } else {
         $T_028_i = $682;
         $K12_029_i = $K12_029_i << 1;
        }
       }
       if ($681 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
        return 0;
       } else {
        HEAP32[$681 >> 2] = $611;
        HEAP32[$462 + ($348 + 24) >> 2] = $T_028_i;
        HEAP32[$462 + ($348 + 12) >> 2] = $611;
        HEAP32[$462 + ($348 + 8) >> 2] = $611;
        break L87;
       }
      }
     } while (0);
     $696 = $T_0_lcssa_i + 8 | 0;
     $697 = HEAP32[$696 >> 2] | 0;
     $699 = HEAP32[13944] | 0;
     if ($T_0_lcssa_i >>> 0 >= $699 >>> 0 & $697 >>> 0 >= $699 >>> 0) {
      HEAP32[$697 + 12 >> 2] = $611;
      HEAP32[$696 >> 2] = $611;
      HEAP32[$462 + ($348 + 8) >> 2] = $697;
      HEAP32[$462 + ($348 + 12) >> 2] = $T_0_lcssa_i;
      HEAP32[$462 + ($348 + 24) >> 2] = 0;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   $mem_0 = $v_3_lcssa_i + 8 | 0;
   return $mem_0 | 0;
  }
 } while (0);
 $714 = HEAP32[13942] | 0;
 if ($714 >>> 0 >= $nb_0 >>> 0) {
  $717 = $714 - $nb_0 | 0;
  $718 = HEAP32[13945] | 0;
  if ($717 >>> 0 > 15 >>> 0) {
   $721 = $718;
   HEAP32[13945] = $721 + $nb_0;
   HEAP32[13942] = $717;
   HEAP32[$721 + ($nb_0 + 4) >> 2] = $717 | 1;
   HEAP32[$721 + $714 >> 2] = $717;
   HEAP32[$718 + 4 >> 2] = $nb_0 | 3;
  } else {
   HEAP32[13942] = 0;
   HEAP32[13945] = 0;
   HEAP32[$718 + 4 >> 2] = $714 | 3;
   $736 = $718 + ($714 + 4) | 0;
   HEAP32[$736 >> 2] = HEAP32[$736 >> 2] | 1;
  }
  $mem_0 = $718 + 8 | 0;
  return $mem_0 | 0;
 }
 $743 = HEAP32[13943] | 0;
 if ($743 >>> 0 > $nb_0 >>> 0) {
  $746 = $743 - $nb_0 | 0;
  HEAP32[13943] = $746;
  $747 = HEAP32[13946] | 0;
  $748 = $747;
  HEAP32[13946] = $748 + $nb_0;
  HEAP32[$748 + ($nb_0 + 4) >> 2] = $746 | 1;
  HEAP32[$747 + 4 >> 2] = $nb_0 | 3;
  $mem_0 = $747 + 8 | 0;
  return $mem_0 | 0;
 }
 do {
  if ((HEAP32[5342] | 0) == 0) {
   $762 = _sysconf(30) | 0;
   if (($762 - 1 & $762 | 0) == 0) {
    HEAP32[5344] = $762;
    HEAP32[5343] = $762;
    HEAP32[5345] = -1;
    HEAP32[5346] = -1;
    HEAP32[5347] = 0;
    HEAP32[14051] = 0;
    HEAP32[5342] = (_time(0) | 0) & -16 ^ 1431655768;
    break;
   } else {
    _abort();
    return 0;
   }
  }
 } while (0);
 $771 = $nb_0 + 48 | 0;
 $772 = HEAP32[5344] | 0;
 $773 = $nb_0 + 47 | 0;
 $774 = $772 + $773 | 0;
 $775 = -$772 | 0;
 $776 = $774 & $775;
 if ($776 >>> 0 <= $nb_0 >>> 0) {
  $mem_0 = 0;
  return $mem_0 | 0;
 }
 $779 = HEAP32[14050] | 0;
 do {
  if (($779 | 0) != 0) {
   $782 = HEAP32[14048] | 0;
   $783 = $782 + $776 | 0;
   if ($783 >>> 0 <= $782 >>> 0 | $783 >>> 0 > $779 >>> 0) {
    $mem_0 = 0;
   } else {
    break;
   }
   return $mem_0 | 0;
  }
 } while (0);
 L266 : do {
  if ((HEAP32[14051] & 4 | 0) == 0) {
   $791 = HEAP32[13946] | 0;
   L268 : do {
    if (($791 | 0) == 0) {
     label = 181;
    } else {
     $794 = $791;
     $sp_0_i_i = 56208;
     while (1) {
      $796 = $sp_0_i_i | 0;
      $797 = HEAP32[$796 >> 2] | 0;
      if ($797 >>> 0 <= $794 >>> 0) {
       $800 = $sp_0_i_i + 4 | 0;
       if (($797 + (HEAP32[$800 >> 2] | 0) | 0) >>> 0 > $794 >>> 0) {
        break;
       }
      }
      $806 = HEAP32[$sp_0_i_i + 8 >> 2] | 0;
      if (($806 | 0) == 0) {
       label = 181;
       break L268;
      } else {
       $sp_0_i_i = $806;
      }
     }
     if (($sp_0_i_i | 0) == 0) {
      label = 181;
      break;
     }
     $840 = $774 - (HEAP32[13943] | 0) & $775;
     if ($840 >>> 0 >= 2147483647 >>> 0) {
      $tsize_03141_i = 0;
      break;
     }
     $843 = _sbrk($840 | 0) | 0;
     if (($843 | 0) == ((HEAP32[$796 >> 2] | 0) + (HEAP32[$800 >> 2] | 0) | 0)) {
      $br_0_i = $843;
      $ssize_1_i = $840;
      label = 190;
     } else {
      $ssize_129_i = $840;
      $br_030_i = $843;
      label = 191;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 181) {
     $809 = _sbrk(0) | 0;
     if (($809 | 0) == -1) {
      $tsize_03141_i = 0;
      break;
     }
     $812 = $809;
     $813 = HEAP32[5343] | 0;
     $814 = $813 - 1 | 0;
     if (($814 & $812 | 0) == 0) {
      $ssize_0_i = $776;
     } else {
      $ssize_0_i = $776 - $812 + ($814 + $812 & -$813) | 0;
     }
     $824 = HEAP32[14048] | 0;
     $825 = $824 + $ssize_0_i | 0;
     if (!($ssize_0_i >>> 0 > $nb_0 >>> 0 & $ssize_0_i >>> 0 < 2147483647 >>> 0)) {
      $tsize_03141_i = 0;
      break;
     }
     $829 = HEAP32[14050] | 0;
     if (($829 | 0) != 0) {
      if ($825 >>> 0 <= $824 >>> 0 | $825 >>> 0 > $829 >>> 0) {
       $tsize_03141_i = 0;
       break;
      }
     }
     $835 = _sbrk($ssize_0_i | 0) | 0;
     if (($835 | 0) == ($809 | 0)) {
      $br_0_i = $809;
      $ssize_1_i = $ssize_0_i;
      label = 190;
     } else {
      $ssize_129_i = $ssize_0_i;
      $br_030_i = $835;
      label = 191;
     }
    }
   } while (0);
   L288 : do {
    if ((label | 0) == 190) {
     if (($br_0_i | 0) == -1) {
      $tsize_03141_i = $ssize_1_i;
     } else {
      $tsize_244_i = $ssize_1_i;
      $tbase_245_i = $br_0_i;
      label = 201;
      break L266;
     }
    } else if ((label | 0) == 191) {
     $850 = -$ssize_129_i | 0;
     do {
      if (($br_030_i | 0) != -1 & $ssize_129_i >>> 0 < 2147483647 >>> 0 & $771 >>> 0 > $ssize_129_i >>> 0) {
       $855 = HEAP32[5344] | 0;
       $859 = $773 - $ssize_129_i + $855 & -$855;
       if ($859 >>> 0 >= 2147483647 >>> 0) {
        $ssize_2_i = $ssize_129_i;
        break;
       }
       if ((_sbrk($859 | 0) | 0) == -1) {
        _sbrk($850 | 0) | 0;
        $tsize_03141_i = 0;
        break L288;
       } else {
        $ssize_2_i = $859 + $ssize_129_i | 0;
        break;
       }
      } else {
       $ssize_2_i = $ssize_129_i;
      }
     } while (0);
     if (($br_030_i | 0) == -1) {
      $tsize_03141_i = 0;
     } else {
      $tsize_244_i = $ssize_2_i;
      $tbase_245_i = $br_030_i;
      label = 201;
      break L266;
     }
    }
   } while (0);
   HEAP32[14051] = HEAP32[14051] | 4;
   $tsize_1_i = $tsize_03141_i;
   label = 198;
  } else {
   $tsize_1_i = 0;
   label = 198;
  }
 } while (0);
 do {
  if ((label | 0) == 198) {
   if ($776 >>> 0 >= 2147483647 >>> 0) {
    break;
   }
   $874 = _sbrk($776 | 0) | 0;
   $875 = _sbrk(0) | 0;
   if (!(($874 | 0) != -1 & ($875 | 0) != -1 & $874 >>> 0 < $875 >>> 0)) {
    break;
   }
   $882 = $875 - $874 | 0;
   $884 = $882 >>> 0 > ($nb_0 + 40 | 0) >>> 0;
   if ($884) {
    $tsize_244_i = $884 ? $882 : $tsize_1_i;
    $tbase_245_i = $874;
    label = 201;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 201) {
   $886 = (HEAP32[14048] | 0) + $tsize_244_i | 0;
   HEAP32[14048] = $886;
   if ($886 >>> 0 > (HEAP32[14049] | 0) >>> 0) {
    HEAP32[14049] = $886;
   }
   $891 = HEAP32[13946] | 0;
   L308 : do {
    if (($891 | 0) == 0) {
     $894 = HEAP32[13944] | 0;
     if (($894 | 0) == 0 | $tbase_245_i >>> 0 < $894 >>> 0) {
      HEAP32[13944] = $tbase_245_i;
     }
     HEAP32[14052] = $tbase_245_i;
     HEAP32[14053] = $tsize_244_i;
     HEAP32[14055] = 0;
     HEAP32[13949] = HEAP32[5342];
     HEAP32[13948] = -1;
     $i_02_i_i = 0;
     do {
      $901 = $i_02_i_i << 1;
      $903 = 55800 + ($901 << 2) | 0;
      HEAP32[55800 + ($901 + 3 << 2) >> 2] = $903;
      HEAP32[55800 + ($901 + 2 << 2) >> 2] = $903;
      $i_02_i_i = $i_02_i_i + 1 | 0;
     } while ($i_02_i_i >>> 0 < 32 >>> 0);
     $910 = $tbase_245_i + 8 | 0;
     if (($910 & 7 | 0) == 0) {
      $916 = 0;
     } else {
      $916 = -$910 & 7;
     }
     $919 = $tsize_244_i - 40 - $916 | 0;
     HEAP32[13946] = $tbase_245_i + $916;
     HEAP32[13943] = $919;
     HEAP32[$tbase_245_i + ($916 + 4) >> 2] = $919 | 1;
     HEAP32[$tbase_245_i + ($tsize_244_i - 36) >> 2] = 40;
     HEAP32[13947] = HEAP32[5346];
    } else {
     $sp_073_i = 56208;
     while (1) {
      $927 = HEAP32[$sp_073_i >> 2] | 0;
      $928 = $sp_073_i + 4 | 0;
      $929 = HEAP32[$928 >> 2] | 0;
      if (($tbase_245_i | 0) == ($927 + $929 | 0)) {
       label = 213;
       break;
      }
      $934 = HEAP32[$sp_073_i + 8 >> 2] | 0;
      if (($934 | 0) == 0) {
       break;
      } else {
       $sp_073_i = $934;
      }
     }
     do {
      if ((label | 0) == 213) {
       if ((HEAP32[$sp_073_i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       $941 = $891;
       if (!($941 >>> 0 >= $927 >>> 0 & $941 >>> 0 < $tbase_245_i >>> 0)) {
        break;
       }
       HEAP32[$928 >> 2] = $929 + $tsize_244_i;
       $946 = HEAP32[13946] | 0;
       $948 = (HEAP32[13943] | 0) + $tsize_244_i | 0;
       $949 = $946;
       $951 = $946 + 8 | 0;
       if (($951 & 7 | 0) == 0) {
        $957 = 0;
       } else {
        $957 = -$951 & 7;
       }
       $960 = $948 - $957 | 0;
       HEAP32[13946] = $949 + $957;
       HEAP32[13943] = $960;
       HEAP32[$949 + ($957 + 4) >> 2] = $960 | 1;
       HEAP32[$949 + ($948 + 4) >> 2] = 40;
       HEAP32[13947] = HEAP32[5346];
       break L308;
      }
     } while (0);
     if ($tbase_245_i >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      HEAP32[13944] = $tbase_245_i;
     }
     $970 = $tbase_245_i + $tsize_244_i | 0;
     $sp_166_i = 56208;
     while (1) {
      $972 = $sp_166_i | 0;
      if ((HEAP32[$972 >> 2] | 0) == ($970 | 0)) {
       label = 223;
       break;
      }
      $977 = HEAP32[$sp_166_i + 8 >> 2] | 0;
      if (($977 | 0) == 0) {
       break;
      } else {
       $sp_166_i = $977;
      }
     }
     do {
      if ((label | 0) == 223) {
       if ((HEAP32[$sp_166_i + 12 >> 2] & 8 | 0) != 0) {
        break;
       }
       HEAP32[$972 >> 2] = $tbase_245_i;
       $984 = $sp_166_i + 4 | 0;
       HEAP32[$984 >> 2] = (HEAP32[$984 >> 2] | 0) + $tsize_244_i;
       $988 = $tbase_245_i + 8 | 0;
       if (($988 & 7 | 0) == 0) {
        $995 = 0;
       } else {
        $995 = -$988 & 7;
       }
       $998 = $tbase_245_i + ($tsize_244_i + 8) | 0;
       if (($998 & 7 | 0) == 0) {
        $1005 = 0;
       } else {
        $1005 = -$998 & 7;
       }
       $1006 = $tbase_245_i + ($1005 + $tsize_244_i) | 0;
       $1007 = $1006;
       $_sum_i19_i = $995 + $nb_0 | 0;
       $1011 = $tbase_245_i + $_sum_i19_i | 0;
       $1012 = $1011;
       $1013 = $1006 - ($tbase_245_i + $995) - $nb_0 | 0;
       HEAP32[$tbase_245_i + ($995 + 4) >> 2] = $nb_0 | 3;
       L335 : do {
        if (($1007 | 0) == (HEAP32[13946] | 0)) {
         $1021 = (HEAP32[13943] | 0) + $1013 | 0;
         HEAP32[13943] = $1021;
         HEAP32[13946] = $1012;
         HEAP32[$tbase_245_i + ($_sum_i19_i + 4) >> 2] = $1021 | 1;
        } else {
         if (($1007 | 0) == (HEAP32[13945] | 0)) {
          $1030 = (HEAP32[13942] | 0) + $1013 | 0;
          HEAP32[13942] = $1030;
          HEAP32[13945] = $1012;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 4) >> 2] = $1030 | 1;
          HEAP32[$tbase_245_i + ($1030 + $_sum_i19_i) >> 2] = $1030;
          break;
         }
         $_sum2_i21_i = $tsize_244_i + 4 | 0;
         $1039 = HEAP32[$tbase_245_i + ($_sum2_i21_i + $1005) >> 2] | 0;
         if (($1039 & 3 | 0) == 1) {
          $1043 = $1039 & -8;
          $1044 = $1039 >>> 3;
          L342 : do {
           if ($1039 >>> 0 < 256 >>> 0) {
            $1049 = HEAP32[$tbase_245_i + (($1005 | 8) + $tsize_244_i) >> 2] | 0;
            $1052 = HEAP32[$tbase_245_i + ($tsize_244_i + 12 + $1005) >> 2] | 0;
            $1055 = 55800 + ($1044 << 1 << 2) | 0;
            do {
             if (($1049 | 0) != ($1055 | 0)) {
              if ($1049 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
               _abort();
               return 0;
              }
              if ((HEAP32[$1049 + 12 >> 2] | 0) == ($1007 | 0)) {
               break;
              }
              _abort();
              return 0;
             }
            } while (0);
            if (($1052 | 0) == ($1049 | 0)) {
             HEAP32[13940] = HEAP32[13940] & ~(1 << $1044);
             break;
            }
            do {
             if (($1052 | 0) == ($1055 | 0)) {
              $_pre_phi63_i_i = $1052 + 8 | 0;
             } else {
              if ($1052 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
               _abort();
               return 0;
              }
              $1078 = $1052 + 8 | 0;
              if ((HEAP32[$1078 >> 2] | 0) == ($1007 | 0)) {
               $_pre_phi63_i_i = $1078;
               break;
              }
              _abort();
              return 0;
             }
            } while (0);
            HEAP32[$1049 + 12 >> 2] = $1052;
            HEAP32[$_pre_phi63_i_i >> 2] = $1049;
           } else {
            $1083 = $1006;
            $1086 = HEAP32[$tbase_245_i + (($1005 | 24) + $tsize_244_i) >> 2] | 0;
            $1089 = HEAP32[$tbase_245_i + ($tsize_244_i + 12 + $1005) >> 2] | 0;
            do {
             if (($1089 | 0) == ($1083 | 0)) {
              $_sum67_i_i = $1005 | 16;
              $1109 = $tbase_245_i + ($_sum2_i21_i + $_sum67_i_i) | 0;
              $1110 = HEAP32[$1109 >> 2] | 0;
              if (($1110 | 0) == 0) {
               $1114 = $tbase_245_i + ($_sum67_i_i + $tsize_244_i) | 0;
               $1115 = HEAP32[$1114 >> 2] | 0;
               if (($1115 | 0) == 0) {
                $R_1_i_i = 0;
                break;
               } else {
                $R_0_i_i = $1115;
                $RP_0_i_i = $1114;
               }
              } else {
               $R_0_i_i = $1110;
               $RP_0_i_i = $1109;
              }
              while (1) {
               $1117 = $R_0_i_i + 20 | 0;
               $1118 = HEAP32[$1117 >> 2] | 0;
               if (($1118 | 0) != 0) {
                $R_0_i_i = $1118;
                $RP_0_i_i = $1117;
                continue;
               }
               $1121 = $R_0_i_i + 16 | 0;
               $1122 = HEAP32[$1121 >> 2] | 0;
               if (($1122 | 0) == 0) {
                break;
               } else {
                $R_0_i_i = $1122;
                $RP_0_i_i = $1121;
               }
              }
              if ($RP_0_i_i >>> 0 < (HEAP32[13944] | 0) >>> 0) {
               _abort();
               return 0;
              } else {
               HEAP32[$RP_0_i_i >> 2] = 0;
               $R_1_i_i = $R_0_i_i;
               break;
              }
             } else {
              $1094 = HEAP32[$tbase_245_i + (($1005 | 8) + $tsize_244_i) >> 2] | 0;
              if ($1094 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
               _abort();
               return 0;
              }
              $1099 = $1094 + 12 | 0;
              if ((HEAP32[$1099 >> 2] | 0) != ($1083 | 0)) {
               _abort();
               return 0;
              }
              $1103 = $1089 + 8 | 0;
              if ((HEAP32[$1103 >> 2] | 0) == ($1083 | 0)) {
               HEAP32[$1099 >> 2] = $1089;
               HEAP32[$1103 >> 2] = $1094;
               $R_1_i_i = $1089;
               break;
              } else {
               _abort();
               return 0;
              }
             }
            } while (0);
            if (($1086 | 0) == 0) {
             break;
            }
            $1134 = $tbase_245_i + ($tsize_244_i + 28 + $1005) | 0;
            $1136 = 56064 + (HEAP32[$1134 >> 2] << 2) | 0;
            do {
             if (($1083 | 0) == (HEAP32[$1136 >> 2] | 0)) {
              HEAP32[$1136 >> 2] = $R_1_i_i;
              if (($R_1_i_i | 0) != 0) {
               break;
              }
              HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$1134 >> 2]);
              break L342;
             } else {
              if ($1086 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
               _abort();
               return 0;
              }
              $1150 = $1086 + 16 | 0;
              if ((HEAP32[$1150 >> 2] | 0) == ($1083 | 0)) {
               HEAP32[$1150 >> 2] = $R_1_i_i;
              } else {
               HEAP32[$1086 + 20 >> 2] = $R_1_i_i;
              }
              if (($R_1_i_i | 0) == 0) {
               break L342;
              }
             }
            } while (0);
            if ($R_1_i_i >>> 0 < (HEAP32[13944] | 0) >>> 0) {
             _abort();
             return 0;
            }
            HEAP32[$R_1_i_i + 24 >> 2] = $1086;
            $_sum3233_i_i = $1005 | 16;
            $1167 = HEAP32[$tbase_245_i + ($_sum3233_i_i + $tsize_244_i) >> 2] | 0;
            do {
             if (($1167 | 0) != 0) {
              if ($1167 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
               _abort();
               return 0;
              } else {
               HEAP32[$R_1_i_i + 16 >> 2] = $1167;
               HEAP32[$1167 + 24 >> 2] = $R_1_i_i;
               break;
              }
             }
            } while (0);
            $1180 = HEAP32[$tbase_245_i + ($_sum2_i21_i + $_sum3233_i_i) >> 2] | 0;
            if (($1180 | 0) == 0) {
             break;
            }
            if ($1180 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
             _abort();
             return 0;
            } else {
             HEAP32[$R_1_i_i + 20 >> 2] = $1180;
             HEAP32[$1180 + 24 >> 2] = $R_1_i_i;
             break;
            }
           }
          } while (0);
          $oldfirst_0_i_i = $tbase_245_i + (($1043 | $1005) + $tsize_244_i) | 0;
          $qsize_0_i_i = $1043 + $1013 | 0;
         } else {
          $oldfirst_0_i_i = $1007;
          $qsize_0_i_i = $1013;
         }
         $1196 = $oldfirst_0_i_i + 4 | 0;
         HEAP32[$1196 >> 2] = HEAP32[$1196 >> 2] & -2;
         HEAP32[$tbase_245_i + ($_sum_i19_i + 4) >> 2] = $qsize_0_i_i | 1;
         HEAP32[$tbase_245_i + ($qsize_0_i_i + $_sum_i19_i) >> 2] = $qsize_0_i_i;
         $1204 = $qsize_0_i_i >>> 3;
         if ($qsize_0_i_i >>> 0 < 256 >>> 0) {
          $1207 = $1204 << 1;
          $1209 = 55800 + ($1207 << 2) | 0;
          $1210 = HEAP32[13940] | 0;
          $1211 = 1 << $1204;
          do {
           if (($1210 & $1211 | 0) == 0) {
            HEAP32[13940] = $1210 | $1211;
            $F4_0_i_i = $1209;
            $_pre_phi_i23_i = 55800 + ($1207 + 2 << 2) | 0;
           } else {
            $1217 = 55800 + ($1207 + 2 << 2) | 0;
            $1218 = HEAP32[$1217 >> 2] | 0;
            if ($1218 >>> 0 >= (HEAP32[13944] | 0) >>> 0) {
             $F4_0_i_i = $1218;
             $_pre_phi_i23_i = $1217;
             break;
            }
            _abort();
            return 0;
           }
          } while (0);
          HEAP32[$_pre_phi_i23_i >> 2] = $1012;
          HEAP32[$F4_0_i_i + 12 >> 2] = $1012;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 8) >> 2] = $F4_0_i_i;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 12) >> 2] = $1209;
          break;
         }
         $1230 = $1011;
         $1231 = $qsize_0_i_i >>> 8;
         do {
          if (($1231 | 0) == 0) {
           $I7_0_i_i = 0;
          } else {
           if ($qsize_0_i_i >>> 0 > 16777215 >>> 0) {
            $I7_0_i_i = 31;
            break;
           }
           $1238 = ($1231 + 1048320 | 0) >>> 16 & 8;
           $1239 = $1231 << $1238;
           $1242 = ($1239 + 520192 | 0) >>> 16 & 4;
           $1244 = $1239 << $1242;
           $1247 = ($1244 + 245760 | 0) >>> 16 & 2;
           $1252 = 14 - ($1242 | $1238 | $1247) + ($1244 << $1247 >>> 15) | 0;
           $I7_0_i_i = $qsize_0_i_i >>> (($1252 + 7 | 0) >>> 0) & 1 | $1252 << 1;
          }
         } while (0);
         $1259 = 56064 + ($I7_0_i_i << 2) | 0;
         HEAP32[$tbase_245_i + ($_sum_i19_i + 28) >> 2] = $I7_0_i_i;
         HEAP32[$tbase_245_i + ($_sum_i19_i + 20) >> 2] = 0;
         HEAP32[$tbase_245_i + ($_sum_i19_i + 16) >> 2] = 0;
         $1266 = HEAP32[13941] | 0;
         $1267 = 1 << $I7_0_i_i;
         if (($1266 & $1267 | 0) == 0) {
          HEAP32[13941] = $1266 | $1267;
          HEAP32[$1259 >> 2] = $1230;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 24) >> 2] = $1259;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 12) >> 2] = $1230;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 8) >> 2] = $1230;
          break;
         }
         $1280 = HEAP32[$1259 >> 2] | 0;
         if (($I7_0_i_i | 0) == 31) {
          $1286 = 0;
         } else {
          $1286 = 25 - ($I7_0_i_i >>> 1) | 0;
         }
         L431 : do {
          if ((HEAP32[$1280 + 4 >> 2] & -8 | 0) == ($qsize_0_i_i | 0)) {
           $T_0_lcssa_i26_i = $1280;
          } else {
           $T_056_i_i = $1280;
           $K8_057_i_i = $qsize_0_i_i << $1286;
           while (1) {
            $1300 = $T_056_i_i + 16 + ($K8_057_i_i >>> 31 << 2) | 0;
            $1301 = HEAP32[$1300 >> 2] | 0;
            if (($1301 | 0) == 0) {
             break;
            }
            if ((HEAP32[$1301 + 4 >> 2] & -8 | 0) == ($qsize_0_i_i | 0)) {
             $T_0_lcssa_i26_i = $1301;
             break L431;
            } else {
             $T_056_i_i = $1301;
             $K8_057_i_i = $K8_057_i_i << 1;
            }
           }
           if ($1300 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
            _abort();
            return 0;
           } else {
            HEAP32[$1300 >> 2] = $1230;
            HEAP32[$tbase_245_i + ($_sum_i19_i + 24) >> 2] = $T_056_i_i;
            HEAP32[$tbase_245_i + ($_sum_i19_i + 12) >> 2] = $1230;
            HEAP32[$tbase_245_i + ($_sum_i19_i + 8) >> 2] = $1230;
            break L335;
           }
          }
         } while (0);
         $1315 = $T_0_lcssa_i26_i + 8 | 0;
         $1316 = HEAP32[$1315 >> 2] | 0;
         $1318 = HEAP32[13944] | 0;
         if ($T_0_lcssa_i26_i >>> 0 >= $1318 >>> 0 & $1316 >>> 0 >= $1318 >>> 0) {
          HEAP32[$1316 + 12 >> 2] = $1230;
          HEAP32[$1315 >> 2] = $1230;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 8) >> 2] = $1316;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 12) >> 2] = $T_0_lcssa_i26_i;
          HEAP32[$tbase_245_i + ($_sum_i19_i + 24) >> 2] = 0;
          break;
         } else {
          _abort();
          return 0;
         }
        }
       } while (0);
       $mem_0 = $tbase_245_i + ($995 | 8) | 0;
       return $mem_0 | 0;
      }
     } while (0);
     $1331 = $891;
     $sp_0_i_i_i = 56208;
     while (1) {
      $1334 = HEAP32[$sp_0_i_i_i >> 2] | 0;
      if ($1334 >>> 0 <= $1331 >>> 0) {
       $1338 = HEAP32[$sp_0_i_i_i + 4 >> 2] | 0;
       $1339 = $1334 + $1338 | 0;
       if ($1339 >>> 0 > $1331 >>> 0) {
        break;
       }
      }
      $sp_0_i_i_i = HEAP32[$sp_0_i_i_i + 8 >> 2] | 0;
     }
     $1345 = $1334 + ($1338 - 39) | 0;
     if (($1345 & 7 | 0) == 0) {
      $1352 = 0;
     } else {
      $1352 = -$1345 & 7;
     }
     $1353 = $1334 + ($1338 - 47 + $1352) | 0;
     $1357 = $1353 >>> 0 < ($891 + 16 | 0) >>> 0 ? $1331 : $1353;
     $1358 = $1357 + 8 | 0;
     $1362 = $tbase_245_i + 8 | 0;
     if (($1362 & 7 | 0) == 0) {
      $1368 = 0;
     } else {
      $1368 = -$1362 & 7;
     }
     $1371 = $tsize_244_i - 40 - $1368 | 0;
     HEAP32[13946] = $tbase_245_i + $1368;
     HEAP32[13943] = $1371;
     HEAP32[$tbase_245_i + ($1368 + 4) >> 2] = $1371 | 1;
     HEAP32[$tbase_245_i + ($tsize_244_i - 36) >> 2] = 40;
     HEAP32[13947] = HEAP32[5346];
     HEAP32[$1357 + 4 >> 2] = 27;
     HEAP32[$1358 >> 2] = HEAP32[14052];
     HEAP32[$1358 + 4 >> 2] = HEAP32[14053];
     HEAP32[$1358 + 8 >> 2] = HEAP32[14054];
     HEAP32[$1358 + 12 >> 2] = HEAP32[14055];
     HEAP32[14052] = $tbase_245_i;
     HEAP32[14053] = $tsize_244_i;
     HEAP32[14055] = 0;
     HEAP32[14054] = $1358;
     $1381 = $1357 + 28 | 0;
     HEAP32[$1381 >> 2] = 7;
     if (($1357 + 32 | 0) >>> 0 < $1339 >>> 0) {
      $1384 = $1381;
      while (1) {
       $1385 = $1384 + 4 | 0;
       HEAP32[$1385 >> 2] = 7;
       if (($1384 + 8 | 0) >>> 0 < $1339 >>> 0) {
        $1384 = $1385;
       } else {
        break;
       }
      }
     }
     if (($1357 | 0) == ($1331 | 0)) {
      break;
     }
     $1393 = $1357 - $891 | 0;
     $1396 = $1331 + ($1393 + 4) | 0;
     HEAP32[$1396 >> 2] = HEAP32[$1396 >> 2] & -2;
     HEAP32[$891 + 4 >> 2] = $1393 | 1;
     HEAP32[$1331 + $1393 >> 2] = $1393;
     $1402 = $1393 >>> 3;
     if ($1393 >>> 0 < 256 >>> 0) {
      $1405 = $1402 << 1;
      $1407 = 55800 + ($1405 << 2) | 0;
      $1408 = HEAP32[13940] | 0;
      $1409 = 1 << $1402;
      do {
       if (($1408 & $1409 | 0) == 0) {
        HEAP32[13940] = $1408 | $1409;
        $F_0_i_i = $1407;
        $_pre_phi_i_i = 55800 + ($1405 + 2 << 2) | 0;
       } else {
        $1415 = 55800 + ($1405 + 2 << 2) | 0;
        $1416 = HEAP32[$1415 >> 2] | 0;
        if ($1416 >>> 0 >= (HEAP32[13944] | 0) >>> 0) {
         $F_0_i_i = $1416;
         $_pre_phi_i_i = $1415;
         break;
        }
        _abort();
        return 0;
       }
      } while (0);
      HEAP32[$_pre_phi_i_i >> 2] = $891;
      HEAP32[$F_0_i_i + 12 >> 2] = $891;
      HEAP32[$891 + 8 >> 2] = $F_0_i_i;
      HEAP32[$891 + 12 >> 2] = $1407;
      break;
     }
     $1426 = $891;
     $1427 = $1393 >>> 8;
     do {
      if (($1427 | 0) == 0) {
       $I1_0_i_i = 0;
      } else {
       if ($1393 >>> 0 > 16777215 >>> 0) {
        $I1_0_i_i = 31;
        break;
       }
       $1434 = ($1427 + 1048320 | 0) >>> 16 & 8;
       $1435 = $1427 << $1434;
       $1438 = ($1435 + 520192 | 0) >>> 16 & 4;
       $1440 = $1435 << $1438;
       $1443 = ($1440 + 245760 | 0) >>> 16 & 2;
       $1448 = 14 - ($1438 | $1434 | $1443) + ($1440 << $1443 >>> 15) | 0;
       $I1_0_i_i = $1393 >>> (($1448 + 7 | 0) >>> 0) & 1 | $1448 << 1;
      }
     } while (0);
     $1455 = 56064 + ($I1_0_i_i << 2) | 0;
     HEAP32[$891 + 28 >> 2] = $I1_0_i_i;
     HEAP32[$891 + 20 >> 2] = 0;
     HEAP32[$891 + 16 >> 2] = 0;
     $1459 = HEAP32[13941] | 0;
     $1460 = 1 << $I1_0_i_i;
     if (($1459 & $1460 | 0) == 0) {
      HEAP32[13941] = $1459 | $1460;
      HEAP32[$1455 >> 2] = $1426;
      HEAP32[$891 + 24 >> 2] = $1455;
      HEAP32[$891 + 12 >> 2] = $891;
      HEAP32[$891 + 8 >> 2] = $891;
      break;
     }
     $1469 = HEAP32[$1455 >> 2] | 0;
     if (($I1_0_i_i | 0) == 31) {
      $1475 = 0;
     } else {
      $1475 = 25 - ($I1_0_i_i >>> 1) | 0;
     }
     L483 : do {
      if ((HEAP32[$1469 + 4 >> 2] & -8 | 0) == ($1393 | 0)) {
       $T_0_lcssa_i_i = $1469;
      } else {
       $T_015_i_i = $1469;
       $K2_016_i_i = $1393 << $1475;
       while (1) {
        $1489 = $T_015_i_i + 16 + ($K2_016_i_i >>> 31 << 2) | 0;
        $1490 = HEAP32[$1489 >> 2] | 0;
        if (($1490 | 0) == 0) {
         break;
        }
        if ((HEAP32[$1490 + 4 >> 2] & -8 | 0) == ($1393 | 0)) {
         $T_0_lcssa_i_i = $1490;
         break L483;
        } else {
         $T_015_i_i = $1490;
         $K2_016_i_i = $K2_016_i_i << 1;
        }
       }
       if ($1489 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
        return 0;
       } else {
        HEAP32[$1489 >> 2] = $1426;
        HEAP32[$891 + 24 >> 2] = $T_015_i_i;
        HEAP32[$891 + 12 >> 2] = $891;
        HEAP32[$891 + 8 >> 2] = $891;
        break L308;
       }
      }
     } while (0);
     $1501 = $T_0_lcssa_i_i + 8 | 0;
     $1502 = HEAP32[$1501 >> 2] | 0;
     $1504 = HEAP32[13944] | 0;
     if ($T_0_lcssa_i_i >>> 0 >= $1504 >>> 0 & $1502 >>> 0 >= $1504 >>> 0) {
      HEAP32[$1502 + 12 >> 2] = $1426;
      HEAP32[$1501 >> 2] = $1426;
      HEAP32[$891 + 8 >> 2] = $1502;
      HEAP32[$891 + 12 >> 2] = $T_0_lcssa_i_i;
      HEAP32[$891 + 24 >> 2] = 0;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   $1513 = HEAP32[13943] | 0;
   if ($1513 >>> 0 <= $nb_0 >>> 0) {
    break;
   }
   $1516 = $1513 - $nb_0 | 0;
   HEAP32[13943] = $1516;
   $1517 = HEAP32[13946] | 0;
   $1518 = $1517;
   HEAP32[13946] = $1518 + $nb_0;
   HEAP32[$1518 + ($nb_0 + 4) >> 2] = $1516 | 1;
   HEAP32[$1517 + 4 >> 2] = $nb_0 | 3;
   $mem_0 = $1517 + 8 | 0;
   return $mem_0 | 0;
  }
 } while (0);
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem_0 = 0;
 return $mem_0 | 0;
}
function _tcc_output_file($s, $filename) {
 $s = $s | 0;
 $filename = $filename | 0;
 var $buf_i_i = 0, $ehdr_i = 0, $shdr_i = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $12 = 0, $14 = 0, $sym_01_i_i = 0, $19 = 0, $23 = 0, $24 = 0, $31 = 0, $48 = 0, $50 = 0, $__i = 0, $52 = 0, $interp_0_i = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $70 = 0, $79 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $90 = 0, $91 = 0, $92 = 0, $sym_0111_i = 0, $95 = 0, $96 = 0, $99 = 0, $106 = 0, $107 = 0, $108 = 0, $113 = 0, $114 = 0, $116 = 0, $132 = 0, $136 = 0, $138 = 0, $142 = 0, $146 = 0, $148 = 0, $150 = 0, $152 = 0, $157 = 0, $dynsym_0108_i = 0, $165 = 0, $183 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $196 = 0, $sr_0_i_i = 0, $202 = 0, $226 = 0, $249 = 0, $250 = 0, $252 = 0, $254 = 0, $256 = 0, $esym_0102_i = 0, $272 = 0, $273 = 0, $274 = 0, $279 = 0, $305 = 0, $309 = 0, $sym_1116_i = 0, $315 = 0, $334 = 0, $347 = 0, $348 = 0, $350 = 0, $351 = 0, $353 = 0, $i_097_i = 0, $356 = 0, $361 = 0, $363 = 0, $364 = 0, $366 = 0, $371 = 0, $372 = 0, $375 = 0, $379 = 0, $381 = 0, $383 = 0, $391 = 0, $395 = 0, $397 = 0, $399 = 0, $404 = 0, $413 = 0, $418 = 0, $419 = 0, $interp_1_i = 0, $dynamic_0_i = 0, $dynstr_0_i = 0, $saved_dynamic_data_offset_0_i = 0, $422 = 0, $423 = 0, $425 = 0, $426 = 0, $429 = 0, $phnum_0_i = 0, $438 = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $i_192_i = 0, $446 = 0, $447 = 0, $449 = 0, $450 = 0, $458 = 0, $459 = 0, $474 = 0, $476 = 0, $478 = 0, $count_02_i_i = 0, $rel_01_i_i = 0, $483 = 0, $484 = 0, $count_1_i_i = 0, $494 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $533 = 0, $file_offset_0_i = 0, $534 = 0, $541 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $addr_1_i = 0, $file_offset_1_i = 0, $559 = 0, $ph_1_ph_i = 0, $563 = 0, $564 = 0, $file_offset_291_i = 0, $j_090_i = 0, $sh_order_index_089_i = 0, $rel_size_088_i = 0, $rel_addr_087_i = 0, $addr_286_i = 0, $ph_185_i = 0, $566 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $file_offset_383_i = 0, $sh_order_index_182_i = 0, $rel_size_181_i = 0, $rel_addr_180_i = 0, $k_079_i = 0, $addr_378_i = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $581 = 0, $i_269_i = 0, $file_offset_468_i = 0, $sh_order_index_266_i = 0, $rel_size_265_i = 0, $rel_addr_263_i = 0, $addr_461_i = 0, $584 = 0, $587 = 0, $606 = 0, $610 = 0, $612 = 0, $620 = 0, $625 = 0, $628 = 0, $rel_addr_4_i = 0, $rel_size_3_i = 0, $633 = 0, $addr_5_i = 0, $rel_addr_5_i = 0, $rel_size_4_i = 0, $sh_order_index_3_i = 0, $file_offset_5_i = 0, $634 = 0, $636 = 0, $file_offset_4_lcssa_i = 0, $sh_order_index_2_lcssa_i = 0, $rel_size_2_lcssa_i = 0, $rel_addr_2_lcssa_i = 0, $addr_4_lcssa_i = 0, $637 = 0, $646 = 0, $650 = 0, $658 = 0, $addr_6_i = 0, $file_offset_6_i = 0, $664 = 0, $674 = 0, $679 = 0, $695 = 0, $700 = 0, $701 = 0, $704 = 0, $713 = 0, $716 = 0, $717 = 0, $731 = 0, $733 = 0, $735 = 0, $736 = 0, $739 = 0, $742 = 0, $747 = 0, $752 = 0, $760 = 0, $768 = 0, $771 = 0, $776 = 0, $781 = 0, $789 = 0, $p_057_i = 0, $_pn56_i = 0, $799 = 0, $802 = 0, $807 = 0, $812 = 0, $820 = 0, $p_0_i = 0, $829 = 0, $830 = 0, $832 = 0, $834 = 0, $836 = 0, $840 = 0, $sym_251_i = 0, $843 = 0, $844 = 0, $847 = 0, $848 = 0, $863 = 0, $874 = 0, $875 = 0, $880 = 0, $881 = 0, $887 = 0, $888 = 0, $893 = 0, $894 = 0, $898 = 0, $902 = 0, $906 = 0, $910 = 0, $918 = 0, $923 = 0, $sh_order_index_5_ph_i = 0, $file_offset_8_ph_i = 0, $934 = 0, $i_346_i = 0, $file_offset_845_i = 0, $sh_order_index_544_i = 0, $938 = 0, $945 = 0, $948 = 0, $952 = 0, $sh_order_index_6_i = 0, $file_offset_9_i = 0, $962 = 0, $file_offset_8_lcssa_i = 0, $968 = 0, $970 = 0, $971 = 0, $974 = 0, $i_441_i = 0, $977 = 0, $986 = 0, $987 = 0, $989 = 0, $i_538_i = 0, $990 = 0, $992 = 0, $1003 = 0, $1005 = 0, $1007 = 0, $1014 = 0, $rel_01_i18_i = 0, $1017 = 0, $1022 = 0, $1023 = 0, $1028 = 0, $1029 = 0, $1032 = 0, $_0_i_i = 0, $mode_0_i = 0, $1056 = 0, $1060 = 0, $1070 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $1085 = 0, $i_012_i_i = 0, $p_011_i_i = 0, $q_010_i_i = 0, $1096 = 0, $1097 = 0, $q_1_i_i = 0, $1100 = 0, $i_16_i_i = 0, $p_15_i_i = 0, $q_24_i_i = 0, $1118 = 0, $1119 = 0, $q_3_i_i = 0, $1122 = 0, $1125 = 0, $1127 = 0, $1129 = 0, $i_22_i_i = 0, $1132 = 0, $1142 = 0, $1144 = 0, $1146 = 0, $rel_01_i21_i = 0, $1150 = 0, $1151 = 0, $1160 = 0, $1161 = 0, $1164 = 0, $1180 = 0, $1190 = 0, $1192 = 0, $1193 = 0, $offset_0_lcssa_i = 0, $1197 = 0, $i_633_i = 0, $offset_032_i = 0, $1202 = 0, $1204 = 0, $1207 = 0, $1209 = 0, $1211 = 0, $sym_01_i24_i = 0, $1226 = 0, $1228 = 0, $offset_130_i = 0, $1232 = 0, $offset_1_lcssa_i = 0, $1236 = 0, $1242 = 0, $offset_2_i = 0, $1243 = 0, $1245 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $offset_328_i = 0, $i_726_i = 0, $1265 = 0, $1279 = 0, $1299 = 0, $1301 = 0, $1303 = 0, $i_03_i_i = 0, $offset_02_i_i = 0, $1308 = 0, $1317 = 0, $offset_11_i_i = 0, $1321 = 0, $offset_1_lcssa_i_i = 0, $1325 = 0, $1331 = 0, $offset_2_i_i = 0, $1332 = 0, $phdr_1_i = 0, $section_order_1_i = 0, $ret_0_i = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $$etemp$4$0 = 0, $$etemp$4$1 = 0, $$etemp$5$0 = 0, $$etemp$5$1 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $buf_i_i = sp | 0;
 $ehdr_i = sp + 256 | 0;
 $shdr_i = sp + 312 | 0;
 $1 = $ehdr_i | 0;
 $2 = $shdr_i;
 $4 = HEAP32[$s + 44 >> 2] | 0;
 $5 = $s + 320 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = ($4 | 0) != 3;
 do {
  if ($6) {
   _tcc_add_runtime($s);
   $8 = HEAP32[5318] | 0;
   $10 = HEAP32[$8 + 4 >> 2] | 0;
   $12 = HEAP32[$8 >> 2] | 0;
   $14 = $10 + $12 | 0;
   if (($12 | 0) > 16) {
    $sym_01_i_i = $10 + 16 | 0;
    do {
     $19 = $sym_01_i_i + 14 | 0;
     if ((HEAP16[$19 >> 1] | 0) == -14) {
      $23 = $sym_01_i_i + 4 | 0;
      $24 = HEAP32[$23 >> 2] | 0;
      $31 = $24 - 1 + (HEAP32[HEAP32[13926] >> 2] | 0) & -$24;
      HEAP32[$23 >> 2] = $31;
      HEAP16[$19 >> 1] = HEAP32[(HEAP32[13926] | 0) + 16 >> 2];
      HEAP32[HEAP32[13926] >> 2] = (HEAP32[$sym_01_i_i + 8 >> 2] | 0) + $31;
     }
     $sym_01_i_i = $sym_01_i_i + 16 | 0;
    } while ($sym_01_i_i >>> 0 < $14 >>> 0);
   }
   _tcc_add_linker_symbols($s);
   if ((HEAP32[$s + 16 >> 2] | 0) != 0) {
    _build_got_entries($s);
    $saved_dynamic_data_offset_0_i = 0;
    $dynstr_0_i = 0;
    $dynamic_0_i = 0;
    $interp_1_i = 0;
    break;
   }
   $48 = ($4 | 0) == 1;
   if ($48) {
    $50 = _getenv(14136) | 0;
    $__i = ($50 | 0) == 0 ? 14088 : $50;
    $52 = _new_section($s, 13984, 1, 2) | 0;
    HEAP32[$52 + 32 >> 2] = 1;
    _strcpy(_section_ptr_add($52, (_strlen($__i | 0) | 0) + 1 | 0) | 0, $__i | 0) | 0;
    $interp_0_i = $52;
   } else {
    $interp_0_i = 0;
   }
   $59 = _new_symtab($s, 13888, 11, 2, 13736, 13592, 2) | 0;
   $60 = $s + 2868 | 0;
   HEAP32[$60 >> 2] = $59;
   $62 = HEAP32[$59 + 56 >> 2] | 0;
   $63 = _new_section($s, 13472, 6, 3) | 0;
   HEAP32[$63 + 56 >> 2] = $62;
   HEAP32[$63 + 36 >> 2] = 8;
   $66 = _new_section($s, 13368, 1, 6) | 0;
   HEAP32[$s + 2848 >> 2] = $66;
   HEAP32[$66 + 36 >> 2] = 4;
   $69 = _new_section($s, 12288, 1, 3) | 0;
   $70 = $s + 2844 | 0;
   HEAP32[$70 >> 2] = $69;
   HEAP32[$69 + 36 >> 2] = 4;
   _add_elf_sym(HEAP32[5318] | 0, 0, 4, 17, 0, HEAP32[(HEAP32[$70 >> 2] | 0) + 16 >> 2] | 0, 12216) | 0;
   _memset(_section_ptr_add(HEAP32[$70 >> 2] | 0, 12) | 0, 0, 12) | 0;
   $79 = HEAP32[5318] | 0;
   $81 = HEAP32[$79 + 4 >> 2] | 0;
   $83 = HEAP32[$79 >> 2] | 0;
   $84 = $81 + $83 | 0;
   $85 = $84;
   do {
    if ($48) {
     if (($83 | 0) > 16) {
      $90 = $s + 2864 | 0;
      $91 = $buf_i_i | 0;
      $92 = $s + 20 | 0;
      $sym_0111_i = $81 + 16 | 0;
      do {
       $95 = HEAP16[$sym_0111_i + 14 >> 1] | 0;
       $96 = $95 & 65535;
       do {
        if ($95 << 16 >> 16 == 0) {
         $99 = HEAP32[5318] | 0;
         $106 = (HEAP32[(HEAP32[$99 + 56 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$sym_0111_i >> 2] | 0) | 0;
         $107 = HEAP32[$90 >> 2] | 0;
         $108 = _find_elf_sym($107, $106) | 0;
         if (($108 | 0) == 0) {
          if ((HEAP8[$sym_0111_i + 12 | 0] & -16) << 24 >> 24 == 32) {
           break;
          }
          if ((_strcmp($106 | 0, 15552) | 0) == 0) {
           break;
          }
          _tcc_error_noabort(14464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $106, tempVarArgs) | 0);
          STACKTOP = tempVarArgs;
          break;
         }
         $113 = HEAP32[$107 + 4 >> 2] | 0;
         $114 = $113 + ($108 << 4) + 12 | 0;
         $116 = HEAPU8[$114] | 0;
         if (($116 & 7 | 0) == 2) {
          _put_got_entry($s, 7, HEAP32[$113 + ($108 << 4) + 8 >> 2] | 0, 18, $sym_0111_i - (HEAP32[$99 + 4 >> 2] | 0) >> 4);
          break;
         }
         if (($116 & 15 | 0) != 1) {
          break;
         }
         $132 = HEAP32[13926] | 0;
         $136 = (HEAP32[$132 >> 2] | 0) + 15 & -16;
         $138 = $113 + ($108 << 4) + 8 | 0;
         $142 = _put_elf_sym(HEAP32[$60 >> 2] | 0, $136, HEAP32[$138 >> 2] | 0, $116, 0, HEAP32[$132 + 16 >> 2] | 0, $106) | 0;
         L44 : do {
          if ((HEAP8[$114] & -16) << 24 >> 24 == 32) {
           $146 = HEAP32[$90 >> 2] | 0;
           $148 = HEAP32[$146 + 4 >> 2] | 0;
           $150 = HEAP32[$146 >> 2] | 0;
           $152 = $148 + $150 | 0;
           if (($150 | 0) <= 16) {
            break;
           }
           $157 = HEAP32[$113 + ($108 << 4) + 4 >> 2] | 0;
           $dynsym_0108_i = $148 + 16 | 0;
           while (1) {
            if ((HEAP32[$dynsym_0108_i + 4 >> 2] | 0) == ($157 | 0)) {
             $165 = HEAPU8[$dynsym_0108_i + 12 | 0] | 0;
             if (($165 & 240 | 0) == 16) {
              break;
             }
            }
            $183 = $dynsym_0108_i + 16 | 0;
            if ($183 >>> 0 < $152 >>> 0) {
             $dynsym_0108_i = $183;
            } else {
             break L44;
            }
           }
           _put_elf_sym(HEAP32[$60 >> 2] | 0, $136, HEAP32[$dynsym_0108_i + 8 >> 2] | 0, $165, 0, HEAP32[(HEAP32[13926] | 0) + 16 >> 2] | 0, (HEAP32[(HEAP32[$146 + 56 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$dynsym_0108_i >> 2] | 0) | 0) | 0;
          }
         } while (0);
         $185 = HEAP32[$60 >> 2] | 0;
         $186 = HEAP32[13926] | 0;
         $187 = $186 + 60 | 0;
         $188 = HEAP32[$187 >> 2] | 0;
         if (($188 | 0) == 0) {
          _snprintf($91 | 0, 256, 16960, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $186 + 72, tempVarArgs) | 0) | 0;
          STACKTOP = tempVarArgs;
          $196 = _new_section(HEAP32[5314] | 0, $91, 9, HEAP32[$185 + 24 >> 2] | 0) | 0;
          HEAP32[$196 + 36 >> 2] = 8;
          HEAP32[$196 + 56 >> 2] = $185;
          HEAP32[$196 + 28 >> 2] = HEAP32[$186 + 16 >> 2];
          HEAP32[$187 >> 2] = $196;
          $sr_0_i_i = $196;
         } else {
          $sr_0_i_i = $188;
         }
         $202 = _section_ptr_add($sr_0_i_i, 8) | 0;
         HEAP32[$202 >> 2] = $136;
         HEAP32[$202 + 4 >> 2] = $142 << 8 | 5;
         HEAP32[HEAP32[13926] >> 2] = (HEAP32[$138 >> 2] | 0) + $136;
        } else {
         if ((HEAP32[$92 >> 2] | 0) == 0) {
          break;
         }
         $226 = HEAPU8[$sym_0111_i + 12 | 0] | 0;
         if (($226 & 240 | 0) == 0) {
          break;
         }
         _put_elf_sym(HEAP32[$60 >> 2] | 0, HEAP32[$sym_0111_i + 4 >> 2] | 0, HEAP32[$sym_0111_i + 8 >> 2] | 0, $226, 0, $96, (HEAP32[(HEAP32[(HEAP32[5318] | 0) + 56 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$sym_0111_i >> 2] | 0) | 0) | 0;
        }
       } while (0);
       $sym_0111_i = $sym_0111_i + 16 | 0;
      } while ($sym_0111_i >>> 0 < $85 >>> 0);
     }
     if ((HEAP32[$5 >> 2] | 0) != 0) {
      $ret_0_i = -1;
      $section_order_1_i = 0;
      $phdr_1_i = 0;
      $1335 = $s + 2860 | 0;
      $1336 = HEAP32[$1335 >> 2] | 0;
      $1337 = $1336;
      _tcc_free($1337);
      $1338 = $section_order_1_i;
      _tcc_free($1338);
      $1339 = $phdr_1_i;
      _tcc_free($1339);
      $1340 = $s + 2852 | 0;
      $1341 = HEAP32[$1340 >> 2] | 0;
      $1342 = $1341;
      _tcc_free($1342);
      $$etemp$4$0 = 52;
      $$etemp$4$1 = 0;
      $$etemp$5$0 = 40;
      $$etemp$5$1 = 0;
      STACKTOP = sp;
      return $ret_0_i | 0;
     }
     $249 = $s + 2864 | 0;
     $250 = HEAP32[$249 >> 2] | 0;
     $252 = HEAP32[$250 + 4 >> 2] | 0;
     $254 = HEAP32[$250 >> 2] | 0;
     $256 = $252 + $254 | 0;
     if (($254 | 0) <= 16) {
      break;
     }
     $esym_0102_i = $252 + 16 | 0;
     do {
      do {
       if ((HEAP16[$esym_0102_i + 14 >> 1] | 0) == 0) {
        $272 = (HEAP32[(HEAP32[(HEAP32[$249 >> 2] | 0) + 56 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$esym_0102_i >> 2] | 0) | 0;
        $273 = HEAP32[5318] | 0;
        $274 = _find_elf_sym($273, $272) | 0;
        if (($274 | 0) != 0) {
         $279 = HEAP32[$273 + 4 >> 2] | 0;
         _put_elf_sym(HEAP32[$60 >> 2] | 0, HEAP32[$279 + ($274 << 4) + 4 >> 2] | 0, HEAP32[$279 + ($274 << 4) + 8 >> 2] | 0, HEAPU8[$279 + ($274 << 4) + 12 | 0] | 0, 0, HEAPU16[$279 + ($274 << 4) + 14 >> 1] | 0, $272) | 0;
         break;
        }
        if ((HEAP8[$esym_0102_i + 12 | 0] & -16) << 24 >> 24 == 32) {
         break;
        }
        _tcc_warning(13240, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $272, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
       }
      } while (0);
      $esym_0102_i = $esym_0102_i + 16 | 0;
     } while ($esym_0102_i >>> 0 < $256 >>> 0);
    } else {
     $305 = $s + 2860 | 0;
     HEAP32[$305 >> 2] = _tcc_mallocz($83 >>> 4 << 2) | 0;
     $309 = (HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) + 16 | 0;
     if ($309 >>> 0 >= $84 >>> 0) {
      break;
     }
     $sym_1116_i = $309;
     do {
      $315 = HEAPU8[$sym_1116_i + 12 | 0] | 0;
      if (($315 & 240 | 0) != 0) {
       $334 = _put_elf_sym(HEAP32[$60 >> 2] | 0, HEAP32[$sym_1116_i + 4 >> 2] | 0, HEAP32[$sym_1116_i + 8 >> 2] | 0, $315, 0, HEAPU16[$sym_1116_i + 14 >> 1] | 0, (HEAP32[(HEAP32[(HEAP32[5318] | 0) + 56 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$sym_1116_i >> 2] | 0) | 0) | 0;
       HEAP32[(HEAP32[$305 >> 2] | 0) + ($sym_1116_i - (HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) >> 4 << 2) >> 2] = $334;
      }
      $sym_1116_i = $sym_1116_i + 16 | 0;
     } while ($sym_1116_i >>> 0 < $85 >>> 0);
    }
   } while (0);
   _build_got_entries($s);
   $347 = $s + 116 | 0;
   $348 = HEAP32[$347 >> 2] | 0;
   if (($348 | 0) > 0) {
    $350 = $s + 112 | 0;
    $351 = $62 | 0;
    $i_097_i = 0;
    $353 = $348;
    while (1) {
     $356 = HEAP32[(HEAP32[$350 >> 2] | 0) + ($i_097_i << 2) >> 2] | 0;
     if ((HEAP32[$356 >> 2] | 0) == 0) {
      $361 = $356 + 8 | 0;
      $363 = (_strlen($361 | 0) | 0) + 1 | 0;
      $364 = HEAP32[$351 >> 2] | 0;
      _memcpy(_section_ptr_add($62, $363) | 0, $361 | 0, $363) | 0;
      $366 = _section_ptr_add($63, 8) | 0;
      HEAP32[$366 >> 2] = 1;
      HEAP32[$366 + 4 >> 2] = $364;
      $371 = HEAP32[$347 >> 2] | 0;
     } else {
      $371 = $353;
     }
     $372 = $i_097_i + 1 | 0;
     if (($372 | 0) < ($371 | 0)) {
      $i_097_i = $372;
      $353 = $371;
     } else {
      break;
     }
    }
   }
   $375 = HEAP32[$s + 40 >> 2] | 0;
   if (($375 | 0) != 0) {
    $379 = (_strlen($375 | 0) | 0) + 1 | 0;
    $381 = HEAP32[$62 >> 2] | 0;
    _memcpy(_section_ptr_add($62, $379) | 0, $375 | 0, $379) | 0;
    $383 = _section_ptr_add($63, 8) | 0;
    HEAP32[$383 >> 2] = 15;
    HEAP32[$383 + 4 >> 2] = $381;
   }
   if (($4 | 0) == 2) {
    $391 = HEAP32[$s + 36 >> 2] | 0;
    if (($391 | 0) != 0) {
     $395 = (_strlen($391 | 0) | 0) + 1 | 0;
     $397 = HEAP32[$62 >> 2] | 0;
     _memcpy(_section_ptr_add($62, $395) | 0, $391 | 0, $395) | 0;
     $399 = _section_ptr_add($63, 8) | 0;
     HEAP32[$399 >> 2] = 14;
     HEAP32[$399 + 4 >> 2] = $397;
    }
    $404 = _section_ptr_add($63, 8) | 0;
    HEAP32[$404 >> 2] = 22;
    HEAP32[$404 + 4 >> 2] = 0;
   }
   if ((HEAP32[$s + 24 >> 2] | 0) != 0) {
    $413 = _section_ptr_add($63, 8) | 0;
    HEAP32[$413 >> 2] = 16;
    HEAP32[$413 + 4 >> 2] = 0;
   }
   $418 = $63 | 0;
   $419 = HEAP32[$418 >> 2] | 0;
   HEAP32[$418 >> 2] = $419 + 72;
   $saved_dynamic_data_offset_0_i = $419;
   $dynstr_0_i = $62;
   $dynamic_0_i = $63;
   $interp_1_i = $interp_0_i;
  } else {
   $saved_dynamic_data_offset_0_i = 0;
   $dynstr_0_i = 0;
   $dynamic_0_i = 0;
   $interp_1_i = 0;
  }
 } while (0);
 _memset($1 | 0, 0, 52) | 0;
 $422 = _new_section($s, 13112, 3, 0) | 0;
 $423 = $422 | 0;
 HEAP8[_section_ptr_add($422, 1) | 0] = 0;
 $425 = $s + 2832 | 0;
 $426 = HEAP32[$425 >> 2] | 0;
 $429 = _tcc_malloc($426 << 2) | 0;
 HEAP32[$429 >> 2] = 0;
 if (($4 | 0) == 1) {
  $phnum_0_i = (HEAP32[$s + 16 >> 2] | 0) == 0 ? 4 : 2;
 } else if (($4 | 0) == 2) {
  $phnum_0_i = 3;
 } else {
  $phnum_0_i = 0;
 }
 if ((HEAP32[$425 >> 2] | 0) > 1) {
  $438 = $s + 2828 | 0;
  $439 = ($4 | 0) == 2;
  $440 = $s + 80 | 0;
  $441 = $s + 2860 | 0;
  $442 = ($4 | 0) == 3;
  $i_192_i = 1;
  do {
   $446 = HEAP32[(HEAP32[$438 >> 2] | 0) + ($i_192_i << 2) >> 2] | 0;
   $447 = $446 + 72 | 0;
   $449 = (_strlen($447 | 0) | 0) + 1 | 0;
   $450 = HEAP32[$423 >> 2] | 0;
   _memcpy(_section_ptr_add($422, $449) | 0, $447 | 0, $449) | 0;
   HEAP32[$446 + 12 >> 2] = $450;
   do {
    if ($439) {
     if ((HEAP32[$446 + 20 >> 2] | 0) != 9) {
      label = 83;
      break;
     }
     $458 = $446 + 24 | 0;
     $459 = HEAP32[$458 >> 2] | 0;
     if (($459 & 2 | 0) != 0) {
      label = 83;
      break;
     }
     if ((HEAP32[(HEAP32[(HEAP32[$438 >> 2] | 0) + (HEAP32[$446 + 28 >> 2] << 2) >> 2] | 0) + 24 >> 2] & 2 | 0) == 0) {
      if ((HEAP32[$440 >> 2] | 0) == 0) {
       break;
      }
      HEAP32[$446 + 40 >> 2] = HEAP32[$446 >> 2];
      break;
     }
     $474 = HEAP32[$446 + 4 >> 2] | 0;
     $476 = HEAP32[$446 >> 2] | 0;
     $478 = $474 + $476 | 0;
     if (($476 | 0) <= 0) {
      break;
     }
     $rel_01_i_i = $474;
     $count_02_i_i = 0;
     while (1) {
      $483 = HEAP32[$rel_01_i_i + 4 >> 2] | 0;
      $484 = $483 & 255;
      if (($484 | 0) == 2) {
       $count_1_i_i = ((HEAP32[(HEAP32[$441 >> 2] | 0) + ($483 >>> 8 << 2) >> 2] | 0) != 0) + $count_02_i_i | 0;
      } else if (($484 | 0) == 1) {
       $count_1_i_i = $count_02_i_i + 1 | 0;
      } else {
       $count_1_i_i = $count_02_i_i;
      }
      $494 = $rel_01_i_i + 8 | 0;
      if ($494 >>> 0 < $478 >>> 0) {
       $rel_01_i_i = $494;
       $count_02_i_i = $count_1_i_i;
      } else {
       break;
      }
     }
     if (($count_1_i_i | 0) == 0) {
      break;
     }
     HEAP32[$458 >> 2] = $459 | 2;
     HEAP32[$446 + 40 >> 2] = $count_1_i_i << 3;
    } else {
     label = 83;
    }
   } while (0);
   L119 : do {
    if ((label | 0) == 83) {
     label = 0;
     do {
      if (!((HEAP32[$440 >> 2] | 0) != 0 | $442)) {
       if ((HEAP32[$446 + 24 >> 2] & 2 | 0) != 0) {
        break;
       }
       if (($i_192_i | 0) != ((HEAP32[$425 >> 2] | 0) - 1 | 0)) {
        break L119;
       }
      }
     } while (0);
     HEAP32[$446 + 40 >> 2] = HEAP32[$446 >> 2];
    }
   } while (0);
   $i_192_i = $i_192_i + 1 | 0;
  } while (($i_192_i | 0) < (HEAP32[$425 >> 2] | 0));
 }
 $527 = $phnum_0_i << 5;
 $528 = _tcc_mallocz($527) | 0;
 $529 = $528;
 $530 = $s + 48 | 0;
 $533 = $527 + 52 | 0;
 $file_offset_0_i = (HEAP32[$530 >> 2] | 0) == 0 ? $533 : 0;
 $534 = ($phnum_0_i | 0) != 0;
 if ($534) {
  if ((HEAP32[$s + 92 >> 2] | 0) == 0) {
   $file_offset_1_i = $file_offset_0_i;
   $addr_1_i = ((HEAP32[$s + 96 >> 2] | 0) - 1 & $file_offset_0_i) + (($4 | 0) == 2 ? 0 : 134512640) | 0;
  } else {
   $541 = HEAP32[$s + 88 >> 2] | 0;
   $543 = HEAP32[$s + 96 >> 2] | 0;
   $544 = $543 - 1 | 0;
   $545 = $544 & $541;
   $546 = $544 & $file_offset_0_i;
   $file_offset_1_i = $545 + $file_offset_0_i - $546 + (($545 | 0) < ($546 | 0) ? $543 : 0) | 0;
   $addr_1_i = $541;
  }
  $559 = ($interp_1_i | 0) != 0;
  if ($559) {
   $ph_1_ph_i = $528 + 32 | 0;
  } else {
   $ph_1_ph_i = $529;
  }
  $563 = $s + 96 | 0;
  $564 = $s + 2828 | 0;
  $ph_185_i = $ph_1_ph_i;
  $addr_286_i = $addr_1_i;
  $rel_addr_087_i = 0;
  $rel_size_088_i = 0;
  $sh_order_index_089_i = 1;
  $j_090_i = 0;
  $file_offset_291_i = $file_offset_1_i;
  L136 : while (1) {
   HEAP32[$ph_185_i >> 2] = 1;
   $566 = ($j_090_i | 0) == 0;
   HEAP32[$ph_185_i + 24 >> 2] = $566 ? 5 : 6;
   HEAP32[$ph_185_i + 28 >> 2] = HEAP32[$563 >> 2];
   $570 = $ph_185_i + 4 | 0;
   $571 = $ph_185_i + 8 | 0;
   $572 = $ph_185_i + 12 | 0;
   $addr_378_i = $addr_286_i;
   $k_079_i = 0;
   $rel_addr_180_i = $rel_addr_087_i;
   $rel_size_181_i = $rel_size_088_i;
   $sh_order_index_182_i = $sh_order_index_089_i;
   $file_offset_383_i = $file_offset_291_i;
   $573 = HEAP32[$425 >> 2] | 0;
   while (1) {
    if (($573 | 0) > 1) {
     $575 = ($k_079_i | 0) == 0;
     $576 = ($k_079_i | 0) == 3;
     $577 = ($k_079_i | 0) == 1;
     $578 = ($k_079_i | 0) == 2;
     $579 = ($k_079_i | 0) == 4;
     $addr_461_i = $addr_378_i;
     $rel_addr_263_i = $rel_addr_180_i;
     $rel_size_265_i = $rel_size_181_i;
     $sh_order_index_266_i = $sh_order_index_182_i;
     $file_offset_468_i = $file_offset_383_i;
     $i_269_i = 1;
     $581 = $573;
     while (1) {
      $584 = HEAP32[(HEAP32[$564 >> 2] | 0) + ($i_269_i << 2) >> 2] | 0;
      $587 = HEAP32[$584 + 24 >> 2] & 3;
      if ($566) {
       if (($587 | 0) == 2) {
        label = 101;
       } else {
        $file_offset_5_i = $file_offset_468_i;
        $sh_order_index_3_i = $sh_order_index_266_i;
        $rel_size_4_i = $rel_size_265_i;
        $rel_addr_5_i = $rel_addr_263_i;
        $addr_5_i = $addr_461_i;
        $633 = $581;
       }
      } else {
       if (($587 | 0) == 3) {
        label = 101;
       } else {
        $file_offset_5_i = $file_offset_468_i;
        $sh_order_index_3_i = $sh_order_index_266_i;
        $rel_size_4_i = $rel_size_265_i;
        $rel_addr_5_i = $rel_addr_263_i;
        $addr_5_i = $addr_461_i;
        $633 = $581;
       }
      }
      L147 : do {
       if ((label | 0) == 101) {
        label = 0;
        L149 : do {
         if (($584 | 0) == ($interp_1_i | 0)) {
          if (!$575) {
           $file_offset_5_i = $file_offset_468_i;
           $sh_order_index_3_i = $sh_order_index_266_i;
           $rel_size_4_i = $rel_size_265_i;
           $rel_addr_5_i = $rel_addr_263_i;
           $addr_5_i = $addr_461_i;
           $633 = $581;
           break L147;
          }
         } else {
          switch (HEAP32[$584 + 20 >> 2] | 0) {
          case 11:
          case 3:
          case 5:
           {
            if ($577) {
             break L149;
            } else {
             $file_offset_5_i = $file_offset_468_i;
             $sh_order_index_3_i = $sh_order_index_266_i;
             $rel_size_4_i = $rel_size_265_i;
             $rel_addr_5_i = $rel_addr_263_i;
             $addr_5_i = $addr_461_i;
             $633 = $581;
             break L147;
            }
            break;
           }
          case 9:
           {
            if ($578) {
             break L149;
            } else {
             $file_offset_5_i = $file_offset_468_i;
             $sh_order_index_3_i = $sh_order_index_266_i;
             $rel_size_4_i = $rel_size_265_i;
             $rel_addr_5_i = $rel_addr_263_i;
             $addr_5_i = $addr_461_i;
             $633 = $581;
             break L147;
            }
            break;
           }
          case 8:
           {
            if ($579) {
             break L149;
            } else {
             $file_offset_5_i = $file_offset_468_i;
             $sh_order_index_3_i = $sh_order_index_266_i;
             $rel_size_4_i = $rel_size_265_i;
             $rel_addr_5_i = $rel_addr_263_i;
             $addr_5_i = $addr_461_i;
             $633 = $581;
             break L147;
            }
            break;
           }
          default:
           {
            if ($576) {
             break L149;
            } else {
             $file_offset_5_i = $file_offset_468_i;
             $sh_order_index_3_i = $sh_order_index_266_i;
             $rel_size_4_i = $rel_size_265_i;
             $rel_addr_5_i = $rel_addr_263_i;
             $addr_5_i = $addr_461_i;
             $633 = $581;
             break L147;
            }
           }
          }
         }
        } while (0);
        HEAP32[$429 + ($sh_order_index_266_i << 2) >> 2] = $i_269_i;
        $606 = HEAP32[$584 + 32 >> 2] | 0;
        $610 = $addr_461_i - 1 + $606 & -$606;
        $612 = $610 - $addr_461_i + $file_offset_468_i | 0;
        HEAP32[$584 + 48 >> 2] = $612;
        HEAP32[$584 + 44 >> 2] = $610;
        if ((HEAP32[$570 >> 2] | 0) == 0) {
         HEAP32[$570 >> 2] = $612;
         HEAP32[$571 >> 2] = $610;
         HEAP32[$572 >> 2] = $610;
        }
        $620 = HEAP32[$584 + 20 >> 2] | 0;
        if (($620 | 0) == 9) {
         $625 = HEAP32[$584 + 40 >> 2] | 0;
         $rel_size_3_i = $625 + $rel_size_265_i | 0;
         $rel_addr_4_i = ($rel_size_265_i | 0) == 0 ? $610 : $rel_addr_263_i;
         $628 = $625;
        } else {
         $rel_size_3_i = $rel_size_265_i;
         $rel_addr_4_i = $rel_addr_263_i;
         $628 = HEAP32[$584 + 40 >> 2] | 0;
        }
        $file_offset_5_i = (($620 | 0) == 8 ? 0 : $628) + $612 | 0;
        $sh_order_index_3_i = $sh_order_index_266_i + 1 | 0;
        $rel_size_4_i = $rel_size_3_i;
        $rel_addr_5_i = $rel_addr_4_i;
        $addr_5_i = $628 + $610 | 0;
        $633 = HEAP32[$425 >> 2] | 0;
       }
      } while (0);
      $634 = $i_269_i + 1 | 0;
      if (($634 | 0) < ($633 | 0)) {
       $addr_461_i = $addr_5_i;
       $rel_addr_263_i = $rel_addr_5_i;
       $rel_size_265_i = $rel_size_4_i;
       $sh_order_index_266_i = $sh_order_index_3_i;
       $file_offset_468_i = $file_offset_5_i;
       $i_269_i = $634;
       $581 = $633;
      } else {
       $addr_4_lcssa_i = $addr_5_i;
       $rel_addr_2_lcssa_i = $rel_addr_5_i;
       $rel_size_2_lcssa_i = $rel_size_4_i;
       $sh_order_index_2_lcssa_i = $sh_order_index_3_i;
       $file_offset_4_lcssa_i = $file_offset_5_i;
       $636 = $633;
       break;
      }
     }
    } else {
     $addr_4_lcssa_i = $addr_378_i;
     $rel_addr_2_lcssa_i = $rel_addr_180_i;
     $rel_size_2_lcssa_i = $rel_size_181_i;
     $sh_order_index_2_lcssa_i = $sh_order_index_182_i;
     $file_offset_4_lcssa_i = $file_offset_383_i;
     $636 = $573;
    }
    $637 = $k_079_i + 1 | 0;
    if (($637 | 0) < 5) {
     $addr_378_i = $addr_4_lcssa_i;
     $k_079_i = $637;
     $rel_addr_180_i = $rel_addr_2_lcssa_i;
     $rel_size_181_i = $rel_size_2_lcssa_i;
     $sh_order_index_182_i = $sh_order_index_2_lcssa_i;
     $file_offset_383_i = $file_offset_4_lcssa_i;
     $573 = $636;
    } else {
     break;
    }
   }
   HEAP32[$ph_185_i + 16 >> 2] = $file_offset_4_lcssa_i - (HEAP32[$570 >> 2] | 0);
   HEAP32[$ph_185_i + 20 >> 2] = $addr_4_lcssa_i - (HEAP32[$571 >> 2] | 0);
   $646 = $ph_185_i + 32 | 0;
   do {
    if ($566) {
     $650 = HEAP32[$563 >> 2] | 0;
     if ((HEAP32[$530 >> 2] | 0) == 0) {
      $ph_185_i = $646;
      $addr_286_i = (($650 - 1 & $addr_4_lcssa_i | 0) == 0 ? 0 : $650) + $addr_4_lcssa_i | 0;
      $rel_addr_087_i = $rel_addr_2_lcssa_i;
      $rel_size_088_i = $rel_size_2_lcssa_i;
      $sh_order_index_089_i = $sh_order_index_2_lcssa_i;
      $j_090_i = 1;
      $file_offset_291_i = $file_offset_4_lcssa_i;
      continue L136;
     } else {
      $658 = -$650 | 0;
      $file_offset_6_i = $file_offset_4_lcssa_i - 1 + $650 & $658;
      $addr_6_i = $addr_4_lcssa_i - 1 + $650 & $658;
      break;
     }
    } else {
     $file_offset_6_i = $file_offset_4_lcssa_i;
     $addr_6_i = $addr_4_lcssa_i;
    }
   } while (0);
   $664 = $j_090_i + 1 | 0;
   if (($664 | 0) < 2) {
    $ph_185_i = $646;
    $addr_286_i = $addr_6_i;
    $rel_addr_087_i = $rel_addr_2_lcssa_i;
    $rel_size_088_i = $rel_size_2_lcssa_i;
    $sh_order_index_089_i = $sh_order_index_2_lcssa_i;
    $j_090_i = $664;
    $file_offset_291_i = $file_offset_6_i;
   } else {
    break;
   }
  }
  if ($559) {
   HEAP32[$528 >> 2] = 3;
   HEAP32[$528 + 4 >> 2] = HEAP32[$interp_1_i + 48 >> 2];
   $674 = HEAP32[$interp_1_i + 44 >> 2] | 0;
   HEAP32[$528 + 8 >> 2] = $674;
   HEAP32[$528 + 12 >> 2] = $674;
   $679 = $interp_1_i + 40 | 0;
   HEAP32[$528 + 16 >> 2] = HEAP32[$679 >> 2];
   HEAP32[$528 + 20 >> 2] = HEAP32[$679 >> 2];
   HEAP32[$528 + 24 >> 2] = 4;
   HEAP32[$528 + 28 >> 2] = HEAP32[$interp_1_i + 32 >> 2];
  }
  if (($dynamic_0_i | 0) != 0) {
   $695 = $phnum_0_i - 1 | 0;
   HEAP32[$529 + ($695 << 5) >> 2] = 2;
   HEAP32[$529 + ($695 << 5) + 4 >> 2] = HEAP32[$dynamic_0_i + 48 >> 2];
   $700 = $dynamic_0_i + 44 | 0;
   $701 = HEAP32[$700 >> 2] | 0;
   HEAP32[$529 + ($695 << 5) + 8 >> 2] = $701;
   HEAP32[$529 + ($695 << 5) + 12 >> 2] = $701;
   $704 = $dynamic_0_i + 40 | 0;
   HEAP32[$529 + ($695 << 5) + 16 >> 2] = HEAP32[$704 >> 2];
   HEAP32[$529 + ($695 << 5) + 20 >> 2] = HEAP32[$704 >> 2];
   HEAP32[$529 + ($695 << 5) + 24 >> 2] = 6;
   HEAP32[$529 + ($695 << 5) + 28 >> 2] = HEAP32[$dynamic_0_i + 32 >> 2];
   $713 = $s + 2844 | 0;
   $716 = HEAP32[(HEAP32[$713 >> 2] | 0) + 4 >> 2] | 0;
   $717 = HEAP32[$700 >> 2] | 0;
   HEAP8[$716] = $717;
   HEAP8[$716 + 1 | 0] = $717 >>> 8;
   HEAP8[$716 + 2 | 0] = $717 >>> 16;
   HEAP8[$716 + 3 | 0] = $717 >>> 24;
   do {
    if (($4 | 0) == 1) {
     $731 = HEAP32[$s + 2848 >> 2] | 0;
     $733 = HEAP32[$731 + 4 >> 2] | 0;
     $735 = HEAP32[$731 >> 2] | 0;
     $736 = $733 + $735 | 0;
     if (($735 | 0) <= 0) {
      break;
     }
     $739 = $733 + 2 | 0;
     $742 = $733 + 3 | 0;
     $747 = $733 + 4 | 0;
     $752 = $733 + 5 | 0;
     $760 = (HEAPU8[$742] << 8 | HEAPU8[$739] | HEAPU8[$747] << 16 | HEAPU8[$752] << 24) + (HEAP32[(HEAP32[$713 >> 2] | 0) + 44 >> 2] | 0) | 0;
     HEAP8[$739] = $760;
     HEAP8[$742] = $760 >>> 8;
     HEAP8[$747] = $760 >>> 16;
     HEAP8[$752] = $760 >>> 24;
     $768 = $733 + 8 | 0;
     $771 = $733 + 9 | 0;
     $776 = $733 + 10 | 0;
     $781 = $733 + 11 | 0;
     $789 = (HEAPU8[$771] << 8 | HEAPU8[$768] | HEAPU8[$776] << 16 | HEAPU8[$781] << 24) + (HEAP32[(HEAP32[$713 >> 2] | 0) + 44 >> 2] | 0) | 0;
     HEAP8[$768] = $789;
     HEAP8[$771] = $789 >>> 8;
     HEAP8[$776] = $789 >>> 16;
     HEAP8[$781] = $789 >>> 24;
     if (($735 | 0) <= 16) {
      break;
     }
     $_pn56_i = $733;
     $p_057_i = $733 + 16 | 0;
     while (1) {
      $799 = $_pn56_i + 18 | 0;
      $802 = $_pn56_i + 19 | 0;
      $807 = $_pn56_i + 20 | 0;
      $812 = $_pn56_i + 21 | 0;
      $820 = (HEAPU8[$802] << 8 | HEAPU8[$799] | HEAPU8[$807] << 16 | HEAPU8[$812] << 24) + (HEAP32[(HEAP32[$713 >> 2] | 0) + 44 >> 2] | 0) | 0;
      HEAP8[$799] = $820;
      HEAP8[$802] = $820 >>> 8;
      HEAP8[$807] = $820 >>> 16;
      HEAP8[$812] = $820 >>> 24;
      $p_0_i = $p_057_i + 16 | 0;
      if ($p_0_i >>> 0 < $736 >>> 0) {
       $_pn56_i = $p_057_i;
       $p_057_i = $p_0_i;
      } else {
       break;
      }
     }
    }
   } while (0);
   $829 = $s + 2868 | 0;
   $830 = HEAP32[$829 >> 2] | 0;
   $832 = HEAP32[$830 + 4 >> 2] | 0;
   $834 = HEAP32[$830 >> 2] | 0;
   $836 = $832 + $834 | 0;
   if (($834 | 0) > 16) {
    $840 = $s + 2848 | 0;
    $sym_251_i = $832 + 16 | 0;
    do {
     $843 = HEAP16[$sym_251_i + 14 >> 1] | 0;
     $844 = $843 & 65535;
     do {
      if ($843 << 16 >> 16 == 0) {
       $847 = $sym_251_i + 4 | 0;
       $848 = HEAP32[$847 >> 2] | 0;
       if (($848 | 0) == 0) {
        break;
       }
       HEAP32[$847 >> 2] = (HEAP32[(HEAP32[$840 >> 2] | 0) + 44 >> 2] | 0) + $848;
      } else {
       if (($843 & 65535) >>> 0 >= 65280 >>> 0) {
        break;
       }
       $863 = $sym_251_i + 4 | 0;
       HEAP32[$863 >> 2] = (HEAP32[$863 >> 2] | 0) + (HEAP32[(HEAP32[(HEAP32[$564 >> 2] | 0) + ($844 << 2) >> 2] | 0) + 44 >> 2] | 0);
      }
     } while (0);
     $sym_251_i = $sym_251_i + 16 | 0;
    } while ($sym_251_i >>> 0 < $836 >>> 0);
   }
   HEAP32[$dynamic_0_i >> 2] = $saved_dynamic_data_offset_0_i;
   $874 = HEAP32[(HEAP32[(HEAP32[$829 >> 2] | 0) + 64 >> 2] | 0) + 44 >> 2] | 0;
   $875 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$875 >> 2] = 4;
   HEAP32[$875 + 4 >> 2] = $874;
   $880 = HEAP32[$dynstr_0_i + 44 >> 2] | 0;
   $881 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$881 >> 2] = 5;
   HEAP32[$881 + 4 >> 2] = $880;
   $887 = HEAP32[(HEAP32[$829 >> 2] | 0) + 44 >> 2] | 0;
   $888 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$888 >> 2] = 6;
   HEAP32[$888 + 4 >> 2] = $887;
   $893 = HEAP32[$dynstr_0_i >> 2] | 0;
   $894 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$894 >> 2] = 10;
   HEAP32[$894 + 4 >> 2] = $893;
   $898 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$898 >> 2] = 11;
   HEAP32[$898 + 4 >> 2] = 16;
   $902 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$902 >> 2] = 17;
   HEAP32[$902 + 4 >> 2] = $rel_addr_2_lcssa_i;
   $906 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$906 >> 2] = 18;
   HEAP32[$906 + 4 >> 2] = $rel_size_2_lcssa_i;
   $910 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$910 >> 2] = 19;
   HEAP32[$910 + 4 >> 2] = 8;
   if ((HEAP32[$s + 80 >> 2] | 0) != 0) {
    $918 = _section_ptr_add($dynamic_0_i, 8) | 0;
    HEAP32[$918 >> 2] = 21;
    HEAP32[$918 + 4 >> 2] = 0;
   }
   $923 = _section_ptr_add($dynamic_0_i, 8) | 0;
   HEAP32[$923 >> 2] = 0;
   HEAP32[$923 + 4 >> 2] = 0;
  }
  HEAP16[$ehdr_i + 42 >> 1] = 32;
  HEAP16[$ehdr_i + 44 >> 1] = $phnum_0_i;
  HEAP32[$ehdr_i + 28 >> 2] = 52;
  $file_offset_8_ph_i = $file_offset_6_i;
  $sh_order_index_5_ph_i = $sh_order_index_2_lcssa_i;
 } else {
  $file_offset_8_ph_i = $file_offset_0_i;
  $sh_order_index_5_ph_i = 1;
 }
 if ((HEAP32[$425 >> 2] | 0) > 1) {
  $934 = $s + 2828 | 0;
  $sh_order_index_544_i = $sh_order_index_5_ph_i;
  $file_offset_845_i = $file_offset_8_ph_i;
  $i_346_i = 1;
  while (1) {
   $938 = HEAP32[(HEAP32[$934 >> 2] | 0) + ($i_346_i << 2) >> 2] | 0;
   if ($534) {
    if ((HEAP32[$938 + 24 >> 2] & 2 | 0) == 0) {
     label = 145;
    } else {
     $file_offset_9_i = $file_offset_845_i;
     $sh_order_index_6_i = $sh_order_index_544_i;
    }
   } else {
    label = 145;
   }
   do {
    if ((label | 0) == 145) {
     label = 0;
     $945 = $sh_order_index_544_i + 1 | 0;
     HEAP32[$429 + ($sh_order_index_544_i << 2) >> 2] = $i_346_i;
     $948 = HEAP32[$938 + 32 >> 2] | 0;
     $952 = $file_offset_845_i - 1 + $948 & -$948;
     HEAP32[$938 + 48 >> 2] = $952;
     if ((HEAP32[$938 + 20 >> 2] | 0) == 8) {
      $file_offset_9_i = $952;
      $sh_order_index_6_i = $945;
      break;
     }
     $file_offset_9_i = (HEAP32[$938 + 40 >> 2] | 0) + $952 | 0;
     $sh_order_index_6_i = $945;
    }
   } while (0);
   $962 = $i_346_i + 1 | 0;
   if (($962 | 0) < (HEAP32[$425 >> 2] | 0)) {
    $sh_order_index_544_i = $sh_order_index_6_i;
    $file_offset_845_i = $file_offset_9_i;
    $i_346_i = $962;
   } else {
    $file_offset_8_lcssa_i = $file_offset_9_i;
    break;
   }
  }
 } else {
  $file_offset_8_lcssa_i = $file_offset_8_ph_i;
 }
 L214 : do {
  if ($6) {
   _relocate_syms($s, 0);
   if ((HEAP32[$5 >> 2] | 0) != 0) {
    $ret_0_i = -1;
    $section_order_1_i = $429;
    $phdr_1_i = $529;
    $1335 = $s + 2860 | 0;
    $1336 = HEAP32[$1335 >> 2] | 0;
    $1337 = $1336;
    _tcc_free($1337);
    $1338 = $section_order_1_i;
    _tcc_free($1338);
    $1339 = $phdr_1_i;
    _tcc_free($1339);
    $1340 = $s + 2852 | 0;
    $1341 = HEAP32[$1340 >> 2] | 0;
    $1342 = $1341;
    _tcc_free($1342);
    $$etemp$4$0 = 52;
    $$etemp$4$1 = 0;
    $$etemp$5$0 = 40;
    $$etemp$5$1 = 0;
    STACKTOP = sp;
    return $ret_0_i | 0;
   }
   $968 = HEAP32[$425 >> 2] | 0;
   do {
    if (($968 | 0) > 1) {
     $970 = $s + 2828 | 0;
     $971 = $s + 2844 | 0;
     $i_441_i = 1;
     $974 = $968;
     while (1) {
      $977 = HEAP32[(HEAP32[$970 >> 2] | 0) + ($i_441_i << 2) >> 2] | 0;
      do {
       if ((HEAP32[$977 + 60 >> 2] | 0) == 0) {
        $986 = $974;
       } else {
        if (($977 | 0) == (HEAP32[$971 >> 2] | 0)) {
         $986 = $974;
         break;
        }
        _relocate_section($s, $977);
        $986 = HEAP32[$425 >> 2] | 0;
       }
      } while (0);
      $987 = $i_441_i + 1 | 0;
      if (($987 | 0) < ($986 | 0)) {
       $i_441_i = $987;
       $974 = $986;
      } else {
       break;
      }
     }
     if (($986 | 0) > 1) {
      $i_538_i = 1;
      $989 = $986;
     } else {
      break;
     }
     while (1) {
      $990 = HEAP32[$970 >> 2] | 0;
      $992 = HEAP32[$990 + ($i_538_i << 2) >> 2] | 0;
      do {
       if ((HEAP32[$992 + 24 >> 2] & 2 | 0) == 0) {
        $1022 = $989;
       } else {
        if ((HEAP32[$992 + 20 >> 2] | 0) != 9) {
         $1022 = $989;
         break;
        }
        $1003 = HEAP32[$992 + 4 >> 2] | 0;
        $1005 = HEAP32[$992 >> 2] | 0;
        $1007 = $1003 + $1005 | 0;
        if (($1005 | 0) <= 0) {
         $1022 = $989;
         break;
        }
        $1014 = (HEAP32[$990 + (HEAP32[$992 + 28 >> 2] << 2) >> 2] | 0) + 44 | 0;
        $rel_01_i18_i = $1003;
        do {
         $1017 = $rel_01_i18_i | 0;
         HEAP32[$1017 >> 2] = (HEAP32[$1017 >> 2] | 0) + (HEAP32[$1014 >> 2] | 0);
         $rel_01_i18_i = $rel_01_i18_i + 8 | 0;
        } while ($rel_01_i18_i >>> 0 < $1007 >>> 0);
        $1022 = HEAP32[$425 >> 2] | 0;
       }
      } while (0);
      $1023 = $i_538_i + 1 | 0;
      if (($1023 | 0) < ($1022 | 0)) {
       $i_538_i = $1023;
       $989 = $1022;
      } else {
       break;
      }
     }
    }
   } while (0);
   if (($4 | 0) == 1) {
    $1028 = HEAP32[$s + 2872 >> 2] | 0;
    $1029 = _find_elf_sym($1028, 12936) | 0;
    $1032 = HEAP32[$1028 + 4 >> 2] | 0;
    do {
     if (($1029 | 0) == 0) {
      label = 167;
     } else {
      if ((HEAP16[$1032 + ($1029 << 4) + 14 >> 1] | 0) == 0) {
       label = 167;
       break;
      }
      $_0_i_i = HEAP32[$1032 + ($1029 << 4) + 4 >> 2] | 0;
     }
    } while (0);
    if ((label | 0) == 167) {
     _tcc_error(14528, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 12936, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $_0_i_i = 0;
    }
    HEAP32[$ehdr_i + 24 >> 2] = $_0_i_i;
   } else {
    HEAP32[$ehdr_i + 24 >> 2] = HEAP32[(HEAP32[5312] | 0) + 44 >> 2];
   }
   do {
    if (($4 | 0) == 1) {
     if ((HEAP32[$s + 16 >> 2] | 0) == 0) {
      break;
     }
     _fill_got($s);
    } else if (($4 | 0) == 3) {
     $mode_0_i = 438;
     break L214;
    }
   } while (0);
   $mode_0_i = 511;
  } else {
   $mode_0_i = 438;
  }
 } while (0);
 _unlink($filename | 0) | 0;
 $1056 = _open($filename | 0, 577, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $mode_0_i, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 if (($1056 | 0) < 0) {
  _tcc_error_noabort(12832, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $filename, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $ret_0_i = -1;
  $section_order_1_i = $429;
  $phdr_1_i = $529;
  $1335 = $s + 2860 | 0;
  $1336 = HEAP32[$1335 >> 2] | 0;
  $1337 = $1336;
  _tcc_free($1337);
  $1338 = $section_order_1_i;
  _tcc_free($1338);
  $1339 = $phdr_1_i;
  _tcc_free($1339);
  $1340 = $s + 2852 | 0;
  $1341 = HEAP32[$1340 >> 2] | 0;
  $1342 = $1341;
  _tcc_free($1342);
  $$etemp$4$0 = 52;
  $$etemp$4$1 = 0;
  $$etemp$5$0 = 40;
  $$etemp$5$1 = 0;
  STACKTOP = sp;
  return $ret_0_i | 0;
 }
 $1060 = _fdopen($1056 | 0, 12744) | 0;
 if ((HEAP32[$s >> 2] | 0) != 0) {
  _printf(12648, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $filename, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 do {
  if ((HEAP32[$530 >> 2] | 0) == 0) {
   $1070 = HEAP32[5318] | 0;
   $1073 = (HEAP32[$1070 >> 2] | 0) >>> 4;
   $1074 = $1073 << 4;
   $1075 = _tcc_malloc($1074) | 0;
   $1077 = _tcc_malloc($1073 << 2) | 0;
   $1078 = $1077;
   $1079 = $1070 + 4 | 0;
   if (($1073 | 0) == 0) {
    HEAP32[$1070 + 28 >> 2] = 0;
   } else {
    $1085 = $1075;
    $q_010_i_i = $1075;
    $p_011_i_i = HEAP32[$1079 >> 2] | 0;
    $i_012_i_i = 0;
    while (1) {
     if ((HEAPU8[$p_011_i_i + 12 | 0] | 0) >>> 0 < 16 >>> 0) {
      HEAP32[$1078 + ($i_012_i_i << 2) >> 2] = $q_010_i_i - $1085 >> 4;
      $1096 = $q_010_i_i;
      $1097 = $p_011_i_i;
      HEAP32[$1096 >> 2] = HEAP32[$1097 >> 2];
      HEAP32[$1096 + 4 >> 2] = HEAP32[$1097 + 4 >> 2];
      HEAP32[$1096 + 8 >> 2] = HEAP32[$1097 + 8 >> 2];
      HEAP32[$1096 + 12 >> 2] = HEAP32[$1097 + 12 >> 2];
      $q_1_i_i = $q_010_i_i + 16 | 0;
     } else {
      $q_1_i_i = $q_010_i_i;
     }
     $1100 = $i_012_i_i + 1 | 0;
     if (($1100 | 0) < ($1073 | 0)) {
      $q_010_i_i = $q_1_i_i;
      $p_011_i_i = $p_011_i_i + 16 | 0;
      $i_012_i_i = $1100;
     } else {
      break;
     }
    }
    HEAP32[$1070 + 28 >> 2] = $q_1_i_i - $1085 >> 4;
    $q_24_i_i = $q_1_i_i;
    $p_15_i_i = HEAP32[$1079 >> 2] | 0;
    $i_16_i_i = 0;
    while (1) {
     if ((HEAPU8[$p_15_i_i + 12 | 0] | 0) >>> 0 > 15 >>> 0) {
      HEAP32[$1078 + ($i_16_i_i << 2) >> 2] = $q_24_i_i - $1085 >> 4;
      $1118 = $q_24_i_i;
      $1119 = $p_15_i_i;
      HEAP32[$1118 >> 2] = HEAP32[$1119 >> 2];
      HEAP32[$1118 + 4 >> 2] = HEAP32[$1119 + 4 >> 2];
      HEAP32[$1118 + 8 >> 2] = HEAP32[$1119 + 8 >> 2];
      HEAP32[$1118 + 12 >> 2] = HEAP32[$1119 + 12 >> 2];
      $q_3_i_i = $q_24_i_i + 16 | 0;
     } else {
      $q_3_i_i = $q_24_i_i;
     }
     $1122 = $i_16_i_i + 1 | 0;
     if (($1122 | 0) < ($1073 | 0)) {
      $q_24_i_i = $q_3_i_i;
      $p_15_i_i = $p_15_i_i + 16 | 0;
      $i_16_i_i = $1122;
     } else {
      break;
     }
    }
   }
   _memcpy(HEAP32[$1079 >> 2] | 0, $1075 | 0, $1074) | 0;
   _tcc_free($1075);
   $1125 = HEAP32[$425 >> 2] | 0;
   if (($1125 | 0) > 1) {
    $1127 = $s + 2828 | 0;
    $i_22_i_i = 1;
    $1129 = $1125;
    while (1) {
     $1132 = HEAP32[(HEAP32[$1127 >> 2] | 0) + ($i_22_i_i << 2) >> 2] | 0;
     do {
      if ((HEAP32[$1132 + 20 >> 2] | 0) == 9) {
       if ((HEAP32[$1132 + 56 >> 2] | 0) != ($1070 | 0)) {
        $1160 = $1129;
        break;
       }
       $1142 = HEAP32[$1132 + 4 >> 2] | 0;
       $1144 = HEAP32[$1132 >> 2] | 0;
       $1146 = $1142 + $1144 | 0;
       if (($1144 | 0) <= 0) {
        $1160 = $1129;
        break;
       }
       $rel_01_i21_i = $1142;
       do {
        $1150 = $rel_01_i21_i + 4 | 0;
        $1151 = HEAP32[$1150 >> 2] | 0;
        HEAP32[$1150 >> 2] = HEAP32[$1078 + ($1151 >>> 8 << 2) >> 2] << 8 | $1151 & 255;
        $rel_01_i21_i = $rel_01_i21_i + 8 | 0;
       } while ($rel_01_i21_i >>> 0 < $1146 >>> 0);
       $1160 = HEAP32[$425 >> 2] | 0;
      } else {
       $1160 = $1129;
      }
     } while (0);
     $1161 = $i_22_i_i + 1 | 0;
     if (($1161 | 0) < ($1160 | 0)) {
      $i_22_i_i = $1161;
      $1129 = $1160;
     } else {
      break;
     }
    }
   }
   _tcc_free($1077);
   $1164 = $file_offset_8_lcssa_i + 3 & -4;
   HEAP8[$1] = 127;
   HEAP8[$ehdr_i + 1 | 0] = 69;
   HEAP8[$ehdr_i + 2 | 0] = 76;
   HEAP8[$ehdr_i + 3 | 0] = 70;
   HEAP8[$ehdr_i + 4 | 0] = 1;
   HEAP8[$ehdr_i + 5 | 0] = 1;
   HEAP8[$ehdr_i + 6 | 0] = 1;
   if (($4 | 0) == 2) {
    HEAP16[$ehdr_i + 16 >> 1] = 3;
   } else if (($4 | 0) == 3) {
    HEAP16[$ehdr_i + 16 >> 1] = 1;
   } else {
    HEAP16[$ehdr_i + 16 >> 1] = 2;
   }
   HEAP16[$ehdr_i + 18 >> 1] = 3;
   HEAP32[$ehdr_i + 20 >> 2] = 1;
   $1180 = $ehdr_i + 32 | 0;
   HEAP32[$1180 >> 2] = $1164;
   HEAP16[$ehdr_i + 40 >> 1] = 52;
   HEAP16[$ehdr_i + 46 >> 1] = 40;
   HEAP16[$ehdr_i + 48 >> 1] = $426;
   HEAP16[$ehdr_i + 50 >> 1] = $426 + 65535;
   _fwrite($1 | 0, 1, 52, $1060 | 0) | 0;
   _fwrite($528 | 0, 1, $527 | 0, $1060 | 0) | 0;
   $1190 = HEAP32[$425 >> 2] | 0;
   if (($1190 | 0) > 1) {
    $1192 = $s + 2828 | 0;
    $offset_032_i = $533;
    $i_633_i = 1;
    $1197 = $1190;
    while (1) {
     $1202 = HEAP32[(HEAP32[$1192 >> 2] | 0) + (HEAP32[$429 + ($i_633_i << 2) >> 2] << 2) >> 2] | 0;
     $1204 = HEAP32[$1202 + 20 >> 2] | 0;
     do {
      if (($1204 | 0) == 11) {
       $1207 = HEAP32[$1202 + 4 >> 2] | 0;
       $1209 = HEAP32[$1202 >> 2] | 0;
       $1211 = $1207 + $1209 | 0;
       if (($1209 | 0) <= 16) {
        label = 213;
        break;
       }
       $sym_01_i24_i = $1207 + 16 | 0;
       while (1) {
        do {
         if ((HEAP16[$sym_01_i24_i + 14 >> 1] | 0) == 0) {
          if ((HEAP8[$sym_01_i24_i + 12 | 0] & -16) << 24 >> 24 != 32) {
           break;
          }
          HEAP32[$sym_01_i24_i + 4 >> 2] = 0;
         }
        } while (0);
        $1226 = $sym_01_i24_i + 16 | 0;
        if ($1226 >>> 0 < $1211 >>> 0) {
         $sym_01_i24_i = $1226;
        } else {
         label = 213;
         break;
        }
       }
      } else if (($1204 | 0) == 8) {
       $offset_2_i = $offset_032_i;
       $1242 = $1197;
      } else {
       label = 213;
      }
     } while (0);
     if ((label | 0) == 213) {
      label = 0;
      $1228 = $1202 + 48 | 0;
      if ($offset_032_i >>> 0 < (HEAP32[$1228 >> 2] | 0) >>> 0) {
       $offset_130_i = $offset_032_i;
       while (1) {
        _fputc(0, $1060 | 0) | 0;
        $1232 = $offset_130_i + 1 | 0;
        if ($1232 >>> 0 < (HEAP32[$1228 >> 2] | 0) >>> 0) {
         $offset_130_i = $1232;
        } else {
         $offset_1_lcssa_i = $1232;
         break;
        }
       }
      } else {
       $offset_1_lcssa_i = $offset_032_i;
      }
      $1236 = HEAP32[$1202 + 40 >> 2] | 0;
      _fwrite(HEAP32[$1202 + 4 >> 2] | 0, 1, $1236 | 0, $1060 | 0) | 0;
      $offset_2_i = $1236 + $offset_1_lcssa_i | 0;
      $1242 = HEAP32[$425 >> 2] | 0;
     }
     $1243 = $i_633_i + 1 | 0;
     if (($1243 | 0) < ($1242 | 0)) {
      $offset_032_i = $offset_2_i;
      $i_633_i = $1243;
      $1197 = $1242;
     } else {
      $offset_0_lcssa_i = $offset_2_i;
      $1193 = $1242;
      break;
     }
    }
   } else {
    $offset_0_lcssa_i = $533;
    $1193 = $1190;
   }
   if ($offset_0_lcssa_i >>> 0 < (HEAP32[$1180 >> 2] | 0) >>> 0) {
    $offset_328_i = $offset_0_lcssa_i;
    do {
     _fputc(0, $1060 | 0) | 0;
     $offset_328_i = $offset_328_i + 1 | 0;
    } while ($offset_328_i >>> 0 < (HEAP32[$1180 >> 2] | 0) >>> 0);
    $1245 = HEAP32[$425 >> 2] | 0;
   } else {
    $1245 = $1193;
   }
   if (($1245 | 0) <= 0) {
    break;
   }
   $1247 = $s + 2828 | 0;
   $1248 = $shdr_i | 0;
   $1249 = $shdr_i + 4 | 0;
   $1250 = $shdr_i + 8 | 0;
   $1251 = $shdr_i + 36 | 0;
   $1252 = $shdr_i + 28 | 0;
   $1253 = $shdr_i + 32 | 0;
   $1254 = $shdr_i + 12 | 0;
   $1255 = $shdr_i + 16 | 0;
   $1256 = $shdr_i + 20 | 0;
   $1257 = $shdr_i + 24 | 0;
   $i_726_i = 0;
   do {
    _memset($2 | 0, 0, 40) | 0;
    $1265 = HEAP32[(HEAP32[$1247 >> 2] | 0) + ($i_726_i << 2) >> 2] | 0;
    if (($1265 | 0) != 0) {
     HEAP32[$1248 >> 2] = HEAP32[$1265 + 12 >> 2];
     HEAP32[$1249 >> 2] = HEAP32[$1265 + 20 >> 2];
     HEAP32[$1250 >> 2] = HEAP32[$1265 + 24 >> 2];
     HEAP32[$1251 >> 2] = HEAP32[$1265 + 36 >> 2];
     HEAP32[$1252 >> 2] = HEAP32[$1265 + 28 >> 2];
     $1279 = HEAP32[$1265 + 56 >> 2] | 0;
     if (($1279 | 0) != 0) {
      HEAP32[$1257 >> 2] = HEAP32[$1279 + 16 >> 2];
     }
     HEAP32[$1253 >> 2] = HEAP32[$1265 + 32 >> 2];
     HEAP32[$1254 >> 2] = HEAP32[$1265 + 44 >> 2];
     HEAP32[$1255 >> 2] = HEAP32[$1265 + 48 >> 2];
     HEAP32[$1256 >> 2] = HEAP32[$1265 + 40 >> 2];
    }
    _fwrite($2 | 0, 1, 40, $1060 | 0) | 0;
    $i_726_i = $i_726_i + 1 | 0;
   } while (($i_726_i | 0) < (HEAP32[$425 >> 2] | 0));
  } else {
   $1299 = HEAP32[$425 >> 2] | 0;
   if (($1299 | 0) <= 1) {
    break;
   }
   $1301 = $s + 2828 | 0;
   $offset_02_i_i = 0;
   $i_03_i_i = 1;
   $1303 = $1299;
   while (1) {
    $1308 = HEAP32[(HEAP32[$1301 >> 2] | 0) + (HEAP32[$429 + ($i_03_i_i << 2) >> 2] << 2) >> 2] | 0;
    do {
     if ((HEAP32[$1308 + 20 >> 2] | 0) == 8) {
      $offset_2_i_i = $offset_02_i_i;
      $1331 = $1303;
     } else {
      if ((HEAP32[$1308 + 24 >> 2] & 2 | 0) == 0) {
       $offset_2_i_i = $offset_02_i_i;
       $1331 = $1303;
       break;
      }
      $1317 = $1308 + 48 | 0;
      if ($offset_02_i_i >>> 0 < (HEAP32[$1317 >> 2] | 0) >>> 0) {
       $offset_11_i_i = $offset_02_i_i;
       while (1) {
        _fputc(0, $1060 | 0) | 0;
        $1321 = $offset_11_i_i + 1 | 0;
        if ($1321 >>> 0 < (HEAP32[$1317 >> 2] | 0) >>> 0) {
         $offset_11_i_i = $1321;
        } else {
         $offset_1_lcssa_i_i = $1321;
         break;
        }
       }
      } else {
       $offset_1_lcssa_i_i = $offset_02_i_i;
      }
      $1325 = HEAP32[$1308 + 40 >> 2] | 0;
      _fwrite(HEAP32[$1308 + 4 >> 2] | 0, 1, $1325 | 0, $1060 | 0) | 0;
      $offset_2_i_i = $1325 + $offset_1_lcssa_i_i | 0;
      $1331 = HEAP32[$425 >> 2] | 0;
     }
    } while (0);
    $1332 = $i_03_i_i + 1 | 0;
    if (($1332 | 0) < ($1331 | 0)) {
     $offset_02_i_i = $offset_2_i_i;
     $i_03_i_i = $1332;
     $1303 = $1331;
    } else {
     break;
    }
   }
  }
 } while (0);
 _fclose($1060 | 0) | 0;
 $ret_0_i = 0;
 $section_order_1_i = $429;
 $phdr_1_i = $529;
 $1335 = $s + 2860 | 0;
 $1336 = HEAP32[$1335 >> 2] | 0;
 $1337 = $1336;
 _tcc_free($1337);
 $1338 = $section_order_1_i;
 _tcc_free($1338);
 $1339 = $phdr_1_i;
 _tcc_free($1339);
 $1340 = $s + 2852 | 0;
 $1341 = HEAP32[$1340 >> 2] | 0;
 $1342 = $1341;
 _tcc_free($1342);
 $$etemp$4$0 = 52;
 $$etemp$4$1 = 0;
 $$etemp$5$0 = 40;
 $$etemp$5$1 = 0;
 STACKTOP = sp;
 return $ret_0_i | 0;
}
function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $x_i = 0, $bits_0_ph = 0, $emin_0_ph = 0, $3 = 0, $4 = 0, $6 = 0, $16 = 0, $24 = 0, $25 = 0, $sign_0 = 0, $c_0 = 0, $c_170 = 0, $i_069 = 0, $44 = 0, $c_2 = 0, $54 = 0, $c_1_lcssa = 0, $i_0_lcssa = 0, $58 = 0, $63 = 0, $i_1 = 0, $c_368 = 0, $i_267 = 0, $84 = 0, $c_4 = 0, $94 = 0, $i_3 = 0, $c_5 = 0, $97 = 0, $107 = 0, $i_4 = 0, $115 = 0, $125 = 0, $138 = 0, $_in = 0, $146 = 0, $163 = 0, $173 = 0, $177 = 0, $gotdig_0_i = 0, $c_0_i = 0, $187 = 0, $197 = 0, $c_1_ph_i = 0, $rp_026_i$0 = 0, $rp_026_i$1 = 0, $207 = 0, $217 = 0, $x_0_i = 0, $y_0_i = 0.0, $scale_0_i = 0.0, $gottail_0_i = 0, $gotrad_0_i = 0, $gotdig_2_i = 0, $rp_1_i$0 = 0, $rp_1_i$1 = 0, $dc_0_i$0 = 0, $dc_0_i$1 = 0, $c_2_i = 0, $220 = 0, $223 = 0, $226 = 0, $d_0_i = 0, $$etemp$1$1 = 0, $$etemp$2$1 = 0, $240 = 0.0, $x_1_i = 0, $y_1_i = 0.0, $scale_1_i = 0.0, $gottail_1_i = 0, $x_2_i = 0, $y_2_i = 0.0, $scale_2_i = 0.0, $gottail_2_i = 0, $gotrad_1_i = 0, $gotdig_3_i = 0, $rp_2_i$0 = 0, $rp_2_i$1 = 0, $dc_1_i$0 = 0, $dc_1_i$1 = 0, $252 = 0, $c_2_lcssa_i = 0, $265 = 0, $273 = 0, $282 = 0, $dc_0_rp_1_i$0 = 0, $dc_0_rp_1_i$1 = 0, $$etemp$4$1 = 0, $dc_219_i$0 = 0, $dc_219_i$1 = 0, $x_318_i = 0, $284 = 0, $$etemp$6$1 = 0, $x_3_lcssa_i = 0, $290$0 = 0, $290$1 = 0, $e2_0_i$0 = 0, $e2_0_i$1 = 0, $317$1 = 0, $325 = 0, $326$1 = 0, $e2_115_i$0 = 0, $e2_115_i$1 = 0, $y_314_i = 0.0, $x_413_i = 0, $335 = 0, $x_5_i = 0, $_pn_i = 0.0, $y_4_i = 0.0, $e2_1_lcssa_i$0 = 0, $e2_1_lcssa_i$1 = 0, $y_3_lcssa_i = 0.0, $x_4_lcssa_i = 0, $342$1 = 0, $348 = 0, $_07_i = 0, $_0711_i = 0, $354 = 0.0, $_pre_phi_i = 0.0, $_0712_i = 0, $bias_0_i = 0.0, $or_cond9_i = 0, $367 = 0.0, $c_6 = 0, $sum_i = 0, $382 = 0, $gotdig_0_i12 = 0, $_012_i = 0, $384 = 0, $394 = 0, $_1_ph_i = 0, $lrp_0133_i$0 = 0, $lrp_0133_i$1 = 0, $405 = 0, $_1_be_i = 0, $lrp_1_i$0 = 0, $lrp_1_i$1 = 0, $gotdig_2_i13 = 0, $gotrad_0_i14 = 0, $_2_i = 0, $415 = 0, $416 = 0, $418 = 0, $419 = 0, $420 = 0, $421 = 0, $_3121_i = 0, $j_0120_i = 0, $k_0119_i = 0, $gotrad_1118_i = 0, $gotdig_3117_i = 0, $lnz_0116_i = 0, $dc_0115_i$0 = 0, $dc_0115_i$1 = 0, $lrp_2114_i$0 = 0, $lrp_2114_i$1 = 0, $427 = 0, $431 = 0, $storemerge_i = 0, $438 = 0, $439 = 0, $lrp_3_i$0 = 0, $lrp_3_i$1 = 0, $dc_1_i16$0 = 0, $dc_1_i16$1 = 0, $lnz_2_i = 0, $gotdig_4_i = 0, $gotrad_2_i = 0, $k_2_i = 0, $j_2_i = 0, $446 = 0, $_3_be_i = 0, $455 = 0, $457 = 0, $_3_lcssa_i = 0, $j_0_lcssa_i = 0, $k_0_lcssa_i = 0, $gotrad_1_lcssa_i = 0, $gotdig_3_lcssa_i = 0, $lnz_0_lcssa_i = 0, $dc_0_lcssa_i$0 = 0, $dc_0_lcssa_i$1 = 0, $lrp_2_lcssa_i$0 = 0, $lrp_2_lcssa_i$1 = 0, $458 = 0, $dc_0_lrp_2_i$0 = 0, $dc_0_lrp_2_i$1 = 0, $459 = 0, $463$0 = 0, $463$1 = 0, $e10_0_i$0 = 0, $e10_0_i$1 = 0, $j_0111_i = 0, $k_0107_i = 0, $lnz_0101_i = 0, $dc_097_i$0 = 0, $dc_097_i$1 = 0, $lrp_42527_i$0 = 0, $lrp_42527_i$1 = 0, $479 = 0, $j_0110_i = 0, $k_0106_i = 0, $lnz_0100_i = 0, $dc_096_i$0 = 0, $dc_096_i$1 = 0, $486 = 0, $lrp_5_i$0 = 0, $lrp_5_i$1 = 0, $j_0109_i = 0, $k_0105_i = 0, $lnz_099_i = 0, $dc_095_i$0 = 0, $dc_095_i$1 = 0, $lrp_528_i$0 = 0, $lrp_528_i$1 = 0, $490 = 0, $$etemp$15$1 = 0, $507 = 0, $508$1 = 0, $516 = 0, $517$1 = 0, $527 = 0, $529 = 0, $j_389_i = 0, $k_3_i = 0, $536 = 0, $562 = 0, $_pre_i18 = 0, $575 = 0, $580 = 0, $583 = 0, $585 = 0, $carry_081_i = 0, $k_480_i = 0, $a_079_i = 0, $rp_078_i = 0, $587 = 0, $588 = 0, $591 = 0, $592 = 0, $595 = 0, $rp_1_i19 = 0, $a_1_i = 0, $rp_0_lcssa182_i = 0, $a_0_lcssa181_i = 0, $z_0_i = 0, $rp_2_ph56_i = 0, $e2_0_ph_i = 0, $z_1_ph57_i = 0, $a_2_ph58_i = 0, $607 = 0, $e2_0_us_i = 0, $z_1_us_i = 0, $z_2_us_i = 0, $k_5_in_us_i = 0, $carry1_0_us_i = 0, $k_5_us_i = 0, $611 = 0, $613$0 = 0, $$etemp$16$1 = 0, $_sink_off0_us_i = 0, $carry1_1_us_i = 0, $626 = 0, $z_3_us_i = 0, $632 = 0, $e2_0_us62_i = 0, $z_1_us63_i = 0, $z_2_us65_i = 0, $k_5_in_us66_i = 0, $carry1_0_us67_i = 0, $k_5_us68_i = 0, $638 = 0, $640$0 = 0, $$etemp$19$1 = 0, $_sink_off0_us71_i = 0, $carry1_1_us72_i = 0, $653 = 0, $z_3_us75_i = 0, $659 = 0, $carry1_1_lcssa_lcssa_i = 0, $z_3_lcssa_lcssa_i = 0, $_lcssa61_i = 0, $663 = 0, $667 = 0, $672 = 0, $z_4_i = 0, $e2_1_i = 0, $a_3_i = 0, $i_043_i = 0, $681 = 0, $685 = 0, $687 = 0, $691 = 0, $i_1_i = 0, $694 = 0, $697 = 0, $700 = 0, $701 = 0, $carry3_048_i = 0, $k_646_i = 0, $a_445_i = 0, $rp_444_i = 0, $702 = 0, $703 = 0, $706 = 0, $or_cond22_i = 0, $rp_3_ph51_i = 0, $e2_1_ph_i = 0, $z_5_ph_i = 0, $a_3_ph_i = 0, $720 = 0, $723 = 0, $rp_3_i_ph = 0, $e2_1_i_ph = 0, $a_3_i_ph = 0, $724 = 0, $_21_i = 0, $z_7_i = 0, $735 = 0.0, $737 = 0, $denormal_0_i = 0, $_013_i = 0, $_01332_i = 0, $denormal_031_i = 0, $745 = 0.0, $748 = 0.0, $_01333_i = 0, $denormal_030_i = 0, $y_1_i23 = 0.0, $frac_0_i = 0.0, $bias_0_i24 = 0.0, $753 = 0, $757 = 0, $frac_1_i = 0.0, $frac_2_i = 0.0, $793 = 0.0, $e2_2_i = 0, $denormal_2_i = 0, $y_2_i25 = 0.0, $e2_3_i = 0, $y_3_i = 0.0, $817 = 0, $z_7_1_i = 0, $826 = 0.0, $827 = 0.0, $828 = 0, $829 = 0, $_0 = 0.0, $218$0 = 0, $218$1 = 0, $250$0 = 0, $285$0 = 0, $285$1 = 0, $309$0 = 0, $310$0 = 0, $310$1 = 0, $340$0 = 0, $340$1 = 0, $344$0 = 0, $345$0 = 0, $345$1 = 0, $404$0 = 0, $404$1 = 0, $426$0 = 0, $426$1 = 0, $475$0 = 0, $616$0 = 0, $616$1 = 0, $619$0 = 0, $621$0 = 0, $643$0 = 0, $643$1 = 0, $646$0 = 0, $648$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x_i = sp | 0;
 if (($prec | 0) == 2) {
  $emin_0_ph = -1074;
  $bits_0_ph = 53;
 } else if (($prec | 0) == 1) {
  $emin_0_ph = -1074;
  $bits_0_ph = 53;
 } else if (($prec | 0) == 0) {
  $emin_0_ph = -149;
  $bits_0_ph = 24;
 } else {
  $_0 = 0.0;
  STACKTOP = sp;
  return +$_0;
 }
 $3 = $f + 4 | 0;
 $4 = $f + 100 | 0;
 do {
  $6 = HEAP32[$3 >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $6 + 1;
   $16 = HEAPU8[$6] | 0;
  } else {
   $16 = ___shgetc($f) | 0;
  }
 } while ((_isspace($16 | 0) | 0) != 0);
 do {
  if (($16 | 0) == 45 | ($16 | 0) == 43) {
   $24 = 1 - ((($16 | 0) == 45) << 1) | 0;
   $25 = HEAP32[$3 >> 2] | 0;
   if ($25 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $25 + 1;
    $c_0 = HEAPU8[$25] | 0;
    $sign_0 = $24;
    break;
   } else {
    $c_0 = ___shgetc($f) | 0;
    $sign_0 = $24;
    break;
   }
  } else {
   $c_0 = $16;
   $sign_0 = 1;
  }
 } while (0);
 $i_069 = 0;
 $c_170 = $c_0;
 while (1) {
  if (($c_170 | 32 | 0) != (HEAP8[12200 + $i_069 | 0] | 0)) {
   $i_0_lcssa = $i_069;
   $c_1_lcssa = $c_170;
   break;
  }
  do {
   if ($i_069 >>> 0 < 7 >>> 0) {
    $44 = HEAP32[$3 >> 2] | 0;
    if ($44 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $44 + 1;
     $c_2 = HEAPU8[$44] | 0;
     break;
    } else {
     $c_2 = ___shgetc($f) | 0;
     break;
    }
   } else {
    $c_2 = $c_170;
   }
  } while (0);
  $54 = $i_069 + 1 | 0;
  if ($54 >>> 0 < 8 >>> 0) {
   $i_069 = $54;
   $c_170 = $c_2;
  } else {
   $i_0_lcssa = $54;
   $c_1_lcssa = $c_2;
   break;
  }
 }
 do {
  if (($i_0_lcssa | 0) == 3) {
   label = 23;
  } else if (($i_0_lcssa | 0) != 8) {
   $58 = ($pok | 0) != 0;
   if ($i_0_lcssa >>> 0 > 3 >>> 0 & $58) {
    if (($i_0_lcssa | 0) == 8) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   L34 : do {
    if (($i_0_lcssa | 0) == 0) {
     $i_267 = 0;
     $c_368 = $c_1_lcssa;
     while (1) {
      if (($c_368 | 32 | 0) != (HEAP8[17928 + $i_267 | 0] | 0)) {
       $c_5 = $c_368;
       $i_3 = $i_267;
       break L34;
      }
      do {
       if ($i_267 >>> 0 < 2 >>> 0) {
        $84 = HEAP32[$3 >> 2] | 0;
        if ($84 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $84 + 1;
         $c_4 = HEAPU8[$84] | 0;
         break;
        } else {
         $c_4 = ___shgetc($f) | 0;
         break;
        }
       } else {
        $c_4 = $c_368;
       }
      } while (0);
      $94 = $i_267 + 1 | 0;
      if ($94 >>> 0 < 3 >>> 0) {
       $i_267 = $94;
       $c_368 = $c_4;
      } else {
       $c_5 = $c_4;
       $i_3 = $94;
       break;
      }
     }
    } else {
     $c_5 = $c_1_lcssa;
     $i_3 = $i_0_lcssa;
    }
   } while (0);
   if (($i_3 | 0) == 3) {
    $97 = HEAP32[$3 >> 2] | 0;
    if ($97 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $97 + 1;
     $107 = HEAPU8[$97] | 0;
    } else {
     $107 = ___shgetc($f) | 0;
    }
    if (($107 | 0) == 40) {
     $i_4 = 1;
    } else {
     if ((HEAP32[$4 >> 2] | 0) == 0) {
      $_0 = +NaN;
      STACKTOP = sp;
      return +$_0;
     }
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
     $_0 = +NaN;
     STACKTOP = sp;
     return +$_0;
    }
    while (1) {
     $115 = HEAP32[$3 >> 2] | 0;
     if ($115 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $115 + 1;
      $125 = HEAPU8[$115] | 0;
     } else {
      $125 = ___shgetc($f) | 0;
     }
     if (!(($125 - 48 | 0) >>> 0 < 10 >>> 0 | ($125 - 65 | 0) >>> 0 < 26 >>> 0)) {
      if (!(($125 - 97 | 0) >>> 0 < 26 >>> 0 | ($125 | 0) == 95)) {
       break;
      }
     }
     $i_4 = $i_4 + 1 | 0;
    }
    if (($125 | 0) == 41) {
     $_0 = +NaN;
     STACKTOP = sp;
     return +$_0;
    }
    $138 = (HEAP32[$4 >> 2] | 0) == 0;
    if (!$138) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
    }
    if (!$58) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim($f, 0);
     $_0 = 0.0;
     STACKTOP = sp;
     return +$_0;
    }
    if (($i_4 | 0) == 0 | $138) {
     $_0 = +NaN;
     STACKTOP = sp;
     return +$_0;
    } else {
     $_in = $i_4;
    }
    while (1) {
     $146 = $_in - 1 | 0;
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
     if (($146 | 0) == 0) {
      $_0 = +NaN;
      break;
     } else {
      $_in = $146;
     }
    }
    STACKTOP = sp;
    return +$_0;
   } else if (($i_3 | 0) == 0) {
    do {
     if (($c_5 | 0) == 48) {
      $163 = HEAP32[$3 >> 2] | 0;
      if ($163 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $163 + 1;
       $173 = HEAPU8[$163] | 0;
      } else {
       $173 = ___shgetc($f) | 0;
      }
      if (($173 | 32 | 0) != 120) {
       if ((HEAP32[$4 >> 2] | 0) == 0) {
        $c_6 = 48;
        break;
       }
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
       $c_6 = 48;
       break;
      }
      $177 = HEAP32[$3 >> 2] | 0;
      if ($177 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $177 + 1;
       $c_0_i = HEAPU8[$177] | 0;
       $gotdig_0_i = 0;
      } else {
       $c_0_i = ___shgetc($f) | 0;
       $gotdig_0_i = 0;
      }
      while (1) {
       if (($c_0_i | 0) == 46) {
        label = 70;
        break;
       } else if (($c_0_i | 0) != 48) {
        $c_2_i = $c_0_i;
        $dc_0_i$1 = 0;
        $dc_0_i$0 = 0;
        $rp_1_i$1 = 0;
        $rp_1_i$0 = 0;
        $gotdig_2_i = $gotdig_0_i;
        $gotrad_0_i = 0;
        $gottail_0_i = 0;
        $scale_0_i = 1.0;
        $y_0_i = 0.0;
        $x_0_i = 0;
        break;
       }
       $187 = HEAP32[$3 >> 2] | 0;
       if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $187 + 1;
        $c_0_i = HEAPU8[$187] | 0;
        $gotdig_0_i = 1;
        continue;
       } else {
        $c_0_i = ___shgetc($f) | 0;
        $gotdig_0_i = 1;
        continue;
       }
      }
      do {
       if ((label | 0) == 70) {
        $197 = HEAP32[$3 >> 2] | 0;
        if ($197 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $197 + 1;
         $c_1_ph_i = HEAPU8[$197] | 0;
        } else {
         $c_1_ph_i = ___shgetc($f) | 0;
        }
        if (($c_1_ph_i | 0) == 48) {
         $rp_026_i$1 = 0;
         $rp_026_i$0 = 0;
        } else {
         $c_2_i = $c_1_ph_i;
         $dc_0_i$1 = 0;
         $dc_0_i$0 = 0;
         $rp_1_i$1 = 0;
         $rp_1_i$0 = 0;
         $gotdig_2_i = $gotdig_0_i;
         $gotrad_0_i = 1;
         $gottail_0_i = 0;
         $scale_0_i = 1.0;
         $y_0_i = 0.0;
         $x_0_i = 0;
         break;
        }
        while (1) {
         $207 = HEAP32[$3 >> 2] | 0;
         if ($207 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $207 + 1;
          $217 = HEAPU8[$207] | 0;
         } else {
          $217 = ___shgetc($f) | 0;
         }
         $218$0 = _i64Add($rp_026_i$0, $rp_026_i$1, -1, -1) | 0;
         $218$1 = tempRet0;
         if (($217 | 0) == 48) {
          $rp_026_i$1 = $218$1;
          $rp_026_i$0 = $218$0;
         } else {
          $c_2_i = $217;
          $dc_0_i$1 = 0;
          $dc_0_i$0 = 0;
          $rp_1_i$1 = $218$1;
          $rp_1_i$0 = $218$0;
          $gotdig_2_i = 1;
          $gotrad_0_i = 1;
          $gottail_0_i = 0;
          $scale_0_i = 1.0;
          $y_0_i = 0.0;
          $x_0_i = 0;
          break;
         }
        }
       }
      } while (0);
      L114 : while (1) {
       $220 = $c_2_i - 48 | 0;
       do {
        if ($220 >>> 0 < 10 >>> 0) {
         $d_0_i = $220;
         label = 83;
        } else {
         $223 = $c_2_i | 32;
         $226 = ($c_2_i | 0) == 46;
         if (!(($223 - 97 | 0) >>> 0 < 6 >>> 0 | $226)) {
          $c_2_lcssa_i = $c_2_i;
          break L114;
         }
         if ($226) {
          if (($gotrad_0_i | 0) == 0) {
           $dc_1_i$1 = $dc_0_i$1;
           $dc_1_i$0 = $dc_0_i$0;
           $rp_2_i$1 = $dc_0_i$1;
           $rp_2_i$0 = $dc_0_i$0;
           $gotdig_3_i = $gotdig_2_i;
           $gotrad_1_i = 1;
           $gottail_2_i = $gottail_0_i;
           $scale_2_i = $scale_0_i;
           $y_2_i = $y_0_i;
           $x_2_i = $x_0_i;
           break;
          } else {
           $c_2_lcssa_i = 46;
           break L114;
          }
         } else {
          $d_0_i = ($c_2_i | 0) > 57 ? $223 - 87 | 0 : $220;
          label = 83;
          break;
         }
        }
       } while (0);
       if ((label | 0) == 83) {
        label = 0;
        $$etemp$1$1 = 0;
        do {
         if (($dc_0_i$1 | 0) < ($$etemp$1$1 | 0) | ($dc_0_i$1 | 0) == ($$etemp$1$1 | 0) & $dc_0_i$0 >>> 0 < 8 >>> 0) {
          $gottail_1_i = $gottail_0_i;
          $scale_1_i = $scale_0_i;
          $y_1_i = $y_0_i;
          $x_1_i = $d_0_i + ($x_0_i << 4) | 0;
         } else {
          $$etemp$2$1 = 0;
          if (($dc_0_i$1 | 0) < ($$etemp$2$1 | 0) | ($dc_0_i$1 | 0) == ($$etemp$2$1 | 0) & $dc_0_i$0 >>> 0 < 14 >>> 0) {
           $240 = $scale_0_i * .0625;
           $gottail_1_i = $gottail_0_i;
           $scale_1_i = $240;
           $y_1_i = $y_0_i + $240 * +($d_0_i | 0);
           $x_1_i = $x_0_i;
           break;
          }
          if (($d_0_i | 0) == 0 | ($gottail_0_i | 0) != 0) {
           $gottail_1_i = $gottail_0_i;
           $scale_1_i = $scale_0_i;
           $y_1_i = $y_0_i;
           $x_1_i = $x_0_i;
           break;
          }
          $gottail_1_i = 1;
          $scale_1_i = $scale_0_i;
          $y_1_i = $y_0_i + $scale_0_i * .5;
          $x_1_i = $x_0_i;
         }
        } while (0);
        $250$0 = _i64Add($dc_0_i$0, $dc_0_i$1, 1, 0) | 0;
        $dc_1_i$1 = tempRet0;
        $dc_1_i$0 = $250$0;
        $rp_2_i$1 = $rp_1_i$1;
        $rp_2_i$0 = $rp_1_i$0;
        $gotdig_3_i = 1;
        $gotrad_1_i = $gotrad_0_i;
        $gottail_2_i = $gottail_1_i;
        $scale_2_i = $scale_1_i;
        $y_2_i = $y_1_i;
        $x_2_i = $x_1_i;
       }
       $252 = HEAP32[$3 >> 2] | 0;
       if ($252 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $252 + 1;
        $c_2_i = HEAPU8[$252] | 0;
        $dc_0_i$1 = $dc_1_i$1;
        $dc_0_i$0 = $dc_1_i$0;
        $rp_1_i$1 = $rp_2_i$1;
        $rp_1_i$0 = $rp_2_i$0;
        $gotdig_2_i = $gotdig_3_i;
        $gotrad_0_i = $gotrad_1_i;
        $gottail_0_i = $gottail_2_i;
        $scale_0_i = $scale_2_i;
        $y_0_i = $y_2_i;
        $x_0_i = $x_2_i;
        continue;
       } else {
        $c_2_i = ___shgetc($f) | 0;
        $dc_0_i$1 = $dc_1_i$1;
        $dc_0_i$0 = $dc_1_i$0;
        $rp_1_i$1 = $rp_2_i$1;
        $rp_1_i$0 = $rp_2_i$0;
        $gotdig_2_i = $gotdig_3_i;
        $gotrad_0_i = $gotrad_1_i;
        $gottail_0_i = $gottail_2_i;
        $scale_0_i = $scale_2_i;
        $y_0_i = $y_2_i;
        $x_0_i = $x_2_i;
        continue;
       }
      }
      if (($gotdig_2_i | 0) == 0) {
       $265 = (HEAP32[$4 >> 2] | 0) == 0;
       if (!$265) {
        HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
       }
       do {
        if (($pok | 0) == 0) {
         ___shlim($f, 0);
        } else {
         if ($265) {
          break;
         }
         $273 = HEAP32[$3 >> 2] | 0;
         HEAP32[$3 >> 2] = $273 - 1;
         if (($gotrad_0_i | 0) == 0) {
          break;
         }
         HEAP32[$3 >> 2] = $273 - 2;
        }
       } while (0);
       $_0 = +($sign_0 | 0) * 0.0;
       STACKTOP = sp;
       return +$_0;
      }
      $282 = ($gotrad_0_i | 0) == 0;
      $dc_0_rp_1_i$0 = $282 ? $dc_0_i$0 : $rp_1_i$0;
      $dc_0_rp_1_i$1 = $282 ? $dc_0_i$1 : $rp_1_i$1;
      $$etemp$4$1 = 0;
      if (($dc_0_i$1 | 0) < ($$etemp$4$1 | 0) | ($dc_0_i$1 | 0) == ($$etemp$4$1 | 0) & $dc_0_i$0 >>> 0 < 8 >>> 0) {
       $x_318_i = $x_0_i;
       $dc_219_i$1 = $dc_0_i$1;
       $dc_219_i$0 = $dc_0_i$0;
       while (1) {
        $284 = $x_318_i << 4;
        $285$0 = _i64Add($dc_219_i$0, $dc_219_i$1, 1, 0) | 0;
        $285$1 = tempRet0;
        $$etemp$6$1 = 0;
        if (($285$1 | 0) < ($$etemp$6$1 | 0) | ($285$1 | 0) == ($$etemp$6$1 | 0) & $285$0 >>> 0 < 8 >>> 0) {
         $x_318_i = $284;
         $dc_219_i$1 = $285$1;
         $dc_219_i$0 = $285$0;
        } else {
         $x_3_lcssa_i = $284;
         break;
        }
       }
      } else {
       $x_3_lcssa_i = $x_0_i;
      }
      do {
       if (($c_2_lcssa_i | 32 | 0) == 112) {
        $290$0 = _scanexp($f, $pok) | 0;
        $290$1 = tempRet0;
        if (!(($290$0 | 0) == 0 & ($290$1 | 0) == (-2147483648 | 0))) {
         $e2_0_i$1 = $290$1;
         $e2_0_i$0 = $290$0;
         break;
        }
        if (($pok | 0) == 0) {
         ___shlim($f, 0);
         $_0 = 0.0;
         STACKTOP = sp;
         return +$_0;
        } else {
         if ((HEAP32[$4 >> 2] | 0) == 0) {
          $e2_0_i$1 = 0;
          $e2_0_i$0 = 0;
          break;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
         $e2_0_i$1 = 0;
         $e2_0_i$0 = 0;
         break;
        }
       } else {
        if ((HEAP32[$4 >> 2] | 0) == 0) {
         $e2_0_i$1 = 0;
         $e2_0_i$0 = 0;
         break;
        }
        HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
        $e2_0_i$1 = 0;
        $e2_0_i$0 = 0;
       }
      } while (0);
      $309$0 = _i64Add($dc_0_rp_1_i$0 << 2 | 0 >>> 30, $dc_0_rp_1_i$1 << 2 | $dc_0_rp_1_i$0 >>> 30, -32, -1) | 0;
      $310$0 = _i64Add($309$0, tempRet0, $e2_0_i$0, $e2_0_i$1) | 0;
      $310$1 = tempRet0;
      if (($x_3_lcssa_i | 0) == 0) {
       $_0 = +($sign_0 | 0) * 0.0;
       STACKTOP = sp;
       return +$_0;
      }
      $317$1 = 0;
      if (($310$1 | 0) > ($317$1 | 0) | ($310$1 | 0) == ($317$1 | 0) & $310$0 >>> 0 > (-$emin_0_ph | 0) >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
       $_0 = +($sign_0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
       STACKTOP = sp;
       return +$_0;
      }
      $325 = $emin_0_ph - 106 | 0;
      $326$1 = ($325 | 0) < 0 | 0 ? -1 : 0;
      if (($310$1 | 0) < ($326$1 | 0) | ($310$1 | 0) == ($326$1 | 0) & $310$0 >>> 0 < $325 >>> 0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
       $_0 = +($sign_0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
       STACKTOP = sp;
       return +$_0;
      }
      if (($x_3_lcssa_i | 0) > -1) {
       $x_413_i = $x_3_lcssa_i;
       $y_314_i = $y_0_i;
       $e2_115_i$1 = $310$1;
       $e2_115_i$0 = $310$0;
       while (1) {
        $335 = $x_413_i << 1;
        if ($y_314_i < .5) {
         $_pn_i = $y_314_i;
         $x_5_i = $335;
        } else {
         $_pn_i = $y_314_i + -1.0;
         $x_5_i = $335 | 1;
        }
        $y_4_i = $y_314_i + $_pn_i;
        $340$0 = _i64Add($e2_115_i$0, $e2_115_i$1, -1, -1) | 0;
        $340$1 = tempRet0;
        if (($x_5_i | 0) > -1) {
         $x_413_i = $x_5_i;
         $y_314_i = $y_4_i;
         $e2_115_i$1 = $340$1;
         $e2_115_i$0 = $340$0;
        } else {
         $x_4_lcssa_i = $x_5_i;
         $y_3_lcssa_i = $y_4_i;
         $e2_1_lcssa_i$1 = $340$1;
         $e2_1_lcssa_i$0 = $340$0;
         break;
        }
       }
      } else {
       $x_4_lcssa_i = $x_3_lcssa_i;
       $y_3_lcssa_i = $y_0_i;
       $e2_1_lcssa_i$1 = $310$1;
       $e2_1_lcssa_i$0 = $310$0;
      }
      $342$1 = 0;
      $344$0 = _i64Subtract(32, 0, $emin_0_ph, ($emin_0_ph | 0) < 0 | 0 ? -1 : 0) | 0;
      $345$0 = _i64Add($e2_1_lcssa_i$0, $e2_1_lcssa_i$1, $344$0, tempRet0) | 0;
      $345$1 = tempRet0;
      if (($342$1 | 0) > ($345$1 | 0) | ($342$1 | 0) == ($345$1 | 0) & $bits_0_ph >>> 0 > $345$0 >>> 0) {
       $348 = $345$0;
       if (($348 | 0) < 0) {
        $_0711_i = 0;
        label = 126;
       } else {
        $_07_i = $348;
        label = 124;
       }
      } else {
       $_07_i = $bits_0_ph;
       label = 124;
      }
      do {
       if ((label | 0) == 124) {
        if (($_07_i | 0) < 53) {
         $_0711_i = $_07_i;
         label = 126;
         break;
        }
        $bias_0_i = 0.0;
        $_0712_i = $_07_i;
        $_pre_phi_i = +($sign_0 | 0);
       }
      } while (0);
      if ((label | 0) == 126) {
       $354 = +($sign_0 | 0);
       $bias_0_i = +_copysign(+(+_scalbn(1.0, 84 - $_0711_i | 0)), +$354);
       $_0712_i = $_0711_i;
       $_pre_phi_i = $354;
      }
      $or_cond9_i = ($_0712_i | 0) < 32 & $y_3_lcssa_i != 0.0 & ($x_4_lcssa_i & 1 | 0) == 0;
      $367 = $_pre_phi_i * ($or_cond9_i ? 0.0 : $y_3_lcssa_i) + ($bias_0_i + $_pre_phi_i * +((($or_cond9_i & 1) + $x_4_lcssa_i | 0) >>> 0 >>> 0)) - $bias_0_i;
      if ($367 == 0.0) {
       HEAP32[(___errno_location() | 0) >> 2] = 34;
      }
      $_0 = +_scalbnl($367, $e2_1_lcssa_i$0);
      STACKTOP = sp;
      return +$_0;
     } else {
      $c_6 = $c_5;
     }
    } while (0);
    $sum_i = $emin_0_ph + $bits_0_ph | 0;
    $382 = -$sum_i | 0;
    $_012_i = $c_6;
    $gotdig_0_i12 = 0;
    while (1) {
     if (($_012_i | 0) == 46) {
      label = 137;
      break;
     } else if (($_012_i | 0) != 48) {
      $_2_i = $_012_i;
      $gotrad_0_i14 = 0;
      $gotdig_2_i13 = $gotdig_0_i12;
      $lrp_1_i$1 = 0;
      $lrp_1_i$0 = 0;
      break;
     }
     $384 = HEAP32[$3 >> 2] | 0;
     if ($384 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $384 + 1;
      $_012_i = HEAPU8[$384] | 0;
      $gotdig_0_i12 = 1;
      continue;
     } else {
      $_012_i = ___shgetc($f) | 0;
      $gotdig_0_i12 = 1;
      continue;
     }
    }
    do {
     if ((label | 0) == 137) {
      $394 = HEAP32[$3 >> 2] | 0;
      if ($394 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $394 + 1;
       $_1_ph_i = HEAPU8[$394] | 0;
      } else {
       $_1_ph_i = ___shgetc($f) | 0;
      }
      if (($_1_ph_i | 0) == 48) {
       $lrp_0133_i$1 = 0;
       $lrp_0133_i$0 = 0;
      } else {
       $_2_i = $_1_ph_i;
       $gotrad_0_i14 = 1;
       $gotdig_2_i13 = $gotdig_0_i12;
       $lrp_1_i$1 = 0;
       $lrp_1_i$0 = 0;
       break;
      }
      while (1) {
       $404$0 = _i64Add($lrp_0133_i$0, $lrp_0133_i$1, -1, -1) | 0;
       $404$1 = tempRet0;
       $405 = HEAP32[$3 >> 2] | 0;
       if ($405 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $405 + 1;
        $_1_be_i = HEAPU8[$405] | 0;
       } else {
        $_1_be_i = ___shgetc($f) | 0;
       }
       if (($_1_be_i | 0) == 48) {
        $lrp_0133_i$1 = $404$1;
        $lrp_0133_i$0 = $404$0;
       } else {
        $_2_i = $_1_be_i;
        $gotrad_0_i14 = 1;
        $gotdig_2_i13 = 1;
        $lrp_1_i$1 = $404$1;
        $lrp_1_i$0 = $404$0;
        break;
       }
      }
     }
    } while (0);
    $415 = $x_i | 0;
    HEAP32[$415 >> 2] = 0;
    $416 = $_2_i - 48 | 0;
    $418 = ($_2_i | 0) == 46;
    L216 : do {
     if ($416 >>> 0 < 10 >>> 0 | $418) {
      $419 = $x_i + 496 | 0;
      $lrp_2114_i$1 = $lrp_1_i$1;
      $lrp_2114_i$0 = $lrp_1_i$0;
      $dc_0115_i$1 = 0;
      $dc_0115_i$0 = 0;
      $lnz_0116_i = 0;
      $gotdig_3117_i = $gotdig_2_i13;
      $gotrad_1118_i = $gotrad_0_i14;
      $k_0119_i = 0;
      $j_0120_i = 0;
      $_3121_i = $_2_i;
      $421 = $416;
      $420 = $418;
      L218 : while (1) {
       do {
        if ($420) {
         if (($gotrad_1118_i | 0) == 0) {
          $j_2_i = $j_0120_i;
          $k_2_i = $k_0119_i;
          $gotrad_2_i = 1;
          $gotdig_4_i = $gotdig_3117_i;
          $lnz_2_i = $lnz_0116_i;
          $dc_1_i16$1 = $dc_0115_i$1;
          $dc_1_i16$0 = $dc_0115_i$0;
          $lrp_3_i$1 = $dc_0115_i$1;
          $lrp_3_i$0 = $dc_0115_i$0;
         } else {
          break L218;
         }
        } else {
         $426$0 = _i64Add($dc_0115_i$0, $dc_0115_i$1, 1, 0) | 0;
         $426$1 = tempRet0;
         $427 = ($_3121_i | 0) != 48;
         if (($k_0119_i | 0) >= 125) {
          if (!$427) {
           $j_2_i = $j_0120_i;
           $k_2_i = $k_0119_i;
           $gotrad_2_i = $gotrad_1118_i;
           $gotdig_4_i = $gotdig_3117_i;
           $lnz_2_i = $lnz_0116_i;
           $dc_1_i16$1 = $426$1;
           $dc_1_i16$0 = $426$0;
           $lrp_3_i$1 = $lrp_2114_i$1;
           $lrp_3_i$0 = $lrp_2114_i$0;
           break;
          }
          HEAP32[$419 >> 2] = HEAP32[$419 >> 2] | 1;
          $j_2_i = $j_0120_i;
          $k_2_i = $k_0119_i;
          $gotrad_2_i = $gotrad_1118_i;
          $gotdig_4_i = $gotdig_3117_i;
          $lnz_2_i = $lnz_0116_i;
          $dc_1_i16$1 = $426$1;
          $dc_1_i16$0 = $426$0;
          $lrp_3_i$1 = $lrp_2114_i$1;
          $lrp_3_i$0 = $lrp_2114_i$0;
          break;
         }
         $431 = $x_i + ($k_0119_i << 2) | 0;
         if (($j_0120_i | 0) == 0) {
          $storemerge_i = $421;
         } else {
          $storemerge_i = $_3121_i - 48 + ((HEAP32[$431 >> 2] | 0) * 10 | 0) | 0;
         }
         HEAP32[$431 >> 2] = $storemerge_i;
         $438 = $j_0120_i + 1 | 0;
         $439 = ($438 | 0) == 9;
         $j_2_i = $439 ? 0 : $438;
         $k_2_i = ($439 & 1) + $k_0119_i | 0;
         $gotrad_2_i = $gotrad_1118_i;
         $gotdig_4_i = 1;
         $lnz_2_i = $427 ? $426$0 : $lnz_0116_i;
         $dc_1_i16$1 = $426$1;
         $dc_1_i16$0 = $426$0;
         $lrp_3_i$1 = $lrp_2114_i$1;
         $lrp_3_i$0 = $lrp_2114_i$0;
        }
       } while (0);
       $446 = HEAP32[$3 >> 2] | 0;
       if ($446 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $446 + 1;
        $_3_be_i = HEAPU8[$446] | 0;
       } else {
        $_3_be_i = ___shgetc($f) | 0;
       }
       $455 = $_3_be_i - 48 | 0;
       $457 = ($_3_be_i | 0) == 46;
       if ($455 >>> 0 < 10 >>> 0 | $457) {
        $lrp_2114_i$1 = $lrp_3_i$1;
        $lrp_2114_i$0 = $lrp_3_i$0;
        $dc_0115_i$1 = $dc_1_i16$1;
        $dc_0115_i$0 = $dc_1_i16$0;
        $lnz_0116_i = $lnz_2_i;
        $gotdig_3117_i = $gotdig_4_i;
        $gotrad_1118_i = $gotrad_2_i;
        $k_0119_i = $k_2_i;
        $j_0120_i = $j_2_i;
        $_3121_i = $_3_be_i;
        $421 = $455;
        $420 = $457;
       } else {
        $lrp_2_lcssa_i$1 = $lrp_3_i$1;
        $lrp_2_lcssa_i$0 = $lrp_3_i$0;
        $dc_0_lcssa_i$1 = $dc_1_i16$1;
        $dc_0_lcssa_i$0 = $dc_1_i16$0;
        $lnz_0_lcssa_i = $lnz_2_i;
        $gotdig_3_lcssa_i = $gotdig_4_i;
        $gotrad_1_lcssa_i = $gotrad_2_i;
        $k_0_lcssa_i = $k_2_i;
        $j_0_lcssa_i = $j_2_i;
        $_3_lcssa_i = $_3_be_i;
        label = 160;
        break L216;
       }
      }
      $479 = ($gotdig_3117_i | 0) != 0;
      $lrp_42527_i$1 = $lrp_2114_i$1;
      $lrp_42527_i$0 = $lrp_2114_i$0;
      $dc_097_i$1 = $dc_0115_i$1;
      $dc_097_i$0 = $dc_0115_i$0;
      $lnz_0101_i = $lnz_0116_i;
      $k_0107_i = $k_0119_i;
      $j_0111_i = $j_0120_i;
      label = 168;
     } else {
      $lrp_2_lcssa_i$1 = $lrp_1_i$1;
      $lrp_2_lcssa_i$0 = $lrp_1_i$0;
      $dc_0_lcssa_i$1 = 0;
      $dc_0_lcssa_i$0 = 0;
      $lnz_0_lcssa_i = 0;
      $gotdig_3_lcssa_i = $gotdig_2_i13;
      $gotrad_1_lcssa_i = $gotrad_0_i14;
      $k_0_lcssa_i = 0;
      $j_0_lcssa_i = 0;
      $_3_lcssa_i = $_2_i;
      label = 160;
     }
    } while (0);
    do {
     if ((label | 0) == 160) {
      $458 = ($gotrad_1_lcssa_i | 0) == 0;
      $dc_0_lrp_2_i$0 = $458 ? $dc_0_lcssa_i$0 : $lrp_2_lcssa_i$0;
      $dc_0_lrp_2_i$1 = $458 ? $dc_0_lcssa_i$1 : $lrp_2_lcssa_i$1;
      $459 = ($gotdig_3_lcssa_i | 0) != 0;
      if (!($459 & ($_3_lcssa_i | 32 | 0) == 101)) {
       if (($_3_lcssa_i | 0) > -1) {
        $479 = $459;
        $lrp_42527_i$1 = $dc_0_lrp_2_i$1;
        $lrp_42527_i$0 = $dc_0_lrp_2_i$0;
        $dc_097_i$1 = $dc_0_lcssa_i$1;
        $dc_097_i$0 = $dc_0_lcssa_i$0;
        $lnz_0101_i = $lnz_0_lcssa_i;
        $k_0107_i = $k_0_lcssa_i;
        $j_0111_i = $j_0_lcssa_i;
        label = 168;
        break;
       } else {
        $lrp_5_i$1 = $dc_0_lrp_2_i$1;
        $lrp_5_i$0 = $dc_0_lrp_2_i$0;
        $486 = $459;
        $dc_096_i$1 = $dc_0_lcssa_i$1;
        $dc_096_i$0 = $dc_0_lcssa_i$0;
        $lnz_0100_i = $lnz_0_lcssa_i;
        $k_0106_i = $k_0_lcssa_i;
        $j_0110_i = $j_0_lcssa_i;
        label = 170;
        break;
       }
      }
      $463$0 = _scanexp($f, $pok) | 0;
      $463$1 = tempRet0;
      do {
       if (($463$0 | 0) == 0 & ($463$1 | 0) == (-2147483648 | 0)) {
        if (($pok | 0) == 0) {
         ___shlim($f, 0);
         $_0 = 0.0;
         STACKTOP = sp;
         return +$_0;
        } else {
         if ((HEAP32[$4 >> 2] | 0) == 0) {
          $e10_0_i$1 = 0;
          $e10_0_i$0 = 0;
          break;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
         $e10_0_i$1 = 0;
         $e10_0_i$0 = 0;
         break;
        }
       } else {
        $e10_0_i$1 = $463$1;
        $e10_0_i$0 = $463$0;
       }
      } while (0);
      $475$0 = _i64Add($e10_0_i$0, $e10_0_i$1, $dc_0_lrp_2_i$0, $dc_0_lrp_2_i$1) | 0;
      $lrp_528_i$1 = tempRet0;
      $lrp_528_i$0 = $475$0;
      $dc_095_i$1 = $dc_0_lcssa_i$1;
      $dc_095_i$0 = $dc_0_lcssa_i$0;
      $lnz_099_i = $lnz_0_lcssa_i;
      $k_0105_i = $k_0_lcssa_i;
      $j_0109_i = $j_0_lcssa_i;
     }
    } while (0);
    do {
     if ((label | 0) == 168) {
      if ((HEAP32[$4 >> 2] | 0) == 0) {
       $lrp_5_i$1 = $lrp_42527_i$1;
       $lrp_5_i$0 = $lrp_42527_i$0;
       $486 = $479;
       $dc_096_i$1 = $dc_097_i$1;
       $dc_096_i$0 = $dc_097_i$0;
       $lnz_0100_i = $lnz_0101_i;
       $k_0106_i = $k_0107_i;
       $j_0110_i = $j_0111_i;
       label = 170;
       break;
      }
      HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
      if ($479) {
       $lrp_528_i$1 = $lrp_42527_i$1;
       $lrp_528_i$0 = $lrp_42527_i$0;
       $dc_095_i$1 = $dc_097_i$1;
       $dc_095_i$0 = $dc_097_i$0;
       $lnz_099_i = $lnz_0101_i;
       $k_0105_i = $k_0107_i;
       $j_0109_i = $j_0111_i;
      } else {
       label = 171;
      }
     }
    } while (0);
    if ((label | 0) == 170) {
     if ($486) {
      $lrp_528_i$1 = $lrp_5_i$1;
      $lrp_528_i$0 = $lrp_5_i$0;
      $dc_095_i$1 = $dc_096_i$1;
      $dc_095_i$0 = $dc_096_i$0;
      $lnz_099_i = $lnz_0100_i;
      $k_0105_i = $k_0106_i;
      $j_0109_i = $j_0110_i;
     } else {
      label = 171;
     }
    }
    if ((label | 0) == 171) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim($f, 0);
     $_0 = 0.0;
     STACKTOP = sp;
     return +$_0;
    }
    $490 = HEAP32[$415 >> 2] | 0;
    if (($490 | 0) == 0) {
     $_0 = +($sign_0 | 0) * 0.0;
     STACKTOP = sp;
     return +$_0;
    }
    $$etemp$15$1 = 0;
    do {
     if (($lrp_528_i$0 | 0) == ($dc_095_i$0 | 0) & ($lrp_528_i$1 | 0) == ($dc_095_i$1 | 0) & (($dc_095_i$1 | 0) < ($$etemp$15$1 | 0) | ($dc_095_i$1 | 0) == ($$etemp$15$1 | 0) & $dc_095_i$0 >>> 0 < 10 >>> 0)) {
      if (!($bits_0_ph >>> 0 > 30 >>> 0 | ($490 >>> ($bits_0_ph >>> 0) | 0) == 0)) {
       break;
      }
      $_0 = +($sign_0 | 0) * +($490 >>> 0 >>> 0);
      STACKTOP = sp;
      return +$_0;
     }
    } while (0);
    $507 = ($emin_0_ph | 0) / -2 | 0;
    $508$1 = ($507 | 0) < 0 | 0 ? -1 : 0;
    if (($lrp_528_i$1 | 0) > ($508$1 | 0) | ($lrp_528_i$1 | 0) == ($508$1 | 0) & $lrp_528_i$0 >>> 0 > $507 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $_0 = +($sign_0 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308;
     STACKTOP = sp;
     return +$_0;
    }
    $516 = $emin_0_ph - 106 | 0;
    $517$1 = ($516 | 0) < 0 | 0 ? -1 : 0;
    if (($lrp_528_i$1 | 0) < ($517$1 | 0) | ($lrp_528_i$1 | 0) == ($517$1 | 0) & $lrp_528_i$0 >>> 0 < $516 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $_0 = +($sign_0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = sp;
     return +$_0;
    }
    if (($j_0109_i | 0) == 0) {
     $k_3_i = $k_0105_i;
    } else {
     if (($j_0109_i | 0) < 9) {
      $527 = $x_i + ($k_0105_i << 2) | 0;
      $j_389_i = $j_0109_i;
      $529 = HEAP32[$527 >> 2] | 0;
      do {
       $529 = $529 * 10 | 0;
       $j_389_i = $j_389_i + 1 | 0;
      } while (($j_389_i | 0) < 9);
      HEAP32[$527 >> 2] = $529;
     }
     $k_3_i = $k_0105_i + 1 | 0;
    }
    $536 = $lrp_528_i$0;
    do {
     if (($lnz_099_i | 0) < 9) {
      if (!(($lnz_099_i | 0) <= ($536 | 0) & ($536 | 0) < 18)) {
       break;
      }
      if (($536 | 0) == 9) {
       $_0 = +($sign_0 | 0) * +((HEAP32[$415 >> 2] | 0) >>> 0 >>> 0);
       STACKTOP = sp;
       return +$_0;
      }
      if (($536 | 0) < 9) {
       $_0 = +($sign_0 | 0) * +((HEAP32[$415 >> 2] | 0) >>> 0 >>> 0) / +(HEAP32[7616 + (8 - $536 << 2) >> 2] | 0);
       STACKTOP = sp;
       return +$_0;
      }
      $562 = $bits_0_ph + 27 + ($536 * -3 | 0) | 0;
      $_pre_i18 = HEAP32[$415 >> 2] | 0;
      if (!(($562 | 0) > 30 | ($_pre_i18 >>> ($562 >>> 0) | 0) == 0)) {
       break;
      }
      $_0 = +($sign_0 | 0) * +($_pre_i18 >>> 0 >>> 0) * +(HEAP32[7616 + ($536 - 10 << 2) >> 2] | 0);
      STACKTOP = sp;
      return +$_0;
     }
    } while (0);
    $575 = ($536 | 0) % 9 | 0;
    if (($575 | 0) == 0) {
     $a_2_ph58_i = 0;
     $z_1_ph57_i = $k_3_i;
     $e2_0_ph_i = 0;
     $rp_2_ph56_i = $536;
    } else {
     $580 = ($536 | 0) > -1 ? $575 : $575 + 9 | 0;
     $583 = HEAP32[7616 + (8 - $580 << 2) >> 2] | 0;
     do {
      if (($k_3_i | 0) == 0) {
       $z_0_i = 0;
       $a_0_lcssa181_i = 0;
       $rp_0_lcssa182_i = $536;
      } else {
       $585 = 1e9 / ($583 | 0) | 0;
       $rp_078_i = $536;
       $a_079_i = 0;
       $k_480_i = 0;
       $carry_081_i = 0;
       while (1) {
        $587 = $x_i + ($k_480_i << 2) | 0;
        $588 = HEAP32[$587 >> 2] | 0;
        $591 = (($588 >>> 0) / ($583 >>> 0) | 0) + $carry_081_i | 0;
        HEAP32[$587 >> 2] = $591;
        $592 = Math_imul(($588 >>> 0) % ($583 >>> 0) | 0, $585) | 0;
        $595 = $k_480_i + 1 | 0;
        if (($k_480_i | 0) == ($a_079_i | 0) & ($591 | 0) == 0) {
         $a_1_i = $595 & 127;
         $rp_1_i19 = $rp_078_i - 9 | 0;
        } else {
         $a_1_i = $a_079_i;
         $rp_1_i19 = $rp_078_i;
        }
        if (($595 | 0) == ($k_3_i | 0)) {
         break;
        } else {
         $rp_078_i = $rp_1_i19;
         $a_079_i = $a_1_i;
         $k_480_i = $595;
         $carry_081_i = $592;
        }
       }
       if (($592 | 0) == 0) {
        $z_0_i = $k_3_i;
        $a_0_lcssa181_i = $a_1_i;
        $rp_0_lcssa182_i = $rp_1_i19;
        break;
       }
       HEAP32[$x_i + ($k_3_i << 2) >> 2] = $592;
       $z_0_i = $k_3_i + 1 | 0;
       $a_0_lcssa181_i = $a_1_i;
       $rp_0_lcssa182_i = $rp_1_i19;
      }
     } while (0);
     $a_2_ph58_i = $a_0_lcssa181_i;
     $z_1_ph57_i = $z_0_i;
     $e2_0_ph_i = 0;
     $rp_2_ph56_i = 9 - $580 + $rp_0_lcssa182_i | 0;
    }
    L310 : while (1) {
     $607 = $x_i + ($a_2_ph58_i << 2) | 0;
     if (($rp_2_ph56_i | 0) < 18) {
      $z_1_us_i = $z_1_ph57_i;
      $e2_0_us_i = $e2_0_ph_i;
      while (1) {
       $carry1_0_us_i = 0;
       $k_5_in_us_i = $z_1_us_i + 127 | 0;
       $z_2_us_i = $z_1_us_i;
       while (1) {
        $k_5_us_i = $k_5_in_us_i & 127;
        $611 = $x_i + ($k_5_us_i << 2) | 0;
        $613$0 = HEAP32[$611 >> 2] | 0;
        $616$0 = _i64Add($613$0 << 29 | 0 >>> 3, 0 << 29 | $613$0 >>> 3, $carry1_0_us_i, 0) | 0;
        $616$1 = tempRet0;
        $$etemp$16$1 = 0;
        if ($616$1 >>> 0 > $$etemp$16$1 >>> 0 | $616$1 >>> 0 == $$etemp$16$1 >>> 0 & $616$0 >>> 0 > 1e9 >>> 0) {
         $619$0 = ___udivdi3($616$0, $616$1, 1e9, 0) | 0;
         $621$0 = ___uremdi3($616$0, $616$1, 1e9, 0) | 0;
         $carry1_1_us_i = $619$0;
         $_sink_off0_us_i = $621$0;
        } else {
         $carry1_1_us_i = 0;
         $_sink_off0_us_i = $616$0;
        }
        HEAP32[$611 >> 2] = $_sink_off0_us_i;
        $626 = ($k_5_us_i | 0) == ($a_2_ph58_i | 0);
        if (($k_5_us_i | 0) != ($z_2_us_i + 127 & 127 | 0) | $626) {
         $z_3_us_i = $z_2_us_i;
        } else {
         $z_3_us_i = ($_sink_off0_us_i | 0) == 0 ? $k_5_us_i : $z_2_us_i;
        }
        if ($626) {
         break;
        } else {
         $carry1_0_us_i = $carry1_1_us_i;
         $k_5_in_us_i = $k_5_us_i - 1 | 0;
         $z_2_us_i = $z_3_us_i;
        }
       }
       $632 = $e2_0_us_i - 29 | 0;
       if (($carry1_1_us_i | 0) == 0) {
        $z_1_us_i = $z_3_us_i;
        $e2_0_us_i = $632;
       } else {
        $_lcssa61_i = $632;
        $z_3_lcssa_lcssa_i = $z_3_us_i;
        $carry1_1_lcssa_lcssa_i = $carry1_1_us_i;
        break;
       }
      }
     } else {
      if (($rp_2_ph56_i | 0) == 18) {
       $z_1_us63_i = $z_1_ph57_i;
       $e2_0_us62_i = $e2_0_ph_i;
      } else {
       $a_3_ph_i = $a_2_ph58_i;
       $z_5_ph_i = $z_1_ph57_i;
       $e2_1_ph_i = $e2_0_ph_i;
       $rp_3_ph51_i = $rp_2_ph56_i;
       break;
      }
      while (1) {
       if ((HEAP32[$607 >> 2] | 0) >>> 0 >= 9007199 >>> 0) {
        $a_3_ph_i = $a_2_ph58_i;
        $z_5_ph_i = $z_1_us63_i;
        $e2_1_ph_i = $e2_0_us62_i;
        $rp_3_ph51_i = 18;
        break L310;
       }
       $carry1_0_us67_i = 0;
       $k_5_in_us66_i = $z_1_us63_i + 127 | 0;
       $z_2_us65_i = $z_1_us63_i;
       while (1) {
        $k_5_us68_i = $k_5_in_us66_i & 127;
        $638 = $x_i + ($k_5_us68_i << 2) | 0;
        $640$0 = HEAP32[$638 >> 2] | 0;
        $643$0 = _i64Add($640$0 << 29 | 0 >>> 3, 0 << 29 | $640$0 >>> 3, $carry1_0_us67_i, 0) | 0;
        $643$1 = tempRet0;
        $$etemp$19$1 = 0;
        if ($643$1 >>> 0 > $$etemp$19$1 >>> 0 | $643$1 >>> 0 == $$etemp$19$1 >>> 0 & $643$0 >>> 0 > 1e9 >>> 0) {
         $646$0 = ___udivdi3($643$0, $643$1, 1e9, 0) | 0;
         $648$0 = ___uremdi3($643$0, $643$1, 1e9, 0) | 0;
         $carry1_1_us72_i = $646$0;
         $_sink_off0_us71_i = $648$0;
        } else {
         $carry1_1_us72_i = 0;
         $_sink_off0_us71_i = $643$0;
        }
        HEAP32[$638 >> 2] = $_sink_off0_us71_i;
        $653 = ($k_5_us68_i | 0) == ($a_2_ph58_i | 0);
        if (($k_5_us68_i | 0) != ($z_2_us65_i + 127 & 127 | 0) | $653) {
         $z_3_us75_i = $z_2_us65_i;
        } else {
         $z_3_us75_i = ($_sink_off0_us71_i | 0) == 0 ? $k_5_us68_i : $z_2_us65_i;
        }
        if ($653) {
         break;
        } else {
         $carry1_0_us67_i = $carry1_1_us72_i;
         $k_5_in_us66_i = $k_5_us68_i - 1 | 0;
         $z_2_us65_i = $z_3_us75_i;
        }
       }
       $659 = $e2_0_us62_i - 29 | 0;
       if (($carry1_1_us72_i | 0) == 0) {
        $z_1_us63_i = $z_3_us75_i;
        $e2_0_us62_i = $659;
       } else {
        $_lcssa61_i = $659;
        $z_3_lcssa_lcssa_i = $z_3_us75_i;
        $carry1_1_lcssa_lcssa_i = $carry1_1_us72_i;
        break;
       }
      }
     }
     $663 = $a_2_ph58_i + 127 & 127;
     if (($663 | 0) == ($z_3_lcssa_lcssa_i | 0)) {
      $667 = $z_3_lcssa_lcssa_i + 127 & 127;
      $672 = $x_i + (($z_3_lcssa_lcssa_i + 126 & 127) << 2) | 0;
      HEAP32[$672 >> 2] = HEAP32[$672 >> 2] | HEAP32[$x_i + ($667 << 2) >> 2];
      $z_4_i = $667;
     } else {
      $z_4_i = $z_3_lcssa_lcssa_i;
     }
     HEAP32[$x_i + ($663 << 2) >> 2] = $carry1_1_lcssa_lcssa_i;
     $a_2_ph58_i = $663;
     $z_1_ph57_i = $z_4_i;
     $e2_0_ph_i = $_lcssa61_i;
     $rp_2_ph56_i = $rp_2_ph56_i + 9 | 0;
    }
    L341 : while (1) {
     $720 = $z_5_ph_i + 1 & 127;
     $723 = $x_i + (($z_5_ph_i + 127 & 127) << 2) | 0;
     $a_3_i_ph = $a_3_ph_i;
     $e2_1_i_ph = $e2_1_ph_i;
     $rp_3_i_ph = $rp_3_ph51_i;
     while (1) {
      $724 = ($rp_3_i_ph | 0) == 18;
      $_21_i = ($rp_3_i_ph | 0) > 27 ? 9 : 1;
      $a_3_i = $a_3_i_ph;
      $e2_1_i = $e2_1_i_ph;
      while (1) {
       $i_043_i = 0;
       while (1) {
        $681 = $i_043_i + $a_3_i & 127;
        if (($681 | 0) == ($z_5_ph_i | 0)) {
         $i_1_i = 2;
         break;
        }
        $685 = HEAP32[$x_i + ($681 << 2) >> 2] | 0;
        $687 = HEAP32[7608 + ($i_043_i << 2) >> 2] | 0;
        if ($685 >>> 0 < $687 >>> 0) {
         $i_1_i = 2;
         break;
        }
        $691 = $i_043_i + 1 | 0;
        if ($685 >>> 0 > $687 >>> 0) {
         $i_1_i = $i_043_i;
         break;
        }
        if (($691 | 0) < 2) {
         $i_043_i = $691;
        } else {
         $i_1_i = $691;
         break;
        }
       }
       if (($i_1_i | 0) == 2 & $724) {
        break L341;
       }
       $697 = $_21_i + $e2_1_i | 0;
       if (($a_3_i | 0) == ($z_5_ph_i | 0)) {
        $a_3_i = $z_5_ph_i;
        $e2_1_i = $697;
       } else {
        break;
       }
      }
      $700 = (1 << $_21_i) - 1 | 0;
      $701 = 1e9 >>> ($_21_i >>> 0);
      $rp_444_i = $rp_3_i_ph;
      $a_445_i = $a_3_i;
      $k_646_i = $a_3_i;
      $carry3_048_i = 0;
      do {
       $702 = $x_i + ($k_646_i << 2) | 0;
       $703 = HEAP32[$702 >> 2] | 0;
       $706 = ($703 >>> ($_21_i >>> 0)) + $carry3_048_i | 0;
       HEAP32[$702 >> 2] = $706;
       $carry3_048_i = Math_imul($703 & $700, $701) | 0;
       $or_cond22_i = ($k_646_i | 0) == ($a_445_i | 0) & ($706 | 0) == 0;
       $k_646_i = $k_646_i + 1 & 127;
       $rp_444_i = $or_cond22_i ? $rp_444_i - 9 | 0 : $rp_444_i;
       $a_445_i = $or_cond22_i ? $k_646_i : $a_445_i;
      } while (($k_646_i | 0) != ($z_5_ph_i | 0));
      if (($carry3_048_i | 0) == 0) {
       $a_3_i_ph = $a_445_i;
       $e2_1_i_ph = $697;
       $rp_3_i_ph = $rp_444_i;
       continue;
      }
      if (($720 | 0) != ($a_445_i | 0)) {
       break;
      }
      HEAP32[$723 >> 2] = HEAP32[$723 >> 2] | 1;
      $a_3_i_ph = $a_445_i;
      $e2_1_i_ph = $697;
      $rp_3_i_ph = $rp_444_i;
     }
     HEAP32[$x_i + ($z_5_ph_i << 2) >> 2] = $carry3_048_i;
     $a_3_ph_i = $a_445_i;
     $z_5_ph_i = $720;
     $e2_1_ph_i = $697;
     $rp_3_ph51_i = $rp_444_i;
    }
    $694 = $a_3_i & 127;
    if (($694 | 0) == ($z_5_ph_i | 0)) {
     HEAP32[$x_i + ($720 - 1 << 2) >> 2] = 0;
     $z_7_i = $720;
    } else {
     $z_7_i = $z_5_ph_i;
    }
    $735 = +((HEAP32[$x_i + ($694 << 2) >> 2] | 0) >>> 0 >>> 0);
    $737 = $a_3_i + 1 & 127;
    if (($737 | 0) == ($z_7_i | 0)) {
     $817 = $z_7_i + 1 & 127;
     HEAP32[$x_i + ($817 - 1 << 2) >> 2] = 0;
     $z_7_1_i = $817;
    } else {
     $z_7_1_i = $z_7_i;
    }
    $826 = +($sign_0 | 0);
    $827 = $826 * ($735 * 1.0e9 + +((HEAP32[$x_i + ($737 << 2) >> 2] | 0) >>> 0 >>> 0));
    $828 = $e2_1_i + 53 | 0;
    $829 = $828 - $emin_0_ph | 0;
    if (($829 | 0) < ($bits_0_ph | 0)) {
     if (($829 | 0) < 0) {
      $denormal_031_i = 1;
      $_01332_i = 0;
      label = 244;
     } else {
      $_013_i = $829;
      $denormal_0_i = 1;
      label = 243;
     }
    } else {
     $_013_i = $bits_0_ph;
     $denormal_0_i = 0;
     label = 243;
    }
    if ((label | 0) == 243) {
     if (($_013_i | 0) < 53) {
      $denormal_031_i = $denormal_0_i;
      $_01332_i = $_013_i;
      label = 244;
     } else {
      $bias_0_i24 = 0.0;
      $frac_0_i = 0.0;
      $y_1_i23 = $827;
      $denormal_030_i = $denormal_0_i;
      $_01333_i = $_013_i;
     }
    }
    if ((label | 0) == 244) {
     $745 = +_copysign(+(+_scalbn(1.0, 105 - $_01332_i | 0)), +$827);
     $748 = +_fmod(+$827, +(+_scalbn(1.0, 53 - $_01332_i | 0)));
     $bias_0_i24 = $745;
     $frac_0_i = $748;
     $y_1_i23 = $745 + ($827 - $748);
     $denormal_030_i = $denormal_031_i;
     $_01333_i = $_01332_i;
    }
    $753 = $a_3_i + 2 & 127;
    do {
     if (($753 | 0) == ($z_7_1_i | 0)) {
      $frac_2_i = $frac_0_i;
     } else {
      $757 = HEAP32[$x_i + ($753 << 2) >> 2] | 0;
      do {
       if ($757 >>> 0 < 5e8 >>> 0) {
        if (($757 | 0) == 0) {
         if (($a_3_i + 3 & 127 | 0) == ($z_7_1_i | 0)) {
          $frac_1_i = $frac_0_i;
          break;
         }
        }
        $frac_1_i = $826 * .25 + $frac_0_i;
       } else {
        if ($757 >>> 0 > 5e8 >>> 0) {
         $frac_1_i = $826 * .75 + $frac_0_i;
         break;
        }
        if (($a_3_i + 3 & 127 | 0) == ($z_7_1_i | 0)) {
         $frac_1_i = $826 * .5 + $frac_0_i;
         break;
        } else {
         $frac_1_i = $826 * .75 + $frac_0_i;
         break;
        }
       }
      } while (0);
      if ((53 - $_01333_i | 0) <= 1) {
       $frac_2_i = $frac_1_i;
       break;
      }
      if (+_fmod(+$frac_1_i, +1.0) != 0.0) {
       $frac_2_i = $frac_1_i;
       break;
      }
      $frac_2_i = $frac_1_i + 1.0;
     }
    } while (0);
    $793 = $y_1_i23 + $frac_2_i - $bias_0_i24;
    do {
     if (($828 & 2147483647 | 0) > (-2 - $sum_i | 0)) {
      if (+Math_abs(+$793) < 9007199254740992.0) {
       $y_2_i25 = $793;
       $denormal_2_i = $denormal_030_i;
       $e2_2_i = $e2_1_i;
      } else {
       $y_2_i25 = $793 * .5;
       $denormal_2_i = ($denormal_030_i | 0) != 0 & ($_01333_i | 0) == ($829 | 0) ? 0 : $denormal_030_i;
       $e2_2_i = $e2_1_i + 1 | 0;
      }
      if (($e2_2_i + 50 | 0) <= ($382 | 0)) {
       if (!(($denormal_2_i | 0) != 0 & $frac_2_i != 0.0)) {
        $y_3_i = $y_2_i25;
        $e2_3_i = $e2_2_i;
        break;
       }
      }
      HEAP32[(___errno_location() | 0) >> 2] = 34;
      $y_3_i = $y_2_i25;
      $e2_3_i = $e2_2_i;
     } else {
      $y_3_i = $793;
      $e2_3_i = $e2_1_i;
     }
    } while (0);
    $_0 = +_scalbnl($y_3_i, $e2_3_i);
    STACKTOP = sp;
    return +$_0;
   } else {
    if ((HEAP32[$4 >> 2] | 0) != 0) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
    }
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim($f, 0);
    $_0 = 0.0;
    STACKTOP = sp;
    return +$_0;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 23) {
   $63 = (HEAP32[$4 >> 2] | 0) == 0;
   if (!$63) {
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
   }
   if ($i_0_lcssa >>> 0 < 4 >>> 0 | ($pok | 0) == 0 | $63) {
    break;
   } else {
    $i_1 = $i_0_lcssa;
   }
   do {
    HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) - 1;
    $i_1 = $i_1 - 1 | 0;
   } while ($i_1 >>> 0 > 3 >>> 0);
  }
 } while (0);
 $_0 = +($sign_0 | 0) * Infinity;
 STACKTOP = sp;
 return +$_0;
}
function _macro_subst_tok($tok_str, $nested_list, $s, $can_read_stream) {
 $tok_str = $tok_str | 0;
 $nested_list = $nested_list | 0;
 $s = $s | 0;
 $can_read_stream = $can_read_stream | 0;
 var $cval_i = 0, $str_i = 0, $cstr_i = 0, $args = 0, $str = 0, $cval = 0, $cstr = 0, $buf = 0, $ti = 0, $2 = 0, $4 = 0, $17 = 0, $20 = 0, $26 = 0, $29 = 0, $35 = 0, $37 = 0, $t1_0 = 0, $cstrval_1 = 0, $40 = 0, $41 = 0, $_pre142 = 0, $_pre144 = 0, $_phi_trans_insert_i_i = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $_01_i = 0, $47 = 0, $size_0_i_i_i = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $_pre139 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $size_0_i_i = 0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $_pre_phi = 0, $76 = 0, $83 = 0, $87 = 0, $89 = 0, $p_0 = 0, $90 = 0, $95 = 0, $98 = 0, $105 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $134 = 0, $_pre2_i_i = 0, $137 = 0, $len_0_i_i46 = 0, $141 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $149 = 0, $152 = 0, $_0_i = 0, $154 = 0, $158 = 0, $160 = 0, $161 = 0, $162 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $173 = 0, $_pre2_i_i_i = 0, $176 = 0, $len_0_i_i_i53 = 0, $180 = 0, $182 = 0, $183 = 0, $_0_i_i_i = 0, $189 = 0, $192 = 0, $196 = 0, $198 = 0, $199 = 0, $200 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $211 = 0, $_pre2_i_i_i56 = 0, $214 = 0, $len_0_i_i_i58 = 0, $218 = 0, $220 = 0, $221 = 0, $_0_i_i_i62 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $244 = 0, $_pre2_i_i_i65 = 0, $247 = 0, $len_0_i_i_i67 = 0, $251 = 0, $253 = 0, $254 = 0, $_0_i_i_i71 = 0, $260 = 0, $264 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $283 = 0, $_pre2_i_i_i74 = 0, $286 = 0, $len_0_i_i_i76 = 0, $290 = 0, $292 = 0, $293 = 0, $_0_i_i_i80 = 0, $299 = 0, $304 = 0, $c_0_in = 0, $p1_0 = 0, $c_0 = 0, $308 = 0, $313 = 0, $t_0 = 0, $319 = 0, $320 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $sa_0115 = 0, $331 = 0, $333 = 0, $_ph159 = 0, $parlevel_0_ph = 0, $_old_pr = 0, $334 = 0, $parlevel_0 = 0, $344 = 0, $parlevel_1154 = 0, $346 = 0, $storemerge_i = 0, $parlevel_1152 = 0, $347 = 0, $348 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $n_0_ph_i_i36 = 0, $p_0_i_i38 = 0, $n_0_i_i39 = 0, $tab_0_i_i40 = 0, $373 = 0, $p_1_i_i43_ph = 0, $_pr91 = 0, $381 = 0, $382 = 0, $386 = 0, $387 = 0, $388 = 0, $len_0_i_i = 0, $396 = 0, $397 = 0, $407 = 0, $408 = 0, $420 = 0, $sa_0_lcssa = 0, $_pre_phi147 = 0, $423 = 0, $424 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $_phi_trans_insert_i_i_i = 0, $435 = 0, $436 = 0, $last_tok_0_i = 0, $437 = 0, $438 = 0, $n_0_ph_i_i = 0, $p_0_i_i = 0, $n_0_i_i = 0, $tab_0_i_i = 0, $457 = 0, $p_1_i_i = 0, $461 = 0, $462 = 0, $n_0_ph_i6_i = 0, $p_0_i8_i = 0, $n_0_i9_i = 0, $tab_0_i10_i = 0, $481 = 0, $p_1_i13_i = 0, $p_1_i13_i94 = 0, $485 = 0, $_ph = 0, $_ph98 = 0, $_ph99 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $497 = 0, $n_0_ph_i17_i = 0, $p_0_i19_i = 0, $n_0_i20_i = 0, $tab_0_i21_i = 0, $516 = 0, $p_1_i24_i = 0, $storemerge_i_i = 0, $520 = 0, $521 = 0, $524 = 0, $525 = 0, $_01_i_i = 0, $526 = 0, $527 = 0, $size_0_i_i_i_i = 0, $535 = 0, $536 = 0, $538 = 0, $539 = 0, $543 = 0, $544 = 0, $545 = 0, $size_0_i_i_i31 = 0, $553 = 0, $554 = 0, $561 = 0, $566 = 0, $569 = 0, $578 = 0, $581 = 0, $592 = 0, $593 = 0, $594 = 0, $n_0_ph_i29_i = 0, $p_0_i31_i = 0, $n_0_i32_i = 0, $tab_0_i33_i = 0, $612 = 0, $p_1_i36_i = 0, $p_1_i36_i96 = 0, $619 = 0, $620 = 0, $621 = 0, $len_0_i_i_i = 0, $629 = 0, $str_0_i_i = 0, $634 = 0, $635 = 0, $636 = 0, $len_0_i_i38_i = 0, $644 = 0, $645 = 0, $647 = 0, $sa_297 = 0, $650 = 0, $mstr_allocated_0 = 0, $mstr_0 = 0, $659 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval_i = sp | 0;
 $str_i = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cstr_i = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $args = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $str = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cstr = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $ti = STACKTOP;
 STACKTOP = STACKTOP + 4 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $2 = HEAP32[5310] | 0;
 do {
  if (($2 | 0) == 327) {
   $cstrval_1 = (HEAP32[13912] | 0) + 32 | 0;
   $t1_0 = 181;
  } else if (($2 | 0) == 326) {
   $4 = $buf | 0;
   _snprintf($4 | 0, 32, 14424, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[(HEAP32[13912] | 0) + 16 >> 2], tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $cstrval_1 = $4;
   $t1_0 = 206;
  } else {
   if (($2 & -2 | 0) == 328) {
    _time($ti | 0) | 0;
    $17 = _localtime($ti | 0) | 0;
    $20 = $buf | 0;
    if ((HEAP32[5310] | 0) == 328) {
     $26 = HEAP32[$17 + 12 >> 2] | 0;
     $29 = (HEAP32[$17 + 20 >> 2] | 0) + 1900 | 0;
     _snprintf($20 | 0, 32, 14352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = 10416 + (HEAP32[$17 + 16 >> 2] << 2), HEAP32[tempVarArgs + 8 >> 2] = $26, HEAP32[tempVarArgs + 16 >> 2] = $29, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     $cstrval_1 = $20;
     $t1_0 = 181;
     break;
    } else {
     $35 = HEAP32[$17 + 4 >> 2] | 0;
     $37 = HEAP32[$17 >> 2] | 0;
     _snprintf($20 | 0, 32, 14256, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$17 + 8 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $35, HEAP32[tempVarArgs + 16 >> 2] = $37, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     $cstrval_1 = $20;
     $t1_0 = 181;
     break;
    }
   }
   $83 = HEAP32[$s + 12 >> 2] | 0;
   do {
    if ((HEAP32[$s + 16 >> 2] | 0) == 1) {
     $87 = HEAP32[5350] | 0;
     L13 : do {
      if (($87 | 0) == 0) {
       label = 31;
      } else {
       $89 = ($can_read_stream | 0) != 0;
       $p_0 = $87;
       L15 : while (1) {
        $90 = HEAP32[$p_0 >> 2] | 0;
        switch ($90 | 0) {
        case 32:
        case 12:
        case 11:
        case 9:
        case 13:
        case 10:
         {
          $p_0 = $p_0 + 4 | 0;
          continue L15;
          break;
         }
        default:
         {}
        }
        if (!(($90 | 0) == 0 & $89)) {
         $t_0 = $90;
         break L13;
        }
        $95 = HEAP32[$can_read_stream >> 2] | 0;
        HEAP32[5350] = 0;
        if (($95 | 0) != 0) {
         $98 = $95 + 4 | 0;
         HEAP32[5350] = HEAP32[$98 >> 2];
         HEAP32[$98 >> 2] = 0;
         HEAP32[$can_read_stream >> 2] = HEAP32[$95 >> 2];
        }
        HEAP32[HEAP32[$nested_list >> 2] >> 2] = -1;
        $105 = HEAP32[5350] | 0;
        if (($105 | 0) == 0) {
         label = 31;
         break L13;
        } else {
         $p_0 = $105;
        }
       }
      }
     } while (0);
     L24 : do {
      if ((label | 0) == 31) {
       $111 = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
       HEAP32[13924] = $111;
       $113 = $111;
       L26 : while (1) {
        L28 : do {
         switch ($113 | 0) {
         case 32:
         case 12:
         case 11:
         case 9:
         case 13:
         case 10:
          {
           break;
          }
         case 47:
          {
           $115 = HEAP32[13912] | 0;
           $116 = $115 | 0;
           $118 = (HEAP32[$116 >> 2] | 0) + 1 | 0;
           $119 = HEAP8[$118] | 0;
           do {
            if ($119 << 24 >> 24 == 92) {
             if ((HEAP32[$115 + 4 >> 2] | 0) >>> 0 > $118 >>> 0) {
              $_0_i = $118;
              $152 = $115;
             } else {
              HEAP32[$116 >> 2] = $118;
              $126 = HEAP32[13912] | 0;
              $127 = $126 | 0;
              $128 = HEAP32[$127 >> 2] | 0;
              $129 = $126 + 4 | 0;
              $130 = HEAP32[$129 >> 2] | 0;
              if ($128 >>> 0 < $130 >>> 0) {
               $144 = $128;
               $143 = $130;
              } else {
               $134 = HEAP32[$126 + 8 >> 2] | 0;
               $_pre2_i_i = $126 + 1056 | 0;
               if (($134 | 0) == -1) {
                $len_0_i_i46 = 0;
               } else {
                $137 = _read($134 | 0, $_pre2_i_i | 0, 8192) | 0;
                $len_0_i_i46 = ($137 | 0) < 0 ? 0 : $137;
               }
               HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i46;
               HEAP32[$127 >> 2] = $_pre2_i_i;
               $141 = $126 + 1056 + $len_0_i_i46 | 0;
               HEAP32[$129 >> 2] = $141;
               HEAP8[$141] = 92;
               $144 = HEAP32[$127 >> 2] | 0;
               $143 = HEAP32[$129 >> 2] | 0;
              }
              if ($144 >>> 0 >= $143 >>> 0) {
               label = 40;
               break L26;
              }
              $146 = HEAP8[$144] | 0;
              $147 = HEAP32[13912] | 0;
              $149 = HEAP32[$147 >> 2] | 0;
              if ($146 << 24 >> 24 == 92) {
               $_0_i = $149;
               $152 = $147;
              } else {
               $p1_0 = $149;
               $c_0_in = $146;
               break;
              }
             }
             HEAP32[$152 >> 2] = $_0_i;
             $154 = HEAP8[$_0_i] | 0;
             HEAP32[13924] = $154 & 255;
             L42 : do {
              if ($154 << 24 >> 24 == 92) {
               L43 : while (1) {
                $158 = HEAP32[13912] | 0;
                $160 = (HEAP32[$158 >> 2] | 0) + 1 | 0;
                HEAP32[$158 >> 2] = $160;
                $161 = HEAP8[$160] | 0;
                $162 = $161 & 255;
                HEAP32[13924] = $162;
                if ($161 << 24 >> 24 == 92) {
                 $165 = HEAP32[13912] | 0;
                 $166 = $165 | 0;
                 $167 = HEAP32[$166 >> 2] | 0;
                 $168 = $165 + 4 | 0;
                 $169 = HEAP32[$168 >> 2] | 0;
                 if ($167 >>> 0 < $169 >>> 0) {
                  $183 = $167;
                  $182 = $169;
                 } else {
                  $173 = HEAP32[$165 + 8 >> 2] | 0;
                  $_pre2_i_i_i = $165 + 1056 | 0;
                  if (($173 | 0) == -1) {
                   $len_0_i_i_i53 = 0;
                  } else {
                   $176 = _read($173 | 0, $_pre2_i_i_i | 0, 8192) | 0;
                   $len_0_i_i_i53 = ($176 | 0) < 0 ? 0 : $176;
                  }
                  HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i53;
                  HEAP32[$166 >> 2] = $_pre2_i_i_i;
                  $180 = $165 + 1056 + $len_0_i_i_i53 | 0;
                  HEAP32[$168 >> 2] = $180;
                  HEAP8[$180] = 92;
                  $183 = HEAP32[$166 >> 2] | 0;
                  $182 = HEAP32[$168 >> 2] | 0;
                 }
                 if ($183 >>> 0 < $182 >>> 0) {
                  $_0_i_i_i = HEAPU8[$183] | 0;
                 } else {
                  HEAP32[$166 >> 2] = $182;
                  $_0_i_i_i = -1;
                 }
                 HEAP32[13924] = $_0_i_i_i;
                 $189 = $_0_i_i_i;
                } else {
                 $189 = $162;
                }
                do {
                 if (($189 | 0) == 10) {
                  $192 = (HEAP32[13912] | 0) + 16 | 0;
                  HEAP32[$192 >> 2] = (HEAP32[$192 >> 2] | 0) + 1;
                  $196 = HEAP32[13912] | 0;
                  $198 = (HEAP32[$196 >> 2] | 0) + 1 | 0;
                  HEAP32[$196 >> 2] = $198;
                  $199 = HEAP8[$198] | 0;
                  $200 = $199 & 255;
                  HEAP32[13924] = $200;
                  if ($199 << 24 >> 24 != 92) {
                   $299 = $200;
                   break;
                  }
                  $203 = HEAP32[13912] | 0;
                  $204 = $203 | 0;
                  $205 = HEAP32[$204 >> 2] | 0;
                  $206 = $203 + 4 | 0;
                  $207 = HEAP32[$206 >> 2] | 0;
                  if ($205 >>> 0 < $207 >>> 0) {
                   $221 = $205;
                   $220 = $207;
                  } else {
                   $211 = HEAP32[$203 + 8 >> 2] | 0;
                   $_pre2_i_i_i56 = $203 + 1056 | 0;
                   if (($211 | 0) == -1) {
                    $len_0_i_i_i58 = 0;
                   } else {
                    $214 = _read($211 | 0, $_pre2_i_i_i56 | 0, 8192) | 0;
                    $len_0_i_i_i58 = ($214 | 0) < 0 ? 0 : $214;
                   }
                   HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i58;
                   HEAP32[$204 >> 2] = $_pre2_i_i_i56;
                   $218 = $203 + 1056 + $len_0_i_i_i58 | 0;
                   HEAP32[$206 >> 2] = $218;
                   HEAP8[$218] = 92;
                   $221 = HEAP32[$204 >> 2] | 0;
                   $220 = HEAP32[$206 >> 2] | 0;
                  }
                  if ($221 >>> 0 < $220 >>> 0) {
                   $_0_i_i_i62 = HEAPU8[$221] | 0;
                  } else {
                   HEAP32[$204 >> 2] = $220;
                   $_0_i_i_i62 = -1;
                  }
                  HEAP32[13924] = $_0_i_i_i62;
                  $299 = $_0_i_i_i62;
                 } else if (($189 | 0) == 13) {
                  $229 = HEAP32[13912] | 0;
                  $231 = (HEAP32[$229 >> 2] | 0) + 1 | 0;
                  HEAP32[$229 >> 2] = $231;
                  $232 = HEAP8[$231] | 0;
                  $233 = $232 & 255;
                  HEAP32[13924] = $233;
                  if ($232 << 24 >> 24 == 92) {
                   $236 = HEAP32[13912] | 0;
                   $237 = $236 | 0;
                   $238 = HEAP32[$237 >> 2] | 0;
                   $239 = $236 + 4 | 0;
                   $240 = HEAP32[$239 >> 2] | 0;
                   if ($238 >>> 0 < $240 >>> 0) {
                    $254 = $238;
                    $253 = $240;
                   } else {
                    $244 = HEAP32[$236 + 8 >> 2] | 0;
                    $_pre2_i_i_i65 = $236 + 1056 | 0;
                    if (($244 | 0) == -1) {
                     $len_0_i_i_i67 = 0;
                    } else {
                     $247 = _read($244 | 0, $_pre2_i_i_i65 | 0, 8192) | 0;
                     $len_0_i_i_i67 = ($247 | 0) < 0 ? 0 : $247;
                    }
                    HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i67;
                    HEAP32[$237 >> 2] = $_pre2_i_i_i65;
                    $251 = $236 + 1056 + $len_0_i_i_i67 | 0;
                    HEAP32[$239 >> 2] = $251;
                    HEAP8[$251] = 92;
                    $254 = HEAP32[$237 >> 2] | 0;
                    $253 = HEAP32[$239 >> 2] | 0;
                   }
                   if ($254 >>> 0 < $253 >>> 0) {
                    $_0_i_i_i71 = HEAPU8[$254] | 0;
                   } else {
                    HEAP32[$237 >> 2] = $253;
                    $_0_i_i_i71 = -1;
                   }
                   HEAP32[13924] = $_0_i_i_i71;
                   $260 = $_0_i_i_i71;
                  } else {
                   $260 = $233;
                  }
                  if (($260 | 0) != 10) {
                   break L43;
                  }
                  $264 = (HEAP32[13912] | 0) + 16 | 0;
                  HEAP32[$264 >> 2] = (HEAP32[$264 >> 2] | 0) + 1;
                  $268 = HEAP32[13912] | 0;
                  $270 = (HEAP32[$268 >> 2] | 0) + 1 | 0;
                  HEAP32[$268 >> 2] = $270;
                  $271 = HEAP8[$270] | 0;
                  $272 = $271 & 255;
                  HEAP32[13924] = $272;
                  if ($271 << 24 >> 24 != 92) {
                   $299 = $272;
                   break;
                  }
                  $275 = HEAP32[13912] | 0;
                  $276 = $275 | 0;
                  $277 = HEAP32[$276 >> 2] | 0;
                  $278 = $275 + 4 | 0;
                  $279 = HEAP32[$278 >> 2] | 0;
                  if ($277 >>> 0 < $279 >>> 0) {
                   $293 = $277;
                   $292 = $279;
                  } else {
                   $283 = HEAP32[$275 + 8 >> 2] | 0;
                   $_pre2_i_i_i74 = $275 + 1056 | 0;
                   if (($283 | 0) == -1) {
                    $len_0_i_i_i76 = 0;
                   } else {
                    $286 = _read($283 | 0, $_pre2_i_i_i74 | 0, 8192) | 0;
                    $len_0_i_i_i76 = ($286 | 0) < 0 ? 0 : $286;
                   }
                   HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i76;
                   HEAP32[$276 >> 2] = $_pre2_i_i_i74;
                   $290 = $275 + 1056 + $len_0_i_i_i76 | 0;
                   HEAP32[$278 >> 2] = $290;
                   HEAP8[$290] = 92;
                   $293 = HEAP32[$276 >> 2] | 0;
                   $292 = HEAP32[$278 >> 2] | 0;
                  }
                  if ($293 >>> 0 < $292 >>> 0) {
                   $_0_i_i_i80 = HEAPU8[$293] | 0;
                  } else {
                   HEAP32[$276 >> 2] = $292;
                   $_0_i_i_i80 = -1;
                  }
                  HEAP32[13924] = $_0_i_i_i80;
                  $299 = $_0_i_i_i80;
                 } else {
                  break L43;
                 }
                } while (0);
                if (($299 | 0) != 92) {
                 break L42;
                }
               }
               _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
               STACKTOP = tempVarArgs;
              }
             } while (0);
             $304 = HEAP32[HEAP32[13912] >> 2] | 0;
             $p1_0 = $304;
             $c_0_in = HEAP8[$304] | 0;
            } else {
             $p1_0 = $118;
             $c_0_in = $119;
            }
           } while (0);
           $c_0 = $c_0_in & 255;
           if (($c_0 | 0) == 42) {
            $308 = (_parse_comment($p1_0) | 0) - 1 | 0;
            HEAP32[HEAP32[13912] >> 2] = $308;
            break L28;
           } else if (($c_0 | 0) == 47) {
            $313 = (_parse_line_comment($p1_0) | 0) - 1 | 0;
            HEAP32[HEAP32[13912] >> 2] = $313;
            break L28;
           } else {
            break L26;
           }
           break;
          }
         default:
          {
           $t_0 = $113;
           break L24;
          }
         }
        } while (0);
        _minp();
        $113 = HEAP32[13924] | 0;
       }
       if ((label | 0) == 40) {
        HEAP32[$127 >> 2] = $143;
       }
       $t_0 = HEAP32[13924] | 0;
      }
     } while (0);
     if (($t_0 | 0) != 40) {
      $_0 = -1;
      STACKTOP = sp;
      return $_0 | 0;
     }
     _next_nomacro();
     _next_nomacro();
     HEAP32[$args >> 2] = 0;
     $319 = HEAP32[$s + 24 >> 2] | 0;
     $320 = ($319 | 0) != 0;
     L112 : do {
      if ((HEAP32[5310] | 0) == 41 & ($320 ^ 1)) {
       $sa_0_lcssa = $319;
       label = 125;
      } else {
       $323 = $str | 0;
       $324 = $str + 4 | 0;
       $325 = $str + 8 | 0;
       $326 = $str + 12 | 0;
       $327 = $s | 0;
       $sa_0115 = $319;
       $328 = $320;
       while (1) {
        if (!$328) {
         $331 = _get_tok_str(HEAP32[$327 >> 2] | 0, 0) | 0;
         _tcc_error(14152, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $331, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        HEAP32[$323 >> 2] = 0;
        HEAP32[$324 >> 2] = 0;
        HEAP32[$325 >> 2] = 0;
        HEAP32[$326 >> 2] = -1;
        $333 = $sa_0115 + 16 | 0;
        $parlevel_0_ph = 0;
        $_ph159 = 0;
        L119 : while (1) {
         $parlevel_0 = $parlevel_0_ph;
         $334 = $_ph159;
         $_old_pr = HEAP32[5310] | 0;
         L121 : while (1) {
          L123 : do {
           if (($parlevel_0 | 0) > 0) {
            switch ($_old_pr | 0) {
            case 40:
             {
              label = 100;
              break L123;
              break;
             }
            case 41:
             {
              break;
             }
            case 10:
             {
              label = 102;
              break L123;
              break;
             }
            case 32:
            case 12:
            case 11:
            case 9:
            case 13:
             {
              $344 = $_old_pr;
              label = 103;
              break L123;
              break;
             }
            case -1:
             {
              break L119;
              break;
             }
            default:
             {
              $storemerge_i = 0;
              $346 = $_old_pr;
              $parlevel_1154 = $parlevel_0;
              label = 104;
              break L123;
             }
            }
            $storemerge_i = 0;
            $346 = 41;
            $parlevel_1154 = $parlevel_0 - 1 | 0;
            label = 104;
           } else {
            switch ($_old_pr | 0) {
            case 44:
             {
              break;
             }
            case 40:
             {
              label = 100;
              break L123;
              break;
             }
            case 10:
             {
              label = 102;
              break L123;
              break;
             }
            case 32:
            case 12:
            case 11:
            case 9:
            case 13:
             {
              $344 = $_old_pr;
              label = 103;
              break L123;
              break;
             }
            case 41:
            case -1:
             {
              break L119;
              break;
             }
            default:
             {
              $storemerge_i = 0;
              $346 = $_old_pr;
              $parlevel_1154 = $parlevel_0;
              label = 104;
              break L123;
             }
            }
            if ((HEAP32[$333 >> 2] | 0) == 0) {
             break L119;
            } else {
             $storemerge_i = 0;
             $346 = 44;
             $parlevel_1154 = $parlevel_0;
             label = 104;
            }
           }
          } while (0);
          if ((label | 0) == 100) {
           label = 0;
           $storemerge_i = 0;
           $346 = 40;
           $parlevel_1154 = $parlevel_0 + 1 | 0;
           label = 104;
          } else if ((label | 0) == 102) {
           label = 0;
           HEAP32[5310] = 32;
           $344 = 32;
           label = 103;
          }
          if ((label | 0) == 103) {
           label = 0;
           if (($334 | 0) == 0) {
            $storemerge_i = 1;
            $346 = $344;
            $parlevel_1154 = $parlevel_0;
            label = 104;
           } else {
            $347 = $334;
            $parlevel_1152 = $parlevel_0;
           }
          }
          if ((label | 0) == 104) {
           label = 0;
           _tok_str_add2($str, $346, 21208);
           $347 = $storemerge_i;
           $parlevel_1152 = $parlevel_1154;
          }
          $348 = HEAP32[5350] | 0;
          if (($348 | 0) == 0) {
           label = 117;
           break;
          }
          $350 = HEAP32[$348 >> 2] | 0;
          HEAP32[5310] = $350;
          if (($350 | 0) == 0) {
           $parlevel_0 = $parlevel_1152;
           $334 = $347;
           $_old_pr = 0;
           continue;
          } else {
           $352 = $348;
          }
          while (1) {
           $353 = $352 + 4 | 0;
           $354 = HEAP32[$352 >> 2] | 0;
           HEAP32[5310] = $354;
           switch ($354 | 0) {
           case 179:
           case 200:
           case 180:
           case 183:
           case 185:
           case 186:
            {
             HEAP32[5302] = HEAP32[$353 >> 2];
             $p_1_i_i43_ph = $352 + 8 | 0;
             break;
            }
           case 181:
           case 184:
           case 206:
            {
             HEAP32[5302] = $353;
             HEAP32[$352 + 8 >> 2] = $352 + 20;
             $p_1_i_i43_ph = $352 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
             break;
            }
           case 193:
            {
             $n_0_ph_i_i36 = 3;
             label = 112;
             break;
            }
           case 192:
           case 201:
           case 202:
            {
             $n_0_ph_i_i36 = 2;
             label = 112;
             break;
            }
           default:
            {
             label = 108;
             break L121;
            }
           }
           if ((label | 0) == 112) {
            label = 0;
            $tab_0_i_i40 = 21208;
            $n_0_i_i39 = $n_0_ph_i_i36;
            $p_0_i_i38 = $353;
            while (1) {
             HEAP32[$tab_0_i_i40 >> 2] = HEAP32[$p_0_i_i38 >> 2];
             $373 = $n_0_i_i39 - 1 | 0;
             if (($373 | 0) == 0) {
              break;
             } else {
              $tab_0_i_i40 = $tab_0_i_i40 + 4 | 0;
              $n_0_i_i39 = $373;
              $p_0_i_i38 = $p_0_i_i38 + 4 | 0;
             }
            }
            $p_1_i_i43_ph = $352 + ($n_0_ph_i_i36 + 1 << 2) | 0;
           }
           $_pr91 = HEAP32[5310] | 0;
           HEAP32[5350] = $p_1_i_i43_ph;
           if (($_pr91 | 0) != 186) {
            $parlevel_0 = $parlevel_1152;
            $334 = $347;
            $_old_pr = $_pr91;
            continue L121;
           }
           HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
           $381 = HEAP32[5350] | 0;
           $382 = HEAP32[$381 >> 2] | 0;
           HEAP32[5310] = $382;
           if (($382 | 0) == 0) {
            $parlevel_0 = $parlevel_1152;
            $334 = $347;
            $_old_pr = 0;
            continue L121;
           } else {
            $352 = $381;
           }
          }
         }
         if ((label | 0) == 108) {
          label = 0;
          HEAP32[5350] = $353;
          $parlevel_0_ph = $parlevel_1152;
          $_ph159 = $347;
          continue;
         } else if ((label | 0) == 117) {
          label = 0;
          _next_nomacro1();
          $parlevel_0_ph = $parlevel_1152;
          $_ph159 = $347;
          continue;
         }
        }
        $386 = (HEAP32[$324 >> 2] | 0) - $334 | 0;
        HEAP32[$324 >> 2] = $386;
        $387 = HEAP32[$323 >> 2] | 0;
        $388 = HEAP32[$325 >> 2] | 0;
        if (($386 | 0) < ($388 | 0)) {
         $397 = $387;
        } else {
         $len_0_i_i = ($388 | 0) == 0 ? 8 : $388 << 1;
         $396 = _tcc_realloc($387, $len_0_i_i << 2) | 0;
         HEAP32[$325 >> 2] = $len_0_i_i;
         HEAP32[$323 >> 2] = $396;
         $397 = $396;
        }
        HEAP32[$397 + ($386 << 2) >> 2] = 0;
        HEAP32[$324 >> 2] = $386 + 1;
        HEAP32[(_sym_push2($args, HEAP32[$sa_0115 >> 2] & -536870913, HEAP32[$333 >> 2] | 0, 0) | 0) + 12 >> 2] = $397;
        $407 = HEAP32[$sa_0115 + 24 >> 2] | 0;
        $408 = HEAP32[5310] | 0;
        if (($408 | 0) == 41) {
         if (($407 | 0) == 0) {
          break L112;
         }
         if ((HEAP32[$407 + 16 >> 2] | 0) != 0 & (HEAP32[1888] | 0) != 0) {
          $sa_0115 = $407;
          $328 = 1;
          continue;
         } else {
          $_pre_phi147 = $327;
          label = 127;
          break L112;
         }
        } else if (($408 | 0) != 44) {
         _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 14120, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        _next_nomacro();
        $420 = ($407 | 0) != 0;
        if ((HEAP32[5310] | 0) == 41 & (((HEAP32[$args >> 2] | 0) != 0 | $420) ^ 1)) {
         $sa_0_lcssa = $407;
         label = 125;
         break;
        } else {
         $sa_0115 = $407;
         $328 = $420;
        }
       }
      }
     } while (0);
     do {
      if ((label | 0) == 125) {
       if (($sa_0_lcssa | 0) == 0) {
        break;
       }
       $_pre_phi147 = $s | 0;
       label = 127;
      }
     } while (0);
     if ((label | 0) == 127) {
      $423 = _get_tok_str(HEAP32[$_pre_phi147 >> 2] | 0, 0) | 0;
      _tcc_error(14016, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $423, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     $424 = HEAP32[$args >> 2] | 0;
     $426 = $cstr_i;
     $427 = $str_i | 0;
     HEAP32[$427 >> 2] = 0;
     $428 = $str_i + 4 | 0;
     HEAP32[$428 >> 2] = 0;
     $429 = $str_i + 8 | 0;
     HEAP32[$429 >> 2] = 0;
     HEAP32[$str_i + 12 >> 2] = -1;
     $431 = $cval_i;
     $432 = $cval_i;
     $433 = $cstr_i | 0;
     $434 = $cstr_i + 8 | 0;
     $_phi_trans_insert_i_i_i = $cstr_i + 4 | 0;
     $435 = $cstr_i + 12 | 0;
     $last_tok_0_i = 0;
     $436 = $83;
     L168 : while (1) {
      $437 = $436 + 4 | 0;
      $438 = HEAP32[$436 >> 2] | 0;
      switch ($438 | 0) {
      case 179:
      case 200:
      case 180:
      case 183:
      case 185:
      case 186:
       {
        HEAP32[$431 >> 2] = HEAP32[$437 >> 2];
        $p_1_i_i = $436 + 8 | 0;
        break;
       }
      case 181:
      case 184:
      case 206:
       {
        HEAP32[$432 >> 2] = $437;
        HEAP32[$436 + 8 >> 2] = $436 + 20;
        $p_1_i_i = $436 + ((((HEAP32[HEAP32[$432 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
        break;
       }
      case 193:
       {
        $n_0_ph_i_i = 3;
        label = 133;
        break;
       }
      case 192:
      case 201:
      case 202:
       {
        $n_0_ph_i_i = 2;
        label = 133;
        break;
       }
      default:
       {
        $p_1_i_i = $437;
       }
      }
      if ((label | 0) == 133) {
       label = 0;
       $tab_0_i_i = $431;
       $n_0_i_i = $n_0_ph_i_i;
       $p_0_i_i = $437;
       while (1) {
        HEAP32[$tab_0_i_i >> 2] = HEAP32[$p_0_i_i >> 2];
        $457 = $n_0_i_i - 1 | 0;
        if (($457 | 0) == 0) {
         break;
        } else {
         $tab_0_i_i = $tab_0_i_i + 4 | 0;
         $n_0_i_i = $457;
         $p_0_i_i = $p_0_i_i + 4 | 0;
        }
       }
       $p_1_i_i = $436 + ($n_0_ph_i_i + 1 << 2) | 0;
      }
      if (($438 | 0) == 0) {
       break;
      } else if (($438 | 0) != 35) {
       if (($438 | 0) <= 255) {
        _tok_str_add2($str_i, $438, $cval_i);
        $last_tok_0_i = $438;
        $436 = $p_1_i_i;
        continue;
       }
       $561 = _sym_find2($424, $438) | 0;
       if (($561 | 0) == 0) {
        $619 = HEAP32[$428 >> 2] | 0;
        $620 = HEAP32[$427 >> 2] | 0;
        $621 = HEAP32[$429 >> 2] | 0;
        if (($619 | 0) < ($621 | 0)) {
         $str_0_i_i = $620;
        } else {
         $len_0_i_i_i = ($621 | 0) == 0 ? 8 : $621 << 1;
         $629 = _tcc_realloc($620, $len_0_i_i_i << 2) | 0;
         HEAP32[$429 >> 2] = $len_0_i_i_i;
         HEAP32[$427 >> 2] = $629;
         $str_0_i_i = $629;
        }
        HEAP32[$str_0_i_i + ($619 << 2) >> 2] = $438;
        HEAP32[$428 >> 2] = $619 + 1;
        $last_tok_0_i = $438;
        $436 = $p_1_i_i;
        continue;
       }
       $566 = HEAP32[$561 + 12 >> 2] | 0;
       $569 = ($last_tok_0_i | 0) == 182;
       if (!((HEAP32[$p_1_i_i >> 2] | 0) == 182 | $569)) {
        _macro_subst($str_i, $nested_list, $566, 0);
        $last_tok_0_i = $438;
        $436 = $p_1_i_i;
        continue;
       }
       do {
        if ((HEAP32[1888] | 0) == 0) {
         $592 = $566;
        } else {
         if (!((HEAP32[$561 + 16 >> 2] | 0) != 0 & $569)) {
          $592 = $566;
          break;
         }
         $578 = HEAP32[$428 >> 2] | 0;
         if (($578 | 0) <= 1) {
          $592 = $566;
          break;
         }
         $581 = $578 - 2 | 0;
         if ((HEAP32[(HEAP32[$427 >> 2] | 0) + ($581 << 2) >> 2] | 0) != 44) {
          $592 = $566;
          break;
         }
         if ((HEAP32[$566 >> 2] | 0) == 0) {
          HEAP32[$428 >> 2] = $581;
          $last_tok_0_i = $438;
          $436 = $p_1_i_i;
          continue L168;
         } else {
          HEAP32[$428 >> 2] = $578 - 1;
          $592 = $566;
          break;
         }
        }
       } while (0);
       while (1) {
        $593 = $592 + 4 | 0;
        $594 = HEAP32[$592 >> 2] | 0;
        switch ($594 | 0) {
        case 179:
        case 200:
        case 180:
        case 183:
        case 185:
        case 186:
         {
          HEAP32[$431 >> 2] = HEAP32[$593 >> 2];
          $p_1_i36_i96 = $592 + 8 | 0;
          break;
         }
        case 181:
        case 184:
        case 206:
         {
          HEAP32[$432 >> 2] = $593;
          HEAP32[$592 + 8 >> 2] = $592 + 20;
          $p_1_i36_i = $592 + ((((HEAP32[HEAP32[$432 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
          label = 190;
          break;
         }
        case 193:
         {
          $n_0_ph_i29_i = 3;
          label = 187;
          break;
         }
        case 192:
        case 201:
        case 202:
         {
          $n_0_ph_i29_i = 2;
          label = 187;
          break;
         }
        default:
         {
          $p_1_i36_i = $593;
          label = 190;
         }
        }
        if ((label | 0) == 187) {
         label = 0;
         $tab_0_i33_i = $431;
         $n_0_i32_i = $n_0_ph_i29_i;
         $p_0_i31_i = $593;
         while (1) {
          HEAP32[$tab_0_i33_i >> 2] = HEAP32[$p_0_i31_i >> 2];
          $612 = $n_0_i32_i - 1 | 0;
          if (($612 | 0) == 0) {
           break;
          } else {
           $tab_0_i33_i = $tab_0_i33_i + 4 | 0;
           $n_0_i32_i = $612;
           $p_0_i31_i = $p_0_i31_i + 4 | 0;
          }
         }
         $p_1_i36_i = $592 + ($n_0_ph_i29_i + 1 << 2) | 0;
         label = 190;
        }
        if ((label | 0) == 190) {
         label = 0;
         if (($594 | 0) == 0) {
          $last_tok_0_i = $438;
          $436 = $p_1_i_i;
          continue L168;
         } else {
          $p_1_i36_i96 = $p_1_i36_i;
         }
        }
        _tok_str_add2($str_i, $594, $cval_i);
        $592 = $p_1_i36_i96;
       }
      }
      $461 = $p_1_i_i + 4 | 0;
      $462 = HEAP32[$p_1_i_i >> 2] | 0;
      switch ($462 | 0) {
      case 193:
       {
        $n_0_ph_i6_i = 3;
        label = 141;
        break;
       }
      case 192:
      case 201:
      case 202:
       {
        $n_0_ph_i6_i = 2;
        label = 141;
        break;
       }
      case 179:
      case 200:
      case 180:
      case 183:
      case 185:
      case 186:
       {
        HEAP32[$431 >> 2] = HEAP32[$461 >> 2];
        $p_1_i13_i94 = $p_1_i_i + 8 | 0;
        break;
       }
      case 181:
      case 184:
      case 206:
       {
        HEAP32[$432 >> 2] = $461;
        HEAP32[$p_1_i_i + 8 >> 2] = $p_1_i_i + 20;
        $p_1_i13_i94 = $p_1_i_i + ((((HEAP32[HEAP32[$432 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
        break;
       }
      default:
       {
        $p_1_i13_i = $461;
        label = 144;
       }
      }
      if ((label | 0) == 141) {
       label = 0;
       $tab_0_i10_i = $431;
       $n_0_i9_i = $n_0_ph_i6_i;
       $p_0_i8_i = $461;
       while (1) {
        HEAP32[$tab_0_i10_i >> 2] = HEAP32[$p_0_i8_i >> 2];
        $481 = $n_0_i9_i - 1 | 0;
        if (($481 | 0) == 0) {
         break;
        } else {
         $tab_0_i10_i = $tab_0_i10_i + 4 | 0;
         $n_0_i9_i = $481;
         $p_0_i8_i = $p_0_i8_i + 4 | 0;
        }
       }
       $p_1_i13_i = $p_1_i_i + ($n_0_ph_i6_i + 1 << 2) | 0;
       label = 144;
      }
      if ((label | 0) == 144) {
       label = 0;
       if (($462 | 0) == 0) {
        break;
       } else {
        $p_1_i13_i94 = $p_1_i13_i;
       }
      }
      $485 = _sym_find2($424, $462) | 0;
      if (($485 | 0) == 0) {
       _tok_str_add2($str_i, $462, $cval_i);
       $last_tok_0_i = $462;
       $436 = $p_1_i13_i94;
       continue;
      }
      _memset($426 | 0, 0, 16) | 0;
      $_ph99 = HEAP32[$485 + 12 >> 2] | 0;
      $_ph98 = 0;
      $_ph = $462;
      L232 : while (1) {
       $491 = ($_ph98 | 0) == 0;
       $493 = $_ph99;
       $492 = $_ph;
       L234 : while (1) {
        $494 = HEAP32[$493 >> 2] | 0;
        if (($494 | 0) == 0) {
         break L232;
        }
        $497 = $493 + 4 | 0;
        switch ($494 | 0) {
        case 179:
        case 200:
        case 180:
        case 183:
        case 185:
        case 186:
         {
          HEAP32[$431 >> 2] = HEAP32[$497 >> 2];
          $p_1_i24_i = $493 + 8 | 0;
          break;
         }
        case 181:
        case 184:
        case 206:
         {
          HEAP32[$432 >> 2] = $497;
          HEAP32[$493 + 8 >> 2] = $493 + 20;
          $p_1_i24_i = $493 + ((((HEAP32[HEAP32[$432 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
          break;
         }
        case 193:
         {
          $n_0_ph_i17_i = 3;
          label = 153;
          break;
         }
        case 192:
        case 201:
        case 202:
         {
          $n_0_ph_i17_i = 2;
          label = 153;
          break;
         }
        default:
         {
          $p_1_i24_i = $497;
         }
        }
        if ((label | 0) == 153) {
         label = 0;
         $tab_0_i21_i = $431;
         $n_0_i20_i = $n_0_ph_i17_i;
         $p_0_i19_i = $497;
         while (1) {
          HEAP32[$tab_0_i21_i >> 2] = HEAP32[$p_0_i19_i >> 2];
          $516 = $n_0_i20_i - 1 | 0;
          if (($516 | 0) == 0) {
           break;
          } else {
           $tab_0_i21_i = $tab_0_i21_i + 4 | 0;
           $n_0_i20_i = $516;
           $p_0_i19_i = $p_0_i19_i + 4 | 0;
          }
         }
         $p_1_i24_i = $493 + ($n_0_ph_i17_i + 1 << 2) | 0;
        }
        switch ($494 | 0) {
        case 32:
        case 12:
        case 11:
        case 9:
        case 13:
         {
          break;
         }
        default:
         {
          $storemerge_i_i = 0;
          break L234;
         }
        }
        if ($491) {
         $storemerge_i_i = 1;
         break;
        } else {
         $493 = $p_1_i24_i;
         $492 = $494;
        }
       }
       $520 = _get_tok_str($494, $cval_i) | 0;
       $521 = HEAP8[$520] | 0;
       if ($521 << 24 >> 24 == 0) {
        $_ph99 = $p_1_i24_i;
        $_ph98 = $storemerge_i_i;
        $_ph = $494;
        continue;
       }
       $_01_i_i = $520;
       $525 = $521;
       $524 = HEAP32[$433 >> 2] | 0;
       while (1) {
        $526 = $524 + 1 | 0;
        $527 = HEAP32[$434 >> 2] | 0;
        if (($524 | 0) < ($527 | 0)) {
         $536 = HEAP32[$_phi_trans_insert_i_i_i >> 2] | 0;
        } else {
         $size_0_i_i_i_i = ($527 | 0) == 0 ? 8 : $527;
         while (1) {
          if (($size_0_i_i_i_i | 0) < ($526 | 0)) {
           $size_0_i_i_i_i = $size_0_i_i_i_i << 1;
          } else {
           break;
          }
         }
         $535 = _tcc_realloc(HEAP32[$435 >> 2] | 0, $size_0_i_i_i_i) | 0;
         HEAP32[$435 >> 2] = $535;
         HEAP32[$434 >> 2] = $size_0_i_i_i_i;
         HEAP32[$_phi_trans_insert_i_i_i >> 2] = $535;
         $536 = $535;
        }
        HEAP8[$536 + $524 | 0] = $525;
        HEAP32[$433 >> 2] = $526;
        $538 = $_01_i_i + 1 | 0;
        $539 = HEAP8[$538] | 0;
        if ($539 << 24 >> 24 == 0) {
         $_ph99 = $p_1_i24_i;
         $_ph98 = $storemerge_i_i;
         $_ph = $494;
         continue L232;
        } else {
         $_01_i_i = $538;
         $525 = $539;
         $524 = $526;
        }
       }
      }
      $543 = (HEAP32[$433 >> 2] | 0) - $_ph98 | 0;
      HEAP32[$433 >> 2] = $543;
      $544 = $543 + 1 | 0;
      $545 = HEAP32[$434 >> 2] | 0;
      if (($543 | 0) < ($545 | 0)) {
       $554 = HEAP32[$_phi_trans_insert_i_i_i >> 2] | 0;
      } else {
       $size_0_i_i_i31 = ($545 | 0) == 0 ? 8 : $545;
       while (1) {
        if (($size_0_i_i_i31 | 0) < ($544 | 0)) {
         $size_0_i_i_i31 = $size_0_i_i_i31 << 1;
        } else {
         break;
        }
       }
       $553 = _tcc_realloc(HEAP32[$435 >> 2] | 0, $size_0_i_i_i31) | 0;
       HEAP32[$435 >> 2] = $553;
       HEAP32[$434 >> 2] = $size_0_i_i_i31;
       HEAP32[$_phi_trans_insert_i_i_i >> 2] = $553;
       $554 = $553;
      }
      HEAP8[$554 + $543 | 0] = 0;
      HEAP32[$433 >> 2] = $544;
      HEAP32[$432 >> 2] = $cstr_i;
      _tok_str_add2($str_i, 181, $cval_i);
      _tcc_free(HEAP32[$435 >> 2] | 0);
      _memset($426 | 0, 0, 16) | 0;
      $last_tok_0_i = $492;
      $436 = $p_1_i13_i94;
     }
     $634 = HEAP32[$428 >> 2] | 0;
     $635 = HEAP32[$427 >> 2] | 0;
     $636 = HEAP32[$429 >> 2] | 0;
     if (($634 | 0) < ($636 | 0)) {
      $645 = $635;
     } else {
      $len_0_i_i38_i = ($636 | 0) == 0 ? 8 : $636 << 1;
      $644 = _tcc_realloc($635, $len_0_i_i38_i << 2) | 0;
      HEAP32[$429 >> 2] = $len_0_i_i38_i;
      HEAP32[$427 >> 2] = $644;
      $645 = $644;
     }
     HEAP32[$645 + ($634 << 2) >> 2] = 0;
     $647 = HEAP32[$args >> 2] | 0;
     if (($647 | 0) == 0) {
      $mstr_0 = $645;
      $mstr_allocated_0 = 1;
      break;
     } else {
      $sa_297 = $647;
     }
     while (1) {
      $650 = HEAP32[$sa_297 + 28 >> 2] | 0;
      _tcc_free(HEAP32[$sa_297 + 12 >> 2] | 0);
      _sym_free($sa_297);
      if (($650 | 0) == 0) {
       $mstr_0 = $645;
       $mstr_allocated_0 = 1;
       break;
      } else {
       $sa_297 = $650;
      }
     }
    } else {
     $mstr_0 = $83;
     $mstr_allocated_0 = 0;
    }
   } while (0);
   _sym_push2($nested_list, HEAP32[$s >> 2] | 0, 0, 0) | 0;
   _macro_subst($tok_str, $nested_list, $mstr_0, $can_read_stream);
   $659 = HEAP32[$nested_list >> 2] | 0;
   HEAP32[$nested_list >> 2] = HEAP32[$659 + 28 >> 2];
   _sym_free($659);
   if (!$mstr_allocated_0) {
    $_0 = 0;
    STACKTOP = sp;
    return $_0 | 0;
   }
   _tcc_free($mstr_0);
   $_0 = 0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 $40 = $cstr;
 _memset($40 | 0, 0, 16) | 0;
 $41 = HEAP8[$cstrval_1] | 0;
 $_pre142 = $cstr | 0;
 $_pre144 = $cstr + 8 | 0;
 do {
  if ($41 << 24 >> 24 == 0) {
   $65 = 0;
   $64 = 0;
   $63 = 1;
   label = 18;
  } else {
   $_phi_trans_insert_i_i = $cstr + 4 | 0;
   $43 = $cstr + 12 | 0;
   $_01_i = $cstrval_1;
   $46 = $41;
   $45 = 0;
   $44 = 0;
   while (1) {
    $47 = $45 + 1 | 0;
    if (($45 | 0) < ($44 | 0)) {
     $56 = HEAP32[$_phi_trans_insert_i_i >> 2] | 0;
    } else {
     $size_0_i_i_i = ($44 | 0) == 0 ? 8 : $44;
     while (1) {
      if (($size_0_i_i_i | 0) < ($47 | 0)) {
       $size_0_i_i_i = $size_0_i_i_i << 1;
      } else {
       break;
      }
     }
     $55 = _tcc_realloc(HEAP32[$43 >> 2] | 0, $size_0_i_i_i) | 0;
     HEAP32[$43 >> 2] = $55;
     HEAP32[$_pre144 >> 2] = $size_0_i_i_i;
     HEAP32[$_phi_trans_insert_i_i >> 2] = $55;
     $56 = $55;
    }
    HEAP8[$56 + $45 | 0] = $46;
    HEAP32[$_pre142 >> 2] = $47;
    $58 = $_01_i + 1 | 0;
    $59 = HEAP8[$58] | 0;
    $_pre139 = HEAP32[$_pre144 >> 2] | 0;
    if ($59 << 24 >> 24 == 0) {
     break;
    } else {
     $_01_i = $58;
     $46 = $59;
     $45 = $47;
     $44 = $_pre139;
    }
   }
   $61 = $45 + 2 | 0;
   if (($47 | 0) >= ($_pre139 | 0)) {
    $65 = $_pre139;
    $64 = $47;
    $63 = $61;
    label = 18;
    break;
   }
   $76 = HEAP32[$cstr + 4 >> 2] | 0;
   $_pre_phi = $cstr + 12 | 0;
   $75 = $47;
   $74 = $61;
  }
 } while (0);
 if ((label | 0) == 18) {
  $size_0_i_i = ($65 | 0) == 0 ? 8 : $65;
  while (1) {
   if (($size_0_i_i | 0) < ($63 | 0)) {
    $size_0_i_i = $size_0_i_i << 1;
   } else {
    break;
   }
  }
  $70 = $cstr + 12 | 0;
  $72 = _tcc_realloc(HEAP32[$70 >> 2] | 0, $size_0_i_i) | 0;
  HEAP32[$70 >> 2] = $72;
  HEAP32[$_pre144 >> 2] = $size_0_i_i;
  HEAP32[$cstr + 4 >> 2] = $72;
  $76 = $72;
  $_pre_phi = $70;
  $75 = $64;
  $74 = $63;
 }
 HEAP8[$76 + $75 | 0] = 0;
 HEAP32[$_pre142 >> 2] = $74;
 HEAP32[$cval >> 2] = $cstr;
 _tok_str_add2($tok_str, $t1_0, $cval);
 _tcc_free(HEAP32[$_pre_phi >> 2] | 0);
 _memset($40 | 0, 0, 16) | 0;
 $_0 = 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _expr_land() {
 var $cval_i_sroa_4_i = 0, $1 = 0, $3 = 0, $6 = 0, $7 = 0, $9 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $35 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $54 = 0, $55 = 0, $57 = 0, $60 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, $75 = 0, $76 = 0, $78 = 0, $_pr = 0, $88 = 0, $90 = 0, $91 = 0, $93 = 0, $96 = 0, $97 = 0, $99 = 0, $102 = 0, $105 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $120 = 0, $126 = 0, $_lcssa583 = 0, $130 = 0, $132 = 0, $133 = 0, $135 = 0, $138 = 0, $139 = 0, $141 = 0, $144 = 0, $147 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $156 = 0, $159 = 0, $160 = 0, $162 = 0, $172 = 0, $174 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $184 = 0, $185 = 0, $187 = 0, $190 = 0, $193 = 0, $196 = 0, $197 = 0, $199 = 0, $200 = 0, $202 = 0, $205 = 0, $206 = 0, $208 = 0, $214 = 0, $217 = 0, $219 = 0, $221 = 0, $222 = 0, $224 = 0, $227 = 0, $228 = 0, $230 = 0, $233 = 0, $236 = 0, $239 = 0, $240 = 0, $242 = 0, $243 = 0, $245 = 0, $248 = 0, $249 = 0, $251 = 0, $_pr422 = 0, $261 = 0, $263 = 0, $265 = 0, $266 = 0, $268 = 0, $271 = 0, $272 = 0, $274 = 0, $277 = 0, $280 = 0, $283 = 0, $284 = 0, $286 = 0, $287 = 0, $289 = 0, $292 = 0, $293 = 0, $295 = 0, $301 = 0, $_lcssa559 = 0, $305 = 0, $307 = 0, $308 = 0, $310 = 0, $313 = 0, $314 = 0, $316 = 0, $319 = 0, $322 = 0, $325 = 0, $326 = 0, $328 = 0, $329 = 0, $331 = 0, $334 = 0, $335 = 0, $337 = 0, $351 = 0, $p_01_i = 0, $356 = 0, $362 = 0, $365 = 0, $_lcssa523 = 0, $368 = 0, $369 = 0, $373 = 0, $378 = 0, $385 = 0, $386 = 0, $387 = 0, $392 = 0, $396 = 0, $397 = 0, $398 = 0, $400 = 0, $401 = 0, $403 = 0, $406 = 0, $407 = 0, $409 = 0, $412 = 0, $415 = 0, $418 = 0, $419 = 0, $421 = 0, $422 = 0, $424 = 0, $427 = 0, $428 = 0, $430 = 0, $436 = 0, $439 = 0, $441 = 0, $443 = 0, $444 = 0, $446 = 0, $449 = 0, $450 = 0, $452 = 0, $455 = 0, $458 = 0, $461 = 0, $462 = 0, $464 = 0, $465 = 0, $467 = 0, $470 = 0, $471 = 0, $473 = 0, $_pr424 = 0, $483 = 0, $485 = 0, $487 = 0, $488 = 0, $490 = 0, $493 = 0, $494 = 0, $496 = 0, $499 = 0, $502 = 0, $505 = 0, $506 = 0, $508 = 0, $509 = 0, $511 = 0, $514 = 0, $515 = 0, $517 = 0, $523 = 0, $_lcssa459 = 0, $527 = 0, $529 = 0, $530 = 0, $532 = 0, $535 = 0, $536 = 0, $538 = 0, $541 = 0, $544 = 0, $547 = 0, $548 = 0, $550 = 0, $551 = 0, $553 = 0, $556 = 0, $557 = 0, $559 = 0, $569 = 0, $_lcssa472 = 0, $572 = 0, $574 = 0, $575 = 0, $577 = 0, $580 = 0, $581 = 0, $583 = 0, $586 = 0, $589 = 0, $592 = 0, $593 = 0, $595 = 0, $596 = 0, $598 = 0, $601 = 0, $602 = 0, $604 = 0, $610 = 0, $613 = 0, $615 = 0, $617 = 0, $618 = 0, $620 = 0, $623 = 0, $624 = 0, $626 = 0, $629 = 0, $632 = 0, $635 = 0, $636 = 0, $638 = 0, $639 = 0, $641 = 0, $644 = 0, $645 = 0, $647 = 0, $_pr427 = 0, $657 = 0, $659 = 0, $661 = 0, $662 = 0, $664 = 0, $667 = 0, $668 = 0, $670 = 0, $673 = 0, $676 = 0, $679 = 0, $680 = 0, $682 = 0, $683 = 0, $685 = 0, $688 = 0, $689 = 0, $691 = 0, $697 = 0, $_lcssa508 = 0, $701 = 0, $703 = 0, $704 = 0, $706 = 0, $709 = 0, $710 = 0, $712 = 0, $715 = 0, $718 = 0, $721 = 0, $722 = 0, $724 = 0, $725 = 0, $727 = 0, $730 = 0, $731 = 0, $733 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval_i_sroa_4_i = sp | 0;
 _expr_sum();
 $1 = HEAP32[5310] | 0;
 if (($1 - 1 | 0) >>> 0 < 2 >>> 0) {
  $6 = $1;
  while (1) {
   _next();
   _expr_sum();
   _gen_op($6);
   $7 = HEAP32[5310] | 0;
   if (($7 - 1 | 0) >>> 0 < 2 >>> 0) {
    $6 = $7;
   } else {
    $3 = $7;
    break;
   }
  }
 } else {
  $3 = $1;
 }
 if (($3 - 150 | 0) >>> 0 < 10 >>> 0 | ($3 & -2 | 0) == 146) {
  $12 = $3;
  while (1) {
   _next();
   _expr_sum();
   $13 = HEAP32[5310] | 0;
   if (($13 - 1 | 0) >>> 0 < 2 >>> 0) {
    $15 = $13;
    do {
     _next();
     _expr_sum();
     _gen_op($15);
     $15 = HEAP32[5310] | 0;
    } while (($15 - 1 | 0) >>> 0 < 2 >>> 0);
   }
   _gen_op($12);
   $18 = HEAP32[5310] | 0;
   if (($18 - 150 | 0) >>> 0 < 10 >>> 0 | ($18 & -2 | 0) == 146) {
    $12 = $18;
   } else {
    $9 = $18;
    break;
   }
  }
 } else {
  $9 = $3;
 }
 if (($9 & -2 | 0) == 148) {
  $23 = $9;
  while (1) {
   _next();
   _expr_sum();
   $24 = HEAP32[5310] | 0;
   if (($24 - 1 | 0) >>> 0 < 2 >>> 0) {
    $26 = $24;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($26);
     $27 = HEAP32[5310] | 0;
     if (($27 - 1 | 0) >>> 0 < 2 >>> 0) {
      $26 = $27;
     } else {
      $29 = $27;
      break;
     }
    }
   } else {
    $29 = $24;
   }
   if (($29 - 150 | 0) >>> 0 < 10 >>> 0 | ($29 & -2 | 0) == 146) {
    $32 = $29;
    do {
     _next();
     _expr_sum();
     $33 = HEAP32[5310] | 0;
     if (($33 - 1 | 0) >>> 0 < 2 >>> 0) {
      $35 = $33;
      do {
       _next();
       _expr_sum();
       _gen_op($35);
       $35 = HEAP32[5310] | 0;
      } while (($35 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($32);
     $32 = HEAP32[5310] | 0;
    } while (($32 - 150 | 0) >>> 0 < 10 >>> 0 | ($32 & -2 | 0) == 146);
   }
   _gen_op($23);
   $41 = HEAP32[5310] | 0;
   if (($41 & -2 | 0) == 148) {
    $23 = $41;
   } else {
    $21 = $41;
    break;
   }
  }
 } else {
  $21 = $9;
 }
 if (($21 | 0) == 38) {
  while (1) {
   _next();
   _expr_sum();
   $46 = HEAP32[5310] | 0;
   if (($46 - 1 | 0) >>> 0 < 2 >>> 0) {
    $48 = $46;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($48);
     $49 = HEAP32[5310] | 0;
     if (($49 - 1 | 0) >>> 0 < 2 >>> 0) {
      $48 = $49;
     } else {
      $51 = $49;
      break;
     }
    }
   } else {
    $51 = $46;
   }
   if (($51 - 150 | 0) >>> 0 < 10 >>> 0 | ($51 & -2 | 0) == 146) {
    $54 = $51;
    while (1) {
     _next();
     _expr_sum();
     $55 = HEAP32[5310] | 0;
     if (($55 - 1 | 0) >>> 0 < 2 >>> 0) {
      $57 = $55;
      do {
       _next();
       _expr_sum();
       _gen_op($57);
       $57 = HEAP32[5310] | 0;
      } while (($57 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($54);
     $60 = HEAP32[5310] | 0;
     if (($60 - 150 | 0) >>> 0 < 10 >>> 0 | ($60 & -2 | 0) == 146) {
      $54 = $60;
     } else {
      $63 = $60;
      break;
     }
    }
   } else {
    $63 = $51;
   }
   if (($63 & -2 | 0) == 148) {
    $66 = $63;
    do {
     _next();
     _expr_sum();
     $67 = HEAP32[5310] | 0;
     if (($67 - 1 | 0) >>> 0 < 2 >>> 0) {
      $69 = $67;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($69);
       $70 = HEAP32[5310] | 0;
       if (($70 - 1 | 0) >>> 0 < 2 >>> 0) {
        $69 = $70;
       } else {
        $72 = $70;
        break;
       }
      }
     } else {
      $72 = $67;
     }
     if (($72 - 150 | 0) >>> 0 < 10 >>> 0 | ($72 & -2 | 0) == 146) {
      $75 = $72;
      do {
       _next();
       _expr_sum();
       $76 = HEAP32[5310] | 0;
       if (($76 - 1 | 0) >>> 0 < 2 >>> 0) {
        $78 = $76;
        do {
         _next();
         _expr_sum();
         _gen_op($78);
         $78 = HEAP32[5310] | 0;
        } while (($78 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($75);
       $75 = HEAP32[5310] | 0;
      } while (($75 - 150 | 0) >>> 0 < 10 >>> 0 | ($75 & -2 | 0) == 146);
     }
     _gen_op($66);
     $66 = HEAP32[5310] | 0;
    } while (($66 & -2 | 0) == 148);
   }
   _gen_op(38);
   $_pr = HEAP32[5310] | 0;
   if (($_pr | 0) != 38) {
    $44 = $_pr;
    break;
   }
  }
 } else {
  $44 = $21;
 }
 if (($44 | 0) == 94) {
  while (1) {
   _next();
   _expr_sum();
   $88 = HEAP32[5310] | 0;
   if (($88 - 1 | 0) >>> 0 < 2 >>> 0) {
    $90 = $88;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($90);
     $91 = HEAP32[5310] | 0;
     if (($91 - 1 | 0) >>> 0 < 2 >>> 0) {
      $90 = $91;
     } else {
      $93 = $91;
      break;
     }
    }
   } else {
    $93 = $88;
   }
   if (($93 - 150 | 0) >>> 0 < 10 >>> 0 | ($93 & -2 | 0) == 146) {
    $96 = $93;
    while (1) {
     _next();
     _expr_sum();
     $97 = HEAP32[5310] | 0;
     if (($97 - 1 | 0) >>> 0 < 2 >>> 0) {
      $99 = $97;
      do {
       _next();
       _expr_sum();
       _gen_op($99);
       $99 = HEAP32[5310] | 0;
      } while (($99 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($96);
     $102 = HEAP32[5310] | 0;
     if (($102 - 150 | 0) >>> 0 < 10 >>> 0 | ($102 & -2 | 0) == 146) {
      $96 = $102;
     } else {
      $105 = $102;
      break;
     }
    }
   } else {
    $105 = $93;
   }
   if (($105 & -2 | 0) == 148) {
    $108 = $105;
    while (1) {
     _next();
     _expr_sum();
     $109 = HEAP32[5310] | 0;
     if (($109 - 1 | 0) >>> 0 < 2 >>> 0) {
      $111 = $109;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($111);
       $112 = HEAP32[5310] | 0;
       if (($112 - 1 | 0) >>> 0 < 2 >>> 0) {
        $111 = $112;
       } else {
        $114 = $112;
        break;
       }
      }
     } else {
      $114 = $109;
     }
     if (($114 - 150 | 0) >>> 0 < 10 >>> 0 | ($114 & -2 | 0) == 146) {
      $117 = $114;
      do {
       _next();
       _expr_sum();
       $118 = HEAP32[5310] | 0;
       if (($118 - 1 | 0) >>> 0 < 2 >>> 0) {
        $120 = $118;
        do {
         _next();
         _expr_sum();
         _gen_op($120);
         $120 = HEAP32[5310] | 0;
        } while (($120 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($117);
       $117 = HEAP32[5310] | 0;
      } while (($117 - 150 | 0) >>> 0 < 10 >>> 0 | ($117 & -2 | 0) == 146);
     }
     _gen_op($108);
     $126 = HEAP32[5310] | 0;
     if (($126 & -2 | 0) == 148) {
      $108 = $126;
     } else {
      $_lcssa583 = $126;
      break;
     }
    }
   } else {
    $_lcssa583 = $105;
   }
   if (($_lcssa583 | 0) == 38) {
    do {
     _next();
     _expr_sum();
     $130 = HEAP32[5310] | 0;
     if (($130 - 1 | 0) >>> 0 < 2 >>> 0) {
      $132 = $130;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($132);
       $133 = HEAP32[5310] | 0;
       if (($133 - 1 | 0) >>> 0 < 2 >>> 0) {
        $132 = $133;
       } else {
        $135 = $133;
        break;
       }
      }
     } else {
      $135 = $130;
     }
     if (($135 - 150 | 0) >>> 0 < 10 >>> 0 | ($135 & -2 | 0) == 146) {
      $138 = $135;
      while (1) {
       _next();
       _expr_sum();
       $139 = HEAP32[5310] | 0;
       if (($139 - 1 | 0) >>> 0 < 2 >>> 0) {
        $141 = $139;
        do {
         _next();
         _expr_sum();
         _gen_op($141);
         $141 = HEAP32[5310] | 0;
        } while (($141 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($138);
       $144 = HEAP32[5310] | 0;
       if (($144 - 150 | 0) >>> 0 < 10 >>> 0 | ($144 & -2 | 0) == 146) {
        $138 = $144;
       } else {
        $147 = $144;
        break;
       }
      }
     } else {
      $147 = $135;
     }
     if (($147 & -2 | 0) == 148) {
      $150 = $147;
      do {
       _next();
       _expr_sum();
       $151 = HEAP32[5310] | 0;
       if (($151 - 1 | 0) >>> 0 < 2 >>> 0) {
        $153 = $151;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($153);
         $154 = HEAP32[5310] | 0;
         if (($154 - 1 | 0) >>> 0 < 2 >>> 0) {
          $153 = $154;
         } else {
          $156 = $154;
          break;
         }
        }
       } else {
        $156 = $151;
       }
       if (($156 - 150 | 0) >>> 0 < 10 >>> 0 | ($156 & -2 | 0) == 146) {
        $159 = $156;
        do {
         _next();
         _expr_sum();
         $160 = HEAP32[5310] | 0;
         if (($160 - 1 | 0) >>> 0 < 2 >>> 0) {
          $162 = $160;
          do {
           _next();
           _expr_sum();
           _gen_op($162);
           $162 = HEAP32[5310] | 0;
          } while (($162 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($159);
         $159 = HEAP32[5310] | 0;
        } while (($159 - 150 | 0) >>> 0 < 10 >>> 0 | ($159 & -2 | 0) == 146);
       }
       _gen_op($150);
       $150 = HEAP32[5310] | 0;
      } while (($150 & -2 | 0) == 148);
     }
     _gen_op(38);
    } while ((HEAP32[5310] | 0) == 38);
   }
   _gen_op(94);
   $172 = HEAP32[5310] | 0;
   if (($172 | 0) != 94) {
    $174 = $172;
    break;
   }
  }
 } else {
  $174 = $44;
 }
 while (1) {
  if (($174 | 0) == 160) {
   break;
  } else if (($174 | 0) != 124) {
   label = 265;
   break;
  }
  _next();
  _expr_sum();
  $176 = HEAP32[5310] | 0;
  if (($176 - 1 | 0) >>> 0 < 2 >>> 0) {
   $178 = $176;
   while (1) {
    _next();
    _expr_sum();
    _gen_op($178);
    $179 = HEAP32[5310] | 0;
    if (($179 - 1 | 0) >>> 0 < 2 >>> 0) {
     $178 = $179;
    } else {
     $181 = $179;
     break;
    }
   }
  } else {
   $181 = $176;
  }
  if (($181 - 150 | 0) >>> 0 < 10 >>> 0 | ($181 & -2 | 0) == 146) {
   $184 = $181;
   while (1) {
    _next();
    _expr_sum();
    $185 = HEAP32[5310] | 0;
    if (($185 - 1 | 0) >>> 0 < 2 >>> 0) {
     $187 = $185;
     do {
      _next();
      _expr_sum();
      _gen_op($187);
      $187 = HEAP32[5310] | 0;
     } while (($187 - 1 | 0) >>> 0 < 2 >>> 0);
    }
    _gen_op($184);
    $190 = HEAP32[5310] | 0;
    if (($190 - 150 | 0) >>> 0 < 10 >>> 0 | ($190 & -2 | 0) == 146) {
     $184 = $190;
    } else {
     $193 = $190;
     break;
    }
   }
  } else {
   $193 = $181;
  }
  if (($193 & -2 | 0) == 148) {
   $196 = $193;
   while (1) {
    _next();
    _expr_sum();
    $197 = HEAP32[5310] | 0;
    if (($197 - 1 | 0) >>> 0 < 2 >>> 0) {
     $199 = $197;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($199);
      $200 = HEAP32[5310] | 0;
      if (($200 - 1 | 0) >>> 0 < 2 >>> 0) {
       $199 = $200;
      } else {
       $202 = $200;
       break;
      }
     }
    } else {
     $202 = $197;
    }
    if (($202 - 150 | 0) >>> 0 < 10 >>> 0 | ($202 & -2 | 0) == 146) {
     $205 = $202;
     do {
      _next();
      _expr_sum();
      $206 = HEAP32[5310] | 0;
      if (($206 - 1 | 0) >>> 0 < 2 >>> 0) {
       $208 = $206;
       do {
        _next();
        _expr_sum();
        _gen_op($208);
        $208 = HEAP32[5310] | 0;
       } while (($208 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($205);
      $205 = HEAP32[5310] | 0;
     } while (($205 - 150 | 0) >>> 0 < 10 >>> 0 | ($205 & -2 | 0) == 146);
    }
    _gen_op($196);
    $214 = HEAP32[5310] | 0;
    if (($214 & -2 | 0) == 148) {
     $196 = $214;
    } else {
     $217 = $214;
     break;
    }
   }
  } else {
   $217 = $193;
  }
  if (($217 | 0) == 38) {
   while (1) {
    _next();
    _expr_sum();
    $219 = HEAP32[5310] | 0;
    if (($219 - 1 | 0) >>> 0 < 2 >>> 0) {
     $221 = $219;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($221);
      $222 = HEAP32[5310] | 0;
      if (($222 - 1 | 0) >>> 0 < 2 >>> 0) {
       $221 = $222;
      } else {
       $224 = $222;
       break;
      }
     }
    } else {
     $224 = $219;
    }
    if (($224 - 150 | 0) >>> 0 < 10 >>> 0 | ($224 & -2 | 0) == 146) {
     $227 = $224;
     while (1) {
      _next();
      _expr_sum();
      $228 = HEAP32[5310] | 0;
      if (($228 - 1 | 0) >>> 0 < 2 >>> 0) {
       $230 = $228;
       do {
        _next();
        _expr_sum();
        _gen_op($230);
        $230 = HEAP32[5310] | 0;
       } while (($230 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($227);
      $233 = HEAP32[5310] | 0;
      if (($233 - 150 | 0) >>> 0 < 10 >>> 0 | ($233 & -2 | 0) == 146) {
       $227 = $233;
      } else {
       $236 = $233;
       break;
      }
     }
    } else {
     $236 = $224;
    }
    if (($236 & -2 | 0) == 148) {
     $239 = $236;
     do {
      _next();
      _expr_sum();
      $240 = HEAP32[5310] | 0;
      if (($240 - 1 | 0) >>> 0 < 2 >>> 0) {
       $242 = $240;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($242);
        $243 = HEAP32[5310] | 0;
        if (($243 - 1 | 0) >>> 0 < 2 >>> 0) {
         $242 = $243;
        } else {
         $245 = $243;
         break;
        }
       }
      } else {
       $245 = $240;
      }
      if (($245 - 150 | 0) >>> 0 < 10 >>> 0 | ($245 & -2 | 0) == 146) {
       $248 = $245;
       do {
        _next();
        _expr_sum();
        $249 = HEAP32[5310] | 0;
        if (($249 - 1 | 0) >>> 0 < 2 >>> 0) {
         $251 = $249;
         do {
          _next();
          _expr_sum();
          _gen_op($251);
          $251 = HEAP32[5310] | 0;
         } while (($251 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($248);
        $248 = HEAP32[5310] | 0;
       } while (($248 - 150 | 0) >>> 0 < 10 >>> 0 | ($248 & -2 | 0) == 146);
      }
      _gen_op($239);
      $239 = HEAP32[5310] | 0;
     } while (($239 & -2 | 0) == 148);
    }
    _gen_op(38);
    $_pr422 = HEAP32[5310] | 0;
    if (($_pr422 | 0) != 38) {
     $261 = $_pr422;
     break;
    }
   }
  } else {
   $261 = $217;
  }
  if (($261 | 0) == 94) {
   do {
    _next();
    _expr_sum();
    $263 = HEAP32[5310] | 0;
    if (($263 - 1 | 0) >>> 0 < 2 >>> 0) {
     $265 = $263;
     while (1) {
      _next();
      _expr_sum();
      _gen_op($265);
      $266 = HEAP32[5310] | 0;
      if (($266 - 1 | 0) >>> 0 < 2 >>> 0) {
       $265 = $266;
      } else {
       $268 = $266;
       break;
      }
     }
    } else {
     $268 = $263;
    }
    if (($268 - 150 | 0) >>> 0 < 10 >>> 0 | ($268 & -2 | 0) == 146) {
     $271 = $268;
     while (1) {
      _next();
      _expr_sum();
      $272 = HEAP32[5310] | 0;
      if (($272 - 1 | 0) >>> 0 < 2 >>> 0) {
       $274 = $272;
       do {
        _next();
        _expr_sum();
        _gen_op($274);
        $274 = HEAP32[5310] | 0;
       } while (($274 - 1 | 0) >>> 0 < 2 >>> 0);
      }
      _gen_op($271);
      $277 = HEAP32[5310] | 0;
      if (($277 - 150 | 0) >>> 0 < 10 >>> 0 | ($277 & -2 | 0) == 146) {
       $271 = $277;
      } else {
       $280 = $277;
       break;
      }
     }
    } else {
     $280 = $268;
    }
    if (($280 & -2 | 0) == 148) {
     $283 = $280;
     while (1) {
      _next();
      _expr_sum();
      $284 = HEAP32[5310] | 0;
      if (($284 - 1 | 0) >>> 0 < 2 >>> 0) {
       $286 = $284;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($286);
        $287 = HEAP32[5310] | 0;
        if (($287 - 1 | 0) >>> 0 < 2 >>> 0) {
         $286 = $287;
        } else {
         $289 = $287;
         break;
        }
       }
      } else {
       $289 = $284;
      }
      if (($289 - 150 | 0) >>> 0 < 10 >>> 0 | ($289 & -2 | 0) == 146) {
       $292 = $289;
       do {
        _next();
        _expr_sum();
        $293 = HEAP32[5310] | 0;
        if (($293 - 1 | 0) >>> 0 < 2 >>> 0) {
         $295 = $293;
         do {
          _next();
          _expr_sum();
          _gen_op($295);
          $295 = HEAP32[5310] | 0;
         } while (($295 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($292);
        $292 = HEAP32[5310] | 0;
       } while (($292 - 150 | 0) >>> 0 < 10 >>> 0 | ($292 & -2 | 0) == 146);
      }
      _gen_op($283);
      $301 = HEAP32[5310] | 0;
      if (($301 & -2 | 0) == 148) {
       $283 = $301;
      } else {
       $_lcssa559 = $301;
       break;
      }
     }
    } else {
     $_lcssa559 = $280;
    }
    if (($_lcssa559 | 0) == 38) {
     do {
      _next();
      _expr_sum();
      $305 = HEAP32[5310] | 0;
      if (($305 - 1 | 0) >>> 0 < 2 >>> 0) {
       $307 = $305;
       while (1) {
        _next();
        _expr_sum();
        _gen_op($307);
        $308 = HEAP32[5310] | 0;
        if (($308 - 1 | 0) >>> 0 < 2 >>> 0) {
         $307 = $308;
        } else {
         $310 = $308;
         break;
        }
       }
      } else {
       $310 = $305;
      }
      if (($310 - 150 | 0) >>> 0 < 10 >>> 0 | ($310 & -2 | 0) == 146) {
       $313 = $310;
       while (1) {
        _next();
        _expr_sum();
        $314 = HEAP32[5310] | 0;
        if (($314 - 1 | 0) >>> 0 < 2 >>> 0) {
         $316 = $314;
         do {
          _next();
          _expr_sum();
          _gen_op($316);
          $316 = HEAP32[5310] | 0;
         } while (($316 - 1 | 0) >>> 0 < 2 >>> 0);
        }
        _gen_op($313);
        $319 = HEAP32[5310] | 0;
        if (($319 - 150 | 0) >>> 0 < 10 >>> 0 | ($319 & -2 | 0) == 146) {
         $313 = $319;
        } else {
         $322 = $319;
         break;
        }
       }
      } else {
       $322 = $310;
      }
      if (($322 & -2 | 0) == 148) {
       $325 = $322;
       do {
        _next();
        _expr_sum();
        $326 = HEAP32[5310] | 0;
        if (($326 - 1 | 0) >>> 0 < 2 >>> 0) {
         $328 = $326;
         while (1) {
          _next();
          _expr_sum();
          _gen_op($328);
          $329 = HEAP32[5310] | 0;
          if (($329 - 1 | 0) >>> 0 < 2 >>> 0) {
           $328 = $329;
          } else {
           $331 = $329;
           break;
          }
         }
        } else {
         $331 = $326;
        }
        if (($331 - 150 | 0) >>> 0 < 10 >>> 0 | ($331 & -2 | 0) == 146) {
         $334 = $331;
         do {
          _next();
          _expr_sum();
          $335 = HEAP32[5310] | 0;
          if (($335 - 1 | 0) >>> 0 < 2 >>> 0) {
           $337 = $335;
           do {
            _next();
            _expr_sum();
            _gen_op($337);
            $337 = HEAP32[5310] | 0;
           } while (($337 - 1 | 0) >>> 0 < 2 >>> 0);
          }
          _gen_op($334);
          $334 = HEAP32[5310] | 0;
         } while (($334 - 150 | 0) >>> 0 < 10 >>> 0 | ($334 & -2 | 0) == 146);
        }
        _gen_op($325);
        $325 = HEAP32[5310] | 0;
       } while (($325 & -2 | 0) == 148);
      }
      _gen_op(38);
     } while ((HEAP32[5310] | 0) == 38);
    }
    _gen_op(94);
   } while ((HEAP32[5310] | 0) == 94);
  }
  _gen_op(124);
  $174 = HEAP32[5310] | 0;
 }
 if ((label | 0) == 265) {
  STACKTOP = sp;
  return;
 }
 $351 = (HEAP32[5024] | 0) - 40 | 0;
 if ($351 >>> 0 >= 56272 >>> 0) {
  $p_01_i = 56272;
  do {
   $356 = HEAP16[$p_01_i + 8 >> 1] & 63;
   if ($356 >>> 0 < 48 >>> 0) {
    _save_reg($356);
   }
   $p_01_i = $p_01_i + 40 | 0;
  } while ($p_01_i >>> 0 <= $351 >>> 0);
 }
 $362 = _gtst(1, 0) | 0;
 if ((HEAP32[5310] | 0) == 160) {
  $397 = $362;
  while (1) {
   _next();
   _expr_sum();
   $398 = HEAP32[5310] | 0;
   if (($398 - 1 | 0) >>> 0 < 2 >>> 0) {
    $400 = $398;
    while (1) {
     _next();
     _expr_sum();
     _gen_op($400);
     $401 = HEAP32[5310] | 0;
     if (($401 - 1 | 0) >>> 0 < 2 >>> 0) {
      $400 = $401;
     } else {
      $403 = $401;
      break;
     }
    }
   } else {
    $403 = $398;
   }
   if (($403 - 150 | 0) >>> 0 < 10 >>> 0 | ($403 & -2 | 0) == 146) {
    $406 = $403;
    while (1) {
     _next();
     _expr_sum();
     $407 = HEAP32[5310] | 0;
     if (($407 - 1 | 0) >>> 0 < 2 >>> 0) {
      $409 = $407;
      do {
       _next();
       _expr_sum();
       _gen_op($409);
       $409 = HEAP32[5310] | 0;
      } while (($409 - 1 | 0) >>> 0 < 2 >>> 0);
     }
     _gen_op($406);
     $412 = HEAP32[5310] | 0;
     if (($412 - 150 | 0) >>> 0 < 10 >>> 0 | ($412 & -2 | 0) == 146) {
      $406 = $412;
     } else {
      $415 = $412;
      break;
     }
    }
   } else {
    $415 = $403;
   }
   if (($415 & -2 | 0) == 148) {
    $418 = $415;
    while (1) {
     _next();
     _expr_sum();
     $419 = HEAP32[5310] | 0;
     if (($419 - 1 | 0) >>> 0 < 2 >>> 0) {
      $421 = $419;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($421);
       $422 = HEAP32[5310] | 0;
       if (($422 - 1 | 0) >>> 0 < 2 >>> 0) {
        $421 = $422;
       } else {
        $424 = $422;
        break;
       }
      }
     } else {
      $424 = $419;
     }
     if (($424 - 150 | 0) >>> 0 < 10 >>> 0 | ($424 & -2 | 0) == 146) {
      $427 = $424;
      do {
       _next();
       _expr_sum();
       $428 = HEAP32[5310] | 0;
       if (($428 - 1 | 0) >>> 0 < 2 >>> 0) {
        $430 = $428;
        do {
         _next();
         _expr_sum();
         _gen_op($430);
         $430 = HEAP32[5310] | 0;
        } while (($430 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($427);
       $427 = HEAP32[5310] | 0;
      } while (($427 - 150 | 0) >>> 0 < 10 >>> 0 | ($427 & -2 | 0) == 146);
     }
     _gen_op($418);
     $436 = HEAP32[5310] | 0;
     if (($436 & -2 | 0) == 148) {
      $418 = $436;
     } else {
      $439 = $436;
      break;
     }
    }
   } else {
    $439 = $415;
   }
   if (($439 | 0) == 38) {
    while (1) {
     _next();
     _expr_sum();
     $441 = HEAP32[5310] | 0;
     if (($441 - 1 | 0) >>> 0 < 2 >>> 0) {
      $443 = $441;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($443);
       $444 = HEAP32[5310] | 0;
       if (($444 - 1 | 0) >>> 0 < 2 >>> 0) {
        $443 = $444;
       } else {
        $446 = $444;
        break;
       }
      }
     } else {
      $446 = $441;
     }
     if (($446 - 150 | 0) >>> 0 < 10 >>> 0 | ($446 & -2 | 0) == 146) {
      $449 = $446;
      while (1) {
       _next();
       _expr_sum();
       $450 = HEAP32[5310] | 0;
       if (($450 - 1 | 0) >>> 0 < 2 >>> 0) {
        $452 = $450;
        do {
         _next();
         _expr_sum();
         _gen_op($452);
         $452 = HEAP32[5310] | 0;
        } while (($452 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($449);
       $455 = HEAP32[5310] | 0;
       if (($455 - 150 | 0) >>> 0 < 10 >>> 0 | ($455 & -2 | 0) == 146) {
        $449 = $455;
       } else {
        $458 = $455;
        break;
       }
      }
     } else {
      $458 = $446;
     }
     if (($458 & -2 | 0) == 148) {
      $461 = $458;
      do {
       _next();
       _expr_sum();
       $462 = HEAP32[5310] | 0;
       if (($462 - 1 | 0) >>> 0 < 2 >>> 0) {
        $464 = $462;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($464);
         $465 = HEAP32[5310] | 0;
         if (($465 - 1 | 0) >>> 0 < 2 >>> 0) {
          $464 = $465;
         } else {
          $467 = $465;
          break;
         }
        }
       } else {
        $467 = $462;
       }
       if (($467 - 150 | 0) >>> 0 < 10 >>> 0 | ($467 & -2 | 0) == 146) {
        $470 = $467;
        do {
         _next();
         _expr_sum();
         $471 = HEAP32[5310] | 0;
         if (($471 - 1 | 0) >>> 0 < 2 >>> 0) {
          $473 = $471;
          do {
           _next();
           _expr_sum();
           _gen_op($473);
           $473 = HEAP32[5310] | 0;
          } while (($473 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($470);
         $470 = HEAP32[5310] | 0;
        } while (($470 - 150 | 0) >>> 0 < 10 >>> 0 | ($470 & -2 | 0) == 146);
       }
       _gen_op($461);
       $461 = HEAP32[5310] | 0;
      } while (($461 & -2 | 0) == 148);
     }
     _gen_op(38);
     $_pr424 = HEAP32[5310] | 0;
     if (($_pr424 | 0) != 38) {
      $483 = $_pr424;
      break;
     }
    }
   } else {
    $483 = $439;
   }
   if (($483 | 0) == 94) {
    while (1) {
     _next();
     _expr_sum();
     $485 = HEAP32[5310] | 0;
     if (($485 - 1 | 0) >>> 0 < 2 >>> 0) {
      $487 = $485;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($487);
       $488 = HEAP32[5310] | 0;
       if (($488 - 1 | 0) >>> 0 < 2 >>> 0) {
        $487 = $488;
       } else {
        $490 = $488;
        break;
       }
      }
     } else {
      $490 = $485;
     }
     if (($490 - 150 | 0) >>> 0 < 10 >>> 0 | ($490 & -2 | 0) == 146) {
      $493 = $490;
      while (1) {
       _next();
       _expr_sum();
       $494 = HEAP32[5310] | 0;
       if (($494 - 1 | 0) >>> 0 < 2 >>> 0) {
        $496 = $494;
        do {
         _next();
         _expr_sum();
         _gen_op($496);
         $496 = HEAP32[5310] | 0;
        } while (($496 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($493);
       $499 = HEAP32[5310] | 0;
       if (($499 - 150 | 0) >>> 0 < 10 >>> 0 | ($499 & -2 | 0) == 146) {
        $493 = $499;
       } else {
        $502 = $499;
        break;
       }
      }
     } else {
      $502 = $490;
     }
     if (($502 & -2 | 0) == 148) {
      $505 = $502;
      while (1) {
       _next();
       _expr_sum();
       $506 = HEAP32[5310] | 0;
       if (($506 - 1 | 0) >>> 0 < 2 >>> 0) {
        $508 = $506;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($508);
         $509 = HEAP32[5310] | 0;
         if (($509 - 1 | 0) >>> 0 < 2 >>> 0) {
          $508 = $509;
         } else {
          $511 = $509;
          break;
         }
        }
       } else {
        $511 = $506;
       }
       if (($511 - 150 | 0) >>> 0 < 10 >>> 0 | ($511 & -2 | 0) == 146) {
        $514 = $511;
        do {
         _next();
         _expr_sum();
         $515 = HEAP32[5310] | 0;
         if (($515 - 1 | 0) >>> 0 < 2 >>> 0) {
          $517 = $515;
          do {
           _next();
           _expr_sum();
           _gen_op($517);
           $517 = HEAP32[5310] | 0;
          } while (($517 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($514);
         $514 = HEAP32[5310] | 0;
        } while (($514 - 150 | 0) >>> 0 < 10 >>> 0 | ($514 & -2 | 0) == 146);
       }
       _gen_op($505);
       $523 = HEAP32[5310] | 0;
       if (($523 & -2 | 0) == 148) {
        $505 = $523;
       } else {
        $_lcssa459 = $523;
        break;
       }
      }
     } else {
      $_lcssa459 = $502;
     }
     if (($_lcssa459 | 0) == 38) {
      do {
       _next();
       _expr_sum();
       $527 = HEAP32[5310] | 0;
       if (($527 - 1 | 0) >>> 0 < 2 >>> 0) {
        $529 = $527;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($529);
         $530 = HEAP32[5310] | 0;
         if (($530 - 1 | 0) >>> 0 < 2 >>> 0) {
          $529 = $530;
         } else {
          $532 = $530;
          break;
         }
        }
       } else {
        $532 = $527;
       }
       if (($532 - 150 | 0) >>> 0 < 10 >>> 0 | ($532 & -2 | 0) == 146) {
        $535 = $532;
        while (1) {
         _next();
         _expr_sum();
         $536 = HEAP32[5310] | 0;
         if (($536 - 1 | 0) >>> 0 < 2 >>> 0) {
          $538 = $536;
          do {
           _next();
           _expr_sum();
           _gen_op($538);
           $538 = HEAP32[5310] | 0;
          } while (($538 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($535);
         $541 = HEAP32[5310] | 0;
         if (($541 - 150 | 0) >>> 0 < 10 >>> 0 | ($541 & -2 | 0) == 146) {
          $535 = $541;
         } else {
          $544 = $541;
          break;
         }
        }
       } else {
        $544 = $532;
       }
       if (($544 & -2 | 0) == 148) {
        $547 = $544;
        do {
         _next();
         _expr_sum();
         $548 = HEAP32[5310] | 0;
         if (($548 - 1 | 0) >>> 0 < 2 >>> 0) {
          $550 = $548;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($550);
           $551 = HEAP32[5310] | 0;
           if (($551 - 1 | 0) >>> 0 < 2 >>> 0) {
            $550 = $551;
           } else {
            $553 = $551;
            break;
           }
          }
         } else {
          $553 = $548;
         }
         if (($553 - 150 | 0) >>> 0 < 10 >>> 0 | ($553 & -2 | 0) == 146) {
          $556 = $553;
          do {
           _next();
           _expr_sum();
           $557 = HEAP32[5310] | 0;
           if (($557 - 1 | 0) >>> 0 < 2 >>> 0) {
            $559 = $557;
            do {
             _next();
             _expr_sum();
             _gen_op($559);
             $559 = HEAP32[5310] | 0;
            } while (($559 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($556);
           $556 = HEAP32[5310] | 0;
          } while (($556 - 150 | 0) >>> 0 < 10 >>> 0 | ($556 & -2 | 0) == 146);
         }
         _gen_op($547);
         $547 = HEAP32[5310] | 0;
        } while (($547 & -2 | 0) == 148);
       }
       _gen_op(38);
      } while ((HEAP32[5310] | 0) == 38);
     }
     _gen_op(94);
     $569 = HEAP32[5310] | 0;
     if (($569 | 0) != 94) {
      $_lcssa472 = $569;
      break;
     }
    }
   } else {
    $_lcssa472 = $483;
   }
   if (($_lcssa472 | 0) == 124) {
    do {
     _next();
     _expr_sum();
     $572 = HEAP32[5310] | 0;
     if (($572 - 1 | 0) >>> 0 < 2 >>> 0) {
      $574 = $572;
      while (1) {
       _next();
       _expr_sum();
       _gen_op($574);
       $575 = HEAP32[5310] | 0;
       if (($575 - 1 | 0) >>> 0 < 2 >>> 0) {
        $574 = $575;
       } else {
        $577 = $575;
        break;
       }
      }
     } else {
      $577 = $572;
     }
     if (($577 - 150 | 0) >>> 0 < 10 >>> 0 | ($577 & -2 | 0) == 146) {
      $580 = $577;
      while (1) {
       _next();
       _expr_sum();
       $581 = HEAP32[5310] | 0;
       if (($581 - 1 | 0) >>> 0 < 2 >>> 0) {
        $583 = $581;
        do {
         _next();
         _expr_sum();
         _gen_op($583);
         $583 = HEAP32[5310] | 0;
        } while (($583 - 1 | 0) >>> 0 < 2 >>> 0);
       }
       _gen_op($580);
       $586 = HEAP32[5310] | 0;
       if (($586 - 150 | 0) >>> 0 < 10 >>> 0 | ($586 & -2 | 0) == 146) {
        $580 = $586;
       } else {
        $589 = $586;
        break;
       }
      }
     } else {
      $589 = $577;
     }
     if (($589 & -2 | 0) == 148) {
      $592 = $589;
      while (1) {
       _next();
       _expr_sum();
       $593 = HEAP32[5310] | 0;
       if (($593 - 1 | 0) >>> 0 < 2 >>> 0) {
        $595 = $593;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($595);
         $596 = HEAP32[5310] | 0;
         if (($596 - 1 | 0) >>> 0 < 2 >>> 0) {
          $595 = $596;
         } else {
          $598 = $596;
          break;
         }
        }
       } else {
        $598 = $593;
       }
       if (($598 - 150 | 0) >>> 0 < 10 >>> 0 | ($598 & -2 | 0) == 146) {
        $601 = $598;
        do {
         _next();
         _expr_sum();
         $602 = HEAP32[5310] | 0;
         if (($602 - 1 | 0) >>> 0 < 2 >>> 0) {
          $604 = $602;
          do {
           _next();
           _expr_sum();
           _gen_op($604);
           $604 = HEAP32[5310] | 0;
          } while (($604 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($601);
         $601 = HEAP32[5310] | 0;
        } while (($601 - 150 | 0) >>> 0 < 10 >>> 0 | ($601 & -2 | 0) == 146);
       }
       _gen_op($592);
       $610 = HEAP32[5310] | 0;
       if (($610 & -2 | 0) == 148) {
        $592 = $610;
       } else {
        $613 = $610;
        break;
       }
      }
     } else {
      $613 = $589;
     }
     if (($613 | 0) == 38) {
      while (1) {
       _next();
       _expr_sum();
       $615 = HEAP32[5310] | 0;
       if (($615 - 1 | 0) >>> 0 < 2 >>> 0) {
        $617 = $615;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($617);
         $618 = HEAP32[5310] | 0;
         if (($618 - 1 | 0) >>> 0 < 2 >>> 0) {
          $617 = $618;
         } else {
          $620 = $618;
          break;
         }
        }
       } else {
        $620 = $615;
       }
       if (($620 - 150 | 0) >>> 0 < 10 >>> 0 | ($620 & -2 | 0) == 146) {
        $623 = $620;
        while (1) {
         _next();
         _expr_sum();
         $624 = HEAP32[5310] | 0;
         if (($624 - 1 | 0) >>> 0 < 2 >>> 0) {
          $626 = $624;
          do {
           _next();
           _expr_sum();
           _gen_op($626);
           $626 = HEAP32[5310] | 0;
          } while (($626 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($623);
         $629 = HEAP32[5310] | 0;
         if (($629 - 150 | 0) >>> 0 < 10 >>> 0 | ($629 & -2 | 0) == 146) {
          $623 = $629;
         } else {
          $632 = $629;
          break;
         }
        }
       } else {
        $632 = $620;
       }
       if (($632 & -2 | 0) == 148) {
        $635 = $632;
        do {
         _next();
         _expr_sum();
         $636 = HEAP32[5310] | 0;
         if (($636 - 1 | 0) >>> 0 < 2 >>> 0) {
          $638 = $636;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($638);
           $639 = HEAP32[5310] | 0;
           if (($639 - 1 | 0) >>> 0 < 2 >>> 0) {
            $638 = $639;
           } else {
            $641 = $639;
            break;
           }
          }
         } else {
          $641 = $636;
         }
         if (($641 - 150 | 0) >>> 0 < 10 >>> 0 | ($641 & -2 | 0) == 146) {
          $644 = $641;
          do {
           _next();
           _expr_sum();
           $645 = HEAP32[5310] | 0;
           if (($645 - 1 | 0) >>> 0 < 2 >>> 0) {
            $647 = $645;
            do {
             _next();
             _expr_sum();
             _gen_op($647);
             $647 = HEAP32[5310] | 0;
            } while (($647 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($644);
           $644 = HEAP32[5310] | 0;
          } while (($644 - 150 | 0) >>> 0 < 10 >>> 0 | ($644 & -2 | 0) == 146);
         }
         _gen_op($635);
         $635 = HEAP32[5310] | 0;
        } while (($635 & -2 | 0) == 148);
       }
       _gen_op(38);
       $_pr427 = HEAP32[5310] | 0;
       if (($_pr427 | 0) != 38) {
        $657 = $_pr427;
        break;
       }
      }
     } else {
      $657 = $613;
     }
     if (($657 | 0) == 94) {
      do {
       _next();
       _expr_sum();
       $659 = HEAP32[5310] | 0;
       if (($659 - 1 | 0) >>> 0 < 2 >>> 0) {
        $661 = $659;
        while (1) {
         _next();
         _expr_sum();
         _gen_op($661);
         $662 = HEAP32[5310] | 0;
         if (($662 - 1 | 0) >>> 0 < 2 >>> 0) {
          $661 = $662;
         } else {
          $664 = $662;
          break;
         }
        }
       } else {
        $664 = $659;
       }
       if (($664 - 150 | 0) >>> 0 < 10 >>> 0 | ($664 & -2 | 0) == 146) {
        $667 = $664;
        while (1) {
         _next();
         _expr_sum();
         $668 = HEAP32[5310] | 0;
         if (($668 - 1 | 0) >>> 0 < 2 >>> 0) {
          $670 = $668;
          do {
           _next();
           _expr_sum();
           _gen_op($670);
           $670 = HEAP32[5310] | 0;
          } while (($670 - 1 | 0) >>> 0 < 2 >>> 0);
         }
         _gen_op($667);
         $673 = HEAP32[5310] | 0;
         if (($673 - 150 | 0) >>> 0 < 10 >>> 0 | ($673 & -2 | 0) == 146) {
          $667 = $673;
         } else {
          $676 = $673;
          break;
         }
        }
       } else {
        $676 = $664;
       }
       if (($676 & -2 | 0) == 148) {
        $679 = $676;
        while (1) {
         _next();
         _expr_sum();
         $680 = HEAP32[5310] | 0;
         if (($680 - 1 | 0) >>> 0 < 2 >>> 0) {
          $682 = $680;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($682);
           $683 = HEAP32[5310] | 0;
           if (($683 - 1 | 0) >>> 0 < 2 >>> 0) {
            $682 = $683;
           } else {
            $685 = $683;
            break;
           }
          }
         } else {
          $685 = $680;
         }
         if (($685 - 150 | 0) >>> 0 < 10 >>> 0 | ($685 & -2 | 0) == 146) {
          $688 = $685;
          do {
           _next();
           _expr_sum();
           $689 = HEAP32[5310] | 0;
           if (($689 - 1 | 0) >>> 0 < 2 >>> 0) {
            $691 = $689;
            do {
             _next();
             _expr_sum();
             _gen_op($691);
             $691 = HEAP32[5310] | 0;
            } while (($691 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($688);
           $688 = HEAP32[5310] | 0;
          } while (($688 - 150 | 0) >>> 0 < 10 >>> 0 | ($688 & -2 | 0) == 146);
         }
         _gen_op($679);
         $697 = HEAP32[5310] | 0;
         if (($697 & -2 | 0) == 148) {
          $679 = $697;
         } else {
          $_lcssa508 = $697;
          break;
         }
        }
       } else {
        $_lcssa508 = $676;
       }
       if (($_lcssa508 | 0) == 38) {
        do {
         _next();
         _expr_sum();
         $701 = HEAP32[5310] | 0;
         if (($701 - 1 | 0) >>> 0 < 2 >>> 0) {
          $703 = $701;
          while (1) {
           _next();
           _expr_sum();
           _gen_op($703);
           $704 = HEAP32[5310] | 0;
           if (($704 - 1 | 0) >>> 0 < 2 >>> 0) {
            $703 = $704;
           } else {
            $706 = $704;
            break;
           }
          }
         } else {
          $706 = $701;
         }
         if (($706 - 150 | 0) >>> 0 < 10 >>> 0 | ($706 & -2 | 0) == 146) {
          $709 = $706;
          while (1) {
           _next();
           _expr_sum();
           $710 = HEAP32[5310] | 0;
           if (($710 - 1 | 0) >>> 0 < 2 >>> 0) {
            $712 = $710;
            do {
             _next();
             _expr_sum();
             _gen_op($712);
             $712 = HEAP32[5310] | 0;
            } while (($712 - 1 | 0) >>> 0 < 2 >>> 0);
           }
           _gen_op($709);
           $715 = HEAP32[5310] | 0;
           if (($715 - 150 | 0) >>> 0 < 10 >>> 0 | ($715 & -2 | 0) == 146) {
            $709 = $715;
           } else {
            $718 = $715;
            break;
           }
          }
         } else {
          $718 = $706;
         }
         if (($718 & -2 | 0) == 148) {
          $721 = $718;
          do {
           _next();
           _expr_sum();
           $722 = HEAP32[5310] | 0;
           if (($722 - 1 | 0) >>> 0 < 2 >>> 0) {
            $724 = $722;
            while (1) {
             _next();
             _expr_sum();
             _gen_op($724);
             $725 = HEAP32[5310] | 0;
             if (($725 - 1 | 0) >>> 0 < 2 >>> 0) {
              $724 = $725;
             } else {
              $727 = $725;
              break;
             }
            }
           } else {
            $727 = $722;
           }
           if (($727 - 150 | 0) >>> 0 < 10 >>> 0 | ($727 & -2 | 0) == 146) {
            $730 = $727;
            do {
             _next();
             _expr_sum();
             $731 = HEAP32[5310] | 0;
             if (($731 - 1 | 0) >>> 0 < 2 >>> 0) {
              $733 = $731;
              do {
               _next();
               _expr_sum();
               _gen_op($733);
               $733 = HEAP32[5310] | 0;
              } while (($733 - 1 | 0) >>> 0 < 2 >>> 0);
             }
             _gen_op($730);
             $730 = HEAP32[5310] | 0;
            } while (($730 - 150 | 0) >>> 0 < 10 >>> 0 | ($730 & -2 | 0) == 146);
           }
           _gen_op($721);
           $721 = HEAP32[5310] | 0;
          } while (($721 & -2 | 0) == 148);
         }
         _gen_op(38);
        } while ((HEAP32[5310] | 0) == 38);
       }
       _gen_op(94);
      } while ((HEAP32[5310] | 0) == 94);
     }
     _gen_op(124);
    } while ((HEAP32[5310] | 0) == 124);
   }
   $365 = _gtst(1, $397) | 0;
   if ((HEAP32[5310] | 0) == 160) {
    $397 = $365;
   } else {
    $_lcssa523 = $365;
    break;
   }
  }
 } else {
  $_lcssa523 = $362;
 }
 $368 = $cval_i_sroa_4_i | 0;
 $369 = HEAP32[5024] | 0;
 if ($369 >>> 0 < 66472 >>> 0) {
  $373 = $369;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $373 = HEAP32[5024] | 0;
 }
 do {
  if ($373 >>> 0 < 56272 >>> 0) {
   $385 = $373;
  } else {
   $378 = HEAPU16[$373 + 8 >> 1] | 0;
   if (!(($378 & 63 | 0) == 51 | ($378 & 62 | 0) == 52)) {
    $385 = $373;
    break;
   }
   _gv(1) | 0;
   $385 = HEAP32[5024] | 0;
  }
 } while (0);
 $386 = $385 + 40 | 0;
 HEAP32[5024] = $386;
 $387 = $386;
 HEAP32[$387 >> 2] = 0;
 HEAP32[$387 + 4 >> 2] = 0;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 53;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $392 = HEAP32[5024] | 0;
 HEAP32[$392 + 16 >> 2] = $_lcssa523;
 $396 = $392 + 20 | 0;
 HEAP32[$396 >> 2] = HEAP32[$368 >> 2];
 HEAP32[$396 + 4 >> 2] = HEAP32[$368 + 4 >> 2];
 HEAP32[$396 + 8 >> 2] = HEAP32[$368 + 8 >> 2];
 STACKTOP = sp;
 return;
}
function _tcc_parse_args($s, $argc, $argv) {
 $s = $s | 0;
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $end_i = 0, $buf_i = 0, $linker_arg = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $optind_0131 = 0, $pthread_0129 = 0, $run_0127 = 0, $33 = 0, $35 = 0, $39 = 0, $44 = 0, $45 = 0, $50 = 0, $51 = 0, $nb_alloc_0_i = 0, $58 = 0, $62 = 0, $pp_0_i = 0, $67 = 0, $popt_075 = 0, $68 = 0, $70 = 0, $q_03_i = 0, $p_02_i = 0, $74 = 0, $75 = 0, $76 = 0, $_ph = 0, $80 = 0, $84 = 0, $96 = 0, $98 = 0, $optarg_0 = 0, $optind_1 = 0, $106 = 0, $107 = 0, $112 = 0, $value_0_i = 0, $121 = 0, $128 = 0, $129 = 0, $136 = 0, $137 = 0, $142 = 0, $143 = 0, $nb_alloc_0_i9 = 0, $150 = 0, $154 = 0, $pp_0_i12 = 0, $160 = 0, $163 = 0, $value_0_i14 = 0, $175 = 0, $176 = 0, $183 = 0, $184 = 0, $191 = 0, $192 = 0, $205 = 0, $optarg_1 = 0, $206 = 0, $220 = 0, $_0_i_i = 0, $r_0_i_i = 0, $p_04_i_i = 0, $i_03_i_i = 0, $229 = 0, $p_02_i23 = 0, $i_01_i = 0, $258 = 0, $271 = 0, $_0_i_i25 = 0, $r_0_i_i26 = 0, $p_04_i_i27 = 0, $i_03_i_i28 = 0, $280 = 0, $299 = 0, $308 = 0, $309 = 0, $run_0_be = 0, $pthread_0_be = 0, $optind_0_be = 0, $optind_0_lcssa = 0, $pthread_0_lcssa = 0, $optind_0_lcssa215 = 0, $328 = 0, $330 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $_0187_i62 = 0, $346 = 0, $__i_i = 0, $p_0_i_i = 0, $q_0_i_i = 0, $354 = 0, $362 = 0, $p_1_i485_ph_i = 0, $p_0_i2_i = 0, $q_0_i3_i = 0, $365 = 0, $373 = 0, $p_1_i484_ph_i = 0, $p_0_i9_i = 0, $q_0_i10_i = 0, $376 = 0, $384 = 0, $p_1_i483_ph_i = 0, $387 = 0, $392 = 0, $395 = 0, $396 = 0, $397 = 0, $p_0_i16_i = 0, $q_0_i17_i = 0, $402 = 0, $410 = 0, $p_0_i23_i = 0, $q_0_i24_i = 0, $413 = 0, $421 = 0, $p_1_i493_i = 0, $424$0 = 0, $p_0_i30_i = 0, $q_0_i31_i = 0, $426 = 0, $434 = 0, $p_1_i480_ph_i = 0, $437 = 0, $442 = 0, $445 = 0, $446 = 0, $447 = 0, $p_0_i40_i = 0, $q_0_i41_i = 0, $452 = 0, $460 = 0, $p_1_i479_ph_i = 0, $463 = 0, $q_03_i_i = 0, $p_02_i_i = 0, $467 = 0, $468 = 0, $469 = 0, $p_0_i49_i = 0, $q_0_i50_i = 0, $476 = 0, $484 = 0, $p_1_i491_ph_i = 0, $487 = 0, $492 = 0, $495 = 0, $496 = 0, $497 = 0, $p_0_i59_i = 0, $q_0_i60_i = 0, $502 = 0, $510 = 0, $p_1_i490_ph_i = 0, $p_0_i66_i = 0, $q_0_i67_i = 0, $514 = 0, $522 = 0, $p_1_i489_ph_i = 0, $525 = 0, $530 = 0, $533 = 0, $534 = 0, $535 = 0, $p_1_i487_ph152_i = 0, $p_1_i488_i = 0, $ignoring_1_i = 0, $543 = 0, $548 = 0, $551 = 0, $552 = 0, $553 = 0, $_02_i_i = 0, $q_01_i_i = 0, $558 = 0, $562 = 0, $q_0_lcssa_i_i = 0, $p_1_i486_i = 0, $567 = 0, $_0187_i_be = 0, $573 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $end_i = sp | 0;
 $buf_i = sp + 8 | 0;
 $linker_arg = sp + 112 | 0;
 _cstr_new($linker_arg);
 do {
  if (($argc | 0) > 0) {
   $2 = $s + 64 | 0;
   $3 = $s + 120 | 0;
   $4 = $s + 124 | 0;
   $5 = $s + 136 | 0;
   $6 = $s + 140 | 0;
   $7 = $s + 32 | 0;
   $8 = $s + 2880 | 0;
   $9 = $s + 2884 | 0;
   $10 = $s + 2888 | 0;
   $11 = $s + 2908 | 0;
   $12 = $s + 84 | 0;
   $13 = $s + 80 | 0;
   $14 = $s + 44 | 0;
   $15 = $s + 16 | 0;
   $16 = $s + 36 | 0;
   $17 = $s + 2896 | 0;
   $18 = $s + 2892 | 0;
   $19 = $s + 2904 | 0;
   $20 = $s + 128 | 0;
   $21 = $s + 132 | 0;
   $22 = $s + 4 | 0;
   $23 = $s + 8 | 0;
   $24 = $s + 2900 | 0;
   $25 = $s;
   $26 = $s + 72 | 0;
   $27 = $s + 20 | 0;
   $28 = $linker_arg | 0;
   $29 = $s + 2912 | 0;
   $30 = $s + 2916 | 0;
   $31 = $s | 0;
   $run_0127 = 0;
   $pthread_0129 = 0;
   $optind_0131 = 0;
   L3 : while (1) {
    $33 = $optind_0131 + 1 | 0;
    $35 = HEAP32[$argv + ($optind_0131 << 2) >> 2] | 0;
    L5 : do {
     if ((HEAP8[$35] | 0) == 45) {
      $39 = $35 + 1 | 0;
      if ((HEAP8[$39] | 0) == 0) {
       label = 5;
       break;
      } else {
       $popt_075 = 144;
       $67 = 10512;
      }
      while (1) {
       $68 = HEAP8[$67] | 0;
       L9 : do {
        if ($68 << 24 >> 24 == 0) {
         $_ph = $39;
         label = 16;
        } else {
         $p_02_i = $39;
         $q_03_i = $67;
         $70 = $68;
         while (1) {
          if ((HEAP8[$p_02_i] | 0) != $70 << 24 >> 24) {
           break L9;
          }
          $74 = $p_02_i + 1 | 0;
          $75 = $q_03_i + 1 | 0;
          $76 = HEAP8[$75] | 0;
          if ($76 << 24 >> 24 == 0) {
           $_ph = $74;
           label = 16;
           break;
          } else {
           $p_02_i = $74;
           $q_03_i = $75;
           $70 = $76;
          }
         }
        }
       } while (0);
       if ((label | 0) == 16) {
        label = 0;
        $80 = HEAPU16[$popt_075 + 6 >> 1] | 0;
        $84 = (HEAP8[$_ph] | 0) == 0;
        if (($80 & 1 | 0) != 0) {
         label = 17;
         break;
        }
        if ($84) {
         $optind_1 = $33;
         $optarg_0 = $_ph;
         break;
        }
       }
       $96 = $popt_075 + 8 | 0;
       $98 = HEAP32[$96 >> 2] | 0;
       if (($98 | 0) == 0) {
        label = 12;
        break L3;
       } else {
        $popt_075 = $96;
        $67 = $98;
       }
      }
      do {
       if ((label | 0) == 17) {
        label = 0;
        if (!($84 & ($80 & 2 | 0) == 0)) {
         $optind_1 = $33;
         $optarg_0 = $_ph;
         break;
        }
        if (($33 | 0) >= ($argc | 0)) {
         label = 19;
         break L3;
        }
        $optind_1 = $optind_0131 + 2 | 0;
        $optarg_0 = HEAP32[$argv + ($33 << 2) >> 2] | 0;
       }
      } while (0);
      L22 : do {
       switch (HEAPU16[$popt_075 + 4 >> 1] | 0) {
       case 9:
        {
         HEAP32[$12 >> 2] = 1;
         HEAP32[$13 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 5:
        {
         _free(HEAP32[$7 >> 2] | 0);
         $128 = (_strlen($optarg_0 | 0) | 0) + 1 | 0;
         $129 = _malloc($128) | 0;
         if (($129 | 0) == 0 & ($128 | 0) != 0) {
          label = 35;
          break L3;
         }
         _strcpy($129 | 0, $optarg_0 | 0) | 0;
         HEAP32[$7 >> 2] = $129;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 19:
        {
         if ((_strcmp($optarg_0 | 0, 10864) | 0) == 0) {
          $i_01_i = 0;
          $p_02_i23 = 8;
          while (1) {
           if ((HEAP16[$p_02_i23 + 2 >> 1] & 1) != 0) {
            HEAP32[$25 + (HEAPU16[$p_02_i23 >> 1] | 0) >> 2] = 1;
           }
           $258 = $i_01_i + 1 | 0;
           if ($258 >>> 0 < 4 >>> 0) {
            $i_01_i = $258;
            $p_02_i23 = $p_02_i23 + 8 | 0;
           } else {
            $optind_0_be = $optind_1;
            $pthread_0_be = $pthread_0129;
            $run_0_be = $run_0127;
            break L5;
           }
          }
         }
         do {
          if ((HEAP8[$optarg_0] | 0) == 110) {
           if ((HEAP8[$optarg_0 + 1 | 0] | 0) != 111) {
            $r_0_i_i26 = $optarg_0;
            $_0_i_i25 = 1;
            break;
           }
           $271 = (HEAP8[$optarg_0 + 2 | 0] | 0) == 45;
           $r_0_i_i26 = $271 ? $optarg_0 + 3 | 0 : $optarg_0;
           $_0_i_i25 = $271 & 1 ^ 1;
          } else {
           $r_0_i_i26 = $optarg_0;
           $_0_i_i25 = 1;
          }
         } while (0);
         $i_03_i_i28 = 0;
         $p_04_i_i27 = 8;
         while (1) {
          if ((_strcmp($r_0_i_i26 | 0, HEAP32[$p_04_i_i27 + 4 >> 2] | 0) | 0) == 0) {
           label = 89;
           break;
          }
          $280 = $i_03_i_i28 + 1 | 0;
          if (($280 | 0) < 4) {
           $i_03_i_i28 = $280;
           $p_04_i_i27 = $p_04_i_i27 + 8 | 0;
          } else {
           label = 90;
           break;
          }
         }
         if ((label | 0) == 89) {
          label = 0;
          HEAP32[$25 + (HEAPU16[$p_04_i_i27 >> 1] | 0) >> 2] = (HEAPU16[$p_04_i_i27 + 2 >> 1] | 0) >>> 1 & 1 ^ $_0_i_i25;
          $optind_0_be = $optind_1;
          $pthread_0_be = $pthread_0129;
          $run_0_be = $run_0127;
          break L5;
         } else if ((label | 0) == 90) {
          label = 0;
          if ((HEAP32[$2 >> 2] | 0) == 0) {
           $optind_0_be = $optind_1;
           $pthread_0_be = $pthread_0129;
           $run_0_be = $run_0127;
           break L5;
          } else {
           break L22;
          }
         }
         break;
        }
       case 7:
        {
         HEAP32[$11 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 6:
        {
         $136 = (_strlen($35 | 0) | 0) + 1 | 0;
         $137 = _malloc($136) | 0;
         if (($137 | 0) == 0 & ($136 | 0) != 0) {
          label = 38;
          break L3;
         }
         _strcpy($137 | 0, $35 | 0) | 0;
         $142 = HEAP32[$9 >> 2] | 0;
         $143 = HEAP32[$8 >> 2] | 0;
         if (($142 - 1 & $142 | 0) == 0) {
          $nb_alloc_0_i9 = ($142 | 0) == 0 ? 4 : $142 << 3;
          $150 = _realloc($143, $nb_alloc_0_i9) | 0;
          if (($150 | 0) == 0 & ($nb_alloc_0_i9 | 0) != 0) {
           label = 41;
           break L3;
          }
          $154 = $150;
          HEAP32[$8 >> 2] = $154;
          $pp_0_i12 = $154;
         } else {
          $pp_0_i12 = $143;
         }
         HEAP32[$pp_0_i12 + ($142 << 2) >> 2] = $137;
         HEAP32[$9 >> 2] = $142 + 1;
         HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 4:
        {
         _tcc_split_path($s, $5, $6, $optarg_0);
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 11:
        {
         HEAP32[$14 >> 2] = 3;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 12:
        {
         HEAP32[$15 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 16:
        {
         HEAP32[$19 >> 2] = 1;
         HEAP32[$14 >> 2] = 3;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 23:
        {
         _tcc_split_path($s, $20, $21, $optarg_0);
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 24:
        {
         HEAP32[$22 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 25:
        {
         HEAP32[$23 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 26:
        {
         HEAP32[$24 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 30:
        {
         HEAP32[$14 >> 2] = 0;
         _tcc_set_options($s, $optarg_0) | 0;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = 1;
         break L5;
         break;
        }
       case 22:
        {
         do {
          if ((HEAP8[$optarg_0] | 0) == 110) {
           if ((HEAP8[$optarg_0 + 1 | 0] | 0) != 111) {
            $r_0_i_i = $optarg_0;
            $_0_i_i = 1;
            break;
           }
           $220 = (HEAP8[$optarg_0 + 2 | 0] | 0) == 45;
           $r_0_i_i = $220 ? $optarg_0 + 3 | 0 : $optarg_0;
           $_0_i_i = $220 & 1 ^ 1;
          } else {
           $r_0_i_i = $optarg_0;
           $_0_i_i = 1;
          }
         } while (0);
         $i_03_i_i = 0;
         $p_04_i_i = 7560;
         while (1) {
          if ((_strcmp($r_0_i_i | 0, HEAP32[$p_04_i_i + 4 >> 2] | 0) | 0) == 0) {
           label = 77;
           break;
          }
          $229 = $i_03_i_i + 1 | 0;
          if (($229 | 0) < 4) {
           $i_03_i_i = $229;
           $p_04_i_i = $p_04_i_i + 8 | 0;
          } else {
           label = 78;
           break;
          }
         }
         if ((label | 0) == 77) {
          label = 0;
          HEAP32[$25 + (HEAPU16[$p_04_i_i >> 1] | 0) >> 2] = (HEAPU16[$p_04_i_i + 2 >> 1] | 0) >>> 1 & 1 ^ $_0_i_i;
          $optind_0_be = $optind_1;
          $pthread_0_be = $pthread_0129;
          $run_0_be = $run_0127;
          break L5;
         } else if ((label | 0) == 78) {
          label = 0;
          if ((HEAP32[$2 >> 2] | 0) == 0) {
           $optind_0_be = $optind_1;
           $pthread_0_be = $pthread_0129;
           $run_0_be = $run_0127;
           break L5;
          } else {
           break L22;
          }
         }
         break;
        }
       case 32:
        {
         HEAP32[$26 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 27:
        {
         HEAP32[$27 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 18:
        {
         $299 = HEAP32[$28 >> 2] | 0;
         if (($299 | 0) != 0) {
          HEAP32[$28 >> 2] = $299 - 1;
          _cstr_ccat($linker_arg, 44);
         }
         _cstr_cat($linker_arg, $optarg_0);
         _cstr_ccat($linker_arg, 0);
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 34:
        {
         HEAP32[$14 >> 2] = 4;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 35:
        {
         HEAP32[$29 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 36:
        {
         $308 = (_strlen($optarg_0 | 0) | 0) + 1 | 0;
         $309 = _malloc($308) | 0;
         if (($309 | 0) == 0 & ($308 | 0) != 0) {
          label = 99;
          break L3;
         }
         _strcpy($309 | 0, $optarg_0 | 0) | 0;
         HEAP32[$30 >> 2] = $309;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 38:
        {
         label = 101;
         break L3;
         break;
        }
       case 15:
        {
         $191 = (_strlen($optarg_0 | 0) | 0) + 1 | 0;
         $192 = _malloc($191) | 0;
         if (($192 | 0) == 0 & ($191 | 0) != 0) {
          label = 62;
          break L3;
         }
         _strcpy($192 | 0, $optarg_0 | 0) | 0;
         HEAP32[$18 >> 2] = $192;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 20:
       case 28:
       case 33:
       case 17:
       case 37:
        {
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 21:
        {
         $183 = (_strlen($optarg_0 | 0) | 0) + 1 | 0;
         $184 = _malloc($183) | 0;
         if (($184 | 0) == 0 & ($183 | 0) != 0) {
          label = 59;
          break L3;
         }
         _strcpy($184 | 0, $optarg_0 | 0) | 0;
         HEAP32[$17 >> 2] = $184;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 29:
        {
         $160 = _malloc(11) | 0;
         if (($160 | 0) == 0) {
          label = 45;
          break L3;
         }
         _memcpy($160 | 0, 11968, 11) | 0;
         $163 = _strchr($160 | 0, 61) | 0;
         if (($163 | 0) == 0) {
          $value_0_i14 = 0;
         } else {
          HEAP8[$163] = 0;
          $value_0_i14 = $163 + 1 | 0;
         }
         _tcc_define_symbol($s, $160, $value_0_i14);
         _free($160);
         $optind_0_be = $optind_1;
         $pthread_0_be = 1;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 13:
        {
         HEAP32[$14 >> 2] = 2;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 14:
        {
         $175 = (_strlen($optarg_0 | 0) | 0) + 1 | 0;
         $176 = _malloc($175) | 0;
         if (($176 | 0) == 0 & ($175 | 0) != 0) {
          label = 56;
          break L3;
         }
         _strcpy($176 | 0, $optarg_0 | 0) | 0;
         HEAP32[$16 >> 2] = $176;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 31:
        {
         $optarg_1 = $optarg_0;
         $205 = HEAP32[$31 >> 2] | 0;
         while (1) {
          $206 = $205 + 1 | 0;
          HEAP32[$31 >> 2] = $206;
          if ((HEAP8[$optarg_1] | 0) == 118) {
           $optarg_1 = $optarg_1 + 1 | 0;
           $205 = $206;
          } else {
           $optind_0_be = $optind_1;
           $pthread_0_be = $pthread_0129;
           $run_0_be = $run_0127;
           break L5;
          }
         }
         break;
        }
       case 1:
        {
         _tcc_split_path($s, $3, $4, $optarg_0);
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 2:
        {
         $106 = (_strlen($optarg_0 | 0) | 0) + 1 | 0;
         $107 = _malloc($106) | 0;
         if (($107 | 0) == 0 & ($106 | 0) != 0) {
          label = 27;
          break L3;
         }
         _strcpy($107 | 0, $optarg_0 | 0) | 0;
         $112 = _strchr($107 | 0, 61) | 0;
         if (($112 | 0) == 0) {
          $value_0_i = 0;
         } else {
          HEAP8[$112] = 0;
          $value_0_i = $112 + 1 | 0;
         }
         _tcc_define_symbol($s, $107, $value_0_i);
         _free($107);
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 3:
        {
         $121 = _define_find(HEAP32[(_tok_alloc($optarg_0, _strlen($optarg_0 | 0) | 0) | 0) + 20 >> 2] | 0) | 0;
         if (($121 | 0) == 0) {
          $optind_0_be = $optind_1;
          $pthread_0_be = $pthread_0129;
          $run_0_be = $run_0127;
          break L5;
         }
         _define_undef($121);
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 10:
        {
         HEAP32[$13 >> 2] = 1;
         $optind_0_be = $optind_1;
         $pthread_0_be = $pthread_0129;
         $run_0_be = $run_0127;
         break L5;
         break;
        }
       case 0:
        {
         $_0 = 0;
         label = 208;
         break L3;
         break;
        }
       default:
        {
         if ((HEAP32[$2 >> 2] | 0) == 0) {
          $optind_0_be = $optind_1;
          $pthread_0_be = $pthread_0129;
          $run_0_be = $run_0127;
          break L5;
         }
        }
       }
      } while (0);
      _tcc_warning(11864, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $35, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $optind_0_be = $optind_1;
      $pthread_0_be = $pthread_0129;
      $run_0_be = $run_0127;
     } else {
      label = 5;
     }
    } while (0);
    if ((label | 0) == 5) {
     label = 0;
     $44 = (_strlen($35 | 0) | 0) + 1 | 0;
     $45 = _malloc($44) | 0;
     if (($45 | 0) == 0 & ($44 | 0) != 0) {
      label = 6;
      break;
     }
     _strcpy($45 | 0, $35 | 0) | 0;
     $50 = HEAP32[$9 >> 2] | 0;
     $51 = HEAP32[$8 >> 2] | 0;
     if (($50 - 1 & $50 | 0) == 0) {
      $nb_alloc_0_i = ($50 | 0) == 0 ? 4 : $50 << 3;
      $58 = _realloc($51, $nb_alloc_0_i) | 0;
      if (($58 | 0) == 0 & ($nb_alloc_0_i | 0) != 0) {
       label = 9;
       break;
      }
      $62 = $58;
      HEAP32[$8 >> 2] = $62;
      $pp_0_i = $62;
     } else {
      $pp_0_i = $51;
     }
     HEAP32[$pp_0_i + ($50 << 2) >> 2] = $45;
     HEAP32[$9 >> 2] = $50 + 1;
     if (($run_0127 | 0) == 0) {
      $optind_0_be = $33;
      $pthread_0_be = $pthread_0129;
      $run_0_be = 0;
     } else {
      $pthread_0_lcssa = $pthread_0129;
      $optind_0_lcssa = $optind_0131;
      label = 105;
      break;
     }
    }
    if (($optind_0_be | 0) < ($argc | 0)) {
     $run_0127 = $run_0_be;
     $pthread_0129 = $pthread_0_be;
     $optind_0131 = $optind_0_be;
    } else {
     $pthread_0_lcssa = $pthread_0_be;
     $optind_0_lcssa = $optind_0_be;
     label = 105;
     break;
    }
   }
   if ((label | 0) == 6) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 9) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 12) {
    _tcc_error(12176, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $35, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 19) {
    _tcc_error(12088, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $35, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 27) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 35) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 38) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 41) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 45) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 56) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 59) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 62) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 99) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 101) {
    _puts(19080) | 0;
    _exit(0);
    return 0;
   } else if ((label | 0) == 105) {
    if (($pthread_0_lcssa | 0) == 0) {
     $optind_0_lcssa215 = $optind_0_lcssa;
     break;
    }
    if ((HEAP32[$s + 44 >> 2] | 0) == 3) {
     $optind_0_lcssa215 = $optind_0_lcssa;
     break;
    }
    _tcc_set_options($s, 11784) | 0;
    $optind_0_lcssa215 = $optind_0_lcssa;
    break;
   } else if ((label | 0) == 208) {
    STACKTOP = sp;
    return $_0 | 0;
   }
  } else {
   $optind_0_lcssa215 = 0;
  }
 } while (0);
 $328 = HEAP32[$linker_arg + 4 >> 2] | 0;
 $330 = $buf_i | 0;
 L135 : do {
  if (($328 | 0) != 0) {
   $332 = $s + 36 | 0;
   $333 = $s + 96 | 0;
   $334 = $s + 40 | 0;
   $335 = $s + 48 | 0;
   $336 = $s + 100 | 0;
   $337 = $s + 88 | 0;
   $338 = $s + 92 | 0;
   $339 = $s + 64 | 0;
   $340 = $s + 104 | 0;
   $341 = $s + 8 | 0;
   $342 = $s + 24 | 0;
   $343 = $buf_i + 99 | 0;
   if ((HEAP8[$328] | 0) == 0) {
    break;
   } else {
    $_0187_i62 = $328;
   }
   L137 : while (1) {
    HEAP32[$end_i >> 2] = 0;
    $346 = $_0187_i62 + 1 | 0;
    L139 : do {
     if ((HEAP8[$_0187_i62] | 0) == 45) {
      $__i_i = (HEAP8[$346] | 0) == 45 ? $_0187_i62 + 2 | 0 : $346;
      $q_0_i_i = 11616;
      $p_0_i_i = $__i_i;
      while (1) {
       $354 = HEAP8[$q_0_i_i] | 0;
       if (($354 << 24 >> 24 | 0) == 61) {
        label = 115;
        break;
       } else if (($354 << 24 >> 24 | 0) == 0) {
        $p_1_i485_ph_i = $p_0_i_i;
        label = 117;
        break;
       }
       if ((HEAP8[$p_0_i_i] | 0) != $354 << 24 >> 24) {
        $q_0_i3_i = 11552;
        $p_0_i2_i = $__i_i;
        break;
       }
       $q_0_i_i = $q_0_i_i + 1 | 0;
       $p_0_i_i = $p_0_i_i + 1 | 0;
      }
      do {
       if ((label | 0) == 115) {
        label = 0;
        $362 = HEAP8[$p_0_i_i] | 0;
        if (!(($362 << 24 >> 24 | 0) == 44 | ($362 << 24 >> 24 | 0) == 61)) {
         $q_0_i3_i = 11552;
         $p_0_i2_i = $__i_i;
         break;
        }
        $p_1_i485_ph_i = $p_0_i_i + 1 | 0;
        label = 117;
       }
      } while (0);
      if ((label | 0) == 117) {
       label = 0;
       HEAP32[$342 >> 2] = 1;
       $p_1_i486_i = $p_1_i485_ph_i;
       break;
      }
      while (1) {
       $365 = HEAP8[$q_0_i3_i] | 0;
       if (($365 << 24 >> 24 | 0) == 61) {
        label = 121;
        break;
       } else if (($365 << 24 >> 24 | 0) == 0) {
        $p_1_i484_ph_i = $p_0_i2_i;
        label = 123;
        break;
       }
       if ((HEAP8[$p_0_i2_i] | 0) != $365 << 24 >> 24) {
        $q_0_i10_i = 11464;
        $p_0_i9_i = $__i_i;
        break;
       }
       $q_0_i3_i = $q_0_i3_i + 1 | 0;
       $p_0_i2_i = $p_0_i2_i + 1 | 0;
      }
      do {
       if ((label | 0) == 121) {
        label = 0;
        $373 = HEAP8[$p_0_i2_i] | 0;
        if (!(($373 << 24 >> 24 | 0) == 44 | ($373 << 24 >> 24 | 0) == 61)) {
         $q_0_i10_i = 11464;
         $p_0_i9_i = $__i_i;
         break;
        }
        $p_1_i484_ph_i = $p_0_i2_i + 1 | 0;
        label = 123;
       }
      } while (0);
      if ((label | 0) == 123) {
       label = 0;
       HEAP32[$341 >> 2] = 1;
       $p_1_i486_i = $p_1_i484_ph_i;
       break;
      }
      while (1) {
       $376 = HEAP8[$q_0_i10_i] | 0;
       if (($376 << 24 >> 24 | 0) == 61) {
        label = 127;
        break;
       } else if (($376 << 24 >> 24 | 0) == 0) {
        $p_1_i483_ph_i = $p_0_i9_i;
        label = 129;
        break;
       }
       if ((HEAP8[$p_0_i9_i] | 0) != $376 << 24 >> 24) {
        $q_0_i17_i = 11416;
        $p_0_i16_i = $__i_i;
        label = 134;
        break;
       }
       $q_0_i10_i = $q_0_i10_i + 1 | 0;
       $p_0_i9_i = $p_0_i9_i + 1 | 0;
      }
      do {
       if ((label | 0) == 127) {
        label = 0;
        $384 = HEAP8[$p_0_i9_i] | 0;
        if (!(($384 << 24 >> 24 | 0) == 44 | ($384 << 24 >> 24 | 0) == 61)) {
         $q_0_i17_i = 11416;
         $p_0_i16_i = $__i_i;
         label = 134;
         break;
        }
        $p_1_i483_ph_i = $p_0_i9_i + 1 | 0;
        label = 129;
       }
      } while (0);
      L166 : do {
       if ((label | 0) == 129) {
        label = 0;
        $387 = _strchr($p_1_i483_ph_i | 0, 44) | 0;
        if (($387 | 0) == 0) {
         $392 = $p_1_i483_ph_i + (_strlen($p_1_i483_ph_i | 0) | 0) | 0;
        } else {
         $392 = $387;
        }
        $395 = $392 - $p_1_i483_ph_i | 0;
        $396 = $395 + 1 | 0;
        $397 = _malloc($396) | 0;
        if (($397 | 0) == 0 & ($396 | 0) != 0) {
         label = 132;
         break L137;
        }
        _memcpy($397 | 0, $p_1_i483_ph_i | 0, $395) | 0;
        HEAP8[$397 + $395 | 0] = 0;
        HEAP32[$340 >> 2] = $397;
        $p_1_i487_ph152_i = $p_1_i483_ph_i;
       } else if ((label | 0) == 134) {
        while (1) {
         label = 0;
         $402 = HEAP8[$q_0_i17_i] | 0;
         if (($402 << 24 >> 24 | 0) == 61) {
          label = 137;
          break;
         } else if (($402 << 24 >> 24 | 0) == 0) {
          $p_1_i493_i = $p_0_i16_i;
          break;
         }
         if ((HEAP8[$p_0_i16_i] | 0) != $402 << 24 >> 24) {
          $q_0_i24_i = 11352;
          $p_0_i23_i = $__i_i;
          label = 139;
          break;
         }
         $q_0_i17_i = $q_0_i17_i + 1 | 0;
         $p_0_i16_i = $p_0_i16_i + 1 | 0;
         label = 134;
        }
        do {
         if ((label | 0) == 137) {
          label = 0;
          $410 = HEAP8[$p_0_i16_i] | 0;
          if (!(($410 << 24 >> 24 | 0) == 44 | ($410 << 24 >> 24 | 0) == 61)) {
           $q_0_i24_i = 11352;
           $p_0_i23_i = $__i_i;
           label = 139;
           break;
          }
          $p_1_i493_i = $p_0_i16_i + 1 | 0;
         }
        } while (0);
        L179 : do {
         if ((label | 0) == 139) {
          while (1) {
           label = 0;
           $413 = HEAP8[$q_0_i24_i] | 0;
           if (($413 << 24 >> 24 | 0) == 61) {
            label = 142;
            break;
           } else if (($413 << 24 >> 24 | 0) == 0) {
            $p_1_i493_i = $p_0_i23_i;
            break L179;
           }
           if ((HEAP8[$p_0_i23_i] | 0) != $413 << 24 >> 24) {
            $q_0_i31_i = 11288;
            $p_0_i30_i = $__i_i;
            break;
           }
           $q_0_i24_i = $q_0_i24_i + 1 | 0;
           $p_0_i23_i = $p_0_i23_i + 1 | 0;
           label = 139;
          }
          do {
           if ((label | 0) == 142) {
            label = 0;
            $421 = HEAP8[$p_0_i23_i] | 0;
            if (!(($421 << 24 >> 24 | 0) == 44 | ($421 << 24 >> 24 | 0) == 61)) {
             $q_0_i31_i = 11288;
             $p_0_i30_i = $__i_i;
             break;
            }
            $p_1_i493_i = $p_0_i23_i + 1 | 0;
            break L179;
           }
          } while (0);
          while (1) {
           $426 = HEAP8[$q_0_i31_i] | 0;
           if (($426 << 24 >> 24 | 0) == 61) {
            label = 148;
            break;
           } else if (($426 << 24 >> 24 | 0) == 0) {
            $p_1_i480_ph_i = $p_0_i30_i;
            label = 150;
            break;
           }
           if ((HEAP8[$p_0_i30_i] | 0) != $426 << 24 >> 24) {
            $q_0_i41_i = 11216;
            $p_0_i40_i = $__i_i;
            break;
           }
           $q_0_i31_i = $q_0_i31_i + 1 | 0;
           $p_0_i30_i = $p_0_i30_i + 1 | 0;
          }
          do {
           if ((label | 0) == 148) {
            label = 0;
            $434 = HEAP8[$p_0_i30_i] | 0;
            if (!(($434 << 24 >> 24 | 0) == 44 | ($434 << 24 >> 24 | 0) == 61)) {
             $q_0_i41_i = 11216;
             $p_0_i40_i = $__i_i;
             break;
            }
            $p_1_i480_ph_i = $p_0_i30_i + 1 | 0;
            label = 150;
           }
          } while (0);
          if ((label | 0) == 150) {
           label = 0;
           $437 = _strchr($p_1_i480_ph_i | 0, 44) | 0;
           if (($437 | 0) == 0) {
            $442 = $p_1_i480_ph_i + (_strlen($p_1_i480_ph_i | 0) | 0) | 0;
           } else {
            $442 = $437;
           }
           $445 = $442 - $p_1_i480_ph_i | 0;
           $446 = $445 + 1 | 0;
           $447 = _malloc($446) | 0;
           if (($447 | 0) == 0 & ($446 | 0) != 0) {
            label = 153;
            break L137;
           }
           _memcpy($447 | 0, $p_1_i480_ph_i | 0, $445) | 0;
           HEAP8[$447 + $445 | 0] = 0;
           HEAP32[$336 >> 2] = $447;
           $p_1_i487_ph152_i = $p_1_i480_ph_i;
           break L166;
          }
          while (1) {
           $452 = HEAP8[$q_0_i41_i] | 0;
           if (($452 << 24 >> 24 | 0) == 61) {
            label = 158;
            break;
           } else if (($452 << 24 >> 24 | 0) == 0) {
            $p_1_i479_ph_i = $p_0_i40_i;
            label = 160;
            break;
           }
           if ((HEAP8[$p_0_i40_i] | 0) != $452 << 24 >> 24) {
            $q_0_i50_i = 11040;
            $p_0_i49_i = $__i_i;
            break;
           }
           $q_0_i41_i = $q_0_i41_i + 1 | 0;
           $p_0_i40_i = $p_0_i40_i + 1 | 0;
          }
          do {
           if ((label | 0) == 158) {
            label = 0;
            $460 = HEAP8[$p_0_i40_i] | 0;
            if (!(($460 << 24 >> 24 | 0) == 44 | ($460 << 24 >> 24 | 0) == 61)) {
             $q_0_i50_i = 11040;
             $p_0_i49_i = $__i_i;
             break;
            }
            $p_1_i479_ph_i = $p_0_i40_i + 1 | 0;
            label = 160;
           }
          } while (0);
          if ((label | 0) == 160) {
           label = 0;
           $p_02_i_i = $p_1_i479_ph_i;
           $q_03_i_i = 11112;
           $463 = 101;
           while (1) {
            if ((HEAP8[$p_02_i_i] | 0) != $463 << 24 >> 24) {
             break;
            }
            $467 = $p_02_i_i + 1 | 0;
            $468 = $q_03_i_i + 1 | 0;
            $469 = HEAP8[$468] | 0;
            if ($469 << 24 >> 24 == 0) {
             label = 163;
             break;
            } else {
             $p_02_i_i = $467;
             $q_03_i_i = $468;
             $463 = $469;
            }
           }
           if ((label | 0) == 163) {
            label = 0;
            HEAP32[$335 >> 2] = 0;
            $p_1_i486_i = $467;
            break L139;
           }
           if ((_strcmp($p_1_i479_ph_i | 0, 11056) | 0) != 0) {
            $ignoring_1_i = 0;
            $p_1_i488_i = $p_1_i479_ph_i;
            label = 193;
            break L139;
           }
           HEAP32[$335 >> 2] = 1;
           $p_1_i486_i = $p_1_i479_ph_i;
           break L139;
          }
          while (1) {
           $476 = HEAP8[$q_0_i50_i] | 0;
           if (($476 << 24 >> 24 | 0) == 61) {
            label = 169;
            break;
           } else if (($476 << 24 >> 24 | 0) == 0) {
            $p_1_i491_ph_i = $p_0_i49_i;
            label = 171;
            break;
           }
           if ((HEAP8[$p_0_i49_i] | 0) != $476 << 24 >> 24) {
            $q_0_i60_i = 10992;
            $p_0_i59_i = $__i_i;
            break;
           }
           $q_0_i50_i = $q_0_i50_i + 1 | 0;
           $p_0_i49_i = $p_0_i49_i + 1 | 0;
          }
          do {
           if ((label | 0) == 169) {
            label = 0;
            $484 = HEAP8[$p_0_i49_i] | 0;
            if (!(($484 << 24 >> 24 | 0) == 44 | ($484 << 24 >> 24 | 0) == 61)) {
             $q_0_i60_i = 10992;
             $p_0_i59_i = $__i_i;
             break;
            }
            $p_1_i491_ph_i = $p_0_i49_i + 1 | 0;
            label = 171;
           }
          } while (0);
          if ((label | 0) == 171) {
           label = 0;
           $487 = _strchr($p_1_i491_ph_i | 0, 44) | 0;
           if (($487 | 0) == 0) {
            $492 = $p_1_i491_ph_i + (_strlen($p_1_i491_ph_i | 0) | 0) | 0;
           } else {
            $492 = $487;
           }
           $495 = $492 - $p_1_i491_ph_i | 0;
           $496 = $495 + 1 | 0;
           $497 = _malloc($496) | 0;
           if (($497 | 0) == 0 & ($496 | 0) != 0) {
            label = 174;
            break L137;
           }
           _memcpy($497 | 0, $p_1_i491_ph_i | 0, $495) | 0;
           HEAP8[$497 + $495 | 0] = 0;
           HEAP32[$334 >> 2] = $497;
           $p_1_i486_i = $p_1_i491_ph_i;
           break L139;
          }
          while (1) {
           $502 = HEAP8[$q_0_i60_i] | 0;
           if (($502 << 24 >> 24 | 0) == 61) {
            label = 179;
            break;
           } else if (($502 << 24 >> 24 | 0) == 0) {
            $p_1_i490_ph_i = $p_0_i59_i;
            label = 181;
            break;
           }
           if ((HEAP8[$p_0_i59_i] | 0) != $502 << 24 >> 24) {
            $q_0_i67_i = 10960;
            $p_0_i66_i = $__i_i;
            break;
           }
           $q_0_i60_i = $q_0_i60_i + 1 | 0;
           $p_0_i59_i = $p_0_i59_i + 1 | 0;
          }
          do {
           if ((label | 0) == 179) {
            label = 0;
            $510 = HEAP8[$p_0_i59_i] | 0;
            if (!(($510 << 24 >> 24 | 0) == 44 | ($510 << 24 >> 24 | 0) == 61)) {
             $q_0_i67_i = 10960;
             $p_0_i66_i = $__i_i;
             break;
            }
            $p_1_i490_ph_i = $p_0_i59_i + 1 | 0;
            label = 181;
           }
          } while (0);
          if ((label | 0) == 181) {
           label = 0;
           HEAP32[$333 >> 2] = _strtoul($p_1_i490_ph_i | 0, $end_i | 0, 16) | 0;
           $p_1_i486_i = $p_1_i490_ph_i;
           break L139;
          }
          while (1) {
           $514 = HEAP8[$q_0_i67_i] | 0;
           if (($514 << 24 >> 24 | 0) == 61) {
            label = 185;
            break;
           } else if (($514 << 24 >> 24 | 0) == 0) {
            $p_1_i489_ph_i = $p_0_i66_i;
            break;
           }
           if ((HEAP8[$p_0_i66_i] | 0) != $514 << 24 >> 24) {
            $ignoring_1_i = 0;
            $p_1_i488_i = $_0187_i62;
            label = 193;
            break L139;
           }
           $q_0_i67_i = $q_0_i67_i + 1 | 0;
           $p_0_i66_i = $p_0_i66_i + 1 | 0;
          }
          if ((label | 0) == 185) {
           label = 0;
           $522 = HEAP8[$p_0_i66_i] | 0;
           if (!(($522 << 24 >> 24 | 0) == 44 | ($522 << 24 >> 24 | 0) == 61)) {
            $ignoring_1_i = 0;
            $p_1_i488_i = $_0187_i62;
            label = 193;
            break L139;
           }
           $p_1_i489_ph_i = $p_0_i66_i + 1 | 0;
          }
          $525 = _strchr($p_1_i489_ph_i | 0, 44) | 0;
          if (($525 | 0) == 0) {
           $530 = $p_1_i489_ph_i + (_strlen($p_1_i489_ph_i | 0) | 0) | 0;
          } else {
           $530 = $525;
          }
          $533 = $530 - $p_1_i489_ph_i | 0;
          $534 = $533 + 1 | 0;
          $535 = _malloc($534) | 0;
          if (($535 | 0) == 0 & ($534 | 0) != 0) {
           label = 190;
           break L137;
          }
          _memcpy($535 | 0, $p_1_i489_ph_i | 0, $533) | 0;
          HEAP8[$535 + $533 | 0] = 0;
          HEAP32[$332 >> 2] = $535;
          $p_1_i486_i = $p_1_i489_ph_i;
          break L139;
         }
        } while (0);
        $424$0 = _strtoull($p_1_i493_i | 0, $end_i | 0, 16) | 0;
        HEAP32[$337 >> 2] = $424$0;
        HEAP32[$338 >> 2] = 1;
        $p_1_i486_i = $p_1_i493_i;
        break L139;
       }
      } while (0);
      if ((HEAP32[$339 >> 2] | 0) == 0) {
       $p_1_i486_i = $p_1_i487_ph152_i;
      } else {
       $ignoring_1_i = 1;
       $p_1_i488_i = $p_1_i487_ph152_i;
       label = 193;
      }
     } else {
      $ignoring_1_i = 0;
      $p_1_i488_i = $_0187_i62;
      label = 193;
     }
    } while (0);
    if ((label | 0) == 193) {
     label = 0;
     $543 = _strchr($_0187_i62 | 0, 44) | 0;
     if (($543 | 0) == 0) {
      $548 = $_0187_i62 + (_strlen($_0187_i62 | 0) | 0) | 0;
     } else {
      $548 = $543;
     }
     $551 = $548 - $_0187_i62 | 0;
     $552 = $551 + 1 | 0;
     $553 = _malloc($552) | 0;
     if (($553 | 0) == 0 & ($552 | 0) != 0) {
      label = 196;
      break;
     }
     _memcpy($553 | 0, $_0187_i62 | 0, $551) | 0;
     HEAP8[$553 + $551 | 0] = 0;
     $q_01_i_i = $330;
     $_02_i_i = $553;
     while (1) {
      $558 = HEAP8[$_02_i_i] | 0;
      if ($558 << 24 >> 24 == 0) {
       $q_0_lcssa_i_i = $q_01_i_i;
       break;
      }
      $562 = $q_01_i_i + 1 | 0;
      HEAP8[$q_01_i_i] = $558;
      if ($562 >>> 0 < $343 >>> 0) {
       $q_01_i_i = $562;
       $_02_i_i = $_02_i_i + 1 | 0;
      } else {
       $q_0_lcssa_i_i = $562;
       break;
      }
     }
     HEAP8[$q_0_lcssa_i_i] = 0;
     _free($553);
     if (($ignoring_1_i | 0) == 0) {
      label = 202;
      break;
     }
     _tcc_warning(10880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $330, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $p_1_i486_i = $p_1_i488_i;
    }
    $567 = _strchr($p_1_i486_i | 0, 44) | 0;
    if (($567 | 0) == 0) {
     $573 = $p_1_i486_i + (_strlen($p_1_i486_i | 0) | 0) | 0;
     if (($573 | 0) == 0) {
      break L135;
     } else {
      $_0187_i_be = $573;
     }
    } else {
     $_0187_i_be = $567 + 1 | 0;
    }
    if ((HEAP8[$_0187_i_be] | 0) == 0) {
     break L135;
    } else {
     $_0187_i62 = $_0187_i_be;
    }
   }
   if ((label | 0) == 132) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 153) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 174) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 190) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 196) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else if ((label | 0) == 202) {
    _tcc_error(10880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $330, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   }
  }
 } while (0);
 _cstr_free($linker_arg);
 $_0 = $optind_0_lcssa215;
 STACKTOP = sp;
 return $_0 | 0;
}
function _vstore() {
 var $tmp_i76 = 0, $tmp_i63 = 0, $tmp_i59 = 0, $tmp_i55 = 0, $tmp_i49 = 0, $tmp_i36 = 0, $tmp_i_i = 0, $tmp_i22 = 0, $tmp_i17 = 0, $cval_sroa_2_i = 0, $tmp_i7 = 0, $tmp_i = 0, $align = 0, $sv = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $delayed_cast_0 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $49 = 0, $50 = 0, $52 = 0, $55 = 0, $58 = 0, $60 = 0, $_pre_i6 = 0, $66 = 0, $67 = 0, $71 = 0, $72 = 0, $78 = 0, $79 = 0, $84 = 0, $91 = 0, $92 = 0, $94 = 0, $97 = 0, $98 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $110 = 0, $_pre_i12 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $122 = 0, $128 = 0, $129 = 0, $133 = 0, $138 = 0, $145 = 0, $146 = 0, $147 = 0, $$etemp$5 = 0, $148$1 = 0, $153 = 0, $157 = 0, $159 = 0, $160 = 0, $165 = 0, $172 = 0, $173 = 0, $175 = 0, $178 = 0, $179 = 0, $182 = 0, $202 = 0, $204 = 0, $208 = 0, $209 = 0, $214 = 0, $221 = 0, $222 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $i_01_i_i = 0, $235 = 0, $236 = 0, $240 = 0, $246 = 0, $251 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $261 = 0, $262 = 0, $267 = 0, $271 = 0, $276 = 0, $283 = 0, $284 = 0, $285 = 0, $292 = 0, $295 = 0, $296 = 0, $297 = 0, $301 = 0, $306 = 0, $313 = 0, $314 = 0, $315 = 0, $$etemp$25 = 0, $316$1 = 0, $321 = 0, $325 = 0, $328 = 0, $329 = 0, $333 = 0, $338 = 0, $345 = 0, $346 = 0, $347 = 0, $$etemp$32 = 0, $348$1 = 0, $353 = 0, $357 = 0, $358 = 0, $359 = 0, $364 = 0, $371 = 0, $372 = 0, $374 = 0, $377 = 0, $385$0 = 0, $385$1 = 0, $386 = 0, $390 = 0, $395 = 0, $402 = 0, $403 = 0, $404 = 0, $411 = 0, $416 = 0, $417 = 0, $421 = 0, $426 = 0, $433 = 0, $434 = 0, $435 = 0, $$etemp$49 = 0, $436$1 = 0, $441 = 0, $445 = 0, $447 = 0, $450 = 0, $466 = 0, $472 = 0, $477 = 0, $484 = 0, $485 = 0, $487 = 0, $490 = 0, $491 = 0, $492 = 0, $497 = 0, $504 = 0, $505 = 0, $507 = 0, $510 = 0, $517 = 0, $518 = 0, $519 = 0, $525 = 0, $539 = 0, $543 = 0, $544 = 0, $549 = 0, $556 = 0, $557 = 0, $559 = 0, $562 = 0, $565 = 0, $567 = 0, $_pre_i67 = 0, $573 = 0, $574 = 0, $577 = 0, $578 = 0, $579 = 0, $585 = 0, $586 = 0, $590 = 0, $595 = 0, $602 = 0, $603 = 0, $604 = 0, $$etemp$62 = 0, $605$1 = 0, $610 = 0, $614 = 0, $616 = 0, $619 = 0, $620 = 0, $625 = 0, $632 = 0, $633 = 0, $635 = 0, $638 = 0, $639 = 0, $645 = 0, $646 = 0, $651 = 0, $658 = 0, $659 = 0, $661 = 0, $664 = 0, $665 = 0, $667 = 0, $265$0 = 0, $266$0 = 0, $266$1 = 0, $381$0 = 0, $382$0 = 0, $384$0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 504 | 0;
 $tmp_i76 = sp | 0;
 $tmp_i63 = sp + 40 | 0;
 $tmp_i59 = sp + 80 | 0;
 $tmp_i55 = sp + 120 | 0;
 $tmp_i49 = sp + 160 | 0;
 $tmp_i36 = sp + 200 | 0;
 $tmp_i_i = sp + 240 | 0;
 $tmp_i22 = sp + 280 | 0;
 $tmp_i17 = sp + 320 | 0;
 $cval_sroa_2_i = sp + 360 | 0;
 $tmp_i7 = sp + 376 | 0;
 $tmp_i = sp + 416 | 0;
 $align = sp + 456 | 0;
 $sv = sp + 464 | 0;
 $1 = HEAP32[5024] | 0;
 $3 = HEAP32[$1 - 40 >> 2] | 0;
 $4 = $1 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 & 15;
 $7 = $3 & 15;
 if (($5 & 13 | 0) == 0 & ($7 | 0) == 1) {
  if (($5 & 64 | 0) == 0) {
   label = 4;
  } else {
   label = 6;
  }
 } else {
  if (($6 | 0) == 0 & ($7 | 0) == 2 & ($5 & 64 | 0) == 0) {
   label = 4;
  } else {
   label = 6;
  }
 }
 do {
  if ((label | 0) == 4) {
   HEAP32[$4 >> 2] = $3 & 145471;
   if (($3 & 2048 | 0) == 0) {
    $delayed_cast_0 = 1024;
    break;
   }
   _tcc_warning(11800, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $delayed_cast_0 = 1024;
  } else if ((label | 0) == 6) {
   if (($3 & 64 | 0) != 0) {
    $delayed_cast_0 = 0;
    break;
   }
   _gen_assign_cast($1 - 40 | 0);
   $delayed_cast_0 = 0;
  }
 } while (0);
 if (($6 | 0) == 7) {
  if ((HEAP32[5338] | 0) != 0) {
   $159 = $tmp_i17;
   $160 = HEAP32[5024] | 0;
   do {
    if ($160 >>> 0 < 56272 >>> 0) {
     $172 = $160;
    } else {
     $165 = HEAPU16[$160 + 8 >> 1] | 0;
     if (!(($165 & 63 | 0) == 51 | ($165 & 62 | 0) == 52)) {
      $172 = $160;
      break;
     }
     _gv(1) | 0;
     $172 = HEAP32[5024] | 0;
    }
   } while (0);
   $173 = $172;
   HEAP32[$159 >> 2] = HEAP32[$173 >> 2];
   HEAP32[$159 + 4 >> 2] = HEAP32[$173 + 4 >> 2];
   HEAP32[$159 + 8 >> 2] = HEAP32[$173 + 8 >> 2];
   HEAP32[$159 + 12 >> 2] = HEAP32[$173 + 12 >> 2];
   HEAP32[$159 + 16 >> 2] = HEAP32[$173 + 16 >> 2];
   HEAP32[$159 + 20 >> 2] = HEAP32[$173 + 20 >> 2];
   HEAP32[$159 + 24 >> 2] = HEAP32[$173 + 24 >> 2];
   HEAP32[$159 + 28 >> 2] = HEAP32[$173 + 28 >> 2];
   HEAP32[$159 + 32 >> 2] = HEAP32[$173 + 32 >> 2];
   HEAP32[$159 + 36 >> 2] = HEAP32[$173 + 36 >> 2];
   $175 = $172 - 40 | 0;
   HEAP32[$173 >> 2] = HEAP32[$175 >> 2];
   HEAP32[$173 + 4 >> 2] = HEAP32[$175 + 4 >> 2];
   HEAP32[$173 + 8 >> 2] = HEAP32[$175 + 8 >> 2];
   HEAP32[$173 + 12 >> 2] = HEAP32[$175 + 12 >> 2];
   HEAP32[$173 + 16 >> 2] = HEAP32[$175 + 16 >> 2];
   HEAP32[$173 + 20 >> 2] = HEAP32[$175 + 20 >> 2];
   HEAP32[$173 + 24 >> 2] = HEAP32[$175 + 24 >> 2];
   HEAP32[$173 + 28 >> 2] = HEAP32[$175 + 28 >> 2];
   HEAP32[$173 + 32 >> 2] = HEAP32[$175 + 32 >> 2];
   HEAP32[$173 + 36 >> 2] = HEAP32[$175 + 36 >> 2];
   $178 = (HEAP32[5024] | 0) - 40 | 0;
   HEAP32[$178 >> 2] = HEAP32[$159 >> 2];
   HEAP32[$178 + 4 >> 2] = HEAP32[$159 + 4 >> 2];
   HEAP32[$178 + 8 >> 2] = HEAP32[$159 + 8 >> 2];
   HEAP32[$178 + 12 >> 2] = HEAP32[$159 + 12 >> 2];
   HEAP32[$178 + 16 >> 2] = HEAP32[$159 + 16 >> 2];
   HEAP32[$178 + 20 >> 2] = HEAP32[$159 + 20 >> 2];
   HEAP32[$178 + 24 >> 2] = HEAP32[$159 + 24 >> 2];
   HEAP32[$178 + 28 >> 2] = HEAP32[$159 + 28 >> 2];
   HEAP32[$178 + 32 >> 2] = HEAP32[$159 + 32 >> 2];
   HEAP32[$178 + 36 >> 2] = HEAP32[$159 + 36 >> 2];
   $179 = HEAP32[5024] | 0;
   $182 = HEAPU16[$179 + 8 >> 1] | 0;
   do {
    if (($182 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
     if (($182 & 62 | 0) != 52) {
      break;
     }
     _gsym(HEAP32[$179 + 16 >> 2] | 0);
    } else {
     _o(55517);
    }
   } while (0);
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
   STACKTOP = sp;
   return;
  }
  $35 = _type_size(HEAP32[5024] | 0, $align) | 0;
  $36 = $tmp_i;
  $37 = HEAP32[5024] | 0;
  do {
   if ($37 >>> 0 < 56272 >>> 0) {
    $49 = $37;
   } else {
    $42 = HEAPU16[$37 + 8 >> 1] | 0;
    if (!(($42 & 63 | 0) == 51 | ($42 & 62 | 0) == 52)) {
     $49 = $37;
     break;
    }
    _gv(1) | 0;
    $49 = HEAP32[5024] | 0;
   }
  } while (0);
  $50 = $49;
  HEAP32[$36 >> 2] = HEAP32[$50 >> 2];
  HEAP32[$36 + 4 >> 2] = HEAP32[$50 + 4 >> 2];
  HEAP32[$36 + 8 >> 2] = HEAP32[$50 + 8 >> 2];
  HEAP32[$36 + 12 >> 2] = HEAP32[$50 + 12 >> 2];
  HEAP32[$36 + 16 >> 2] = HEAP32[$50 + 16 >> 2];
  HEAP32[$36 + 20 >> 2] = HEAP32[$50 + 20 >> 2];
  HEAP32[$36 + 24 >> 2] = HEAP32[$50 + 24 >> 2];
  HEAP32[$36 + 28 >> 2] = HEAP32[$50 + 28 >> 2];
  HEAP32[$36 + 32 >> 2] = HEAP32[$50 + 32 >> 2];
  HEAP32[$36 + 36 >> 2] = HEAP32[$50 + 36 >> 2];
  $52 = $49 - 40 | 0;
  HEAP32[$50 >> 2] = HEAP32[$52 >> 2];
  HEAP32[$50 + 4 >> 2] = HEAP32[$52 + 4 >> 2];
  HEAP32[$50 + 8 >> 2] = HEAP32[$52 + 8 >> 2];
  HEAP32[$50 + 12 >> 2] = HEAP32[$52 + 12 >> 2];
  HEAP32[$50 + 16 >> 2] = HEAP32[$52 + 16 >> 2];
  HEAP32[$50 + 20 >> 2] = HEAP32[$52 + 20 >> 2];
  HEAP32[$50 + 24 >> 2] = HEAP32[$52 + 24 >> 2];
  HEAP32[$50 + 28 >> 2] = HEAP32[$52 + 28 >> 2];
  HEAP32[$50 + 32 >> 2] = HEAP32[$52 + 32 >> 2];
  HEAP32[$50 + 36 >> 2] = HEAP32[$52 + 36 >> 2];
  $55 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$55 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$55 + 4 >> 2] = HEAP32[$36 + 4 >> 2];
  HEAP32[$55 + 8 >> 2] = HEAP32[$36 + 8 >> 2];
  HEAP32[$55 + 12 >> 2] = HEAP32[$36 + 12 >> 2];
  HEAP32[$55 + 16 >> 2] = HEAP32[$36 + 16 >> 2];
  HEAP32[$55 + 20 >> 2] = HEAP32[$36 + 20 >> 2];
  HEAP32[$55 + 24 >> 2] = HEAP32[$36 + 24 >> 2];
  HEAP32[$55 + 28 >> 2] = HEAP32[$36 + 28 >> 2];
  HEAP32[$55 + 32 >> 2] = HEAP32[$36 + 32 >> 2];
  HEAP32[$55 + 36 >> 2] = HEAP32[$36 + 36 >> 2];
  HEAP32[HEAP32[5024] >> 2] = 4;
  $58 = HEAP32[5024] | 0;
  $60 = HEAP16[$58 + 8 >> 1] | 0;
  if (($60 & 64) == 0) {
   $67 = $58;
   $66 = $60;
  } else {
   _gv(1) | 0;
   $_pre_i6 = HEAP32[5024] | 0;
   $67 = $_pre_i6;
   $66 = HEAP16[$_pre_i6 + 8 >> 1] | 0;
  }
  HEAP16[$67 + 8 >> 1] = $66 & -257;
  $71 = (HEAP32[5024] | 0) + 8 | 0;
  $72 = HEAP16[$71 >> 1] | 0;
  if (($72 & 63) == 49) {
   HEAP16[$71 >> 1] = $72 & -28992 | 306;
  }
  _vpush_global_sym(55624, 371);
  $78 = $tmp_i7;
  $79 = HEAP32[5024] | 0;
  do {
   if ($79 >>> 0 < 56272 >>> 0) {
    $91 = $79;
   } else {
    $84 = HEAPU16[$79 + 8 >> 1] | 0;
    if (!(($84 & 63 | 0) == 51 | ($84 & 62 | 0) == 52)) {
     $91 = $79;
     break;
    }
    _gv(1) | 0;
    $91 = HEAP32[5024] | 0;
   }
  } while (0);
  $92 = $91;
  HEAP32[$78 >> 2] = HEAP32[$92 >> 2];
  HEAP32[$78 + 4 >> 2] = HEAP32[$92 + 4 >> 2];
  HEAP32[$78 + 8 >> 2] = HEAP32[$92 + 8 >> 2];
  HEAP32[$78 + 12 >> 2] = HEAP32[$92 + 12 >> 2];
  HEAP32[$78 + 16 >> 2] = HEAP32[$92 + 16 >> 2];
  HEAP32[$78 + 20 >> 2] = HEAP32[$92 + 20 >> 2];
  HEAP32[$78 + 24 >> 2] = HEAP32[$92 + 24 >> 2];
  HEAP32[$78 + 28 >> 2] = HEAP32[$92 + 28 >> 2];
  HEAP32[$78 + 32 >> 2] = HEAP32[$92 + 32 >> 2];
  HEAP32[$78 + 36 >> 2] = HEAP32[$92 + 36 >> 2];
  $94 = $91 - 40 | 0;
  HEAP32[$92 >> 2] = HEAP32[$94 >> 2];
  HEAP32[$92 + 4 >> 2] = HEAP32[$94 + 4 >> 2];
  HEAP32[$92 + 8 >> 2] = HEAP32[$94 + 8 >> 2];
  HEAP32[$92 + 12 >> 2] = HEAP32[$94 + 12 >> 2];
  HEAP32[$92 + 16 >> 2] = HEAP32[$94 + 16 >> 2];
  HEAP32[$92 + 20 >> 2] = HEAP32[$94 + 20 >> 2];
  HEAP32[$92 + 24 >> 2] = HEAP32[$94 + 24 >> 2];
  HEAP32[$92 + 28 >> 2] = HEAP32[$94 + 28 >> 2];
  HEAP32[$92 + 32 >> 2] = HEAP32[$94 + 32 >> 2];
  HEAP32[$92 + 36 >> 2] = HEAP32[$94 + 36 >> 2];
  $97 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$97 >> 2] = HEAP32[$78 >> 2];
  HEAP32[$97 + 4 >> 2] = HEAP32[$78 + 4 >> 2];
  HEAP32[$97 + 8 >> 2] = HEAP32[$78 + 8 >> 2];
  HEAP32[$97 + 12 >> 2] = HEAP32[$78 + 12 >> 2];
  HEAP32[$97 + 16 >> 2] = HEAP32[$78 + 16 >> 2];
  HEAP32[$97 + 20 >> 2] = HEAP32[$78 + 20 >> 2];
  HEAP32[$97 + 24 >> 2] = HEAP32[$78 + 24 >> 2];
  HEAP32[$97 + 28 >> 2] = HEAP32[$78 + 28 >> 2];
  HEAP32[$97 + 32 >> 2] = HEAP32[$78 + 32 >> 2];
  HEAP32[$97 + 36 >> 2] = HEAP32[$78 + 36 >> 2];
  $98 = HEAP32[5024] | 0;
  if ($98 >>> 0 < 66472 >>> 0) {
   $102 = $98;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $102 = HEAP32[5024] | 0;
  }
  $103 = $102 + 40 | 0;
  HEAP32[5024] = $103;
  $104 = $103;
  $105 = $98 - 80 | 0;
  HEAP32[$104 >> 2] = HEAP32[$105 >> 2];
  HEAP32[$104 + 4 >> 2] = HEAP32[$105 + 4 >> 2];
  HEAP32[$104 + 8 >> 2] = HEAP32[$105 + 8 >> 2];
  HEAP32[$104 + 12 >> 2] = HEAP32[$105 + 12 >> 2];
  HEAP32[$104 + 16 >> 2] = HEAP32[$105 + 16 >> 2];
  HEAP32[$104 + 20 >> 2] = HEAP32[$105 + 20 >> 2];
  HEAP32[$104 + 24 >> 2] = HEAP32[$105 + 24 >> 2];
  HEAP32[$104 + 28 >> 2] = HEAP32[$105 + 28 >> 2];
  HEAP32[$104 + 32 >> 2] = HEAP32[$105 + 32 >> 2];
  HEAP32[$104 + 36 >> 2] = HEAP32[$105 + 36 >> 2];
  HEAP32[HEAP32[5024] >> 2] = 4;
  $108 = HEAP32[5024] | 0;
  $110 = HEAP16[$108 + 8 >> 1] | 0;
  if (($110 & 64) == 0) {
   $117 = $108;
   $116 = $110;
  } else {
   _gv(1) | 0;
   $_pre_i12 = HEAP32[5024] | 0;
   $117 = $_pre_i12;
   $116 = HEAP16[$_pre_i12 + 8 >> 1] | 0;
  }
  HEAP16[$117 + 8 >> 1] = $116 & -257;
  $120 = HEAP32[5024] | 0;
  $121 = $120 + 8 | 0;
  $122 = HEAP16[$121 >> 1] | 0;
  if (($122 & 63) == 49) {
   HEAP16[$121 >> 1] = $122 & -28992 | 306;
   $128 = HEAP32[5024] | 0;
  } else {
   $128 = $120;
  }
  $129 = $cval_sroa_2_i | 0;
  if ($128 >>> 0 < 66472 >>> 0) {
   $133 = $128;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $133 = HEAP32[5024] | 0;
  }
  do {
   if ($133 >>> 0 < 56272 >>> 0) {
    $145 = $133;
   } else {
    $138 = HEAPU16[$133 + 8 >> 1] | 0;
    if (!(($138 & 63 | 0) == 51 | ($138 & 62 | 0) == 52)) {
     $145 = $133;
     break;
    }
    _gv(1) | 0;
    $145 = HEAP32[5024] | 0;
   }
  } while (0);
  $146 = $145 + 40 | 0;
  HEAP32[5024] = $146;
  $147 = $146;
  $$etemp$5 = 21728;
  $148$1 = HEAP32[$$etemp$5 + 4 >> 2] | 0;
  HEAP32[$147 >> 2] = HEAP32[$$etemp$5 >> 2];
  HEAP32[$147 + 4 >> 2] = $148$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $153 = HEAP32[5024] | 0;
  HEAP32[$153 + 16 >> 2] = $35;
  $157 = $153 + 20 | 0;
  HEAP32[$157 >> 2] = HEAP32[$129 >> 2];
  HEAP32[$157 + 4 >> 2] = HEAP32[$129 + 4 >> 2];
  HEAP32[$157 + 8 >> 2] = HEAP32[$129 + 8 >> 2];
  _gfunc_call(3);
  STACKTOP = sp;
  return;
 }
 if (($3 & 64 | 0) == 0) {
  $466 = HEAP32[5024] | 0;
  if ((HEAP16[$466 - 40 + 8 >> 1] & 2048) != 0) {
   $472 = $tmp_i55;
   do {
    if ($466 >>> 0 < 56272 >>> 0) {
     $484 = $466;
    } else {
     $477 = HEAPU16[$466 + 8 >> 1] | 0;
     if (!(($477 & 63 | 0) == 51 | ($477 & 62 | 0) == 52)) {
      $484 = $466;
      break;
     }
     _gv(1) | 0;
     $484 = HEAP32[5024] | 0;
    }
   } while (0);
   $485 = $484;
   HEAP32[$472 >> 2] = HEAP32[$485 >> 2];
   HEAP32[$472 + 4 >> 2] = HEAP32[$485 + 4 >> 2];
   HEAP32[$472 + 8 >> 2] = HEAP32[$485 + 8 >> 2];
   HEAP32[$472 + 12 >> 2] = HEAP32[$485 + 12 >> 2];
   HEAP32[$472 + 16 >> 2] = HEAP32[$485 + 16 >> 2];
   HEAP32[$472 + 20 >> 2] = HEAP32[$485 + 20 >> 2];
   HEAP32[$472 + 24 >> 2] = HEAP32[$485 + 24 >> 2];
   HEAP32[$472 + 28 >> 2] = HEAP32[$485 + 28 >> 2];
   HEAP32[$472 + 32 >> 2] = HEAP32[$485 + 32 >> 2];
   HEAP32[$472 + 36 >> 2] = HEAP32[$485 + 36 >> 2];
   $487 = $484 - 40 | 0;
   HEAP32[$485 >> 2] = HEAP32[$487 >> 2];
   HEAP32[$485 + 4 >> 2] = HEAP32[$487 + 4 >> 2];
   HEAP32[$485 + 8 >> 2] = HEAP32[$487 + 8 >> 2];
   HEAP32[$485 + 12 >> 2] = HEAP32[$487 + 12 >> 2];
   HEAP32[$485 + 16 >> 2] = HEAP32[$487 + 16 >> 2];
   HEAP32[$485 + 20 >> 2] = HEAP32[$487 + 20 >> 2];
   HEAP32[$485 + 24 >> 2] = HEAP32[$487 + 24 >> 2];
   HEAP32[$485 + 28 >> 2] = HEAP32[$487 + 28 >> 2];
   HEAP32[$485 + 32 >> 2] = HEAP32[$487 + 32 >> 2];
   HEAP32[$485 + 36 >> 2] = HEAP32[$487 + 36 >> 2];
   $490 = (HEAP32[5024] | 0) - 40 | 0;
   HEAP32[$490 >> 2] = HEAP32[$472 >> 2];
   HEAP32[$490 + 4 >> 2] = HEAP32[$472 + 4 >> 2];
   HEAP32[$490 + 8 >> 2] = HEAP32[$472 + 8 >> 2];
   HEAP32[$490 + 12 >> 2] = HEAP32[$472 + 12 >> 2];
   HEAP32[$490 + 16 >> 2] = HEAP32[$472 + 16 >> 2];
   HEAP32[$490 + 20 >> 2] = HEAP32[$472 + 20 >> 2];
   HEAP32[$490 + 24 >> 2] = HEAP32[$472 + 24 >> 2];
   HEAP32[$490 + 28 >> 2] = HEAP32[$472 + 28 >> 2];
   HEAP32[$490 + 32 >> 2] = HEAP32[$472 + 32 >> 2];
   HEAP32[$490 + 36 >> 2] = HEAP32[$472 + 36 >> 2];
   _gbound();
   $491 = $tmp_i59;
   $492 = HEAP32[5024] | 0;
   do {
    if ($492 >>> 0 < 56272 >>> 0) {
     $504 = $492;
    } else {
     $497 = HEAPU16[$492 + 8 >> 1] | 0;
     if (!(($497 & 63 | 0) == 51 | ($497 & 62 | 0) == 52)) {
      $504 = $492;
      break;
     }
     _gv(1) | 0;
     $504 = HEAP32[5024] | 0;
    }
   } while (0);
   $505 = $504;
   HEAP32[$491 >> 2] = HEAP32[$505 >> 2];
   HEAP32[$491 + 4 >> 2] = HEAP32[$505 + 4 >> 2];
   HEAP32[$491 + 8 >> 2] = HEAP32[$505 + 8 >> 2];
   HEAP32[$491 + 12 >> 2] = HEAP32[$505 + 12 >> 2];
   HEAP32[$491 + 16 >> 2] = HEAP32[$505 + 16 >> 2];
   HEAP32[$491 + 20 >> 2] = HEAP32[$505 + 20 >> 2];
   HEAP32[$491 + 24 >> 2] = HEAP32[$505 + 24 >> 2];
   HEAP32[$491 + 28 >> 2] = HEAP32[$505 + 28 >> 2];
   HEAP32[$491 + 32 >> 2] = HEAP32[$505 + 32 >> 2];
   HEAP32[$491 + 36 >> 2] = HEAP32[$505 + 36 >> 2];
   $507 = $504 - 40 | 0;
   HEAP32[$505 >> 2] = HEAP32[$507 >> 2];
   HEAP32[$505 + 4 >> 2] = HEAP32[$507 + 4 >> 2];
   HEAP32[$505 + 8 >> 2] = HEAP32[$507 + 8 >> 2];
   HEAP32[$505 + 12 >> 2] = HEAP32[$507 + 12 >> 2];
   HEAP32[$505 + 16 >> 2] = HEAP32[$507 + 16 >> 2];
   HEAP32[$505 + 20 >> 2] = HEAP32[$507 + 20 >> 2];
   HEAP32[$505 + 24 >> 2] = HEAP32[$507 + 24 >> 2];
   HEAP32[$505 + 28 >> 2] = HEAP32[$507 + 28 >> 2];
   HEAP32[$505 + 32 >> 2] = HEAP32[$507 + 32 >> 2];
   HEAP32[$505 + 36 >> 2] = HEAP32[$507 + 36 >> 2];
   $510 = (HEAP32[5024] | 0) - 40 | 0;
   HEAP32[$510 >> 2] = HEAP32[$491 >> 2];
   HEAP32[$510 + 4 >> 2] = HEAP32[$491 + 4 >> 2];
   HEAP32[$510 + 8 >> 2] = HEAP32[$491 + 8 >> 2];
   HEAP32[$510 + 12 >> 2] = HEAP32[$491 + 12 >> 2];
   HEAP32[$510 + 16 >> 2] = HEAP32[$491 + 16 >> 2];
   HEAP32[$510 + 20 >> 2] = HEAP32[$491 + 20 >> 2];
   HEAP32[$510 + 24 >> 2] = HEAP32[$491 + 24 >> 2];
   HEAP32[$510 + 28 >> 2] = HEAP32[$491 + 28 >> 2];
   HEAP32[$510 + 32 >> 2] = HEAP32[$491 + 32 >> 2];
   HEAP32[$510 + 36 >> 2] = HEAP32[$491 + 36 >> 2];
  }
  do {
   if ((HEAP32[5338] | 0) == 0) {
    if (($7 - 9 | 0) >>> 0 < 2 >>> 0) {
     $517 = 2;
    } else {
     $517 = ($7 | 0) != 8 ? 1 : 2;
    }
    $518 = _gv($517) | 0;
    $519 = HEAP32[5024] | 0;
    if ((HEAP16[$519 - 40 + 8 >> 1] & 63) == 49) {
     $525 = _get_reg(1) | 0;
     HEAP32[$sv >> 2] = 0;
     HEAP16[$sv + 8 >> 1] = 306;
     HEAP32[$sv + 16 >> 2] = HEAP32[(HEAP32[5024] | 0) - 40 + 16 >> 2];
     _load($525, $sv);
     HEAP16[(HEAP32[5024] | 0) - 40 + 8 >> 1] = $525 | 256;
     $539 = HEAP32[5024] | 0;
    } else {
     $539 = $519;
    }
    _store($518, $539 - 40 | 0);
    if (($7 | 0) != 12) {
     break;
    }
    $543 = $tmp_i63;
    $544 = HEAP32[5024] | 0;
    do {
     if ($544 >>> 0 < 56272 >>> 0) {
      $556 = $544;
     } else {
      $549 = HEAPU16[$544 + 8 >> 1] | 0;
      if (!(($549 & 63 | 0) == 51 | ($549 & 62 | 0) == 52)) {
       $556 = $544;
       break;
      }
      _gv(1) | 0;
      $556 = HEAP32[5024] | 0;
     }
    } while (0);
    $557 = $556;
    HEAP32[$543 >> 2] = HEAP32[$557 >> 2];
    HEAP32[$543 + 4 >> 2] = HEAP32[$557 + 4 >> 2];
    HEAP32[$543 + 8 >> 2] = HEAP32[$557 + 8 >> 2];
    HEAP32[$543 + 12 >> 2] = HEAP32[$557 + 12 >> 2];
    HEAP32[$543 + 16 >> 2] = HEAP32[$557 + 16 >> 2];
    HEAP32[$543 + 20 >> 2] = HEAP32[$557 + 20 >> 2];
    HEAP32[$543 + 24 >> 2] = HEAP32[$557 + 24 >> 2];
    HEAP32[$543 + 28 >> 2] = HEAP32[$557 + 28 >> 2];
    HEAP32[$543 + 32 >> 2] = HEAP32[$557 + 32 >> 2];
    HEAP32[$543 + 36 >> 2] = HEAP32[$557 + 36 >> 2];
    $559 = $556 - 40 | 0;
    HEAP32[$557 >> 2] = HEAP32[$559 >> 2];
    HEAP32[$557 + 4 >> 2] = HEAP32[$559 + 4 >> 2];
    HEAP32[$557 + 8 >> 2] = HEAP32[$559 + 8 >> 2];
    HEAP32[$557 + 12 >> 2] = HEAP32[$559 + 12 >> 2];
    HEAP32[$557 + 16 >> 2] = HEAP32[$559 + 16 >> 2];
    HEAP32[$557 + 20 >> 2] = HEAP32[$559 + 20 >> 2];
    HEAP32[$557 + 24 >> 2] = HEAP32[$559 + 24 >> 2];
    HEAP32[$557 + 28 >> 2] = HEAP32[$559 + 28 >> 2];
    HEAP32[$557 + 32 >> 2] = HEAP32[$559 + 32 >> 2];
    HEAP32[$557 + 36 >> 2] = HEAP32[$559 + 36 >> 2];
    $562 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$562 >> 2] = HEAP32[$543 >> 2];
    HEAP32[$562 + 4 >> 2] = HEAP32[$543 + 4 >> 2];
    HEAP32[$562 + 8 >> 2] = HEAP32[$543 + 8 >> 2];
    HEAP32[$562 + 12 >> 2] = HEAP32[$543 + 12 >> 2];
    HEAP32[$562 + 16 >> 2] = HEAP32[$543 + 16 >> 2];
    HEAP32[$562 + 20 >> 2] = HEAP32[$543 + 20 >> 2];
    HEAP32[$562 + 24 >> 2] = HEAP32[$543 + 24 >> 2];
    HEAP32[$562 + 28 >> 2] = HEAP32[$543 + 28 >> 2];
    HEAP32[$562 + 32 >> 2] = HEAP32[$543 + 32 >> 2];
    HEAP32[$562 + 36 >> 2] = HEAP32[$543 + 36 >> 2];
    HEAP32[HEAP32[5024] >> 2] = 0;
    $565 = HEAP32[5024] | 0;
    $567 = HEAP16[$565 + 8 >> 1] | 0;
    if (($567 & 64) == 0) {
     $574 = $565;
     $573 = $567;
    } else {
     _gv(1) | 0;
     $_pre_i67 = HEAP32[5024] | 0;
     $574 = $_pre_i67;
     $573 = HEAP16[$_pre_i67 + 8 >> 1] | 0;
    }
    HEAP16[$574 + 8 >> 1] = $573 & -257;
    $577 = HEAP32[5024] | 0;
    $578 = $577 + 8 | 0;
    $579 = HEAP16[$578 >> 1] | 0;
    if (($579 & 63) == 49) {
     HEAP16[$578 >> 1] = $579 & -28992 | 306;
     $585 = HEAP32[5024] | 0;
    } else {
     $585 = $577;
    }
    $586 = $cval_sroa_2_i | 0;
    if ($585 >>> 0 < 66472 >>> 0) {
     $590 = $585;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $590 = HEAP32[5024] | 0;
    }
    do {
     if ($590 >>> 0 < 56272 >>> 0) {
      $602 = $590;
     } else {
      $595 = HEAPU16[$590 + 8 >> 1] | 0;
      if (!(($595 & 63 | 0) == 51 | ($595 & 62 | 0) == 52)) {
       $602 = $590;
       break;
      }
      _gv(1) | 0;
      $602 = HEAP32[5024] | 0;
     }
    } while (0);
    $603 = $602 + 40 | 0;
    HEAP32[5024] = $603;
    $604 = $603;
    $$etemp$62 = 21728;
    $605$1 = HEAP32[$$etemp$62 + 4 >> 2] | 0;
    HEAP32[$604 >> 2] = HEAP32[$$etemp$62 >> 2];
    HEAP32[$604 + 4 >> 2] = $605$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $610 = HEAP32[5024] | 0;
    HEAP32[$610 + 16 >> 2] = 4;
    $614 = $610 + 20 | 0;
    HEAP32[$614 >> 2] = HEAP32[$586 >> 2];
    HEAP32[$614 + 4 >> 2] = HEAP32[$586 + 4 >> 2];
    HEAP32[$614 + 8 >> 2] = HEAP32[$586 + 8 >> 2];
    _gen_op(43);
    $616 = (HEAP32[5024] | 0) + 8 | 0;
    HEAP16[$616 >> 1] = HEAP16[$616 >> 1] | 256;
    $619 = $tmp_i76;
    $620 = HEAP32[5024] | 0;
    do {
     if ($620 >>> 0 < 56272 >>> 0) {
      $632 = $620;
     } else {
      $625 = HEAPU16[$620 + 8 >> 1] | 0;
      if (!(($625 & 63 | 0) == 51 | ($625 & 62 | 0) == 52)) {
       $632 = $620;
       break;
      }
      _gv(1) | 0;
      $632 = HEAP32[5024] | 0;
     }
    } while (0);
    $633 = $632;
    HEAP32[$619 >> 2] = HEAP32[$633 >> 2];
    HEAP32[$619 + 4 >> 2] = HEAP32[$633 + 4 >> 2];
    HEAP32[$619 + 8 >> 2] = HEAP32[$633 + 8 >> 2];
    HEAP32[$619 + 12 >> 2] = HEAP32[$633 + 12 >> 2];
    HEAP32[$619 + 16 >> 2] = HEAP32[$633 + 16 >> 2];
    HEAP32[$619 + 20 >> 2] = HEAP32[$633 + 20 >> 2];
    HEAP32[$619 + 24 >> 2] = HEAP32[$633 + 24 >> 2];
    HEAP32[$619 + 28 >> 2] = HEAP32[$633 + 28 >> 2];
    HEAP32[$619 + 32 >> 2] = HEAP32[$633 + 32 >> 2];
    HEAP32[$619 + 36 >> 2] = HEAP32[$633 + 36 >> 2];
    $635 = $632 - 40 | 0;
    HEAP32[$633 >> 2] = HEAP32[$635 >> 2];
    HEAP32[$633 + 4 >> 2] = HEAP32[$635 + 4 >> 2];
    HEAP32[$633 + 8 >> 2] = HEAP32[$635 + 8 >> 2];
    HEAP32[$633 + 12 >> 2] = HEAP32[$635 + 12 >> 2];
    HEAP32[$633 + 16 >> 2] = HEAP32[$635 + 16 >> 2];
    HEAP32[$633 + 20 >> 2] = HEAP32[$635 + 20 >> 2];
    HEAP32[$633 + 24 >> 2] = HEAP32[$635 + 24 >> 2];
    HEAP32[$633 + 28 >> 2] = HEAP32[$635 + 28 >> 2];
    HEAP32[$633 + 32 >> 2] = HEAP32[$635 + 32 >> 2];
    HEAP32[$633 + 36 >> 2] = HEAP32[$635 + 36 >> 2];
    $638 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$638 >> 2] = HEAP32[$619 >> 2];
    HEAP32[$638 + 4 >> 2] = HEAP32[$619 + 4 >> 2];
    HEAP32[$638 + 8 >> 2] = HEAP32[$619 + 8 >> 2];
    HEAP32[$638 + 12 >> 2] = HEAP32[$619 + 12 >> 2];
    HEAP32[$638 + 16 >> 2] = HEAP32[$619 + 16 >> 2];
    HEAP32[$638 + 20 >> 2] = HEAP32[$619 + 20 >> 2];
    HEAP32[$638 + 24 >> 2] = HEAP32[$619 + 24 >> 2];
    HEAP32[$638 + 28 >> 2] = HEAP32[$619 + 28 >> 2];
    HEAP32[$638 + 32 >> 2] = HEAP32[$619 + 32 >> 2];
    HEAP32[$638 + 36 >> 2] = HEAP32[$619 + 36 >> 2];
    $639 = HEAP32[5024] | 0;
    _store(HEAPU16[$639 + 10 >> 1] | 0, $639 - 40 | 0);
   }
  } while (0);
  $645 = $tmp_i49;
  $646 = HEAP32[5024] | 0;
  do {
   if ($646 >>> 0 < 56272 >>> 0) {
    $658 = $646;
   } else {
    $651 = HEAPU16[$646 + 8 >> 1] | 0;
    if (!(($651 & 63 | 0) == 51 | ($651 & 62 | 0) == 52)) {
     $658 = $646;
     break;
    }
    _gv(1) | 0;
    $658 = HEAP32[5024] | 0;
   }
  } while (0);
  $659 = $658;
  HEAP32[$645 >> 2] = HEAP32[$659 >> 2];
  HEAP32[$645 + 4 >> 2] = HEAP32[$659 + 4 >> 2];
  HEAP32[$645 + 8 >> 2] = HEAP32[$659 + 8 >> 2];
  HEAP32[$645 + 12 >> 2] = HEAP32[$659 + 12 >> 2];
  HEAP32[$645 + 16 >> 2] = HEAP32[$659 + 16 >> 2];
  HEAP32[$645 + 20 >> 2] = HEAP32[$659 + 20 >> 2];
  HEAP32[$645 + 24 >> 2] = HEAP32[$659 + 24 >> 2];
  HEAP32[$645 + 28 >> 2] = HEAP32[$659 + 28 >> 2];
  HEAP32[$645 + 32 >> 2] = HEAP32[$659 + 32 >> 2];
  HEAP32[$645 + 36 >> 2] = HEAP32[$659 + 36 >> 2];
  $661 = $658 - 40 | 0;
  HEAP32[$659 >> 2] = HEAP32[$661 >> 2];
  HEAP32[$659 + 4 >> 2] = HEAP32[$661 + 4 >> 2];
  HEAP32[$659 + 8 >> 2] = HEAP32[$661 + 8 >> 2];
  HEAP32[$659 + 12 >> 2] = HEAP32[$661 + 12 >> 2];
  HEAP32[$659 + 16 >> 2] = HEAP32[$661 + 16 >> 2];
  HEAP32[$659 + 20 >> 2] = HEAP32[$661 + 20 >> 2];
  HEAP32[$659 + 24 >> 2] = HEAP32[$661 + 24 >> 2];
  HEAP32[$659 + 28 >> 2] = HEAP32[$661 + 28 >> 2];
  HEAP32[$659 + 32 >> 2] = HEAP32[$661 + 32 >> 2];
  HEAP32[$659 + 36 >> 2] = HEAP32[$661 + 36 >> 2];
  $664 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$664 >> 2] = HEAP32[$645 >> 2];
  HEAP32[$664 + 4 >> 2] = HEAP32[$645 + 4 >> 2];
  HEAP32[$664 + 8 >> 2] = HEAP32[$645 + 8 >> 2];
  HEAP32[$664 + 12 >> 2] = HEAP32[$645 + 12 >> 2];
  HEAP32[$664 + 16 >> 2] = HEAP32[$645 + 16 >> 2];
  HEAP32[$664 + 20 >> 2] = HEAP32[$645 + 20 >> 2];
  HEAP32[$664 + 24 >> 2] = HEAP32[$645 + 24 >> 2];
  HEAP32[$664 + 28 >> 2] = HEAP32[$645 + 28 >> 2];
  HEAP32[$664 + 32 >> 2] = HEAP32[$645 + 32 >> 2];
  HEAP32[$664 + 36 >> 2] = HEAP32[$645 + 36 >> 2];
  $665 = HEAP32[5024] | 0;
  HEAP32[5024] = $665 - 40;
  $667 = $665 - 40 + 8 | 0;
  HEAP16[$667 >> 1] = HEAP16[$667 >> 1] | $delayed_cast_0;
  STACKTOP = sp;
  return;
 }
 $202 = $3 >>> 18 & 63;
 $204 = $3 >>> 24 & 63;
 HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $3 & 262079;
 _gv_dup();
 $208 = $tmp_i22;
 $209 = HEAP32[5024] | 0;
 do {
  if ($209 >>> 0 < 56272 >>> 0) {
   $221 = $209;
  } else {
   $214 = HEAPU16[$209 + 8 >> 1] | 0;
   if (!(($214 & 63 | 0) == 51 | ($214 & 62 | 0) == 52)) {
    $221 = $209;
    break;
   }
   _gv(1) | 0;
   $221 = HEAP32[5024] | 0;
  }
 } while (0);
 $222 = $221;
 HEAP32[$208 >> 2] = HEAP32[$222 >> 2];
 HEAP32[$208 + 4 >> 2] = HEAP32[$222 + 4 >> 2];
 HEAP32[$208 + 8 >> 2] = HEAP32[$222 + 8 >> 2];
 HEAP32[$208 + 12 >> 2] = HEAP32[$222 + 12 >> 2];
 HEAP32[$208 + 16 >> 2] = HEAP32[$222 + 16 >> 2];
 HEAP32[$208 + 20 >> 2] = HEAP32[$222 + 20 >> 2];
 HEAP32[$208 + 24 >> 2] = HEAP32[$222 + 24 >> 2];
 HEAP32[$208 + 28 >> 2] = HEAP32[$222 + 28 >> 2];
 HEAP32[$208 + 32 >> 2] = HEAP32[$222 + 32 >> 2];
 HEAP32[$208 + 36 >> 2] = HEAP32[$222 + 36 >> 2];
 $224 = $221 - 40 | 0;
 HEAP32[$222 >> 2] = HEAP32[$224 >> 2];
 HEAP32[$222 + 4 >> 2] = HEAP32[$224 + 4 >> 2];
 HEAP32[$222 + 8 >> 2] = HEAP32[$224 + 8 >> 2];
 HEAP32[$222 + 12 >> 2] = HEAP32[$224 + 12 >> 2];
 HEAP32[$222 + 16 >> 2] = HEAP32[$224 + 16 >> 2];
 HEAP32[$222 + 20 >> 2] = HEAP32[$224 + 20 >> 2];
 HEAP32[$222 + 24 >> 2] = HEAP32[$224 + 24 >> 2];
 HEAP32[$222 + 28 >> 2] = HEAP32[$224 + 28 >> 2];
 HEAP32[$222 + 32 >> 2] = HEAP32[$224 + 32 >> 2];
 HEAP32[$222 + 36 >> 2] = HEAP32[$224 + 36 >> 2];
 $227 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$227 >> 2] = HEAP32[$208 >> 2];
 HEAP32[$227 + 4 >> 2] = HEAP32[$208 + 4 >> 2];
 HEAP32[$227 + 8 >> 2] = HEAP32[$208 + 8 >> 2];
 HEAP32[$227 + 12 >> 2] = HEAP32[$208 + 12 >> 2];
 HEAP32[$227 + 16 >> 2] = HEAP32[$208 + 16 >> 2];
 HEAP32[$227 + 20 >> 2] = HEAP32[$208 + 20 >> 2];
 HEAP32[$227 + 24 >> 2] = HEAP32[$208 + 24 >> 2];
 HEAP32[$227 + 28 >> 2] = HEAP32[$208 + 28 >> 2];
 HEAP32[$227 + 32 >> 2] = HEAP32[$208 + 32 >> 2];
 HEAP32[$227 + 36 >> 2] = HEAP32[$208 + 36 >> 2];
 $228 = HEAP32[5024] | 0;
 $229 = $tmp_i_i;
 $230 = $228;
 HEAP32[$229 >> 2] = HEAP32[$230 >> 2];
 HEAP32[$229 + 4 >> 2] = HEAP32[$230 + 4 >> 2];
 HEAP32[$229 + 8 >> 2] = HEAP32[$230 + 8 >> 2];
 HEAP32[$229 + 12 >> 2] = HEAP32[$230 + 12 >> 2];
 HEAP32[$229 + 16 >> 2] = HEAP32[$230 + 16 >> 2];
 HEAP32[$229 + 20 >> 2] = HEAP32[$230 + 20 >> 2];
 HEAP32[$229 + 24 >> 2] = HEAP32[$230 + 24 >> 2];
 HEAP32[$229 + 28 >> 2] = HEAP32[$230 + 28 >> 2];
 HEAP32[$229 + 32 >> 2] = HEAP32[$230 + 32 >> 2];
 HEAP32[$229 + 36 >> 2] = HEAP32[$230 + 36 >> 2];
 $i_01_i_i = 0;
 do {
  $235 = $228 + ((-$i_01_i_i | 0) * 40 | 0) | 0;
  $236 = $228 + (~$i_01_i_i * 40 | 0) | 0;
  HEAP32[$235 >> 2] = HEAP32[$236 >> 2];
  HEAP32[$235 + 4 >> 2] = HEAP32[$236 + 4 >> 2];
  HEAP32[$235 + 8 >> 2] = HEAP32[$236 + 8 >> 2];
  HEAP32[$235 + 12 >> 2] = HEAP32[$236 + 12 >> 2];
  HEAP32[$235 + 16 >> 2] = HEAP32[$236 + 16 >> 2];
  HEAP32[$235 + 20 >> 2] = HEAP32[$236 + 20 >> 2];
  HEAP32[$235 + 24 >> 2] = HEAP32[$236 + 24 >> 2];
  HEAP32[$235 + 28 >> 2] = HEAP32[$236 + 28 >> 2];
  HEAP32[$235 + 32 >> 2] = HEAP32[$236 + 32 >> 2];
  HEAP32[$235 + 36 >> 2] = HEAP32[$236 + 36 >> 2];
  $i_01_i_i = $i_01_i_i + 1 | 0;
 } while (($i_01_i_i | 0) < 2);
 $240 = $228 - 80 | 0;
 HEAP32[$240 >> 2] = HEAP32[$229 >> 2];
 HEAP32[$240 + 4 >> 2] = HEAP32[$229 + 4 >> 2];
 HEAP32[$240 + 8 >> 2] = HEAP32[$229 + 8 >> 2];
 HEAP32[$240 + 12 >> 2] = HEAP32[$229 + 12 >> 2];
 HEAP32[$240 + 16 >> 2] = HEAP32[$229 + 16 >> 2];
 HEAP32[$240 + 20 >> 2] = HEAP32[$229 + 20 >> 2];
 HEAP32[$240 + 24 >> 2] = HEAP32[$229 + 24 >> 2];
 HEAP32[$240 + 28 >> 2] = HEAP32[$229 + 28 >> 2];
 HEAP32[$240 + 32 >> 2] = HEAP32[$229 + 32 >> 2];
 HEAP32[$240 + 36 >> 2] = HEAP32[$229 + 36 >> 2];
 if (($7 | 0) == 11) {
  _gen_cast((HEAP32[5024] | 0) - 40 | 0);
  $246 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$246 >> 2] = HEAP32[$246 >> 2] & -32 | 17;
 }
 $251 = HEAP32[5024] | 0;
 if ($251 >>> 0 < 66472 >>> 0) {
  $254 = $251;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $254 = HEAP32[5024] | 0;
 }
 $255 = $254 + 40 | 0;
 HEAP32[5024] = $255;
 $256 = $255;
 $257 = $251;
 HEAP32[$256 >> 2] = HEAP32[$257 >> 2];
 HEAP32[$256 + 4 >> 2] = HEAP32[$257 + 4 >> 2];
 HEAP32[$256 + 8 >> 2] = HEAP32[$257 + 8 >> 2];
 HEAP32[$256 + 12 >> 2] = HEAP32[$257 + 12 >> 2];
 HEAP32[$256 + 16 >> 2] = HEAP32[$257 + 16 >> 2];
 HEAP32[$256 + 20 >> 2] = HEAP32[$257 + 20 >> 2];
 HEAP32[$256 + 24 >> 2] = HEAP32[$257 + 24 >> 2];
 HEAP32[$256 + 28 >> 2] = HEAP32[$257 + 28 >> 2];
 HEAP32[$256 + 32 >> 2] = HEAP32[$257 + 32 >> 2];
 HEAP32[$256 + 36 >> 2] = HEAP32[$257 + 36 >> 2];
 $258 = HEAP32[5024] | 0;
 $261 = $258 - 40 | 0;
 $262 = $258 - 80 | 0;
 HEAP32[$261 >> 2] = HEAP32[$262 >> 2];
 HEAP32[$261 + 4 >> 2] = HEAP32[$262 + 4 >> 2];
 HEAP32[$261 + 8 >> 2] = HEAP32[$262 + 8 >> 2];
 HEAP32[$261 + 12 >> 2] = HEAP32[$262 + 12 >> 2];
 HEAP32[$261 + 16 >> 2] = HEAP32[$262 + 16 >> 2];
 HEAP32[$261 + 20 >> 2] = HEAP32[$262 + 20 >> 2];
 HEAP32[$261 + 24 >> 2] = HEAP32[$262 + 24 >> 2];
 HEAP32[$261 + 28 >> 2] = HEAP32[$262 + 28 >> 2];
 HEAP32[$261 + 32 >> 2] = HEAP32[$262 + 32 >> 2];
 HEAP32[$261 + 36 >> 2] = HEAP32[$262 + 36 >> 2];
 if (($7 | 0) == 12) {
  $265$0 = _bitshift64Shl(1, 0, $204 | 0) | 0;
  $266$0 = _i64Add($265$0, tempRet0, -1, -1) | 0;
  $266$1 = tempRet0;
  $267 = HEAP32[5024] | 0;
  if ($267 >>> 0 < 66472 >>> 0) {
   $271 = $267;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $271 = HEAP32[5024] | 0;
  }
  do {
   if ($271 >>> 0 < 56272 >>> 0) {
    $283 = $271;
   } else {
    $276 = HEAPU16[$271 + 8 >> 1] | 0;
    if (!(($276 & 63 | 0) == 51 | ($276 & 62 | 0) == 52)) {
     $283 = $271;
     break;
    }
    _gv(1) | 0;
    $283 = HEAP32[5024] | 0;
   }
  } while (0);
  $284 = $283 + 40 | 0;
  HEAP32[5024] = $284;
  $285 = $284;
  HEAP32[$285 >> 2] = 12;
  HEAP32[$285 + 4 >> 2] = 0;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $292 = (HEAP32[5024] | 0) + 16 | 0;
  HEAP32[$292 >> 2] = $266$0;
  HEAP32[$292 + 4 >> 2] = $266$1;
  label = 63;
 } else if (($7 | 0) != 11) {
  $295 = (1 << $204) - 1 | 0;
  $296 = $cval_sroa_2_i | 0;
  $297 = HEAP32[5024] | 0;
  if ($297 >>> 0 < 66472 >>> 0) {
   $301 = $297;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $301 = HEAP32[5024] | 0;
  }
  do {
   if ($301 >>> 0 < 56272 >>> 0) {
    $313 = $301;
   } else {
    $306 = HEAPU16[$301 + 8 >> 1] | 0;
    if (!(($306 & 63 | 0) == 51 | ($306 & 62 | 0) == 52)) {
     $313 = $301;
     break;
    }
    _gv(1) | 0;
    $313 = HEAP32[5024] | 0;
   }
  } while (0);
  $314 = $313 + 40 | 0;
  HEAP32[5024] = $314;
  $315 = $314;
  $$etemp$25 = 21728;
  $316$1 = HEAP32[$$etemp$25 + 4 >> 2] | 0;
  HEAP32[$315 >> 2] = HEAP32[$$etemp$25 >> 2];
  HEAP32[$315 + 4 >> 2] = $316$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $321 = HEAP32[5024] | 0;
  HEAP32[$321 + 16 >> 2] = $295;
  $325 = $321 + 20 | 0;
  HEAP32[$325 >> 2] = HEAP32[$296 >> 2];
  HEAP32[$325 + 4 >> 2] = HEAP32[$296 + 4 >> 2];
  HEAP32[$325 + 8 >> 2] = HEAP32[$296 + 8 >> 2];
  label = 63;
 }
 if ((label | 0) == 63) {
  _gen_op(38);
 }
 $328 = $cval_sroa_2_i | 0;
 $329 = HEAP32[5024] | 0;
 if ($329 >>> 0 < 66472 >>> 0) {
  $333 = $329;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $333 = HEAP32[5024] | 0;
 }
 do {
  if ($333 >>> 0 < 56272 >>> 0) {
   $345 = $333;
  } else {
   $338 = HEAPU16[$333 + 8 >> 1] | 0;
   if (!(($338 & 63 | 0) == 51 | ($338 & 62 | 0) == 52)) {
    $345 = $333;
    break;
   }
   _gv(1) | 0;
   $345 = HEAP32[5024] | 0;
  }
 } while (0);
 $346 = $345 + 40 | 0;
 HEAP32[5024] = $346;
 $347 = $346;
 $$etemp$32 = 21728;
 $348$1 = HEAP32[$$etemp$32 + 4 >> 2] | 0;
 HEAP32[$347 >> 2] = HEAP32[$$etemp$32 >> 2];
 HEAP32[$347 + 4 >> 2] = $348$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $353 = HEAP32[5024] | 0;
 HEAP32[$353 + 16 >> 2] = $202;
 $357 = $353 + 20 | 0;
 HEAP32[$357 >> 2] = HEAP32[$328 >> 2];
 HEAP32[$357 + 4 >> 2] = HEAP32[$328 + 4 >> 2];
 HEAP32[$357 + 8 >> 2] = HEAP32[$328 + 8 >> 2];
 _gen_op(1);
 $358 = $tmp_i36;
 $359 = HEAP32[5024] | 0;
 do {
  if ($359 >>> 0 < 56272 >>> 0) {
   $371 = $359;
  } else {
   $364 = HEAPU16[$359 + 8 >> 1] | 0;
   if (!(($364 & 63 | 0) == 51 | ($364 & 62 | 0) == 52)) {
    $371 = $359;
    break;
   }
   _gv(1) | 0;
   $371 = HEAP32[5024] | 0;
  }
 } while (0);
 $372 = $371;
 HEAP32[$358 >> 2] = HEAP32[$372 >> 2];
 HEAP32[$358 + 4 >> 2] = HEAP32[$372 + 4 >> 2];
 HEAP32[$358 + 8 >> 2] = HEAP32[$372 + 8 >> 2];
 HEAP32[$358 + 12 >> 2] = HEAP32[$372 + 12 >> 2];
 HEAP32[$358 + 16 >> 2] = HEAP32[$372 + 16 >> 2];
 HEAP32[$358 + 20 >> 2] = HEAP32[$372 + 20 >> 2];
 HEAP32[$358 + 24 >> 2] = HEAP32[$372 + 24 >> 2];
 HEAP32[$358 + 28 >> 2] = HEAP32[$372 + 28 >> 2];
 HEAP32[$358 + 32 >> 2] = HEAP32[$372 + 32 >> 2];
 HEAP32[$358 + 36 >> 2] = HEAP32[$372 + 36 >> 2];
 $374 = $371 - 40 | 0;
 HEAP32[$372 >> 2] = HEAP32[$374 >> 2];
 HEAP32[$372 + 4 >> 2] = HEAP32[$374 + 4 >> 2];
 HEAP32[$372 + 8 >> 2] = HEAP32[$374 + 8 >> 2];
 HEAP32[$372 + 12 >> 2] = HEAP32[$374 + 12 >> 2];
 HEAP32[$372 + 16 >> 2] = HEAP32[$374 + 16 >> 2];
 HEAP32[$372 + 20 >> 2] = HEAP32[$374 + 20 >> 2];
 HEAP32[$372 + 24 >> 2] = HEAP32[$374 + 24 >> 2];
 HEAP32[$372 + 28 >> 2] = HEAP32[$374 + 28 >> 2];
 HEAP32[$372 + 32 >> 2] = HEAP32[$374 + 32 >> 2];
 HEAP32[$372 + 36 >> 2] = HEAP32[$374 + 36 >> 2];
 $377 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$377 >> 2] = HEAP32[$358 >> 2];
 HEAP32[$377 + 4 >> 2] = HEAP32[$358 + 4 >> 2];
 HEAP32[$377 + 8 >> 2] = HEAP32[$358 + 8 >> 2];
 HEAP32[$377 + 12 >> 2] = HEAP32[$358 + 12 >> 2];
 HEAP32[$377 + 16 >> 2] = HEAP32[$358 + 16 >> 2];
 HEAP32[$377 + 20 >> 2] = HEAP32[$358 + 20 >> 2];
 HEAP32[$377 + 24 >> 2] = HEAP32[$358 + 24 >> 2];
 HEAP32[$377 + 28 >> 2] = HEAP32[$358 + 28 >> 2];
 HEAP32[$377 + 32 >> 2] = HEAP32[$358 + 32 >> 2];
 HEAP32[$377 + 36 >> 2] = HEAP32[$358 + 36 >> 2];
 if (($7 | 0) == 12) {
  $381$0 = _bitshift64Shl(1, 0, $204 | 0) | 0;
  $382$0 = _i64Add($381$0, tempRet0, -1, -1) | 0;
  $384$0 = _bitshift64Shl($382$0 | 0, tempRet0 | 0, $202 | 0) | 0;
  $385$0 = ~$384$0;
  $385$1 = ~tempRet0;
  $386 = HEAP32[5024] | 0;
  if ($386 >>> 0 < 66472 >>> 0) {
   $390 = $386;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $390 = HEAP32[5024] | 0;
  }
  do {
   if ($390 >>> 0 < 56272 >>> 0) {
    $402 = $390;
   } else {
    $395 = HEAPU16[$390 + 8 >> 1] | 0;
    if (!(($395 & 63 | 0) == 51 | ($395 & 62 | 0) == 52)) {
     $402 = $390;
     break;
    }
    _gv(1) | 0;
    $402 = HEAP32[5024] | 0;
   }
  } while (0);
  $403 = $402 + 40 | 0;
  HEAP32[5024] = $403;
  $404 = $403;
  HEAP32[$404 >> 2] = 12;
  HEAP32[$404 + 4 >> 2] = 0;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $411 = (HEAP32[5024] | 0) + 16 | 0;
  HEAP32[$411 >> 2] = $385$0;
  HEAP32[$411 + 4 >> 2] = $385$1;
 } else {
  $416 = ~((1 << $204) - 1 << $202);
  $417 = HEAP32[5024] | 0;
  if ($417 >>> 0 < 66472 >>> 0) {
   $421 = $417;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $421 = HEAP32[5024] | 0;
  }
  do {
   if ($421 >>> 0 < 56272 >>> 0) {
    $433 = $421;
   } else {
    $426 = HEAPU16[$421 + 8 >> 1] | 0;
    if (!(($426 & 63 | 0) == 51 | ($426 & 62 | 0) == 52)) {
     $433 = $421;
     break;
    }
    _gv(1) | 0;
    $433 = HEAP32[5024] | 0;
   }
  } while (0);
  $434 = $433 + 40 | 0;
  HEAP32[5024] = $434;
  $435 = $434;
  $$etemp$49 = 21728;
  $436$1 = HEAP32[$$etemp$49 + 4 >> 2] | 0;
  HEAP32[$435 >> 2] = HEAP32[$$etemp$49 >> 2];
  HEAP32[$435 + 4 >> 2] = $436$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $441 = HEAP32[5024] | 0;
  HEAP32[$441 + 16 >> 2] = $416;
  $445 = $441 + 20 | 0;
  HEAP32[$445 >> 2] = HEAP32[$328 >> 2];
  HEAP32[$445 + 4 >> 2] = HEAP32[$328 + 4 >> 2];
  HEAP32[$445 + 8 >> 2] = HEAP32[$328 + 8 >> 2];
 }
 _gen_op(38);
 _gen_op(124);
 _vstore();
 $447 = HEAP32[5024] | 0;
 $450 = HEAPU16[$447 + 8 >> 1] | 0;
 do {
  if (($450 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
   if (($450 & 62 | 0) != 52) {
    break;
   }
   _gsym(HEAP32[$447 + 16 >> 2] | 0);
  } else {
   _o(55517);
  }
 } while (0);
 HEAP32[5024] = (HEAP32[5024] | 0) - 40;
 STACKTOP = sp;
 return;
}
function _block($bsym, $csym, $case_sym, $def_sym, $case_reg, $is_expr) {
 $bsym = $bsym | 0;
 $csym = $csym | 0;
 $case_sym = $case_sym | 0;
 $def_sym = $def_sym | 0;
 $case_reg = $case_reg | 0;
 $is_expr = $is_expr | 0;
 var $tmp_i = 0, $cval_sroa_2_i = 0, $a = 0, $b = 0, $c = 0, $9 = 0, $13 = 0, $16 = 0, $24 = 0, $26 = 0, $27 = 0, $31 = 0, $36 = 0, $43 = 0, $44 = 0, $45 = 0, $$etemp$1 = 0, $46$1 = 0, $51 = 0, $55 = 0, $59 = 0, $63 = 0, $66 = 0, $84 = 0, $87 = 0, $92 = 0, $95 = 0, $98 = 0, $119 = 0, $121 = 0, $s_06_i = 0, $126 = 0, $129 = 0, $i_03_i_i_i = 0, $last_sym_02_i_i_i = 0, $sym_01_i_i_i = 0, $135 = 0, $scevgep4_i_i_i = 0, $sym_0_i_i = 0, $137 = 0, $146 = 0, $147 = 0, $151 = 0, $155 = 0, $161 = 0, $167 = 0, $174 = 0, $177 = 0, $195 = 0, $p_0104 = 0, $p_0105 = 0, $202 = 0, $203 = 0, $p_0 = 0, $210 = 0, $s_01_i = 0, $213 = 0, $215 = 0, $219 = 0, $225 = 0, $243 = 0, $246 = 0, $264 = 0, $$etemp$7 = 0, $267 = 0, $270 = 0, $273 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $284 = 0, $289 = 0, $296 = 0, $297 = 0, $298 = 0, $308 = 0, $312 = 0, $313 = 0, $314 = 0, $319 = 0, $326 = 0, $327 = 0, $329 = 0, $332 = 0, $355 = 0, $357 = 0, $s_06_i20 = 0, $362 = 0, $365 = 0, $i_03_i_i_i24 = 0, $last_sym_02_i_i_i25 = 0, $sym_01_i_i_i26 = 0, $371 = 0, $scevgep4_i_i_i28 = 0, $sym_0_i_i30 = 0, $373 = 0, $389 = 0, $392 = 0, $or_cond_i_i83123 = 0, $or_cond_i_i83124 = 0, $397 = 0, $398 = 0, $411 = 0, $414 = 0, $or_cond_i_i83 = 0, $or_cond_i_i83_lcssa = 0, $_lcssa122 = 0, $_lcssa121 = 0, $430 = 0, $435 = 0, $438 = 0, $460 = 0, $464 = 0, $467 = 0, $or_cond_i_i77112 = 0, $or_cond_i_i77113 = 0, $472 = 0, $473 = 0, $486 = 0, $489 = 0, $or_cond_i_i77 = 0, $or_cond_i_i77_lcssa = 0, $_lcssa111 = 0, $_lcssa110 = 0, $512 = 0, $s_01_i36 = 0, $515 = 0, $517 = 0, $521 = 0, $527 = 0, $541 = 0, $545 = 0, $548 = 0, $565 = 0, $570 = 0, $573 = 0, $590 = 0, $591 = 0, $594 = 0, $610 = 0, $613 = 0, $615 = 0, $622 = 0, $628 = 0, $v2_0 = 0, $634 = 0, $635 = 0, $639 = 0, $644 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $659 = 0, $663 = 0, $664 = 0, $668 = 0, $673 = 0, $680 = 0, $681 = 0, $682 = 0, $$etemp$22 = 0, $683$1 = 0, $688 = 0, $692 = 0, $698 = 0, $702 = 0, $707 = 0, $714 = 0, $715 = 0, $716 = 0, $721 = 0, $725 = 0, $726 = 0, $730 = 0, $735 = 0, $742 = 0, $743 = 0, $744 = 0, $$etemp$34 = 0, $745$1 = 0, $750 = 0, $754 = 0, $storemerge = 0, $769 = 0, $776 = 0, $777 = 0, $780 = 0, $797 = 0, $_lcssa131 = 0, $807 = 0, $811 = 0, $813 = 0, $814 = 0, $816 = 0, $820 = 0, $s_0 = 0, $823 = 0, $825 = 0, $827 = 0, $828 = 0, $844 = 0, $847 = 0, $853 = 0, $s_1 = 0, $_0 = 0, $871 = 0, $874 = 0, $896 = 0, $899 = 0, $or_cond_i_i6497 = 0, $905 = 0, $908 = 0, $925 = 0, $928 = 0, $or_cond_i_i6498 = 0, $945 = 0, $946 = 0, $959 = 0, $962 = 0, $or_cond_i_i64 = 0, $or_cond_i_i64_lcssa = 0, $_lcssa96 = 0, $_lcssa = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $tmp_i = sp | 0;
 $cval_sroa_2_i = sp + 40 | 0;
 $a = sp + 56 | 0;
 $b = sp + 64 | 0;
 $c = sp + 72 | 0;
 do {
  if ((HEAP32[(HEAP32[5314] | 0) + 80 >> 2] | 0) != 0) {
   $9 = HEAP32[(HEAP32[13912] | 0) + 16 >> 2] | 0;
   if ((HEAP32[5362] | 0) == ($9 | 0)) {
    $13 = HEAP32[5434] | 0;
    if ((HEAP32[5364] | 0) == ($13 | 0)) {
     break;
    } else {
     $16 = $13;
    }
   } else {
    $16 = HEAP32[5434] | 0;
   }
   _put_stabn(68, 0, $9, $16 - (HEAP32[13908] | 0) | 0);
   HEAP32[5364] = HEAP32[5434];
   HEAP32[5362] = HEAP32[(HEAP32[13912] | 0) + 16 >> 2];
  }
 } while (0);
 $24 = ($is_expr | 0) != 0;
 if ($24) {
  $26 = $cval_sroa_2_i | 0;
  $27 = HEAP32[5024] | 0;
  if ($27 >>> 0 < 66472 >>> 0) {
   $31 = $27;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $31 = HEAP32[5024] | 0;
  }
  do {
   if ($31 >>> 0 < 56272 >>> 0) {
    $43 = $31;
   } else {
    $36 = HEAPU16[$31 + 8 >> 1] | 0;
    if (!(($36 & 63 | 0) == 51 | ($36 & 62 | 0) == 52)) {
     $43 = $31;
     break;
    }
    _gv(1) | 0;
    $43 = HEAP32[5024] | 0;
   }
  } while (0);
  $44 = $43 + 40 | 0;
  HEAP32[5024] = $44;
  $45 = $44;
  $$etemp$1 = 21728;
  $46$1 = HEAP32[$$etemp$1 + 4 >> 2] | 0;
  HEAP32[$45 >> 2] = HEAP32[$$etemp$1 >> 2];
  HEAP32[$45 + 4 >> 2] = $46$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $51 = HEAP32[5024] | 0;
  HEAP32[$51 + 16 >> 2] = 0;
  $55 = $51 + 20 | 0;
  HEAP32[$55 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$55 + 4 >> 2] = HEAP32[$26 + 4 >> 2];
  HEAP32[$55 + 8 >> 2] = HEAP32[$26 + 8 >> 2];
  HEAP32[HEAP32[5024] >> 2] = 3;
 }
 $59 = HEAP32[5310] | 0;
 L18 : do {
  switch ($59 | 0) {
  case 259:
   {
    _next();
    _skip(40);
    _expr_eq();
    if ((HEAP32[5310] | 0) == 44) {
     do {
      $63 = HEAP32[5024] | 0;
      $66 = HEAPU16[$63 + 8 >> 1] | 0;
      do {
       if (($66 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($66 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$63 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
      _next();
      _expr_eq();
     } while ((HEAP32[5310] | 0) == 44);
    }
    _skip(41);
    HEAP32[$a >> 2] = _gtst(1, 0) | 0;
    _block($bsym, $csym, $case_sym, $def_sym, $case_reg, 0);
    $84 = HEAP32[5310] | 0;
    HEAP32[$c >> 2] = $84;
    if (($84 | 0) == 260) {
     _next();
     $87 = _gjmp(0) | 0;
     _gsym(HEAP32[$a >> 2] | 0);
     _block($bsym, $csym, $case_sym, $def_sym, $case_reg, 0);
     _gsym($87);
     STACKTOP = sp;
     return;
    } else {
     _gsym(HEAP32[$a >> 2] | 0);
     STACKTOP = sp;
     return;
    }
    break;
   }
  case 261:
   {
    _next();
    $92 = HEAP32[5434] | 0;
    _skip(40);
    _expr_eq();
    if ((HEAP32[5310] | 0) == 44) {
     do {
      $95 = HEAP32[5024] | 0;
      $98 = HEAPU16[$95 + 8 >> 1] | 0;
      do {
       if (($98 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($98 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$95 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
      _next();
      _expr_eq();
     } while ((HEAP32[5310] | 0) == 44);
    }
    _skip(41);
    HEAP32[$a >> 2] = _gtst(1, 0) | 0;
    HEAP32[$b >> 2] = 0;
    _block($a, $b, $case_sym, $def_sym, $case_reg, 0);
    _gjmp_addr($92);
    _gsym(HEAP32[$a >> 2] | 0);
    _gsym_addr(HEAP32[$b >> 2] | 0, $92);
    STACKTOP = sp;
    return;
   }
  case 123:
   {
    _next();
    $119 = HEAP32[5352] | 0;
    $121 = HEAP32[5332] | 0;
    if (!(($119 | 0) == 0 | ($119 | 0) == ($121 | 0))) {
     $s_06_i = $119;
     do {
      $s_06_i = HEAP32[$s_06_i + 28 >> 2] | 0;
     } while (!(($s_06_i | 0) == 0 | ($s_06_i | 0) == ($121 | 0)));
    }
    $126 = HEAP32[5322] | 0;
    if (($126 | 0) == 0) {
     $129 = _tcc_malloc(8172) | 0;
     _dynarray_add(21280, 21360, $129);
     $sym_01_i_i_i = $129;
     $last_sym_02_i_i_i = HEAP32[5322] | 0;
     $i_03_i_i_i = 0;
     while (1) {
      HEAP32[$sym_01_i_i_i + 24 >> 2] = $last_sym_02_i_i_i;
      $135 = $i_03_i_i_i + 1 | 0;
      if ($135 >>> 0 < 227 >>> 0) {
       $last_sym_02_i_i_i = $sym_01_i_i_i;
       $sym_01_i_i_i = $sym_01_i_i_i + 36 | 0;
       $i_03_i_i_i = $135;
      } else {
       break;
      }
     }
     $scevgep4_i_i_i = $129 + 8136 | 0;
     HEAP32[5322] = $scevgep4_i_i_i;
     $sym_0_i_i = $scevgep4_i_i_i;
    } else {
     $sym_0_i_i = $126;
    }
    $137 = $sym_0_i_i + 24 | 0;
    HEAP32[5322] = HEAP32[$137 >> 2];
    HEAP32[$sym_0_i_i + 4 >> 2] = 0;
    HEAP32[$sym_0_i_i >> 2] = 536870912;
    _memset($sym_0_i_i + 12 | 0, 0, 16) | 0;
    HEAP32[$sym_0_i_i + 28 >> 2] = HEAP32[5352];
    HEAP32[5352] = $sym_0_i_i;
    HEAP32[$137 >> 2] = HEAP32[5332];
    HEAP32[5332] = $sym_0_i_i;
    $146 = HEAP32[5354] | 0;
    $147 = HEAP32[5310] | 0;
    if (($147 | 0) == 309) {
     _next();
     while (1) {
      $151 = HEAP32[5310] | 0;
      if (($151 | 0) < 313) {
       _expect(18752);
       $155 = HEAP32[5310] | 0;
      } else {
       $155 = $151;
      }
      _label_push(21416, $155, 2) | 0;
      _next();
      if ((HEAP32[5310] | 0) != 44) {
       break;
      }
      _next();
     }
     _skip(59);
     label = 43;
    } else {
     $161 = $147;
    }
    while (1) {
     if ((label | 0) == 43) {
      label = 0;
      $161 = HEAP32[5310] | 0;
     }
     if (($161 | 0) == 125) {
      break;
     }
     if (($161 | 0) > 312) {
      _next();
      $167 = (HEAP32[5310] | 0) == 58;
      _unget_tok($161);
      if (!$167) {
       label = 47;
      }
     } else {
      label = 47;
     }
     if ((label | 0) == 47) {
      label = 0;
      _decl0(50, 0) | 0;
     }
     if ((HEAP32[5310] | 0) == 125) {
      $161 = 125;
      continue;
     }
     if ($24) {
      $174 = HEAP32[5024] | 0;
      $177 = HEAPU16[$174 + 8 >> 1] | 0;
      do {
       if (($177 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($177 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$174 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
     }
     _block($bsym, $csym, $case_sym, $def_sym, $case_reg, $is_expr);
     label = 43;
    }
    _label_pop(21416, $146);
    do {
     if ($24) {
      $195 = HEAP32[5024] | 0;
      if ((HEAP32[$195 >> 2] & 12 | 0) != 4) {
       break;
      }
      $p_0104 = HEAP32[$195 + 4 >> 2] | 0;
      if (($p_0104 | 0) == 0) {
       break;
      } else {
       $p_0105 = $p_0104;
      }
      while (1) {
       $202 = $p_0105 + 28 | 0;
       $203 = HEAP32[$202 >> 2] | 0;
       if (($203 | 0) == ($119 | 0)) {
        _tcc_error(13528, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $p_0 = HEAP32[$202 >> 2] | 0;
       } else {
        $p_0 = $203;
       }
       if (($p_0 | 0) == 0) {
        break;
       } else {
        $p_0105 = $p_0;
       }
      }
     }
    } while (0);
    HEAP32[5332] = HEAP32[(HEAP32[5332] | 0) + 24 >> 2];
    $210 = HEAP32[5352] | 0;
    if (($210 | 0) != ($119 | 0)) {
     $s_01_i = $210;
     while (1) {
      $213 = HEAP32[$s_01_i + 28 >> 2] | 0;
      $215 = HEAP32[$s_01_i >> 2] | 0;
      do {
       if (($215 & 536870912 | 0) == 0) {
        $219 = $215 & -1073741825;
        if (($219 | 0) >= 268435456) {
         break;
        }
        $225 = HEAP32[(HEAP32[5316] | 0) + ($219 - 256 << 2) >> 2] | 0;
        HEAP32[(($215 & 1073741824 | 0) == 0 ? $225 + 16 | 0 : $225 + 12 | 0) >> 2] = HEAP32[$s_01_i + 32 >> 2];
       }
      } while (0);
      HEAP32[$s_01_i + 24 >> 2] = HEAP32[5322];
      _tcc_free(HEAP32[$s_01_i + 4 >> 2] | 0);
      HEAP32[5322] = $s_01_i;
      if (($213 | 0) == ($119 | 0)) {
       break;
      } else {
       $s_01_i = $213;
      }
     }
    }
    HEAP32[5352] = $119;
    _next();
    STACKTOP = sp;
    return;
   }
  case 263:
   {
    _next();
    if ((HEAP32[5310] | 0) != 59) {
     _expr_eq();
     if ((HEAP32[5310] | 0) == 44) {
      do {
       $243 = HEAP32[5024] | 0;
       $246 = HEAPU16[$243 + 8 >> 1] | 0;
       do {
        if (($246 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
         if (($246 & 62 | 0) != 52) {
          break;
         }
         _gsym(HEAP32[$243 + 16 >> 2] | 0);
        } else {
         _o(55517);
        }
       } while (0);
       HEAP32[5024] = (HEAP32[5024] | 0) - 40;
       _next();
       _expr_eq();
      } while ((HEAP32[5310] | 0) == 44);
     }
     _gen_assign_cast(55592);
     $264 = HEAP32[13898] & 15;
     if (($264 | 0) == 7) {
      $$etemp$7 = 55592;
      $267 = HEAP32[$$etemp$7 >> 2] | 0;
      $270 = HEAP32[$$etemp$7 + 4 >> 2] | 0;
      $273 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, $267, -1) | 0;
      HEAP32[$273 + 20 >> 2] = $270;
      HEAP32[$273 + 8 >> 2] = 0;
      $277 = $267 & 116608 | 4;
      $278 = HEAP32[13900] | 0;
      $279 = $cval_sroa_2_i | 0;
      $280 = HEAP32[5024] | 0;
      if ($280 >>> 0 < 66472 >>> 0) {
       $284 = $280;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $284 = HEAP32[5024] | 0;
      }
      do {
       if ($284 >>> 0 < 56272 >>> 0) {
        $296 = $284;
       } else {
        $289 = HEAPU16[$284 + 8 >> 1] | 0;
        if (!(($289 & 63 | 0) == 51 | ($289 & 62 | 0) == 52)) {
         $296 = $284;
         break;
        }
        _gv(1) | 0;
        $296 = HEAP32[5024] | 0;
       }
      } while (0);
      $297 = $296 + 40 | 0;
      HEAP32[5024] = $297;
      $298 = $297;
      HEAP32[$298 >> 2] = $277;
      HEAP32[$298 + 4 >> 2] = $273;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $308 = HEAP32[5024] | 0;
      HEAP32[$308 + 16 >> 2] = $278;
      $312 = $308 + 20 | 0;
      HEAP32[$312 >> 2] = HEAP32[$279 >> 2];
      HEAP32[$312 + 4 >> 2] = HEAP32[$279 + 4 >> 2];
      HEAP32[$312 + 8 >> 2] = HEAP32[$279 + 8 >> 2];
      _indir();
      $313 = $tmp_i;
      $314 = HEAP32[5024] | 0;
      do {
       if ($314 >>> 0 < 56272 >>> 0) {
        $326 = $314;
       } else {
        $319 = HEAPU16[$314 + 8 >> 1] | 0;
        if (!(($319 & 63 | 0) == 51 | ($319 & 62 | 0) == 52)) {
         $326 = $314;
         break;
        }
        _gv(1) | 0;
        $326 = HEAP32[5024] | 0;
       }
      } while (0);
      $327 = $326;
      HEAP32[$313 >> 2] = HEAP32[$327 >> 2];
      HEAP32[$313 + 4 >> 2] = HEAP32[$327 + 4 >> 2];
      HEAP32[$313 + 8 >> 2] = HEAP32[$327 + 8 >> 2];
      HEAP32[$313 + 12 >> 2] = HEAP32[$327 + 12 >> 2];
      HEAP32[$313 + 16 >> 2] = HEAP32[$327 + 16 >> 2];
      HEAP32[$313 + 20 >> 2] = HEAP32[$327 + 20 >> 2];
      HEAP32[$313 + 24 >> 2] = HEAP32[$327 + 24 >> 2];
      HEAP32[$313 + 28 >> 2] = HEAP32[$327 + 28 >> 2];
      HEAP32[$313 + 32 >> 2] = HEAP32[$327 + 32 >> 2];
      HEAP32[$313 + 36 >> 2] = HEAP32[$327 + 36 >> 2];
      $329 = $326 - 40 | 0;
      HEAP32[$327 >> 2] = HEAP32[$329 >> 2];
      HEAP32[$327 + 4 >> 2] = HEAP32[$329 + 4 >> 2];
      HEAP32[$327 + 8 >> 2] = HEAP32[$329 + 8 >> 2];
      HEAP32[$327 + 12 >> 2] = HEAP32[$329 + 12 >> 2];
      HEAP32[$327 + 16 >> 2] = HEAP32[$329 + 16 >> 2];
      HEAP32[$327 + 20 >> 2] = HEAP32[$329 + 20 >> 2];
      HEAP32[$327 + 24 >> 2] = HEAP32[$329 + 24 >> 2];
      HEAP32[$327 + 28 >> 2] = HEAP32[$329 + 28 >> 2];
      HEAP32[$327 + 32 >> 2] = HEAP32[$329 + 32 >> 2];
      HEAP32[$327 + 36 >> 2] = HEAP32[$329 + 36 >> 2];
      $332 = (HEAP32[5024] | 0) - 40 | 0;
      HEAP32[$332 >> 2] = HEAP32[$313 >> 2];
      HEAP32[$332 + 4 >> 2] = HEAP32[$313 + 4 >> 2];
      HEAP32[$332 + 8 >> 2] = HEAP32[$313 + 8 >> 2];
      HEAP32[$332 + 12 >> 2] = HEAP32[$313 + 12 >> 2];
      HEAP32[$332 + 16 >> 2] = HEAP32[$313 + 16 >> 2];
      HEAP32[$332 + 20 >> 2] = HEAP32[$313 + 20 >> 2];
      HEAP32[$332 + 24 >> 2] = HEAP32[$313 + 24 >> 2];
      HEAP32[$332 + 28 >> 2] = HEAP32[$313 + 28 >> 2];
      HEAP32[$332 + 32 >> 2] = HEAP32[$313 + 32 >> 2];
      HEAP32[$332 + 36 >> 2] = HEAP32[$313 + 36 >> 2];
      _vstore();
     } else if (($264 | 0) == 10 | ($264 | 0) == 9 | ($264 | 0) == 8) {
      _gv(8) | 0;
     } else {
      _gv(4) | 0;
     }
     HEAP32[5024] = (HEAP32[5024] | 0) - 40;
    }
    _skip(59);
    HEAP32[5334] = _gjmp(HEAP32[5334] | 0) | 0;
    STACKTOP = sp;
    return;
   }
  case 262:
   {
    if (($bsym | 0) == 0) {
     _tcc_error(13376, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    HEAP32[$bsym >> 2] = _gjmp(HEAP32[$bsym >> 2] | 0) | 0;
    _next();
    _skip(59);
    STACKTOP = sp;
    return;
   }
  case 270:
   {
    if (($csym | 0) == 0) {
     _tcc_error(13272, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    HEAP32[$csym >> 2] = _gjmp(HEAP32[$csym >> 2] | 0) | 0;
    _next();
    _skip(59);
    STACKTOP = sp;
    return;
   }
  case 264:
   {
    _next();
    _skip(40);
    $355 = HEAP32[5352] | 0;
    $357 = HEAP32[5332] | 0;
    if (!(($355 | 0) == 0 | ($355 | 0) == ($357 | 0))) {
     $s_06_i20 = $355;
     do {
      $s_06_i20 = HEAP32[$s_06_i20 + 28 >> 2] | 0;
     } while (!(($s_06_i20 | 0) == 0 | ($s_06_i20 | 0) == ($357 | 0)));
    }
    $362 = HEAP32[5322] | 0;
    if (($362 | 0) == 0) {
     $365 = _tcc_malloc(8172) | 0;
     _dynarray_add(21280, 21360, $365);
     $sym_01_i_i_i26 = $365;
     $last_sym_02_i_i_i25 = HEAP32[5322] | 0;
     $i_03_i_i_i24 = 0;
     while (1) {
      HEAP32[$sym_01_i_i_i26 + 24 >> 2] = $last_sym_02_i_i_i25;
      $371 = $i_03_i_i_i24 + 1 | 0;
      if ($371 >>> 0 < 227 >>> 0) {
       $last_sym_02_i_i_i25 = $sym_01_i_i_i26;
       $sym_01_i_i_i26 = $sym_01_i_i_i26 + 36 | 0;
       $i_03_i_i_i24 = $371;
      } else {
       break;
      }
     }
     $scevgep4_i_i_i28 = $365 + 8136 | 0;
     HEAP32[5322] = $scevgep4_i_i_i28;
     $sym_0_i_i30 = $scevgep4_i_i_i28;
    } else {
     $sym_0_i_i30 = $362;
    }
    $373 = $sym_0_i_i30 + 24 | 0;
    HEAP32[5322] = HEAP32[$373 >> 2];
    HEAP32[$sym_0_i_i30 + 4 >> 2] = 0;
    HEAP32[$sym_0_i_i30 >> 2] = 536870912;
    _memset($sym_0_i_i30 + 12 | 0, 0, 16) | 0;
    HEAP32[$sym_0_i_i30 + 28 >> 2] = HEAP32[5352];
    HEAP32[5352] = $sym_0_i_i30;
    HEAP32[$373 >> 2] = HEAP32[5332];
    HEAP32[5332] = $sym_0_i_i30;
    do {
     if ((HEAP32[5310] | 0) != 59) {
      if ((_decl0(50, 1) | 0) != 0) {
       break;
      }
      _expr_eq();
      $389 = HEAP32[5024] | 0;
      $392 = HEAPU16[$389 + 8 >> 1] | 0;
      $or_cond_i_i83123 = ($392 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0;
      if ((HEAP32[5310] | 0) == 44) {
       $398 = $389;
       $397 = $392;
       $or_cond_i_i83124 = $or_cond_i_i83123;
       while (1) {
        do {
         if ($or_cond_i_i83124) {
          if (($397 & 62 | 0) != 52) {
           break;
          }
          _gsym(HEAP32[$398 + 16 >> 2] | 0);
         } else {
          _o(55517);
         }
        } while (0);
        HEAP32[5024] = (HEAP32[5024] | 0) - 40;
        _next();
        _expr_eq();
        $411 = HEAP32[5024] | 0;
        $414 = HEAPU16[$411 + 8 >> 1] | 0;
        $or_cond_i_i83 = ($414 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0;
        if ((HEAP32[5310] | 0) == 44) {
         $398 = $411;
         $397 = $414;
         $or_cond_i_i83124 = $or_cond_i_i83;
        } else {
         $_lcssa121 = $411;
         $_lcssa122 = $414;
         $or_cond_i_i83_lcssa = $or_cond_i_i83;
         break;
        }
       }
      } else {
       $_lcssa121 = $389;
       $_lcssa122 = $392;
       $or_cond_i_i83_lcssa = $or_cond_i_i83123;
      }
      do {
       if ($or_cond_i_i83_lcssa) {
        if (($_lcssa122 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$_lcssa121 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
     }
    } while (0);
    _skip(59);
    $430 = HEAP32[5434] | 0;
    HEAP32[$c >> 2] = $430;
    HEAP32[$a >> 2] = 0;
    HEAP32[$b >> 2] = 0;
    if ((HEAP32[5310] | 0) != 59) {
     _expr_eq();
     if ((HEAP32[5310] | 0) == 44) {
      do {
       $435 = HEAP32[5024] | 0;
       $438 = HEAPU16[$435 + 8 >> 1] | 0;
       do {
        if (($438 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
         if (($438 & 62 | 0) != 52) {
          break;
         }
         _gsym(HEAP32[$435 + 16 >> 2] | 0);
        } else {
         _o(55517);
        }
       } while (0);
       HEAP32[5024] = (HEAP32[5024] | 0) - 40;
       _next();
       _expr_eq();
      } while ((HEAP32[5310] | 0) == 44);
     }
     HEAP32[$a >> 2] = _gtst(1, 0) | 0;
    }
    _skip(59);
    if ((HEAP32[5310] | 0) != 41) {
     $460 = _gjmp(0) | 0;
     HEAP32[$c >> 2] = HEAP32[5434];
     _expr_eq();
     $464 = HEAP32[5024] | 0;
     $467 = HEAPU16[$464 + 8 >> 1] | 0;
     $or_cond_i_i77112 = ($467 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0;
     if ((HEAP32[5310] | 0) == 44) {
      $473 = $464;
      $472 = $467;
      $or_cond_i_i77113 = $or_cond_i_i77112;
      while (1) {
       do {
        if ($or_cond_i_i77113) {
         if (($472 & 62 | 0) != 52) {
          break;
         }
         _gsym(HEAP32[$473 + 16 >> 2] | 0);
        } else {
         _o(55517);
        }
       } while (0);
       HEAP32[5024] = (HEAP32[5024] | 0) - 40;
       _next();
       _expr_eq();
       $486 = HEAP32[5024] | 0;
       $489 = HEAPU16[$486 + 8 >> 1] | 0;
       $or_cond_i_i77 = ($489 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0;
       if ((HEAP32[5310] | 0) == 44) {
        $473 = $486;
        $472 = $489;
        $or_cond_i_i77113 = $or_cond_i_i77;
       } else {
        $_lcssa110 = $486;
        $_lcssa111 = $489;
        $or_cond_i_i77_lcssa = $or_cond_i_i77;
        break;
       }
      }
     } else {
      $_lcssa110 = $464;
      $_lcssa111 = $467;
      $or_cond_i_i77_lcssa = $or_cond_i_i77112;
     }
     do {
      if ($or_cond_i_i77_lcssa) {
       if (($_lcssa111 & 62 | 0) != 52) {
        break;
       }
       _gsym(HEAP32[$_lcssa110 + 16 >> 2] | 0);
      } else {
       _o(55517);
      }
     } while (0);
     HEAP32[5024] = (HEAP32[5024] | 0) - 40;
     _gjmp_addr($430);
     _gsym($460);
    }
    _skip(41);
    _block($a, $b, $case_sym, $def_sym, $case_reg, 0);
    _gjmp_addr(HEAP32[$c >> 2] | 0);
    _gsym(HEAP32[$a >> 2] | 0);
    _gsym_addr(HEAP32[$b >> 2] | 0, HEAP32[$c >> 2] | 0);
    HEAP32[5332] = HEAP32[(HEAP32[5332] | 0) + 24 >> 2];
    $512 = HEAP32[5352] | 0;
    if (($512 | 0) != ($355 | 0)) {
     $s_01_i36 = $512;
     while (1) {
      $515 = HEAP32[$s_01_i36 + 28 >> 2] | 0;
      $517 = HEAP32[$s_01_i36 >> 2] | 0;
      do {
       if (($517 & 536870912 | 0) == 0) {
        $521 = $517 & -1073741825;
        if (($521 | 0) >= 268435456) {
         break;
        }
        $527 = HEAP32[(HEAP32[5316] | 0) + ($521 - 256 << 2) >> 2] | 0;
        HEAP32[(($517 & 1073741824 | 0) == 0 ? $527 + 16 | 0 : $527 + 12 | 0) >> 2] = HEAP32[$s_01_i36 + 32 >> 2];
       }
      } while (0);
      HEAP32[$s_01_i36 + 24 >> 2] = HEAP32[5322];
      _tcc_free(HEAP32[$s_01_i36 + 4 >> 2] | 0);
      HEAP32[5322] = $s_01_i36;
      if (($515 | 0) == ($355 | 0)) {
       break;
      } else {
       $s_01_i36 = $515;
      }
     }
    }
    HEAP32[5352] = $355;
    STACKTOP = sp;
    return;
   }
  case 269:
   {
    _next();
    HEAP32[$a >> 2] = 0;
    HEAP32[$b >> 2] = 0;
    $541 = HEAP32[5434] | 0;
    _block($a, $b, $case_sym, $def_sym, $case_reg, 0);
    _skip(261);
    _skip(40);
    _gsym(HEAP32[$b >> 2] | 0);
    _expr_eq();
    if ((HEAP32[5310] | 0) == 44) {
     do {
      $545 = HEAP32[5024] | 0;
      $548 = HEAPU16[$545 + 8 >> 1] | 0;
      do {
       if (($548 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($548 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$545 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
      _next();
      _expr_eq();
     } while ((HEAP32[5310] | 0) == 44);
    }
    $565 = _gtst(0, 0) | 0;
    HEAP32[$c >> 2] = $565;
    _gsym_addr($565, $541);
    _skip(41);
    _gsym(HEAP32[$a >> 2] | 0);
    _skip(59);
    STACKTOP = sp;
    return;
   }
  case 271:
   {
    _next();
    _skip(40);
    _expr_eq();
    if ((HEAP32[5310] | 0) == 44) {
     do {
      $570 = HEAP32[5024] | 0;
      $573 = HEAPU16[$570 + 8 >> 1] | 0;
      do {
       if (($573 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($573 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$570 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
      _next();
      _expr_eq();
     } while ((HEAP32[5310] | 0) == 44);
    }
    $590 = _gv(1) | 0;
    $591 = HEAP32[5024] | 0;
    $594 = HEAPU16[$591 + 8 >> 1] | 0;
    do {
     if (($594 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
      if (($594 & 62 | 0) != 52) {
       break;
      }
      _gsym(HEAP32[$591 + 16 >> 2] | 0);
     } else {
      _o(55517);
     }
    } while (0);
    HEAP32[5024] = (HEAP32[5024] | 0) - 40;
    _skip(41);
    HEAP32[$a >> 2] = 0;
    HEAP32[$b >> 2] = _gjmp(0) | 0;
    HEAP32[$c >> 2] = 0;
    _block($a, $csym, $b, $c, $590, 0);
    $610 = HEAP32[$c >> 2] | 0;
    if (($610 | 0) == 0) {
     $613 = HEAP32[5434] | 0;
     HEAP32[$c >> 2] = $613;
     $615 = $613;
    } else {
     $615 = $610;
    }
    _gsym_addr(HEAP32[$b >> 2] | 0, $615);
    _gsym(HEAP32[$a >> 2] | 0);
    STACKTOP = sp;
    return;
   }
  case 272:
   {
    if (($case_sym | 0) == 0) {
     _expect(13128);
    }
    _next();
    $622 = _expr_const() | 0;
    do {
     if ((HEAP32[1888] | 0) != 0 & (HEAP32[5310] | 0) == 204) {
      _next();
      $628 = _expr_const() | 0;
      if (($628 | 0) >= ($622 | 0)) {
       $v2_0 = $628;
       break;
      }
      _tcc_warning(12944, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $v2_0 = $628;
     } else {
      $v2_0 = $622;
     }
    } while (0);
    HEAP32[$b >> 2] = _gjmp(0) | 0;
    _gsym(HEAP32[$case_sym >> 2] | 0);
    $634 = $cval_sroa_2_i | 0;
    $635 = HEAP32[5024] | 0;
    if ($635 >>> 0 < 66472 >>> 0) {
     $639 = $635;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $639 = HEAP32[5024] | 0;
    }
    do {
     if ($639 >>> 0 < 56272 >>> 0) {
      $651 = $639;
     } else {
      $644 = HEAPU16[$639 + 8 >> 1] | 0;
      if (!(($644 & 63 | 0) == 51 | ($644 & 62 | 0) == 52)) {
       $651 = $639;
       break;
      }
      _gv(1) | 0;
      $651 = HEAP32[5024] | 0;
     }
    } while (0);
    $652 = $651 + 40 | 0;
    HEAP32[5024] = $652;
    $653 = $652;
    HEAP32[$653 >> 2] = 0;
    HEAP32[$653 + 4 >> 2] = 0;
    $654 = $case_reg & 65535;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $654;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $659 = HEAP32[5024] | 0;
    HEAP32[$659 + 16 >> 2] = 0;
    $663 = $659 + 20 | 0;
    HEAP32[$663 >> 2] = HEAP32[$634 >> 2];
    HEAP32[$663 + 4 >> 2] = HEAP32[$634 + 4 >> 2];
    HEAP32[$663 + 8 >> 2] = HEAP32[$634 + 8 >> 2];
    $664 = HEAP32[5024] | 0;
    if ($664 >>> 0 < 66472 >>> 0) {
     $668 = $664;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $668 = HEAP32[5024] | 0;
    }
    do {
     if ($668 >>> 0 < 56272 >>> 0) {
      $680 = $668;
     } else {
      $673 = HEAPU16[$668 + 8 >> 1] | 0;
      if (!(($673 & 63 | 0) == 51 | ($673 & 62 | 0) == 52)) {
       $680 = $668;
       break;
      }
      _gv(1) | 0;
      $680 = HEAP32[5024] | 0;
     }
    } while (0);
    $681 = $680 + 40 | 0;
    HEAP32[5024] = $681;
    $682 = $681;
    $$etemp$22 = 21728;
    $683$1 = HEAP32[$$etemp$22 + 4 >> 2] | 0;
    HEAP32[$682 >> 2] = HEAP32[$$etemp$22 >> 2];
    HEAP32[$682 + 4 >> 2] = $683$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $688 = HEAP32[5024] | 0;
    HEAP32[$688 + 16 >> 2] = $622;
    $692 = $688 + 20 | 0;
    HEAP32[$692 >> 2] = HEAP32[$634 >> 2];
    HEAP32[$692 + 4 >> 2] = HEAP32[$634 + 4 >> 2];
    HEAP32[$692 + 8 >> 2] = HEAP32[$634 + 8 >> 2];
    if (($622 | 0) == ($v2_0 | 0)) {
     _gen_op(148);
     $storemerge = _gtst(1, 0) | 0;
    } else {
     _gen_op(157);
     HEAP32[$case_sym >> 2] = _gtst(1, 0) | 0;
     $698 = HEAP32[5024] | 0;
     if ($698 >>> 0 < 66472 >>> 0) {
      $702 = $698;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $702 = HEAP32[5024] | 0;
     }
     do {
      if ($702 >>> 0 < 56272 >>> 0) {
       $714 = $702;
      } else {
       $707 = HEAPU16[$702 + 8 >> 1] | 0;
       if (!(($707 & 63 | 0) == 51 | ($707 & 62 | 0) == 52)) {
        $714 = $702;
        break;
       }
       _gv(1) | 0;
       $714 = HEAP32[5024] | 0;
      }
     } while (0);
     $715 = $714 + 40 | 0;
     HEAP32[5024] = $715;
     $716 = $715;
     HEAP32[$716 >> 2] = 0;
     HEAP32[$716 + 4 >> 2] = 0;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $654;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $721 = HEAP32[5024] | 0;
     HEAP32[$721 + 16 >> 2] = 0;
     $725 = $721 + 20 | 0;
     HEAP32[$725 >> 2] = HEAP32[$634 >> 2];
     HEAP32[$725 + 4 >> 2] = HEAP32[$634 + 4 >> 2];
     HEAP32[$725 + 8 >> 2] = HEAP32[$634 + 8 >> 2];
     $726 = HEAP32[5024] | 0;
     if ($726 >>> 0 < 66472 >>> 0) {
      $730 = $726;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $730 = HEAP32[5024] | 0;
     }
     do {
      if ($730 >>> 0 < 56272 >>> 0) {
       $742 = $730;
      } else {
       $735 = HEAPU16[$730 + 8 >> 1] | 0;
       if (!(($735 & 63 | 0) == 51 | ($735 & 62 | 0) == 52)) {
        $742 = $730;
        break;
       }
       _gv(1) | 0;
       $742 = HEAP32[5024] | 0;
      }
     } while (0);
     $743 = $742 + 40 | 0;
     HEAP32[5024] = $743;
     $744 = $743;
     $$etemp$34 = 21728;
     $745$1 = HEAP32[$$etemp$34 + 4 >> 2] | 0;
     HEAP32[$744 >> 2] = HEAP32[$$etemp$34 >> 2];
     HEAP32[$744 + 4 >> 2] = $745$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $750 = HEAP32[5024] | 0;
     HEAP32[$750 + 16 >> 2] = $v2_0;
     $754 = $750 + 20 | 0;
     HEAP32[$754 >> 2] = HEAP32[$634 >> 2];
     HEAP32[$754 + 4 >> 2] = HEAP32[$634 + 4 >> 2];
     HEAP32[$754 + 8 >> 2] = HEAP32[$634 + 8 >> 2];
     _gen_op(158);
     $storemerge = _gtst(1, HEAP32[$case_sym >> 2] | 0) | 0;
    }
    HEAP32[$case_sym >> 2] = $storemerge;
    _gsym(HEAP32[$b >> 2] | 0);
    _skip(58);
    $_0 = 0;
    break;
   }
  case 299:
   {
    _next();
    _skip(58);
    if (($def_sym | 0) == 0) {
     _expect(13128);
    }
    if ((HEAP32[$def_sym >> 2] | 0) != 0) {
     _tcc_error(12856, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    HEAP32[$def_sym >> 2] = HEAP32[5434];
    $_0 = 0;
    break;
   }
  case 268:
   {
    _next();
    $769 = HEAP32[5310] | 0;
    do {
     if (($769 | 0) == 42 & (HEAP32[1888] | 0) != 0) {
      _next();
      _expr_eq();
      $776 = HEAP32[5024] | 0;
      if ((HEAP32[5310] | 0) == 44) {
       $777 = $776;
       while (1) {
        $780 = HEAPU16[$777 + 8 >> 1] | 0;
        do {
         if (($780 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
          if (($780 & 62 | 0) != 52) {
           break;
          }
          _gsym(HEAP32[$777 + 16 >> 2] | 0);
         } else {
          _o(55517);
         }
        } while (0);
        HEAP32[5024] = (HEAP32[5024] | 0) - 40;
        _next();
        _expr_eq();
        $797 = HEAP32[5024] | 0;
        if ((HEAP32[5310] | 0) == 44) {
         $777 = $797;
        } else {
         $_lcssa131 = $797;
         break;
        }
       }
      } else {
       $_lcssa131 = $776;
      }
      if ((HEAP32[$_lcssa131 >> 2] & 15 | 0) != 4) {
       _expect(10704);
      }
      _ggoto();
     } else {
      if (($769 | 0) <= 312) {
       _expect(18752);
       break;
      }
      $807 = _label_find($769) | 0;
      do {
       if (($807 | 0) == 0) {
        $811 = _label_push(54520, HEAP32[5310] | 0, 1) | 0;
        $s_0 = $811;
        $820 = HEAP32[$811 + 8 >> 2] | 0;
        label = 209;
       } else {
        $813 = $807 + 8 | 0;
        $814 = HEAP32[$813 >> 2] | 0;
        if (($814 | 0) != 2) {
         $s_0 = $807;
         $820 = $814;
         label = 209;
         break;
        }
        HEAP32[$813 >> 2] = 1;
        $816 = $807 + 24 | 0;
        $828 = $816;
        $827 = HEAP32[$816 >> 2] | 0;
        label = 210;
       }
      } while (0);
      do {
       if ((label | 0) == 209) {
        $823 = $s_0 + 24 | 0;
        $825 = HEAP32[$823 >> 2] | 0;
        if (($820 & 1 | 0) != 0) {
         $828 = $823;
         $827 = $825;
         label = 210;
         break;
        }
        _gjmp_addr($825);
       }
      } while (0);
      if ((label | 0) == 210) {
       HEAP32[$828 >> 2] = _gjmp($827) | 0;
      }
      _next();
     }
    } while (0);
    _skip(59);
    STACKTOP = sp;
    return;
   }
  case 312:
  case 311:
  case 310:
   {
    _asm_instr();
    STACKTOP = sp;
    return;
   }
  default:
   {
    do {
     if (($59 | 0) < 313) {
      label = 219;
     } else {
      _next();
      if ((HEAP32[5310] | 0) != 58) {
       _unget_tok($59);
       label = 219;
       break;
      }
      _next();
      HEAP32[$b >> 2] = $59;
      if (($59 | 0) == 0) {
       break;
      }
      $844 = _label_find($59) | 0;
      if (($844 | 0) == 0) {
       $s_1 = _label_push(54520, HEAP32[$b >> 2] | 0, 0) | 0;
      } else {
       $847 = $844 + 8 | 0;
       if ((HEAP32[$847 >> 2] | 0) == 0) {
        $853 = _get_tok_str(HEAP32[$844 >> 2] | 0, 0) | 0;
        _tcc_error(12752, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $853, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
       }
       _gsym(HEAP32[$844 + 24 >> 2] | 0);
       HEAP32[$847 >> 2] = 0;
       $s_1 = $844;
      }
      HEAP32[$s_1 + 24 >> 2] = HEAP32[5434];
      $_0 = $is_expr;
      break L18;
     }
    } while (0);
    if ((label | 0) == 219) {
     HEAP32[$b >> 2] = 0;
    }
    L337 : do {
     if ((HEAP32[5310] | 0) != 59) {
      if ($24) {
       $905 = HEAP32[5024] | 0;
       $908 = HEAPU16[$905 + 8 >> 1] | 0;
       do {
        if (($908 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
         if (($908 & 62 | 0) != 52) {
          break;
         }
         _gsym(HEAP32[$905 + 16 >> 2] | 0);
        } else {
         _o(55517);
        }
       } while (0);
       HEAP32[5024] = (HEAP32[5024] | 0) - 40;
       _expr_eq();
       if ((HEAP32[5310] | 0) != 44) {
        break;
       }
       while (1) {
        $925 = HEAP32[5024] | 0;
        $928 = HEAPU16[$925 + 8 >> 1] | 0;
        do {
         if (($928 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
          if (($928 & 62 | 0) != 52) {
           break;
          }
          _gsym(HEAP32[$925 + 16 >> 2] | 0);
         } else {
          _o(55517);
         }
        } while (0);
        HEAP32[5024] = (HEAP32[5024] | 0) - 40;
        _next();
        _expr_eq();
        if ((HEAP32[5310] | 0) != 44) {
         break L337;
        }
       }
      }
      _expr_eq();
      $896 = HEAP32[5024] | 0;
      $899 = HEAPU16[$896 + 8 >> 1] | 0;
      $or_cond_i_i6497 = ($899 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0;
      if ((HEAP32[5310] | 0) == 44) {
       $946 = $896;
       $945 = $899;
       $or_cond_i_i6498 = $or_cond_i_i6497;
       while (1) {
        do {
         if ($or_cond_i_i6498) {
          if (($945 & 62 | 0) != 52) {
           break;
          }
          _gsym(HEAP32[$946 + 16 >> 2] | 0);
         } else {
          _o(55517);
         }
        } while (0);
        HEAP32[5024] = (HEAP32[5024] | 0) - 40;
        _next();
        _expr_eq();
        $959 = HEAP32[5024] | 0;
        $962 = HEAPU16[$959 + 8 >> 1] | 0;
        $or_cond_i_i64 = ($962 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0;
        if ((HEAP32[5310] | 0) == 44) {
         $946 = $959;
         $945 = $962;
         $or_cond_i_i6498 = $or_cond_i_i64;
        } else {
         $_lcssa = $959;
         $_lcssa96 = $962;
         $or_cond_i_i64_lcssa = $or_cond_i_i64;
         break;
        }
       }
      } else {
       $_lcssa = $896;
       $_lcssa96 = $899;
       $or_cond_i_i64_lcssa = $or_cond_i_i6497;
      }
      do {
       if ($or_cond_i_i64_lcssa) {
        if (($_lcssa96 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$_lcssa + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
     }
    } while (0);
    _skip(59);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 if ((HEAP32[5310] | 0) == 125) {
  _tcc_warning(12656, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  STACKTOP = sp;
  return;
 }
 if (($_0 | 0) != 0) {
  $871 = HEAP32[5024] | 0;
  $874 = HEAPU16[$871 + 8 >> 1] | 0;
  do {
   if (($874 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
    if (($874 & 62 | 0) != 52) {
     break;
    }
    _gsym(HEAP32[$871 + 16 >> 2] | 0);
   } else {
    _o(55517);
   }
  } while (0);
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
 }
 _block($bsym, $csym, $case_sym, $def_sym, $case_reg, $_0);
 STACKTOP = sp;
 return;
}
function _decl_initializer($type, $sec, $c, $first, $size_only) {
 $type = $type | 0;
 $sec = $sec | 0;
 $c = $c | 0;
 $first = $first | 0;
 $size_only = $size_only | 0;
 var $cval_sroa_2_i110 = 0, $cval_sroa_2_i105 = 0, $cval_sroa_2_i100 = 0, $cval_i_sroa_4_i95 = 0, $cval_sroa_2_i90 = 0, $cval_sroa_2_i85 = 0, $cval_i_sroa_4_i80 = 0, $cval_sroa_2_i75 = 0, $cval_sroa_2_i70 = 0, $cval_i_sroa_4_i65 = 0, $cval_sroa_2_i60 = 0, $cval_sroa_2_i56 = 0, $cval_i_sroa_4_i = 0, $cval_i_i_sroa_4 = 0, $cval_sroa_2_i = 0, $tmp_i = 0, $index = 0, $n = 0, $align1 = 0, $f = 0, $a = 0, $retcval_sroa_2 = 0, $ad1 = 0, $type1 = 0, $1 = 0, $2 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $24 = 0, $31 = 0, $32 = 0, $33 = 0, $$etemp$1 = 0, $34$1 = 0, $39 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $56 = 0, $63 = 0, $64 = 0, $65 = 0, $$etemp$8 = 0, $66$1 = 0, $71 = 0, $75 = 0, $76 = 0, $80 = 0, $85 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96$1 = 0, $101 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $112 = 0, $117 = 0, $124 = 0, $125 = 0, $126 = 0, $127$1 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $143 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $157 = 0, $160 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $189 = 0, $194 = 0, $no_oblock_0 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $array_length_0 = 0, $213 = 0, $215 = 0, $217 = 0, $219 = 0, $nb_0 = 0, $226 = 0, $229 = 0, $236 = 0, $i_0139 = 0, $238 = 0, $ch_0 = 0, $251 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $array_length_1143 = 0, $273 = 0, $280 = 0, $282 = 0, $284 = 0, $288 = 0, $293 = 0, $300 = 0, $301 = 0, $302 = 0, $307 = 0, $311 = 0, $312 = 0, $316 = 0, $321 = 0, $328 = 0, $329 = 0, $330 = 0, $$etemp$32 = 0, $331$1 = 0, $336 = 0, $340 = 0, $341 = 0, $345 = 0, $350 = 0, $357 = 0, $358 = 0, $359 = 0, $$etemp$39 = 0, $360$1 = 0, $365 = 0, $369 = 0, $370 = 0, $array_length_1_ = 0, $array_length_3 = 0, $386 = 0, $388 = 0, $391 = 0, $392 = 0, $396 = 0, $401 = 0, $408 = 0, $409 = 0, $410 = 0, $415 = 0, $419 = 0, $420 = 0, $421 = 0, $425 = 0, $430 = 0, $437 = 0, $438 = 0, $439 = 0, $$etemp$51 = 0, $440$1 = 0, $445 = 0, $449 = 0, $450 = 0, $451 = 0, $455 = 0, $460 = 0, $467 = 0, $468 = 0, $469 = 0, $$etemp$58 = 0, $470$1 = 0, $475 = 0, $479 = 0, $486 = 0, $487 = 0, $488 = 0, $par_count_0131 = 0, $495 = 0, $par_count_0_lcssa = 0, $503 = 0, $par_count_1 = 0, $507 = 0, $no_oblock_1 = 0, $509 = 0, $513 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $array_length_4124 = 0, $521 = 0, $522 = 0, $523 = 0, $526 = 0, $527 = 0, $529 = 0, $533 = 0, $538 = 0, $545 = 0, $546 = 0, $547 = 0, $552 = 0, $556 = 0, $557 = 0, $561 = 0, $566 = 0, $573 = 0, $574 = 0, $575 = 0, $$etemp$70 = 0, $576$1 = 0, $581 = 0, $585 = 0, $586 = 0, $590 = 0, $595 = 0, $602 = 0, $603 = 0, $604 = 0, $$etemp$77 = 0, $605$1 = 0, $610 = 0, $614 = 0, $617 = 0, $_array_length_4 = 0, $620 = 0, $_pre159 = 0, $_pre152 = 0, $623 = 0, $629 = 0, $634 = 0, $643 = 0, $645 = 0, $array_length_6 = 0, $656 = 0, $657 = 0, $659 = 0, $660 = 0, $664 = 0, $669 = 0, $676 = 0, $677 = 0, $678 = 0, $683 = 0, $687 = 0, $688 = 0, $689 = 0, $693 = 0, $698 = 0, $705 = 0, $706 = 0, $707 = 0, $$etemp$89 = 0, $708$1 = 0, $713 = 0, $717 = 0, $718 = 0, $719 = 0, $723 = 0, $728 = 0, $735 = 0, $736 = 0, $737 = 0, $$etemp$96 = 0, $738$1 = 0, $743 = 0, $747 = 0, $par_count_2122 = 0, $754 = 0, $759 = 0, $parlevel1_0 = 0, $parlevel_0 = 0, $parlevel1_1 = 0, $parlevel_1 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 360 | 0;
 $cval_sroa_2_i110 = sp | 0;
 $cval_sroa_2_i105 = sp + 16 | 0;
 $cval_sroa_2_i100 = sp + 32 | 0;
 $cval_i_sroa_4_i95 = sp + 48 | 0;
 $cval_sroa_2_i90 = sp + 64 | 0;
 $cval_sroa_2_i85 = sp + 80 | 0;
 $cval_i_sroa_4_i80 = sp + 96 | 0;
 $cval_sroa_2_i75 = sp + 112 | 0;
 $cval_sroa_2_i70 = sp + 128 | 0;
 $cval_i_sroa_4_i65 = sp + 144 | 0;
 $cval_sroa_2_i60 = sp + 160 | 0;
 $cval_sroa_2_i56 = sp + 176 | 0;
 $cval_i_sroa_4_i = sp + 192 | 0;
 $cval_i_i_sroa_4 = sp + 208 | 0;
 $cval_sroa_2_i = sp + 224 | 0;
 $tmp_i = sp + 240 | 0;
 $index = sp + 280 | 0;
 $n = sp + 288 | 0;
 $align1 = sp + 296 | 0;
 $f = sp + 304 | 0;
 $a = sp + 312 | 0;
 $retcval_sroa_2 = sp + 320 | 0;
 $ad1 = sp + 336 | 0;
 $type1 = sp + 352 | 0;
 $1 = $type | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 & 131072 | 0) != 0) {
  _vpush_global_sym(55624, 400);
  if ((HEAP32[$1 >> 2] & 131072 | 0) == 0) {
   $45 = _type_size($type, $a) | 0;
   $46 = $cval_i_i_sroa_4 | 0;
   $47 = HEAP32[5024] | 0;
   if ($47 >>> 0 < 66472 >>> 0) {
    $51 = $47;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $51 = HEAP32[5024] | 0;
   }
   do {
    if ($51 >>> 0 < 56272 >>> 0) {
     $63 = $51;
    } else {
     $56 = HEAPU16[$51 + 8 >> 1] | 0;
     if (!(($56 & 63 | 0) == 51 | ($56 & 62 | 0) == 52)) {
      $63 = $51;
      break;
     }
     _gv(1) | 0;
     $63 = HEAP32[5024] | 0;
    }
   } while (0);
   $64 = $63 + 40 | 0;
   HEAP32[5024] = $64;
   $65 = $64;
   $$etemp$8 = 21728;
   $66$1 = HEAP32[$$etemp$8 + 4 >> 2] | 0;
   HEAP32[$65 >> 2] = HEAP32[$$etemp$8 >> 2];
   HEAP32[$65 + 4 >> 2] = $66$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $71 = HEAP32[5024] | 0;
   HEAP32[$71 + 16 >> 2] = $45;
   $75 = $71 + 20 | 0;
   HEAP32[$75 >> 2] = HEAP32[$46 >> 2];
   HEAP32[$75 + 4 >> 2] = HEAP32[$46 + 4 >> 2];
   HEAP32[$75 + 8 >> 2] = HEAP32[$46 + 8 >> 2];
  } else {
   $13 = HEAP32[(HEAP32[$type + 4 >> 2] | 0) + 12 >> 2] | 0;
   $14 = $cval_sroa_2_i110 | 0;
   $15 = HEAP32[5024] | 0;
   if ($15 >>> 0 < 66472 >>> 0) {
    $19 = $15;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $19 = HEAP32[5024] | 0;
   }
   do {
    if ($19 >>> 0 < 56272 >>> 0) {
     $31 = $19;
    } else {
     $24 = HEAPU16[$19 + 8 >> 1] | 0;
     if (!(($24 & 63 | 0) == 51 | ($24 & 62 | 0) == 52)) {
      $31 = $19;
      break;
     }
     _gv(1) | 0;
     $31 = HEAP32[5024] | 0;
    }
   } while (0);
   $32 = $31 + 40 | 0;
   HEAP32[5024] = $32;
   $33 = $32;
   $$etemp$1 = 21728;
   $34$1 = HEAP32[$$etemp$1 + 4 >> 2] | 0;
   HEAP32[$33 >> 2] = HEAP32[$$etemp$1 >> 2];
   HEAP32[$33 + 4 >> 2] = $34$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $39 = HEAP32[5024] | 0;
   HEAP32[$39 + 16 >> 2] = $13;
   $43 = $39 + 20 | 0;
   HEAP32[$43 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$43 + 4 >> 2] = HEAP32[$14 + 4 >> 2];
   HEAP32[$43 + 8 >> 2] = HEAP32[$14 + 8 >> 2];
  }
  _gfunc_call(1);
  $76 = HEAP32[5024] | 0;
  if ($76 >>> 0 < 66472 >>> 0) {
   $80 = $76;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $80 = HEAP32[5024] | 0;
  }
  do {
   if ($80 >>> 0 < 56272 >>> 0) {
    $92 = $80;
   } else {
    $85 = HEAPU16[$80 + 8 >> 1] | 0;
    if (!(($85 & 63 | 0) == 51 | ($85 & 62 | 0) == 52)) {
     $92 = $80;
     break;
    }
    _gv(1) | 0;
    $92 = HEAP32[5024] | 0;
   }
  } while (0);
  $93 = $92 + 40 | 0;
  HEAP32[5024] = $93;
  $94 = $type;
  $95 = $93;
  $96$1 = HEAP32[$94 + 4 >> 2] | 0;
  HEAP32[$95 >> 2] = HEAP32[$94 >> 2];
  HEAP32[$95 + 4 >> 2] = $96$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 0;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $101 = HEAP32[5024] | 0;
  HEAP32[$101 + 16 >> 2] = 0;
  $105 = $101 + 20 | 0;
  $106 = $retcval_sroa_2 | 0;
  HEAP32[$105 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$105 + 4 >> 2] = HEAP32[$106 + 4 >> 2];
  HEAP32[$105 + 8 >> 2] = HEAP32[$106 + 8 >> 2];
  $107 = $cval_sroa_2_i | 0;
  $108 = HEAP32[5024] | 0;
  if ($108 >>> 0 < 66472 >>> 0) {
   $112 = $108;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $112 = HEAP32[5024] | 0;
  }
  do {
   if ($112 >>> 0 < 56272 >>> 0) {
    $124 = $112;
   } else {
    $117 = HEAPU16[$112 + 8 >> 1] | 0;
    if (!(($117 & 63 | 0) == 51 | ($117 & 62 | 0) == 52)) {
     $124 = $112;
     break;
    }
    _gv(1) | 0;
    $124 = HEAP32[5024] | 0;
   }
  } while (0);
  $125 = $124 + 40 | 0;
  HEAP32[5024] = $125;
  $126 = $125;
  $127$1 = HEAP32[$94 + 4 >> 2] | 0;
  HEAP32[$126 >> 2] = HEAP32[$94 >> 2];
  HEAP32[$126 + 4 >> 2] = $127$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $132 = HEAP32[5024] | 0;
  HEAP32[$132 + 16 >> 2] = $c;
  $136 = $132 + 20 | 0;
  HEAP32[$136 >> 2] = HEAP32[$107 >> 2];
  HEAP32[$136 + 4 >> 2] = HEAP32[$107 + 4 >> 2];
  HEAP32[$136 + 8 >> 2] = HEAP32[$107 + 8 >> 2];
  $137 = $tmp_i;
  $138 = HEAP32[5024] | 0;
  do {
   if ($138 >>> 0 < 56272 >>> 0) {
    $150 = $138;
   } else {
    $143 = HEAPU16[$138 + 8 >> 1] | 0;
    if (!(($143 & 63 | 0) == 51 | ($143 & 62 | 0) == 52)) {
     $150 = $138;
     break;
    }
    _gv(1) | 0;
    $150 = HEAP32[5024] | 0;
   }
  } while (0);
  $151 = $150;
  HEAP32[$137 >> 2] = HEAP32[$151 >> 2];
  HEAP32[$137 + 4 >> 2] = HEAP32[$151 + 4 >> 2];
  HEAP32[$137 + 8 >> 2] = HEAP32[$151 + 8 >> 2];
  HEAP32[$137 + 12 >> 2] = HEAP32[$151 + 12 >> 2];
  HEAP32[$137 + 16 >> 2] = HEAP32[$151 + 16 >> 2];
  HEAP32[$137 + 20 >> 2] = HEAP32[$151 + 20 >> 2];
  HEAP32[$137 + 24 >> 2] = HEAP32[$151 + 24 >> 2];
  HEAP32[$137 + 28 >> 2] = HEAP32[$151 + 28 >> 2];
  HEAP32[$137 + 32 >> 2] = HEAP32[$151 + 32 >> 2];
  HEAP32[$137 + 36 >> 2] = HEAP32[$151 + 36 >> 2];
  $153 = $150 - 40 | 0;
  HEAP32[$151 >> 2] = HEAP32[$153 >> 2];
  HEAP32[$151 + 4 >> 2] = HEAP32[$153 + 4 >> 2];
  HEAP32[$151 + 8 >> 2] = HEAP32[$153 + 8 >> 2];
  HEAP32[$151 + 12 >> 2] = HEAP32[$153 + 12 >> 2];
  HEAP32[$151 + 16 >> 2] = HEAP32[$153 + 16 >> 2];
  HEAP32[$151 + 20 >> 2] = HEAP32[$153 + 20 >> 2];
  HEAP32[$151 + 24 >> 2] = HEAP32[$153 + 24 >> 2];
  HEAP32[$151 + 28 >> 2] = HEAP32[$153 + 28 >> 2];
  HEAP32[$151 + 32 >> 2] = HEAP32[$153 + 32 >> 2];
  HEAP32[$151 + 36 >> 2] = HEAP32[$153 + 36 >> 2];
  $156 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$156 >> 2] = HEAP32[$137 >> 2];
  HEAP32[$156 + 4 >> 2] = HEAP32[$137 + 4 >> 2];
  HEAP32[$156 + 8 >> 2] = HEAP32[$137 + 8 >> 2];
  HEAP32[$156 + 12 >> 2] = HEAP32[$137 + 12 >> 2];
  HEAP32[$156 + 16 >> 2] = HEAP32[$137 + 16 >> 2];
  HEAP32[$156 + 20 >> 2] = HEAP32[$137 + 20 >> 2];
  HEAP32[$156 + 24 >> 2] = HEAP32[$137 + 24 >> 2];
  HEAP32[$156 + 28 >> 2] = HEAP32[$137 + 28 >> 2];
  HEAP32[$156 + 32 >> 2] = HEAP32[$137 + 32 >> 2];
  HEAP32[$156 + 36 >> 2] = HEAP32[$137 + 36 >> 2];
  _vstore();
  $157 = HEAP32[5024] | 0;
  $160 = HEAPU16[$157 + 8 >> 1] | 0;
  do {
   if (($160 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
    if (($160 & 62 | 0) != 52) {
     break;
    }
    _gsym(HEAP32[$157 + 16 >> 2] | 0);
   } else {
    _o(55517);
   }
  } while (0);
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  STACKTOP = sp;
  return;
 }
 if (($2 & 32 | 0) != 0) {
  $180 = HEAP32[$type + 4 >> 2] | 0;
  $181 = $180 + 12 | 0;
  $182 = HEAP32[$181 >> 2] | 0;
  HEAP32[$n >> 2] = $182;
  $183 = $180 + 16 | 0;
  $184 = _type_size($183, $align1) | 0;
  $186 = HEAP32[5310] | 0;
  $189 = ($186 | 0) == 123;
  if (($first | 0) != 0 & ($186 | 0) != 184 & ($186 | 0) != 181 | $189) {
   if (!$189) {
    _tcc_error(14808, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   _skip(123);
   $no_oblock_0 = 0;
   $194 = HEAP32[5310] | 0;
  } else {
   $no_oblock_0 = 1;
   $194 = $186;
  }
  if (($194 | 0) == 184) {
   if ((HEAP32[$183 >> 2] & 15 | 0) == 0) {
    label = 41;
   } else {
    label = 62;
   }
  } else if (($194 | 0) == 181) {
   if ((HEAP32[$183 >> 2] & 15 | 0) == 1) {
    label = 41;
   } else {
    label = 62;
   }
  } else {
   HEAP32[$index >> 2] = 0;
   if (($194 | 0) == 125) {
    $array_length_3 = 0;
   } else {
    label = 64;
   }
  }
  do {
   if ((label | 0) == 41) {
    $205 = ($182 | 0) > -1;
    $206 = ($size_only | 0) == 0;
    $207 = ($sec | 0) != 0;
    $208 = ($184 | 0) == 1;
    $209 = $sec + 4 | 0;
    $array_length_0 = 0;
    $211 = $194;
    while (1) {
     if (!(($211 | 0) == 184 | ($211 | 0) == 181)) {
      break;
     }
     $213 = HEAP32[5302] | 0;
     $215 = HEAP32[$213 >> 2] | 0;
     $217 = (($211 | 0) == 181 ? $215 : $215 >>> 2) - 1 | 0;
     if ($205) {
      $219 = $182 - $array_length_0 | 0;
      $nb_0 = ($217 | 0) > ($219 | 0) ? $219 : $217;
     } else {
      $nb_0 = $217;
     }
     L66 : do {
      if ($206) {
       if (($217 | 0) > ($nb_0 | 0)) {
        _tcc_warning(14672, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $226 = HEAP32[5310] | 0;
       } else {
        $226 = $211;
       }
       if ($207 & ($226 | 0) == 181 & $208) {
        _memcpy((HEAP32[$209 >> 2] | 0) + ($array_length_0 + $c) | 0, HEAP32[$213 + 4 >> 2] | 0, $nb_0) | 0;
        break;
       }
       if (($nb_0 | 0) <= 0) {
        break;
       }
       $229 = $213 + 4 | 0;
       $i_0139 = 0;
       $236 = $226;
       while (1) {
        $238 = HEAP32[$229 >> 2] | 0;
        if (($236 | 0) == 181) {
         $ch_0 = HEAPU8[$238 + $i_0139 | 0] | 0;
        } else {
         $ch_0 = HEAP32[$238 + ($i_0139 << 2) >> 2] | 0;
        }
        _init_putv($183, $sec, (Math_imul($i_0139 + $array_length_0 | 0, $184) | 0) + $c | 0, $ch_0, 0);
        $251 = $i_0139 + 1 | 0;
        if (($251 | 0) >= ($nb_0 | 0)) {
         break L66;
        }
        $i_0139 = $251;
        $236 = HEAP32[5310] | 0;
       }
      }
     } while (0);
     _next();
     $array_length_0 = $nb_0 + $array_length_0 | 0;
     $211 = HEAP32[5310] | 0;
    }
    if (!(($182 | 0) < 0 | ($182 | 0) > ($array_length_0 | 0))) {
     $array_length_3 = $array_length_0;
     break;
    }
    if ($206) {
     _init_putv($183, $sec, (Math_imul($array_length_0, $184) | 0) + $c | 0, 0, 0);
    }
    $array_length_3 = $array_length_0 + 1 | 0;
   } else if ((label | 0) == 62) {
    HEAP32[$index >> 2] = 0;
    label = 64;
   }
  } while (0);
  L89 : do {
   if ((label | 0) == 64) {
    $265 = ($182 | 0) < 0;
    $266 = ($size_only | 0) == 0;
    $267 = ($sec | 0) == 0;
    $268 = $cval_i_sroa_4_i95 | 0;
    $269 = $cval_sroa_2_i100 | 0;
    $270 = $cval_sroa_2_i105 | 0;
    $271 = ($no_oblock_0 | 0) != 0;
    $array_length_1143 = 0;
    while (1) {
     _decl_designator($type, $sec, $c, $index, 0, $size_only);
     $273 = HEAP32[$index >> 2] | 0;
     if (!($265 | ($273 | 0) < ($182 | 0))) {
      _tcc_error(14552, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     do {
      if ($266 & ($273 | 0) > ($array_length_1143 | 0)) {
       $280 = (Math_imul($array_length_1143, $184) | 0) + $c | 0;
       $282 = Math_imul($273 - $array_length_1143 | 0, $184) | 0;
       if (!$267) {
        break;
       }
       _vpush_global_sym(55624, 372);
       $284 = HEAP32[5024] | 0;
       if ($284 >>> 0 < 66472 >>> 0) {
        $288 = $284;
       } else {
        _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $288 = HEAP32[5024] | 0;
       }
       do {
        if ($288 >>> 0 < 56272 >>> 0) {
         $300 = $288;
        } else {
         $293 = HEAPU16[$288 + 8 >> 1] | 0;
         if (!(($293 & 63 | 0) == 51 | ($293 & 62 | 0) == 52)) {
          $300 = $288;
          break;
         }
         _gv(1) | 0;
         $300 = HEAP32[5024] | 0;
        }
       } while (0);
       $301 = $300 + 40 | 0;
       HEAP32[5024] = $301;
       $302 = $301;
       HEAP32[$302 >> 2] = 0;
       HEAP32[$302 + 4 >> 2] = 0;
       HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 50;
       HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
       $307 = HEAP32[5024] | 0;
       HEAP32[$307 + 16 >> 2] = $280;
       $311 = $307 + 20 | 0;
       HEAP32[$311 >> 2] = HEAP32[$268 >> 2];
       HEAP32[$311 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
       HEAP32[$311 + 8 >> 2] = HEAP32[$268 + 8 >> 2];
       $312 = HEAP32[5024] | 0;
       if ($312 >>> 0 < 66472 >>> 0) {
        $316 = $312;
       } else {
        _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $316 = HEAP32[5024] | 0;
       }
       do {
        if ($316 >>> 0 < 56272 >>> 0) {
         $328 = $316;
        } else {
         $321 = HEAPU16[$316 + 8 >> 1] | 0;
         if (!(($321 & 63 | 0) == 51 | ($321 & 62 | 0) == 52)) {
          $328 = $316;
          break;
         }
         _gv(1) | 0;
         $328 = HEAP32[5024] | 0;
        }
       } while (0);
       $329 = $328 + 40 | 0;
       HEAP32[5024] = $329;
       $330 = $329;
       $$etemp$32 = 21728;
       $331$1 = HEAP32[$$etemp$32 + 4 >> 2] | 0;
       HEAP32[$330 >> 2] = HEAP32[$$etemp$32 >> 2];
       HEAP32[$330 + 4 >> 2] = $331$1;
       HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
       HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
       $336 = HEAP32[5024] | 0;
       HEAP32[$336 + 16 >> 2] = 0;
       $340 = $336 + 20 | 0;
       HEAP32[$340 >> 2] = HEAP32[$269 >> 2];
       HEAP32[$340 + 4 >> 2] = HEAP32[$269 + 4 >> 2];
       HEAP32[$340 + 8 >> 2] = HEAP32[$269 + 8 >> 2];
       $341 = HEAP32[5024] | 0;
       if ($341 >>> 0 < 66472 >>> 0) {
        $345 = $341;
       } else {
        _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $345 = HEAP32[5024] | 0;
       }
       do {
        if ($345 >>> 0 < 56272 >>> 0) {
         $357 = $345;
        } else {
         $350 = HEAPU16[$345 + 8 >> 1] | 0;
         if (!(($350 & 63 | 0) == 51 | ($350 & 62 | 0) == 52)) {
          $357 = $345;
          break;
         }
         _gv(1) | 0;
         $357 = HEAP32[5024] | 0;
        }
       } while (0);
       $358 = $357 + 40 | 0;
       HEAP32[5024] = $358;
       $359 = $358;
       $$etemp$39 = 21728;
       $360$1 = HEAP32[$$etemp$39 + 4 >> 2] | 0;
       HEAP32[$359 >> 2] = HEAP32[$$etemp$39 >> 2];
       HEAP32[$359 + 4 >> 2] = $360$1;
       HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
       HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
       $365 = HEAP32[5024] | 0;
       HEAP32[$365 + 16 >> 2] = $282;
       $369 = $365 + 20 | 0;
       HEAP32[$369 >> 2] = HEAP32[$270 >> 2];
       HEAP32[$369 + 4 >> 2] = HEAP32[$270 + 4 >> 2];
       HEAP32[$369 + 8 >> 2] = HEAP32[$270 + 8 >> 2];
       _gfunc_call(3);
      }
     } while (0);
     $370 = $273 + 1 | 0;
     HEAP32[$index >> 2] = $370;
     $array_length_1_ = ($273 | 0) < ($array_length_1143 | 0) ? $array_length_1143 : $370;
     if (($370 | 0) >= ($182 | 0) & $271 | (HEAP32[5310] | 0) == 125) {
      $array_length_3 = $array_length_1_;
      break L89;
     }
     _skip(44);
     if ((HEAP32[5310] | 0) == 125) {
      $array_length_3 = $array_length_1_;
      break;
     } else {
      $array_length_1143 = $array_length_1_;
     }
    }
   }
  } while (0);
  if (($no_oblock_0 | 0) == 0) {
   _skip(125);
  }
  do {
   if (($size_only | 0) == 0 & ($182 | 0) > -1 & ($182 | 0) > ($array_length_3 | 0)) {
    $386 = (Math_imul($array_length_3, $184) | 0) + $c | 0;
    $388 = Math_imul($182 - $array_length_3 | 0, $184) | 0;
    if (($sec | 0) != 0) {
     break;
    }
    _vpush_global_sym(55624, 372);
    $391 = $cval_i_sroa_4_i80 | 0;
    $392 = HEAP32[5024] | 0;
    if ($392 >>> 0 < 66472 >>> 0) {
     $396 = $392;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $396 = HEAP32[5024] | 0;
    }
    do {
     if ($396 >>> 0 < 56272 >>> 0) {
      $408 = $396;
     } else {
      $401 = HEAPU16[$396 + 8 >> 1] | 0;
      if (!(($401 & 63 | 0) == 51 | ($401 & 62 | 0) == 52)) {
       $408 = $396;
       break;
      }
      _gv(1) | 0;
      $408 = HEAP32[5024] | 0;
     }
    } while (0);
    $409 = $408 + 40 | 0;
    HEAP32[5024] = $409;
    $410 = $409;
    HEAP32[$410 >> 2] = 0;
    HEAP32[$410 + 4 >> 2] = 0;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 50;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $415 = HEAP32[5024] | 0;
    HEAP32[$415 + 16 >> 2] = $386;
    $419 = $415 + 20 | 0;
    HEAP32[$419 >> 2] = HEAP32[$391 >> 2];
    HEAP32[$419 + 4 >> 2] = HEAP32[$391 + 4 >> 2];
    HEAP32[$419 + 8 >> 2] = HEAP32[$391 + 8 >> 2];
    $420 = $cval_sroa_2_i85 | 0;
    $421 = HEAP32[5024] | 0;
    if ($421 >>> 0 < 66472 >>> 0) {
     $425 = $421;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $425 = HEAP32[5024] | 0;
    }
    do {
     if ($425 >>> 0 < 56272 >>> 0) {
      $437 = $425;
     } else {
      $430 = HEAPU16[$425 + 8 >> 1] | 0;
      if (!(($430 & 63 | 0) == 51 | ($430 & 62 | 0) == 52)) {
       $437 = $425;
       break;
      }
      _gv(1) | 0;
      $437 = HEAP32[5024] | 0;
     }
    } while (0);
    $438 = $437 + 40 | 0;
    HEAP32[5024] = $438;
    $439 = $438;
    $$etemp$51 = 21728;
    $440$1 = HEAP32[$$etemp$51 + 4 >> 2] | 0;
    HEAP32[$439 >> 2] = HEAP32[$$etemp$51 >> 2];
    HEAP32[$439 + 4 >> 2] = $440$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $445 = HEAP32[5024] | 0;
    HEAP32[$445 + 16 >> 2] = 0;
    $449 = $445 + 20 | 0;
    HEAP32[$449 >> 2] = HEAP32[$420 >> 2];
    HEAP32[$449 + 4 >> 2] = HEAP32[$420 + 4 >> 2];
    HEAP32[$449 + 8 >> 2] = HEAP32[$420 + 8 >> 2];
    $450 = $cval_sroa_2_i90 | 0;
    $451 = HEAP32[5024] | 0;
    if ($451 >>> 0 < 66472 >>> 0) {
     $455 = $451;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $455 = HEAP32[5024] | 0;
    }
    do {
     if ($455 >>> 0 < 56272 >>> 0) {
      $467 = $455;
     } else {
      $460 = HEAPU16[$455 + 8 >> 1] | 0;
      if (!(($460 & 63 | 0) == 51 | ($460 & 62 | 0) == 52)) {
       $467 = $455;
       break;
      }
      _gv(1) | 0;
      $467 = HEAP32[5024] | 0;
     }
    } while (0);
    $468 = $467 + 40 | 0;
    HEAP32[5024] = $468;
    $469 = $468;
    $$etemp$58 = 21728;
    $470$1 = HEAP32[$$etemp$58 + 4 >> 2] | 0;
    HEAP32[$469 >> 2] = HEAP32[$$etemp$58 >> 2];
    HEAP32[$469 + 4 >> 2] = $470$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $475 = HEAP32[5024] | 0;
    HEAP32[$475 + 16 >> 2] = $388;
    $479 = $475 + 20 | 0;
    HEAP32[$479 >> 2] = HEAP32[$450 >> 2];
    HEAP32[$479 + 4 >> 2] = HEAP32[$450 + 4 >> 2];
    HEAP32[$479 + 8 >> 2] = HEAP32[$450 + 8 >> 2];
    _gfunc_call(3);
   }
  } while (0);
  if (($182 | 0) >= 0) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$181 >> 2] = $array_length_3;
  STACKTOP = sp;
  return;
 }
 do {
  if (($2 & 15 | 0) == 7) {
   $486 = ($sec | 0) == 0;
   $487 = ($first | 0) != 0;
   $488 = HEAP32[5310] | 0;
   if (!(($488 | 0) == 123 | $486 & $487 ^ 1)) {
    $754 = $488;
    break;
   }
   if (($488 | 0) == 40) {
    _next();
    if ((HEAP32[5310] | 0) == 40) {
     $par_count_0131 = 0;
     while (1) {
      $495 = $par_count_0131 + 1 | 0;
      _next();
      if ((HEAP32[5310] | 0) == 40) {
       $par_count_0131 = $495;
      } else {
       $par_count_0_lcssa = $495;
       break;
      }
     }
    } else {
     $par_count_0_lcssa = 0;
    }
    if ((_parse_btype($type1, $ad1) | 0) == 0) {
     _expect(14488);
    }
    _type_decl($type1, $ad1, $n, 1);
    _skip(41);
    $par_count_1 = $par_count_0_lcssa;
    $503 = HEAP32[5310] | 0;
   } else {
    $par_count_1 = 0;
    $503 = $488;
   }
   if ($487 | ($503 | 0) == 123) {
    _skip(123);
    $no_oblock_1 = 0;
    $507 = HEAP32[5310] | 0;
   } else {
    $no_oblock_1 = 1;
    $507 = $503;
   }
   $509 = HEAP32[$type + 4 >> 2] | 0;
   HEAP32[$f >> 2] = HEAP32[$509 + 24 >> 2];
   HEAP32[$index >> 2] = 0;
   $513 = HEAP32[$509 + 12 >> 2] | 0;
   HEAP32[$n >> 2] = $513;
   do {
    if (($507 | 0) == 125) {
     $array_length_6 = 0;
    } else {
     $515 = ($size_only | 0) == 0;
     $516 = $cval_i_sroa_4_i65 | 0;
     $517 = $cval_sroa_2_i70 | 0;
     $518 = $cval_sroa_2_i75 | 0;
     $519 = ($no_oblock_1 | 0) != 0;
     $array_length_4124 = 0;
     while (1) {
      _decl_designator($type, $sec, $c, 0, $f, $size_only);
      $521 = HEAP32[$f >> 2] | 0;
      $522 = $521 + 12 | 0;
      $523 = HEAP32[$522 >> 2] | 0;
      do {
       if ($515 & ($523 | 0) > ($array_length_4124 | 0)) {
        $526 = $array_length_4124 + $c | 0;
        $527 = $523 - $array_length_4124 | 0;
        if (!$486) {
         break;
        }
        _vpush_global_sym(55624, 372);
        $529 = HEAP32[5024] | 0;
        if ($529 >>> 0 < 66472 >>> 0) {
         $533 = $529;
        } else {
         _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
         $533 = HEAP32[5024] | 0;
        }
        do {
         if ($533 >>> 0 < 56272 >>> 0) {
          $545 = $533;
         } else {
          $538 = HEAPU16[$533 + 8 >> 1] | 0;
          if (!(($538 & 63 | 0) == 51 | ($538 & 62 | 0) == 52)) {
           $545 = $533;
           break;
          }
          _gv(1) | 0;
          $545 = HEAP32[5024] | 0;
         }
        } while (0);
        $546 = $545 + 40 | 0;
        HEAP32[5024] = $546;
        $547 = $546;
        HEAP32[$547 >> 2] = 0;
        HEAP32[$547 + 4 >> 2] = 0;
        HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 50;
        HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
        $552 = HEAP32[5024] | 0;
        HEAP32[$552 + 16 >> 2] = $526;
        $556 = $552 + 20 | 0;
        HEAP32[$556 >> 2] = HEAP32[$516 >> 2];
        HEAP32[$556 + 4 >> 2] = HEAP32[$516 + 4 >> 2];
        HEAP32[$556 + 8 >> 2] = HEAP32[$516 + 8 >> 2];
        $557 = HEAP32[5024] | 0;
        if ($557 >>> 0 < 66472 >>> 0) {
         $561 = $557;
        } else {
         _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
         $561 = HEAP32[5024] | 0;
        }
        do {
         if ($561 >>> 0 < 56272 >>> 0) {
          $573 = $561;
         } else {
          $566 = HEAPU16[$561 + 8 >> 1] | 0;
          if (!(($566 & 63 | 0) == 51 | ($566 & 62 | 0) == 52)) {
           $573 = $561;
           break;
          }
          _gv(1) | 0;
          $573 = HEAP32[5024] | 0;
         }
        } while (0);
        $574 = $573 + 40 | 0;
        HEAP32[5024] = $574;
        $575 = $574;
        $$etemp$70 = 21728;
        $576$1 = HEAP32[$$etemp$70 + 4 >> 2] | 0;
        HEAP32[$575 >> 2] = HEAP32[$$etemp$70 >> 2];
        HEAP32[$575 + 4 >> 2] = $576$1;
        HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
        HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
        $581 = HEAP32[5024] | 0;
        HEAP32[$581 + 16 >> 2] = 0;
        $585 = $581 + 20 | 0;
        HEAP32[$585 >> 2] = HEAP32[$517 >> 2];
        HEAP32[$585 + 4 >> 2] = HEAP32[$517 + 4 >> 2];
        HEAP32[$585 + 8 >> 2] = HEAP32[$517 + 8 >> 2];
        $586 = HEAP32[5024] | 0;
        if ($586 >>> 0 < 66472 >>> 0) {
         $590 = $586;
        } else {
         _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
         $590 = HEAP32[5024] | 0;
        }
        do {
         if ($590 >>> 0 < 56272 >>> 0) {
          $602 = $590;
         } else {
          $595 = HEAPU16[$590 + 8 >> 1] | 0;
          if (!(($595 & 63 | 0) == 51 | ($595 & 62 | 0) == 52)) {
           $602 = $590;
           break;
          }
          _gv(1) | 0;
          $602 = HEAP32[5024] | 0;
         }
        } while (0);
        $603 = $602 + 40 | 0;
        HEAP32[5024] = $603;
        $604 = $603;
        $$etemp$77 = 21728;
        $605$1 = HEAP32[$$etemp$77 + 4 >> 2] | 0;
        HEAP32[$604 >> 2] = HEAP32[$$etemp$77 >> 2];
        HEAP32[$604 + 4 >> 2] = $605$1;
        HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
        HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
        $610 = HEAP32[5024] | 0;
        HEAP32[$610 + 16 >> 2] = $527;
        $614 = $610 + 20 | 0;
        HEAP32[$614 >> 2] = HEAP32[$518 >> 2];
        HEAP32[$614 + 4 >> 2] = HEAP32[$518 + 4 >> 2];
        HEAP32[$614 + 8 >> 2] = HEAP32[$518 + 8 >> 2];
        _gfunc_call(3);
       }
      } while (0);
      $617 = (_type_size($521 + 16 | 0, $align1) | 0) + $523 | 0;
      $_array_length_4 = ($617 | 0) > ($array_length_4124 | 0) ? $617 : $array_length_4124;
      $620 = HEAP32[$521 + 24 >> 2] | 0;
      L201 : do {
       if (($620 | 0) == 0) {
        $645 = 0;
       } else {
        $_pre159 = HEAP32[$522 >> 2] | 0;
        $623 = $521;
        $_pre152 = $620;
        while (1) {
         if ((HEAP32[$_pre152 + 12 >> 2] | 0) != ($_pre159 | 0)) {
          $645 = $_pre152;
          break L201;
         }
         $629 = HEAP32[$623 + 16 >> 2] | 0;
         do {
          if (($629 & 64 | 0) != 0) {
           $634 = HEAP32[$_pre152 + 16 >> 2] | 0;
           if (($634 & 64 | 0) == 0) {
            break;
           }
           if ((($634 ^ $629) & 16515072 | 0) != 0) {
            $645 = $_pre152;
            break L201;
           }
          }
         } while (0);
         HEAP32[$f >> 2] = $_pre152;
         $643 = HEAP32[$_pre152 + 24 >> 2] | 0;
         if (($643 | 0) == 0) {
          $645 = 0;
          break;
         } else {
          $623 = $_pre152;
          $_pre152 = $643;
         }
        }
       }
      } while (0);
      HEAP32[$f >> 2] = $645;
      if ($519 & ($645 | 0) == 0 | (HEAP32[5310] | 0) == 125) {
       label = 148;
       break;
      }
      _skip(44);
      if ((HEAP32[5310] | 0) == 125) {
       label = 149;
       break;
      } else {
       $array_length_4124 = $_array_length_4;
      }
     }
     if ((label | 0) == 148) {
      HEAP32[$index >> 2] = $617;
      $array_length_6 = $_array_length_4;
      break;
     } else if ((label | 0) == 149) {
      HEAP32[$index >> 2] = $617;
      $array_length_6 = $_array_length_4;
      break;
     }
    }
   } while (0);
   do {
    if (($size_only | 0) == 0 & ($513 | 0) > ($array_length_6 | 0)) {
     $656 = $array_length_6 + $c | 0;
     $657 = $513 - $array_length_6 | 0;
     if (!$486) {
      break;
     }
     _vpush_global_sym(55624, 372);
     $659 = $cval_i_sroa_4_i | 0;
     $660 = HEAP32[5024] | 0;
     if ($660 >>> 0 < 66472 >>> 0) {
      $664 = $660;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $664 = HEAP32[5024] | 0;
     }
     do {
      if ($664 >>> 0 < 56272 >>> 0) {
       $676 = $664;
      } else {
       $669 = HEAPU16[$664 + 8 >> 1] | 0;
       if (!(($669 & 63 | 0) == 51 | ($669 & 62 | 0) == 52)) {
        $676 = $664;
        break;
       }
       _gv(1) | 0;
       $676 = HEAP32[5024] | 0;
      }
     } while (0);
     $677 = $676 + 40 | 0;
     HEAP32[5024] = $677;
     $678 = $677;
     HEAP32[$678 >> 2] = 0;
     HEAP32[$678 + 4 >> 2] = 0;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 50;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $683 = HEAP32[5024] | 0;
     HEAP32[$683 + 16 >> 2] = $656;
     $687 = $683 + 20 | 0;
     HEAP32[$687 >> 2] = HEAP32[$659 >> 2];
     HEAP32[$687 + 4 >> 2] = HEAP32[$659 + 4 >> 2];
     HEAP32[$687 + 8 >> 2] = HEAP32[$659 + 8 >> 2];
     $688 = $cval_sroa_2_i56 | 0;
     $689 = HEAP32[5024] | 0;
     if ($689 >>> 0 < 66472 >>> 0) {
      $693 = $689;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $693 = HEAP32[5024] | 0;
     }
     do {
      if ($693 >>> 0 < 56272 >>> 0) {
       $705 = $693;
      } else {
       $698 = HEAPU16[$693 + 8 >> 1] | 0;
       if (!(($698 & 63 | 0) == 51 | ($698 & 62 | 0) == 52)) {
        $705 = $693;
        break;
       }
       _gv(1) | 0;
       $705 = HEAP32[5024] | 0;
      }
     } while (0);
     $706 = $705 + 40 | 0;
     HEAP32[5024] = $706;
     $707 = $706;
     $$etemp$89 = 21728;
     $708$1 = HEAP32[$$etemp$89 + 4 >> 2] | 0;
     HEAP32[$707 >> 2] = HEAP32[$$etemp$89 >> 2];
     HEAP32[$707 + 4 >> 2] = $708$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $713 = HEAP32[5024] | 0;
     HEAP32[$713 + 16 >> 2] = 0;
     $717 = $713 + 20 | 0;
     HEAP32[$717 >> 2] = HEAP32[$688 >> 2];
     HEAP32[$717 + 4 >> 2] = HEAP32[$688 + 4 >> 2];
     HEAP32[$717 + 8 >> 2] = HEAP32[$688 + 8 >> 2];
     $718 = $cval_sroa_2_i60 | 0;
     $719 = HEAP32[5024] | 0;
     if ($719 >>> 0 < 66472 >>> 0) {
      $723 = $719;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $723 = HEAP32[5024] | 0;
     }
     do {
      if ($723 >>> 0 < 56272 >>> 0) {
       $735 = $723;
      } else {
       $728 = HEAPU16[$723 + 8 >> 1] | 0;
       if (!(($728 & 63 | 0) == 51 | ($728 & 62 | 0) == 52)) {
        $735 = $723;
        break;
       }
       _gv(1) | 0;
       $735 = HEAP32[5024] | 0;
      }
     } while (0);
     $736 = $735 + 40 | 0;
     HEAP32[5024] = $736;
     $737 = $736;
     $$etemp$96 = 21728;
     $738$1 = HEAP32[$$etemp$96 + 4 >> 2] | 0;
     HEAP32[$737 >> 2] = HEAP32[$$etemp$96 >> 2];
     HEAP32[$737 + 4 >> 2] = $738$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $743 = HEAP32[5024] | 0;
     HEAP32[$743 + 16 >> 2] = $657;
     $747 = $743 + 20 | 0;
     HEAP32[$747 >> 2] = HEAP32[$718 >> 2];
     HEAP32[$747 + 4 >> 2] = HEAP32[$718 + 4 >> 2];
     HEAP32[$747 + 8 >> 2] = HEAP32[$718 + 8 >> 2];
     _gfunc_call(3);
    }
   } while (0);
   if (($no_oblock_1 | 0) == 0) {
    _skip(125);
   }
   if (($par_count_1 | 0) == 0) {
    STACKTOP = sp;
    return;
   } else {
    $par_count_2122 = $par_count_1;
   }
   do {
    _skip(41);
    $par_count_2122 = $par_count_2122 - 1 | 0;
   } while (($par_count_2122 | 0) != 0);
   STACKTOP = sp;
   return;
  } else {
   $754 = HEAP32[5310] | 0;
  }
 } while (0);
 if (($754 | 0) == 123) {
  _next();
  _decl_initializer($type, $sec, $c, $first, $size_only);
  _skip(125);
  STACKTOP = sp;
  return;
 }
 if (($size_only | 0) == 0) {
  _init_putv($type, $sec, $c, 0, ($sec | 0) != 0 ? 1 : 2);
  STACKTOP = sp;
  return;
 } else {
  $parlevel_0 = 0;
  $parlevel1_0 = 0;
  $759 = $754;
 }
 L258 : while (1) {
  L260 : do {
   if (($parlevel_0 | 0) > 0 | ($parlevel1_0 | 0) > 0) {
    switch ($759 | 0) {
    case 40:
     {
      label = 179;
      break L260;
      break;
     }
    case 41:
     {
      label = 180;
      break L260;
      break;
     }
    case 123:
     {
      label = 181;
      break L260;
      break;
     }
    case 125:
     {
      break;
     }
    case -1:
     {
      label = 185;
      break L258;
      break;
     }
    default:
     {
      $parlevel_1 = $parlevel_0;
      $parlevel1_1 = $parlevel1_0;
      break L260;
     }
    }
    $parlevel_1 = $parlevel_0;
    $parlevel1_1 = $parlevel1_0 - 1 | 0;
   } else {
    switch ($759 | 0) {
    case 40:
     {
      label = 179;
      break;
     }
    case 41:
     {
      label = 180;
      break;
     }
    case 123:
     {
      label = 181;
      break;
     }
    case -1:
    case 125:
    case 44:
     {
      label = 185;
      break L258;
      break;
     }
    default:
     {
      $parlevel_1 = $parlevel_0;
      $parlevel1_1 = $parlevel1_0;
     }
    }
   }
  } while (0);
  if ((label | 0) == 179) {
   label = 0;
   $parlevel_1 = $parlevel_0 + 1 | 0;
   $parlevel1_1 = $parlevel1_0;
  } else if ((label | 0) == 180) {
   label = 0;
   $parlevel_1 = $parlevel_0 - 1 | 0;
   $parlevel1_1 = $parlevel1_0;
  } else if ((label | 0) == 181) {
   label = 0;
   $parlevel_1 = $parlevel_0;
   $parlevel1_1 = $parlevel1_0 + 1 | 0;
  }
  _next();
  $parlevel_0 = $parlevel_1;
  $parlevel1_0 = $parlevel1_1;
  $759 = HEAP32[5310] | 0;
 }
 if ((label | 0) == 185) {
  STACKTOP = sp;
  return;
 }
}
function _gen_op($op) {
 $op = $op | 0;
 var $cval_i70_sroa_4 = 0, $cval_i65_sroa_4 = 0, $tmp_i61 = 0, $tmp_i58 = 0, $tmp_i55 = 0, $cval_i54_sroa_4 = 0, $cval_i53_sroa_4 = 0, $cval_i_i_i50_sroa_4 = 0, $align_i51 = 0, $tmp_i47 = 0, $tmp_i = 0, $cval_i_sroa_4 = 0, $cval_i_i_i_sroa_4 = 0, $align_i45 = 0, $align_i44 = 0, $tmp_i_i = 0, $align_i = 0, $type1 = 0, $tmpcast = 0, $1 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $19 = 0, $21 = 0, $29 = 0, $30 = 0, $39 = 0, $40 = 0, $44 = 0, $49 = 0, $56 = 0, $57 = 0, $58 = 0, $$etemp$2 = 0, $59$1 = 0, $64 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $81 = 0, $88 = 0, $89 = 0, $90 = 0, $$etemp$9 = 0, $91$1 = 0, $96 = 0, $100 = 0, $106 = 0, $107 = 0, $108 = 0, $112 = 0, $117 = 0, $124 = 0, $125 = 0, $126 = 0, $$etemp$18 = 0, $127$1 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $i_01_i_i = 0, $144 = 0, $145 = 0, $149 = 0, $152 = 0, $153 = 0, $158 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $176 = 0, $177 = 0, $182 = 0, $189 = 0, $190 = 0, $192 = 0, $195 = 0, $197 = 0, $199 = 0, $200$0 = 0, $200$1 = 0, $trunc = 0, $208 = 0, $209 = 0, $218 = 0, $219 = 0, $223 = 0, $228 = 0, $235 = 0, $236 = 0, $237 = 0, $$etemp$36 = 0, $238$1 = 0, $243 = 0, $247 = 0, $249 = 0, $250 = 0, $251 = 0, $255 = 0, $260 = 0, $267 = 0, $268 = 0, $269 = 0, $$etemp$43 = 0, $270$1 = 0, $275 = 0, $279 = 0, $285 = 0, $289 = 0, $290 = 0, $294 = 0, $299 = 0, $306 = 0, $307 = 0, $308 = 0, $$etemp$52 = 0, $309$1 = 0, $314 = 0, $318 = 0, $328 = 0, $329 = 0, $333 = 0, $338 = 0, $345 = 0, $346 = 0, $347 = 0, $$etemp$59 = 0, $348$1 = 0, $353 = 0, $357 = 0, $358 = 0, $359 = 0, $364 = 0, $371 = 0, $372 = 0, $374 = 0, $377 = 0, $382 = 0, $383$1 = 0, $t_0 = 0, $399 = 0, $401 = 0, $403 = 0, $t_1 = 0, $t_183 = 0, $t_184 = 0, $_0 = 0, $431 = 0, $432 = 0, $437 = 0, $444 = 0, $445 = 0, $447 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $458 = 0, $465 = 0, $466 = 0, $468 = 0, $471 = 0, $475 = 0, $487 = 0, $f1_0_i = 0.0, $f2_0_i = 0.0, $f1_1_i = 0.0, $551 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 392 | 0;
 $cval_i70_sroa_4 = sp | 0;
 $cval_i65_sroa_4 = sp + 16 | 0;
 $tmp_i61 = sp + 32 | 0;
 $tmp_i58 = sp + 72 | 0;
 $tmp_i55 = sp + 112 | 0;
 $cval_i54_sroa_4 = sp + 152 | 0;
 $cval_i53_sroa_4 = sp + 168 | 0;
 $cval_i_i_i50_sroa_4 = sp + 184 | 0;
 $align_i51 = sp + 200 | 0;
 $tmp_i47 = sp + 208 | 0;
 $tmp_i = sp + 248 | 0;
 $cval_i_sroa_4 = sp + 288 | 0;
 $cval_i_i_i_sroa_4 = sp + 304 | 0;
 $align_i45 = sp + 320 | 0;
 $align_i44 = sp + 328 | 0;
 $tmp_i_i = sp + 336 | 0;
 $align_i = sp + 376 | 0;
 $type1 = sp + 384 | 0;
 $tmpcast = $type1;
 $1 = HEAP32[5024] | 0;
 $3 = HEAP32[$1 - 40 >> 2] | 0;
 $5 = HEAP32[$1 >> 2] | 0;
 $6 = $3 & 15;
 $7 = $5 & 15;
 $8 = ($6 | 0) == 4;
 $9 = ($7 | 0) == 4;
 L1 : do {
  if ($8 | $9) {
   if (($op - 146 | 0) >>> 0 < 16 >>> 0) {
    _check_comparison_pointer_types($1 - 40 | 0, $1, $op);
    $t_183 = 16;
    label = 91;
    break;
   }
   if ($8 & $9) {
    if (($op | 0) == 45) {
     $19 = $1;
    } else {
     _tcc_error(15744, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $19 = HEAP32[5024] | 0;
    }
    _check_comparison_pointer_types($19 - 40 | 0, $19, $op);
    $21 = HEAP32[5024] | 0;
    do {
     if ((HEAP32[$21 - 40 >> 2] & 131072 | 0) == 0) {
      $106 = _type_size((HEAP32[$21 - 40 + 4 >> 2] | 0) + 16 | 0, $align_i44) | 0;
      $107 = $cval_i_sroa_4 | 0;
      $108 = HEAP32[5024] | 0;
      if ($108 >>> 0 < 66472 >>> 0) {
       $112 = $108;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $112 = HEAP32[5024] | 0;
      }
      do {
       if ($112 >>> 0 < 56272 >>> 0) {
        $124 = $112;
       } else {
        $117 = HEAPU16[$112 + 8 >> 1] | 0;
        if (!(($117 & 63 | 0) == 51 | ($117 & 62 | 0) == 52)) {
         $124 = $112;
         break;
        }
        _gv(1) | 0;
        $124 = HEAP32[5024] | 0;
       }
      } while (0);
      $125 = $124 + 40 | 0;
      HEAP32[5024] = $125;
      $126 = $125;
      $$etemp$18 = 21728;
      $127$1 = HEAP32[$$etemp$18 + 4 >> 2] | 0;
      HEAP32[$126 >> 2] = HEAP32[$$etemp$18 >> 2];
      HEAP32[$126 + 4 >> 2] = $127$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $132 = HEAP32[5024] | 0;
      HEAP32[$132 + 16 >> 2] = $106;
      $136 = $132 + 20 | 0;
      HEAP32[$136 >> 2] = HEAP32[$107 >> 2];
      HEAP32[$136 + 4 >> 2] = HEAP32[$107 + 4 >> 2];
      HEAP32[$136 + 8 >> 2] = HEAP32[$107 + 8 >> 2];
     } else {
      $29 = HEAP32[$21 - 40 + 4 >> 2] | 0;
      $30 = $29 + 16 | 0;
      if ((HEAP32[$30 >> 2] & 131072 | 0) == 0) {
       $70 = _type_size($30, $align_i45) | 0;
       $71 = $cval_i_i_i_sroa_4 | 0;
       $72 = HEAP32[5024] | 0;
       if ($72 >>> 0 < 66472 >>> 0) {
        $76 = $72;
       } else {
        _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $76 = HEAP32[5024] | 0;
       }
       do {
        if ($76 >>> 0 < 56272 >>> 0) {
         $88 = $76;
        } else {
         $81 = HEAPU16[$76 + 8 >> 1] | 0;
         if (!(($81 & 63 | 0) == 51 | ($81 & 62 | 0) == 52)) {
          $88 = $76;
          break;
         }
         _gv(1) | 0;
         $88 = HEAP32[5024] | 0;
        }
       } while (0);
       $89 = $88 + 40 | 0;
       HEAP32[5024] = $89;
       $90 = $89;
       $$etemp$9 = 21728;
       $91$1 = HEAP32[$$etemp$9 + 4 >> 2] | 0;
       HEAP32[$90 >> 2] = HEAP32[$$etemp$9 >> 2];
       HEAP32[$90 + 4 >> 2] = $91$1;
       HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
       HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
       $96 = HEAP32[5024] | 0;
       HEAP32[$96 + 16 >> 2] = $70;
       $100 = $96 + 20 | 0;
       HEAP32[$100 >> 2] = HEAP32[$71 >> 2];
       HEAP32[$100 + 4 >> 2] = HEAP32[$71 + 4 >> 2];
       HEAP32[$100 + 8 >> 2] = HEAP32[$71 + 8 >> 2];
       break;
      } else {
       $39 = HEAP32[(HEAP32[$29 + 20 >> 2] | 0) + 12 >> 2] | 0;
       $40 = $cval_i65_sroa_4 | 0;
       if ($21 >>> 0 < 66472 >>> 0) {
        $44 = $21;
       } else {
        _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $44 = HEAP32[5024] | 0;
       }
       do {
        if ($44 >>> 0 < 56272 >>> 0) {
         $56 = $44;
        } else {
         $49 = HEAPU16[$44 + 8 >> 1] | 0;
         if (!(($49 & 63 | 0) == 51 | ($49 & 62 | 0) == 52)) {
          $56 = $44;
          break;
         }
         _gv(1) | 0;
         $56 = HEAP32[5024] | 0;
        }
       } while (0);
       $57 = $56 + 40 | 0;
       HEAP32[5024] = $57;
       $58 = $57;
       $$etemp$2 = 21728;
       $59$1 = HEAP32[$$etemp$2 + 4 >> 2] | 0;
       HEAP32[$58 >> 2] = HEAP32[$$etemp$2 >> 2];
       HEAP32[$58 + 4 >> 2] = $59$1;
       HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
       HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
       $64 = HEAP32[5024] | 0;
       HEAP32[$64 + 16 >> 2] = $39;
       $68 = $64 + 20 | 0;
       HEAP32[$68 >> 2] = HEAP32[$40 >> 2];
       HEAP32[$68 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
       HEAP32[$68 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
       break;
      }
     }
    } while (0);
    $137 = HEAP32[5024] | 0;
    $138 = $tmp_i_i;
    $139 = $137;
    HEAP32[$138 >> 2] = HEAP32[$139 >> 2];
    HEAP32[$138 + 4 >> 2] = HEAP32[$139 + 4 >> 2];
    HEAP32[$138 + 8 >> 2] = HEAP32[$139 + 8 >> 2];
    HEAP32[$138 + 12 >> 2] = HEAP32[$139 + 12 >> 2];
    HEAP32[$138 + 16 >> 2] = HEAP32[$139 + 16 >> 2];
    HEAP32[$138 + 20 >> 2] = HEAP32[$139 + 20 >> 2];
    HEAP32[$138 + 24 >> 2] = HEAP32[$139 + 24 >> 2];
    HEAP32[$138 + 28 >> 2] = HEAP32[$139 + 28 >> 2];
    HEAP32[$138 + 32 >> 2] = HEAP32[$139 + 32 >> 2];
    HEAP32[$138 + 36 >> 2] = HEAP32[$139 + 36 >> 2];
    $i_01_i_i = 0;
    do {
     $144 = $137 + ((-$i_01_i_i | 0) * 40 | 0) | 0;
     $145 = $137 + (~$i_01_i_i * 40 | 0) | 0;
     HEAP32[$144 >> 2] = HEAP32[$145 >> 2];
     HEAP32[$144 + 4 >> 2] = HEAP32[$145 + 4 >> 2];
     HEAP32[$144 + 8 >> 2] = HEAP32[$145 + 8 >> 2];
     HEAP32[$144 + 12 >> 2] = HEAP32[$145 + 12 >> 2];
     HEAP32[$144 + 16 >> 2] = HEAP32[$145 + 16 >> 2];
     HEAP32[$144 + 20 >> 2] = HEAP32[$145 + 20 >> 2];
     HEAP32[$144 + 24 >> 2] = HEAP32[$145 + 24 >> 2];
     HEAP32[$144 + 28 >> 2] = HEAP32[$145 + 28 >> 2];
     HEAP32[$144 + 32 >> 2] = HEAP32[$145 + 32 >> 2];
     HEAP32[$144 + 36 >> 2] = HEAP32[$145 + 36 >> 2];
     $i_01_i_i = $i_01_i_i + 1 | 0;
    } while (($i_01_i_i | 0) < 2);
    $149 = $137 - 80 | 0;
    HEAP32[$149 >> 2] = HEAP32[$138 >> 2];
    HEAP32[$149 + 4 >> 2] = HEAP32[$138 + 4 >> 2];
    HEAP32[$149 + 8 >> 2] = HEAP32[$138 + 8 >> 2];
    HEAP32[$149 + 12 >> 2] = HEAP32[$138 + 12 >> 2];
    HEAP32[$149 + 16 >> 2] = HEAP32[$138 + 16 >> 2];
    HEAP32[$149 + 20 >> 2] = HEAP32[$138 + 20 >> 2];
    HEAP32[$149 + 24 >> 2] = HEAP32[$138 + 24 >> 2];
    HEAP32[$149 + 28 >> 2] = HEAP32[$138 + 28 >> 2];
    HEAP32[$149 + 32 >> 2] = HEAP32[$138 + 32 >> 2];
    HEAP32[$149 + 36 >> 2] = HEAP32[$138 + 36 >> 2];
    _gen_opic($op);
    HEAP32[HEAP32[5024] >> 2] = 0;
    $152 = $tmp_i;
    $153 = HEAP32[5024] | 0;
    do {
     if ($153 >>> 0 < 56272 >>> 0) {
      $165 = $153;
     } else {
      $158 = HEAPU16[$153 + 8 >> 1] | 0;
      if (!(($158 & 63 | 0) == 51 | ($158 & 62 | 0) == 52)) {
       $165 = $153;
       break;
      }
      _gv(1) | 0;
      $165 = HEAP32[5024] | 0;
     }
    } while (0);
    $166 = $165;
    HEAP32[$152 >> 2] = HEAP32[$166 >> 2];
    HEAP32[$152 + 4 >> 2] = HEAP32[$166 + 4 >> 2];
    HEAP32[$152 + 8 >> 2] = HEAP32[$166 + 8 >> 2];
    HEAP32[$152 + 12 >> 2] = HEAP32[$166 + 12 >> 2];
    HEAP32[$152 + 16 >> 2] = HEAP32[$166 + 16 >> 2];
    HEAP32[$152 + 20 >> 2] = HEAP32[$166 + 20 >> 2];
    HEAP32[$152 + 24 >> 2] = HEAP32[$166 + 24 >> 2];
    HEAP32[$152 + 28 >> 2] = HEAP32[$166 + 28 >> 2];
    HEAP32[$152 + 32 >> 2] = HEAP32[$166 + 32 >> 2];
    HEAP32[$152 + 36 >> 2] = HEAP32[$166 + 36 >> 2];
    $168 = $165 - 40 | 0;
    HEAP32[$166 >> 2] = HEAP32[$168 >> 2];
    HEAP32[$166 + 4 >> 2] = HEAP32[$168 + 4 >> 2];
    HEAP32[$166 + 8 >> 2] = HEAP32[$168 + 8 >> 2];
    HEAP32[$166 + 12 >> 2] = HEAP32[$168 + 12 >> 2];
    HEAP32[$166 + 16 >> 2] = HEAP32[$168 + 16 >> 2];
    HEAP32[$166 + 20 >> 2] = HEAP32[$168 + 20 >> 2];
    HEAP32[$166 + 24 >> 2] = HEAP32[$168 + 24 >> 2];
    HEAP32[$166 + 28 >> 2] = HEAP32[$168 + 28 >> 2];
    HEAP32[$166 + 32 >> 2] = HEAP32[$168 + 32 >> 2];
    HEAP32[$166 + 36 >> 2] = HEAP32[$168 + 36 >> 2];
    $171 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$171 >> 2] = HEAP32[$152 >> 2];
    HEAP32[$171 + 4 >> 2] = HEAP32[$152 + 4 >> 2];
    HEAP32[$171 + 8 >> 2] = HEAP32[$152 + 8 >> 2];
    HEAP32[$171 + 12 >> 2] = HEAP32[$152 + 12 >> 2];
    HEAP32[$171 + 16 >> 2] = HEAP32[$152 + 16 >> 2];
    HEAP32[$171 + 20 >> 2] = HEAP32[$152 + 20 >> 2];
    HEAP32[$171 + 24 >> 2] = HEAP32[$152 + 24 >> 2];
    HEAP32[$171 + 28 >> 2] = HEAP32[$152 + 28 >> 2];
    HEAP32[$171 + 32 >> 2] = HEAP32[$152 + 32 >> 2];
    HEAP32[$171 + 36 >> 2] = HEAP32[$152 + 36 >> 2];
    _gen_op(178);
    STACKTOP = sp;
    return;
   }
   if (!(($op | 0) == 45 | ($op | 0) == 43)) {
    _tcc_error(15744, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   if ($9) {
    $176 = $tmp_i47;
    $177 = HEAP32[5024] | 0;
    do {
     if ($177 >>> 0 < 56272 >>> 0) {
      $189 = $177;
     } else {
      $182 = HEAPU16[$177 + 8 >> 1] | 0;
      if (!(($182 & 63 | 0) == 51 | ($182 & 62 | 0) == 52)) {
       $189 = $177;
       break;
      }
      _gv(1) | 0;
      $189 = HEAP32[5024] | 0;
     }
    } while (0);
    $190 = $189;
    HEAP32[$176 >> 2] = HEAP32[$190 >> 2];
    HEAP32[$176 + 4 >> 2] = HEAP32[$190 + 4 >> 2];
    HEAP32[$176 + 8 >> 2] = HEAP32[$190 + 8 >> 2];
    HEAP32[$176 + 12 >> 2] = HEAP32[$190 + 12 >> 2];
    HEAP32[$176 + 16 >> 2] = HEAP32[$190 + 16 >> 2];
    HEAP32[$176 + 20 >> 2] = HEAP32[$190 + 20 >> 2];
    HEAP32[$176 + 24 >> 2] = HEAP32[$190 + 24 >> 2];
    HEAP32[$176 + 28 >> 2] = HEAP32[$190 + 28 >> 2];
    HEAP32[$176 + 32 >> 2] = HEAP32[$190 + 32 >> 2];
    HEAP32[$176 + 36 >> 2] = HEAP32[$190 + 36 >> 2];
    $192 = $189 - 40 | 0;
    HEAP32[$190 >> 2] = HEAP32[$192 >> 2];
    HEAP32[$190 + 4 >> 2] = HEAP32[$192 + 4 >> 2];
    HEAP32[$190 + 8 >> 2] = HEAP32[$192 + 8 >> 2];
    HEAP32[$190 + 12 >> 2] = HEAP32[$192 + 12 >> 2];
    HEAP32[$190 + 16 >> 2] = HEAP32[$192 + 16 >> 2];
    HEAP32[$190 + 20 >> 2] = HEAP32[$192 + 20 >> 2];
    HEAP32[$190 + 24 >> 2] = HEAP32[$192 + 24 >> 2];
    HEAP32[$190 + 28 >> 2] = HEAP32[$192 + 28 >> 2];
    HEAP32[$190 + 32 >> 2] = HEAP32[$192 + 32 >> 2];
    HEAP32[$190 + 36 >> 2] = HEAP32[$192 + 36 >> 2];
    $195 = (HEAP32[5024] | 0) - 40 | 0;
    HEAP32[$195 >> 2] = HEAP32[$176 >> 2];
    HEAP32[$195 + 4 >> 2] = HEAP32[$176 + 4 >> 2];
    HEAP32[$195 + 8 >> 2] = HEAP32[$176 + 8 >> 2];
    HEAP32[$195 + 12 >> 2] = HEAP32[$176 + 12 >> 2];
    HEAP32[$195 + 16 >> 2] = HEAP32[$176 + 16 >> 2];
    HEAP32[$195 + 20 >> 2] = HEAP32[$176 + 20 >> 2];
    HEAP32[$195 + 24 >> 2] = HEAP32[$176 + 24 >> 2];
    HEAP32[$195 + 28 >> 2] = HEAP32[$176 + 28 >> 2];
    HEAP32[$195 + 32 >> 2] = HEAP32[$176 + 32 >> 2];
    HEAP32[$195 + 36 >> 2] = HEAP32[$176 + 36 >> 2];
   }
   $197 = HEAP32[5024] | 0;
   $199 = $197 - 40 | 0;
   $200$0 = HEAP32[$199 >> 2] | 0;
   $200$1 = HEAP32[$199 + 4 >> 2] | 0;
   HEAP32[$type1 >> 2] = $200$0;
   HEAP32[$type1 + 4 >> 2] = $200$1;
   $trunc = $200$0;
   HEAP32[$type1 >> 2] = $trunc & -33;
   do {
    if (($trunc & 131072 | 0) == 0) {
     $285 = _type_size((HEAP32[$197 - 40 + 4 >> 2] | 0) + 16 | 0, $align_i) | 0;
     if (($285 | 0) < 0) {
      _tcc_error(14616, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     $289 = $cval_i53_sroa_4 | 0;
     $290 = HEAP32[5024] | 0;
     if ($290 >>> 0 < 66472 >>> 0) {
      $294 = $290;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $294 = HEAP32[5024] | 0;
     }
     do {
      if ($294 >>> 0 < 56272 >>> 0) {
       $306 = $294;
      } else {
       $299 = HEAPU16[$294 + 8 >> 1] | 0;
       if (!(($299 & 63 | 0) == 51 | ($299 & 62 | 0) == 52)) {
        $306 = $294;
        break;
       }
       _gv(1) | 0;
       $306 = HEAP32[5024] | 0;
      }
     } while (0);
     $307 = $306 + 40 | 0;
     HEAP32[5024] = $307;
     $308 = $307;
     $$etemp$52 = 21728;
     $309$1 = HEAP32[$$etemp$52 + 4 >> 2] | 0;
     HEAP32[$308 >> 2] = HEAP32[$$etemp$52 >> 2];
     HEAP32[$308 + 4 >> 2] = $309$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $314 = HEAP32[5024] | 0;
     HEAP32[$314 + 16 >> 2] = $285;
     $318 = $314 + 20 | 0;
     HEAP32[$318 >> 2] = HEAP32[$289 >> 2];
     HEAP32[$318 + 4 >> 2] = HEAP32[$289 + 4 >> 2];
     HEAP32[$318 + 8 >> 2] = HEAP32[$289 + 8 >> 2];
    } else {
     $208 = HEAP32[$197 - 40 + 4 >> 2] | 0;
     $209 = $208 + 16 | 0;
     if ((HEAP32[$209 >> 2] & 131072 | 0) == 0) {
      $249 = _type_size($209, $align_i51) | 0;
      $250 = $cval_i_i_i50_sroa_4 | 0;
      $251 = HEAP32[5024] | 0;
      if ($251 >>> 0 < 66472 >>> 0) {
       $255 = $251;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $255 = HEAP32[5024] | 0;
      }
      do {
       if ($255 >>> 0 < 56272 >>> 0) {
        $267 = $255;
       } else {
        $260 = HEAPU16[$255 + 8 >> 1] | 0;
        if (!(($260 & 63 | 0) == 51 | ($260 & 62 | 0) == 52)) {
         $267 = $255;
         break;
        }
        _gv(1) | 0;
        $267 = HEAP32[5024] | 0;
       }
      } while (0);
      $268 = $267 + 40 | 0;
      HEAP32[5024] = $268;
      $269 = $268;
      $$etemp$43 = 21728;
      $270$1 = HEAP32[$$etemp$43 + 4 >> 2] | 0;
      HEAP32[$269 >> 2] = HEAP32[$$etemp$43 >> 2];
      HEAP32[$269 + 4 >> 2] = $270$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $275 = HEAP32[5024] | 0;
      HEAP32[$275 + 16 >> 2] = $249;
      $279 = $275 + 20 | 0;
      HEAP32[$279 >> 2] = HEAP32[$250 >> 2];
      HEAP32[$279 + 4 >> 2] = HEAP32[$250 + 4 >> 2];
      HEAP32[$279 + 8 >> 2] = HEAP32[$250 + 8 >> 2];
      break;
     } else {
      $218 = HEAP32[(HEAP32[$208 + 20 >> 2] | 0) + 12 >> 2] | 0;
      $219 = $cval_i70_sroa_4 | 0;
      if ($197 >>> 0 < 66472 >>> 0) {
       $223 = $197;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $223 = HEAP32[5024] | 0;
      }
      do {
       if ($223 >>> 0 < 56272 >>> 0) {
        $235 = $223;
       } else {
        $228 = HEAPU16[$223 + 8 >> 1] | 0;
        if (!(($228 & 63 | 0) == 51 | ($228 & 62 | 0) == 52)) {
         $235 = $223;
         break;
        }
        _gv(1) | 0;
        $235 = HEAP32[5024] | 0;
       }
      } while (0);
      $236 = $235 + 40 | 0;
      HEAP32[5024] = $236;
      $237 = $236;
      $$etemp$36 = 21728;
      $238$1 = HEAP32[$$etemp$36 + 4 >> 2] | 0;
      HEAP32[$237 >> 2] = HEAP32[$$etemp$36 >> 2];
      HEAP32[$237 + 4 >> 2] = $238$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $243 = HEAP32[5024] | 0;
      HEAP32[$243 + 16 >> 2] = $218;
      $247 = $243 + 20 | 0;
      HEAP32[$247 >> 2] = HEAP32[$219 >> 2];
      HEAP32[$247 + 4 >> 2] = HEAP32[$219 + 4 >> 2];
      HEAP32[$247 + 8 >> 2] = HEAP32[$219 + 8 >> 2];
      break;
     }
    }
   } while (0);
   _gen_op(42);
   if ((HEAP32[(HEAP32[5314] | 0) + 84 >> 2] | 0) == 0 | (HEAP32[13920] | 0) != 0) {
    _gen_opic($op);
   } else {
    if (($op | 0) == 45) {
     $328 = $cval_i54_sroa_4 | 0;
     $329 = HEAP32[5024] | 0;
     if ($329 >>> 0 < 66472 >>> 0) {
      $333 = $329;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $333 = HEAP32[5024] | 0;
     }
     do {
      if ($333 >>> 0 < 56272 >>> 0) {
       $345 = $333;
      } else {
       $338 = HEAPU16[$333 + 8 >> 1] | 0;
       if (!(($338 & 63 | 0) == 51 | ($338 & 62 | 0) == 52)) {
        $345 = $333;
        break;
       }
       _gv(1) | 0;
       $345 = HEAP32[5024] | 0;
      }
     } while (0);
     $346 = $345 + 40 | 0;
     HEAP32[5024] = $346;
     $347 = $346;
     $$etemp$59 = 21728;
     $348$1 = HEAP32[$$etemp$59 + 4 >> 2] | 0;
     HEAP32[$347 >> 2] = HEAP32[$$etemp$59 >> 2];
     HEAP32[$347 + 4 >> 2] = $348$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $353 = HEAP32[5024] | 0;
     HEAP32[$353 + 16 >> 2] = 0;
     $357 = $353 + 20 | 0;
     HEAP32[$357 >> 2] = HEAP32[$328 >> 2];
     HEAP32[$357 + 4 >> 2] = HEAP32[$328 + 4 >> 2];
     HEAP32[$357 + 8 >> 2] = HEAP32[$328 + 8 >> 2];
     $358 = $tmp_i55;
     $359 = HEAP32[5024] | 0;
     do {
      if ($359 >>> 0 < 56272 >>> 0) {
       $371 = $359;
      } else {
       $364 = HEAPU16[$359 + 8 >> 1] | 0;
       if (!(($364 & 63 | 0) == 51 | ($364 & 62 | 0) == 52)) {
        $371 = $359;
        break;
       }
       _gv(1) | 0;
       $371 = HEAP32[5024] | 0;
      }
     } while (0);
     $372 = $371;
     HEAP32[$358 >> 2] = HEAP32[$372 >> 2];
     HEAP32[$358 + 4 >> 2] = HEAP32[$372 + 4 >> 2];
     HEAP32[$358 + 8 >> 2] = HEAP32[$372 + 8 >> 2];
     HEAP32[$358 + 12 >> 2] = HEAP32[$372 + 12 >> 2];
     HEAP32[$358 + 16 >> 2] = HEAP32[$372 + 16 >> 2];
     HEAP32[$358 + 20 >> 2] = HEAP32[$372 + 20 >> 2];
     HEAP32[$358 + 24 >> 2] = HEAP32[$372 + 24 >> 2];
     HEAP32[$358 + 28 >> 2] = HEAP32[$372 + 28 >> 2];
     HEAP32[$358 + 32 >> 2] = HEAP32[$372 + 32 >> 2];
     HEAP32[$358 + 36 >> 2] = HEAP32[$372 + 36 >> 2];
     $374 = $371 - 40 | 0;
     HEAP32[$372 >> 2] = HEAP32[$374 >> 2];
     HEAP32[$372 + 4 >> 2] = HEAP32[$374 + 4 >> 2];
     HEAP32[$372 + 8 >> 2] = HEAP32[$374 + 8 >> 2];
     HEAP32[$372 + 12 >> 2] = HEAP32[$374 + 12 >> 2];
     HEAP32[$372 + 16 >> 2] = HEAP32[$374 + 16 >> 2];
     HEAP32[$372 + 20 >> 2] = HEAP32[$374 + 20 >> 2];
     HEAP32[$372 + 24 >> 2] = HEAP32[$374 + 24 >> 2];
     HEAP32[$372 + 28 >> 2] = HEAP32[$374 + 28 >> 2];
     HEAP32[$372 + 32 >> 2] = HEAP32[$374 + 32 >> 2];
     HEAP32[$372 + 36 >> 2] = HEAP32[$374 + 36 >> 2];
     $377 = (HEAP32[5024] | 0) - 40 | 0;
     HEAP32[$377 >> 2] = HEAP32[$358 >> 2];
     HEAP32[$377 + 4 >> 2] = HEAP32[$358 + 4 >> 2];
     HEAP32[$377 + 8 >> 2] = HEAP32[$358 + 8 >> 2];
     HEAP32[$377 + 12 >> 2] = HEAP32[$358 + 12 >> 2];
     HEAP32[$377 + 16 >> 2] = HEAP32[$358 + 16 >> 2];
     HEAP32[$377 + 20 >> 2] = HEAP32[$358 + 20 >> 2];
     HEAP32[$377 + 24 >> 2] = HEAP32[$358 + 24 >> 2];
     HEAP32[$377 + 28 >> 2] = HEAP32[$358 + 28 >> 2];
     HEAP32[$377 + 32 >> 2] = HEAP32[$358 + 32 >> 2];
     HEAP32[$377 + 36 >> 2] = HEAP32[$358 + 36 >> 2];
     _gen_op(45);
    }
    _gen_bounded_ptr_add();
   }
   $382 = HEAP32[5024] | 0;
   $383$1 = HEAP32[$type1 + 4 >> 2] | 0;
   HEAP32[$382 >> 2] = HEAP32[$type1 >> 2];
   HEAP32[$382 + 4 >> 2] = $383$1;
   STACKTOP = sp;
   return;
  } else {
   do {
    if (($6 - 9 | 0) >>> 0 < 2 >>> 0) {
     label = 78;
    } else {
     if (($6 | 0) == 8 | ($7 - 9 | 0) >>> 0 < 2 >>> 0 | ($7 | 0) == 8) {
      label = 78;
      break;
     }
     $399 = ($6 | 0) == 12;
     if (($op | 0) == 205 | ($op | 0) == 2 | ($op | 0) == 1) {
      $401 = $399 ? 12 : 0;
      $403 = $401 | 16;
      $t_1 = ($3 & 31 | 0) == ($403 | 0) ? $403 : $401;
      break;
     }
     if ($399 | ($7 | 0) == 12) {
      if (($3 & 31 | 0) == 28 | ($5 & 31 | 0) == 28) {
       $t_183 = 28;
       label = 91;
       break L1;
      } else {
       $_0 = $op;
       $t_184 = 12;
       break L1;
      }
     }
     if (!(($6 | 0) == 7 | ($7 | 0) == 7)) {
      if (($3 & 31 | 0) == 16 | ($5 & 31 | 0) == 16) {
       $t_183 = 16;
       label = 91;
       break L1;
      } else {
       $_0 = $op;
       $t_184 = 0;
       break L1;
      }
     }
     _tcc_error(12488, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     STACKTOP = sp;
     return;
    }
   } while (0);
   do {
    if ((label | 0) == 78) {
     if (($6 | 0) == 10 | ($7 | 0) == 10) {
      $t_0 = 10;
     } else {
      $t_0 = ($6 | 0) == 9 | ($7 | 0) == 9 ? 9 : 8;
     }
     if (($op | 0) == 47 | ($op | 0) == 45 | ($op | 0) == 43 | ($op | 0) == 42) {
      $t_1 = $t_0;
      break;
     }
     if (($op - 146 | 0) >>> 0 <= 13 >>> 0) {
      $t_1 = $t_0;
      break;
     }
     _tcc_error(13696, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $t_1 = $t_0;
    }
   } while (0);
   if (($t_1 & 16 | 0) == 0) {
    $_0 = $op;
    $t_184 = $t_1;
   } else {
    $t_183 = $t_1;
    label = 91;
   }
  }
 } while (0);
 L130 : do {
  if ((label | 0) == 91) {
   switch ($op | 0) {
   case 47:
    {
     $_0 = 176;
     $t_184 = $t_183;
     break L130;
     break;
    }
   case 37:
    {
     $_0 = 177;
     $t_184 = $t_183;
     break L130;
     break;
    }
   case 156:
    {
     $_0 = 146;
     $t_184 = $t_183;
     break L130;
     break;
    }
   case 159:
    {
     $_0 = 151;
     $t_184 = $t_183;
     break L130;
     break;
    }
   case 158:
    {
     $_0 = 150;
     $t_184 = $t_183;
     break L130;
     break;
    }
   case 2:
    {
     $_0 = 205;
     $t_184 = $t_183;
     break L130;
     break;
    }
   default:
    {
     $_0 = ($op | 0) == 157 ? 147 : $op;
     $t_184 = $t_183;
     break L130;
    }
   }
  }
 } while (0);
 $431 = $tmp_i58;
 $432 = HEAP32[5024] | 0;
 do {
  if ($432 >>> 0 < 56272 >>> 0) {
   $444 = $432;
  } else {
   $437 = HEAPU16[$432 + 8 >> 1] | 0;
   if (!(($437 & 63 | 0) == 51 | ($437 & 62 | 0) == 52)) {
    $444 = $432;
    break;
   }
   _gv(1) | 0;
   $444 = HEAP32[5024] | 0;
  }
 } while (0);
 $445 = $444;
 HEAP32[$431 >> 2] = HEAP32[$445 >> 2];
 HEAP32[$431 + 4 >> 2] = HEAP32[$445 + 4 >> 2];
 HEAP32[$431 + 8 >> 2] = HEAP32[$445 + 8 >> 2];
 HEAP32[$431 + 12 >> 2] = HEAP32[$445 + 12 >> 2];
 HEAP32[$431 + 16 >> 2] = HEAP32[$445 + 16 >> 2];
 HEAP32[$431 + 20 >> 2] = HEAP32[$445 + 20 >> 2];
 HEAP32[$431 + 24 >> 2] = HEAP32[$445 + 24 >> 2];
 HEAP32[$431 + 28 >> 2] = HEAP32[$445 + 28 >> 2];
 HEAP32[$431 + 32 >> 2] = HEAP32[$445 + 32 >> 2];
 HEAP32[$431 + 36 >> 2] = HEAP32[$445 + 36 >> 2];
 $447 = $444 - 40 | 0;
 HEAP32[$445 >> 2] = HEAP32[$447 >> 2];
 HEAP32[$445 + 4 >> 2] = HEAP32[$447 + 4 >> 2];
 HEAP32[$445 + 8 >> 2] = HEAP32[$447 + 8 >> 2];
 HEAP32[$445 + 12 >> 2] = HEAP32[$447 + 12 >> 2];
 HEAP32[$445 + 16 >> 2] = HEAP32[$447 + 16 >> 2];
 HEAP32[$445 + 20 >> 2] = HEAP32[$447 + 20 >> 2];
 HEAP32[$445 + 24 >> 2] = HEAP32[$447 + 24 >> 2];
 HEAP32[$445 + 28 >> 2] = HEAP32[$447 + 28 >> 2];
 HEAP32[$445 + 32 >> 2] = HEAP32[$447 + 32 >> 2];
 HEAP32[$445 + 36 >> 2] = HEAP32[$447 + 36 >> 2];
 $450 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$450 >> 2] = HEAP32[$431 >> 2];
 HEAP32[$450 + 4 >> 2] = HEAP32[$431 + 4 >> 2];
 HEAP32[$450 + 8 >> 2] = HEAP32[$431 + 8 >> 2];
 HEAP32[$450 + 12 >> 2] = HEAP32[$431 + 12 >> 2];
 HEAP32[$450 + 16 >> 2] = HEAP32[$431 + 16 >> 2];
 HEAP32[$450 + 20 >> 2] = HEAP32[$431 + 20 >> 2];
 HEAP32[$450 + 24 >> 2] = HEAP32[$431 + 24 >> 2];
 HEAP32[$450 + 28 >> 2] = HEAP32[$431 + 28 >> 2];
 HEAP32[$450 + 32 >> 2] = HEAP32[$431 + 32 >> 2];
 HEAP32[$450 + 36 >> 2] = HEAP32[$431 + 36 >> 2];
 $451 = $type1;
 HEAP32[$451 >> 2] = $t_184;
 _gen_cast($tmpcast);
 $452 = $tmp_i61;
 $453 = HEAP32[5024] | 0;
 do {
  if ($453 >>> 0 < 56272 >>> 0) {
   $465 = $453;
  } else {
   $458 = HEAPU16[$453 + 8 >> 1] | 0;
   if (!(($458 & 63 | 0) == 51 | ($458 & 62 | 0) == 52)) {
    $465 = $453;
    break;
   }
   _gv(1) | 0;
   $465 = HEAP32[5024] | 0;
  }
 } while (0);
 $466 = $465;
 HEAP32[$452 >> 2] = HEAP32[$466 >> 2];
 HEAP32[$452 + 4 >> 2] = HEAP32[$466 + 4 >> 2];
 HEAP32[$452 + 8 >> 2] = HEAP32[$466 + 8 >> 2];
 HEAP32[$452 + 12 >> 2] = HEAP32[$466 + 12 >> 2];
 HEAP32[$452 + 16 >> 2] = HEAP32[$466 + 16 >> 2];
 HEAP32[$452 + 20 >> 2] = HEAP32[$466 + 20 >> 2];
 HEAP32[$452 + 24 >> 2] = HEAP32[$466 + 24 >> 2];
 HEAP32[$452 + 28 >> 2] = HEAP32[$466 + 28 >> 2];
 HEAP32[$452 + 32 >> 2] = HEAP32[$466 + 32 >> 2];
 HEAP32[$452 + 36 >> 2] = HEAP32[$466 + 36 >> 2];
 $468 = $465 - 40 | 0;
 HEAP32[$466 >> 2] = HEAP32[$468 >> 2];
 HEAP32[$466 + 4 >> 2] = HEAP32[$468 + 4 >> 2];
 HEAP32[$466 + 8 >> 2] = HEAP32[$468 + 8 >> 2];
 HEAP32[$466 + 12 >> 2] = HEAP32[$468 + 12 >> 2];
 HEAP32[$466 + 16 >> 2] = HEAP32[$468 + 16 >> 2];
 HEAP32[$466 + 20 >> 2] = HEAP32[$468 + 20 >> 2];
 HEAP32[$466 + 24 >> 2] = HEAP32[$468 + 24 >> 2];
 HEAP32[$466 + 28 >> 2] = HEAP32[$468 + 28 >> 2];
 HEAP32[$466 + 32 >> 2] = HEAP32[$468 + 32 >> 2];
 HEAP32[$466 + 36 >> 2] = HEAP32[$468 + 36 >> 2];
 $471 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$471 >> 2] = HEAP32[$452 >> 2];
 HEAP32[$471 + 4 >> 2] = HEAP32[$452 + 4 >> 2];
 HEAP32[$471 + 8 >> 2] = HEAP32[$452 + 8 >> 2];
 HEAP32[$471 + 12 >> 2] = HEAP32[$452 + 12 >> 2];
 HEAP32[$471 + 16 >> 2] = HEAP32[$452 + 16 >> 2];
 HEAP32[$471 + 20 >> 2] = HEAP32[$452 + 20 >> 2];
 HEAP32[$471 + 24 >> 2] = HEAP32[$452 + 24 >> 2];
 HEAP32[$471 + 28 >> 2] = HEAP32[$452 + 28 >> 2];
 HEAP32[$471 + 32 >> 2] = HEAP32[$452 + 32 >> 2];
 HEAP32[$471 + 36 >> 2] = HEAP32[$452 + 36 >> 2];
 if (($_0 | 0) == 205 | ($_0 | 0) == 2 | ($_0 | 0) == 1) {
  HEAP32[$451 >> 2] = 0;
 }
 _gen_cast($tmpcast);
 L151 : do {
  if ((($t_184 & 15) - 8 | 0) >>> 0 < 3 >>> 0) {
   $475 = HEAP32[5024] | 0;
   L153 : do {
    if ((HEAP16[$475 - 40 + 8 >> 1] & 831) == 48 & (HEAP16[$475 + 8 >> 1] & 831) == 48) {
     $487 = (HEAP32[$475 - 40 >> 2] | 0) == 8;
     if ($487) {
      $f2_0_i = +HEAPF32[$475 + 16 >> 2];
      $f1_0_i = +HEAPF32[$475 - 40 + 16 >> 2];
     } else {
      $f2_0_i = +HEAPF64[$475 + 16 >> 3];
      $f1_0_i = +HEAPF64[$475 - 40 + 16 >> 3];
     }
     HEAPF64[tempDoublePtr >> 3] = $f1_0_i;
     if (((HEAP32[tempDoublePtr + 4 >> 2] | -2146435073) + 1 | 0) > -1) {
      break;
     }
     HEAPF64[tempDoublePtr >> 3] = $f2_0_i;
     if (((HEAP32[tempDoublePtr + 4 >> 2] | -2146435073) + 1 | 0) > -1) {
      break;
     }
     do {
      if (($_0 | 0) == 43) {
       $f1_1_i = $f1_0_i + $f2_0_i;
      } else if (($_0 | 0) == 45) {
       $f1_1_i = $f1_0_i - $f2_0_i;
      } else if (($_0 | 0) == 42) {
       $f1_1_i = $f1_0_i * $f2_0_i;
      } else if (($_0 | 0) == 47) {
       if ($f2_0_i != 0.0) {
        $f1_1_i = $f1_0_i / $f2_0_i;
        break;
       }
       if ((HEAP32[13920] | 0) == 0) {
        break L153;
       }
       _tcc_error(19704, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       break L153;
      } else {
       break L153;
      }
     } while (0);
     if ($487) {
      HEAPF32[$475 - 40 + 16 >> 2] = $f1_1_i;
     } else {
      HEAPF64[$475 - 40 + 16 >> 3] = $f1_1_i;
     }
     HEAP32[5024] = (HEAP32[5024] | 0) - 40;
     break L151;
    }
   } while (0);
   if ((HEAP32[5338] | 0) == 0) {
    _gen_opf($_0);
    break;
   } else {
    HEAP32[5024] = (HEAP32[5024] | 0) - 40;
    break;
   }
  } else {
   _gen_opic($_0);
  }
 } while (0);
 $551 = HEAP32[5024] | 0;
 if (($_0 - 146 | 0) >>> 0 < 14 >>> 0) {
  HEAP32[$551 >> 2] = 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$551 >> 2] = $t_184;
  STACKTOP = sp;
  return;
 }
}
function _tcc_assemble_internal($s1, $do_preprocess) {
 $s1 = $s1 | 0;
 $do_preprocess = $do_preprocess | 0;
 var $e_i4 = 0, $e_i28_i = 0, $e_i26_i = 0, $e_i24_i = 0, $e_i22_i = 0, $e_i20_i = 0, $e_i18_i = 0, $e_i_i = 0, $p_i = 0, $e_i = 0, $repeat_buf_i = 0, $p = 0, $7 = 0, $_pre22 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $56 = 0, $57 = 0, $62 = 0, $_pre46_pre_i = 0, $69 = 0, $73 = 0, $74 = 0, $size_0_i = 0, $size_1_i = 0, $v_0_off0_i = 0, $98 = 0, $102 = 0, $106 = 0, $108 = 0, $109$0 = 0, $109$1 = 0, $110 = 0, $124 = 0, $size_2_i = 0, $130 = 0, $131 = 0, $132 = 0, $143 = 0, $150 = 0, $157 = 0, $167 = 0, $__i = 0, $178 = 0, $val_0_off0_i = 0, $val_0_off8_i = 0, $val_0_off16_i = 0, $val_0_off24_i = 0, $size1_1_i = 0, $181 = 0, $i_034_i = 0, $j_032_i = 0, $187 = 0, $193 = 0, $194 = 0, $198 = 0, $201 = 0, $204 = 0, $208 = 0, $211 = 0, $sym_0_i = 0, $214 = 0, $217 = 0, $219 = 0, $221 = 0, $223 = 0, $_17_i = 0, $i4_036_i = 0, $232 = 0, $235 = 0, $240 = 0, $n_0_i = 0, $244 = 0, $246 = 0, $253 = 0, $269 = 0, $290 = 0, $296 = 0, $297 = 0, $301 = 0, $305 = 0, $sym7_0_i = 0, $308 = 0, $315 = 0, $newtype_0_i = 0, $331 = 0, $333 = 0, $337 = 0, $353 = 0, $360 = 0, $364 = 0, $365 = 0, $373 = 0, $377 = 0, $378 = 0, $388 = 0, $391 = 0, $392 = 0, $393 = 0, $400 = 0, $sym_0_i_i = 0, $407 = 0, $411 = 0, $412 = 0, $413 = 0, $420 = 0, $422 = 0, $sym_0_i_i1 = 0, $430 = 0, $431 = 0, $438 = 0, $440 = 0, $sym_0_i5 = 0, $445 = 0, $451 = 0, $453 = 0, $s_01_i = 0, $456 = 0, $458 = 0, $sec_0_i = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184 | 0;
 $e_i4 = sp | 0;
 $e_i28_i = sp + 8 | 0;
 $e_i26_i = sp + 16 | 0;
 $e_i24_i = sp + 24 | 0;
 $e_i22_i = sp + 32 | 0;
 $e_i20_i = sp + 40 | 0;
 $e_i18_i = sp + 48 | 0;
 $e_i_i = sp + 56 | 0;
 $p_i = sp + 64 | 0;
 $e_i = sp + 72 | 0;
 $repeat_buf_i = sp + 80 | 0;
 $p = sp + 1176 | 0;
 HEAP32[13924] = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
 HEAP32[5308] = 3;
 HEAP32[5336] = ($do_preprocess | 0) == 0 ? 8 : 9;
 _next();
 $7 = HEAP32[5310] | 0;
 $_pre22 = $s1 + 2876 | 0;
 if (($7 | 0) != -1) {
  $10 = $e_i4 + 4 | 0;
  $11 = $e_i4 | 0;
  $12 = sp + 88 | 0;
  $15 = $repeat_buf_i | 0;
  $16 = sp + 152 | 0;
  $17 = sp + 664 | 0;
  $18 = sp + 920 | 0;
  $20 = $e_i_i + 4 | 0;
  $21 = $e_i_i | 0;
  $23 = $e_i18_i + 4 | 0;
  $24 = $e_i18_i | 0;
  $25 = $e_i + 4 | 0;
  $26 = $e_i | 0;
  $28 = $e_i20_i + 4 | 0;
  $29 = $e_i20_i | 0;
  $31 = $e_i22_i + 4 | 0;
  $32 = $e_i22_i | 0;
  $34 = $e_i24_i + 4 | 0;
  $35 = $e_i24_i | 0;
  $36 = $repeat_buf_i + 1 | 0;
  $37 = $repeat_buf_i + 2 | 0;
  $38 = $repeat_buf_i + 3 | 0;
  $40 = $repeat_buf_i + 4 | 0;
  $42 = $e_i26_i + 4 | 0;
  $43 = $e_i26_i | 0;
  $45 = $e_i28_i + 4 | 0;
  $46 = $e_i28_i | 0;
  $47 = $s1 + 64 | 0;
  $48 = $s1 + 108 | 0;
  $50 = $7;
  do {
   HEAP32[5336] = HEAP32[5336] | 4;
   $54 = $50;
   L5 : while (1) {
    do {
     if (($54 | 0) == 46) {
      label = 6;
      break L5;
     } else if (($54 | 0) == 35) {
      label = 5;
      break L5;
     } else if (($54 | 0) == 206) {
      $377 = HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0;
      HEAP32[$p >> 2] = $377;
      $378 = _strtoul($377 | 0, $p | 0, 10) | 0;
      if ((HEAP8[HEAP32[$p >> 2] | 0] | 0) != 0) {
       _expect(10984);
      }
      _snprintf($12 | 0, 64, 13672, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $378, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
      $388 = HEAP32[(_tok_alloc($12, _strlen($12 | 0) | 0) | 0) + 20 >> 2] | 0;
      $391 = HEAP32[(HEAP32[13918] | 0) + 16 >> 2] | 0;
      $392 = HEAP32[5434] | 0;
      $393 = _label_find($388) | 0;
      if (($393 | 0) == 0) {
       label = 133;
      } else {
       if ((HEAP32[$393 + 8 >> 2] | 0) == 0) {
        $sym_0_i_i = $393;
       } else {
        label = 133;
       }
      }
      if ((label | 0) == 133) {
       label = 0;
       $400 = _label_push($_pre22, $388, 0) | 0;
       HEAP32[$400 + 16 >> 2] = 259;
       $sym_0_i_i = $400;
      }
      HEAP32[$sym_0_i_i + 8 >> 2] = $391;
      HEAP32[$sym_0_i_i + 24 >> 2] = $392;
      _next();
      _skip(58);
     } else {
      if (($54 | 0) <= 255) {
       label = 151;
       break L5;
      }
      _next();
      $407 = HEAP32[5310] | 0;
      if (($407 | 0) == 58) {
       $411 = HEAP32[(HEAP32[13918] | 0) + 16 >> 2] | 0;
       $412 = HEAP32[5434] | 0;
       $413 = _label_find($54) | 0;
       do {
        if (($413 | 0) == 0) {
         $422 = _label_push($_pre22, $54, 0) | 0;
         HEAP32[$422 + 16 >> 2] = 259;
         $sym_0_i_i1 = $422;
        } else {
         if ((HEAP32[$413 + 8 >> 2] | 0) == 0) {
          $sym_0_i_i1 = $413;
          break;
         }
         $420 = _get_tok_str($54, 0) | 0;
         _tcc_error(19736, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $420, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
         $sym_0_i_i1 = $413;
        }
       } while (0);
       HEAP32[$sym_0_i_i1 + 8 >> 2] = $411;
       HEAP32[$sym_0_i_i1 + 24 >> 2] = $412;
       _next();
       break;
      } else if (($407 | 0) != 61) {
       label = 150;
       break L5;
      }
      _next();
      _asm_expr_sum($s1, $e_i4);
      if ((HEAP32[$10 >> 2] | 0) != 0) {
       _expect(18248);
      }
      $430 = HEAP32[$11 >> 2] | 0;
      $431 = _label_find($54) | 0;
      do {
       if (($431 | 0) == 0) {
        $440 = _label_push($_pre22, $54, 0) | 0;
        HEAP32[$440 + 16 >> 2] = 259;
        $sym_0_i5 = $440;
       } else {
        if ((HEAP32[$431 + 8 >> 2] | 0) == 0) {
         $sym_0_i5 = $431;
         break;
        }
        $438 = _get_tok_str($54, 0) | 0;
        _tcc_error(19736, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $438, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $sym_0_i5 = $431;
       }
      } while (0);
      HEAP32[$sym_0_i5 + 8 >> 2] = 65521;
      HEAP32[$sym_0_i5 + 24 >> 2] = $430;
     }
    } while (0);
    $54 = HEAP32[5310] | 0;
   }
   L36 : do {
    if ((label | 0) == 5) {
     while (1) {
      label = 0;
      _next();
      if ((HEAP32[5310] | 0) == 10) {
       break;
      } else {
       label = 5;
      }
     }
    } else if ((label | 0) == 6) {
     label = 0;
     _next();
     $56 = HEAP32[13918] | 0;
     $57 = HEAP32[5310] | 0;
     L38 : do {
      switch ($57 | 0) {
      case 412:
       {
        HEAP8[$17] = 0;
        _next();
        $269 = HEAP32[5310] | 0;
        if (($269 | 0) == 181) {
         _pstrcat($17, 256, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0) | 0;
        } else {
         _pstrcat($17, 256, _get_tok_str($269, 0) | 0) | 0;
        }
        if ((HEAP32[$47 >> 2] | 0) != 0) {
         _tcc_warning(17696, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $17, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        _next();
        label = 151;
        break L36;
        break;
       }
      case 419:
       {
        _next();
        _asm_expr_sum($s1, $e_i20_i);
        if ((HEAP32[$28 >> 2] | 0) != 0) {
         _expect(18248);
        }
        $157 = HEAP32[$29 >> 2] | 0;
        if (($157 | 0) < 0) {
         _tcc_error(18672, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
         label = 151;
         break L36;
        }
        do {
         if ((HEAP32[5310] | 0) == 44) {
          _next();
          _asm_expr_sum($s1, $e_i22_i);
          if ((HEAP32[$31 >> 2] | 0) != 0) {
           _expect(18248);
          }
          $167 = HEAP32[$32 >> 2] | 0;
          if (($167 | 0) < 0) {
           _tcc_error(18360, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
           STACKTOP = tempVarArgs;
           label = 151;
           break L36;
          }
          $__i = ($167 | 0) > 8 ? 8 : $167;
          if ((HEAP32[5310] | 0) != 44) {
           $size1_1_i = $__i;
           $val_0_off24_i = 0;
           $val_0_off16_i = 0;
           $val_0_off8_i = 0;
           $val_0_off0_i = 0;
           break;
          }
          _next();
          _asm_expr_sum($s1, $e_i24_i);
          if ((HEAP32[$34 >> 2] | 0) != 0) {
           _expect(18248);
          }
          $178 = HEAP32[$35 >> 2] | 0;
          $size1_1_i = $__i;
          $val_0_off24_i = $178 >>> 24 & 255;
          $val_0_off16_i = $178 >>> 16 & 255;
          $val_0_off8_i = $178 >>> 8 & 255;
          $val_0_off0_i = $178 & 255;
         } else {
          $size1_1_i = 1;
          $val_0_off24_i = 0;
          $val_0_off16_i = 0;
          $val_0_off8_i = 0;
          $val_0_off0_i = 0;
         }
        } while (0);
        HEAP8[$15] = $val_0_off0_i;
        HEAP8[$36] = $val_0_off8_i;
        HEAP8[$37] = $val_0_off16_i;
        HEAP8[$38] = $val_0_off24_i;
        tempBigInt = 0;
        HEAP8[$40] = tempBigInt;
        tempBigInt = tempBigInt >> 8;
        HEAP8[$40 + 1 | 0] = tempBigInt;
        tempBigInt = tempBigInt >> 8;
        HEAP8[$40 + 2 | 0] = tempBigInt;
        tempBigInt = tempBigInt >> 8;
        HEAP8[$40 + 3 | 0] = tempBigInt;
        if (($157 | 0) <= 0) {
         label = 151;
         break L36;
        }
        $181 = ($size1_1_i | 0) > 0;
        $i_034_i = 0;
        while (1) {
         if ($181) {
          $j_032_i = 0;
          do {
           _g(HEAPU8[$repeat_buf_i + $j_032_i | 0] | 0);
           $j_032_i = $j_032_i + 1 | 0;
          } while (($j_032_i | 0) < ($size1_1_i | 0));
         }
         $187 = $i_034_i + 1 | 0;
         if (($187 | 0) < ($157 | 0)) {
          $i_034_i = $187;
         } else {
          label = 151;
          break L36;
         }
        }
        break;
       }
      case 418:
       {
        _next();
        $360 = HEAP32[5360] | 0;
        if (($360 | 0) == 0) {
         _tcc_error(16712, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
         $364 = HEAP32[5360] | 0;
        } else {
         $364 = $360;
        }
        $365 = HEAP32[13918] | 0;
        HEAP32[$365 >> 2] = HEAP32[5434];
        HEAP32[13918] = $364;
        HEAP32[5434] = HEAP32[$364 >> 2];
        HEAP32[5360] = $365;
        label = 151;
        break L36;
        break;
       }
      case 409:
       {
        HEAP8[$16] = 0;
        _next();
        $253 = HEAP32[5310] | 0;
        if (($253 | 0) == 181) {
         _pstrcat($16, 512, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0) | 0;
        } else {
         _pstrcat($16, 512, _get_tok_str($253, 0) | 0) | 0;
        }
        if ((HEAP32[$47 >> 2] | 0) != 0) {
         _tcc_warning(17800, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $16, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        _next();
        label = 151;
        break L36;
        break;
       }
      case 423:
       {
        _next();
        HEAP32[$48 >> 2] = 32;
        label = 151;
        break L36;
        break;
       }
      case 422:
       {
        _next();
        HEAP32[$48 >> 2] = 16;
        label = 151;
        break L36;
        break;
       }
      case 410:
      case 411:
      case 342:
       {
        $201 = ($57 | 0) == 342;
        while (1) {
         _next();
         $204 = _label_find(HEAP32[5310] | 0) | 0;
         if (($204 | 0) == 0) {
          $208 = _label_push($_pre22, HEAP32[5310] | 0, 0) | 0;
          HEAP32[$208 + 16 >> 2] = 3;
          $sym_0_i = $208;
          $211 = 3;
         } else {
          $sym_0_i = $204;
          $211 = HEAP32[$204 + 16 >> 2] & -257;
         }
         HEAP32[$sym_0_i + 16 >> 2] = $201 ? $211 | 65536 : $211;
         _next();
         $214 = HEAP32[5310] | 0;
         if (($214 | 0) != 44) {
          $445 = $214;
          label = 152;
          break L36;
         }
        }
        break;
       }
      case 336:
       {
        _next();
        HEAP8[$18] = 0;
        while (1) {
         $337 = HEAP32[5310] | 0;
         if (($337 | 0) == 44) {
          label = 119;
          break;
         } else if (($337 | 0) == 10 | ($337 | 0) == 59) {
          break;
         } else if (($337 | 0) == 181) {
          _pstrcat($18, 256, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0) | 0;
         } else {
          _pstrcat($18, 256, _get_tok_str($337, 0) | 0) | 0;
         }
         _next();
        }
        if ((label | 0) == 119) {
         label = 0;
         _next();
         if ((HEAP32[5310] | 0) != 181) {
          _expect(16808);
         }
         _next();
        }
        HEAP32[5360] = HEAP32[13918];
        $353 = _find_section($s1, $18) | 0;
        HEAP32[HEAP32[13918] >> 2] = HEAP32[5434];
        HEAP32[13918] = $353;
        HEAP32[5434] = HEAP32[$353 >> 2];
        label = 151;
        break L36;
        break;
       }
      case 414:
       {
        _next();
        $301 = _label_find(HEAP32[5310] | 0) | 0;
        if (($301 | 0) == 0) {
         $305 = _label_push($_pre22, HEAP32[5310] | 0, 0) | 0;
         HEAP32[$305 + 16 >> 2] = 3;
         $sym7_0_i = $305;
        } else {
         $sym7_0_i = $301;
        }
        _next();
        _skip(44);
        $308 = HEAP32[5310] | 0;
        if (($308 | 0) == 181) {
         $newtype_0_i = HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0;
        } else if (($308 | 0) == 64 | ($308 | 0) == 37) {
         _skip($308);
         $315 = HEAP32[5310] | 0;
         label = 107;
        } else {
         $315 = $308;
         label = 107;
        }
        if ((label | 0) == 107) {
         label = 0;
         $newtype_0_i = _get_tok_str($315, 0) | 0;
        }
        do {
         if ((_strcmp($newtype_0_i | 0, 17208) | 0) == 0) {
          label = 110;
         } else {
          if ((_strcmp($newtype_0_i | 0, 17064) | 0) == 0) {
           label = 110;
           break;
          }
          if ((HEAP32[$47 >> 2] | 0) == 0) {
           break;
          }
          $331 = _get_tok_str(HEAP32[$sym7_0_i >> 2] | 0, 0) | 0;
          $333 = HEAP32[$sym7_0_i + 16 >> 2] | 0;
          _tcc_warning(16896, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $331, HEAP32[tempVarArgs + 8 >> 2] = $333, HEAP32[tempVarArgs + 16 >> 2] = $newtype_0_i, tempVarArgs) | 0);
          STACKTOP = tempVarArgs;
         }
        } while (0);
        if ((label | 0) == 110) {
         label = 0;
         HEAP32[$sym7_0_i + 16 >> 2] = 6;
        }
        _next();
        label = 151;
        break L36;
        break;
       }
      case 406:
      case 408:
      case 407:
       {
        _next();
        $217 = ($57 | 0) == 408;
        while (1) {
         if ((HEAP32[5310] | 0) != 181) {
          _expect(16808);
         }
         while (1) {
          $219 = HEAP32[5302] | 0;
          $221 = HEAP32[$219 + 4 >> 2] | 0;
          $223 = HEAP32[$219 >> 2] | 0;
          $_17_i = (($217 & ($223 | 0) > 0) << 31 >> 31) + $223 | 0;
          if (($_17_i | 0) > 0) {
           $i4_036_i = 0;
           do {
            _g(HEAPU8[$221 + $i4_036_i | 0] | 0);
            $i4_036_i = $i4_036_i + 1 | 0;
           } while (($i4_036_i | 0) < ($_17_i | 0));
          }
          _next();
          $232 = HEAP32[5310] | 0;
          if (($232 | 0) == 44) {
           break;
          } else if (($232 | 0) != 181) {
           $445 = $232;
           label = 152;
           break L36;
          }
         }
         _next();
        }
        break;
       }
      case 420:
       {
        _next();
        _asm_expr_sum($s1, $e_i26_i);
        if ((HEAP32[$42 >> 2] | 0) != 0) {
         _expect(18248);
        }
        $193 = HEAP32[$43 >> 2] | 0;
        $194 = HEAP32[5434] | 0;
        if ($193 >>> 0 < $194 >>> 0) {
         _tcc_error(18208, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
         $198 = HEAP32[5434] | 0;
        } else {
         $198 = $194;
        }
        $v_0_off0_i = 0;
        $size_1_i = $193 - $198 | 0;
        label = 18;
        break;
       }
      case 415:
      case 416:
      case 417:
       {
        _next();
        $235 = HEAP32[5310] | 0;
        if (($235 | 0) == 59 | ($235 | 0) == 10) {
         $n_0_i = 0;
        } else {
         _asm_expr_sum($s1, $e_i28_i);
         if ((HEAP32[$45 >> 2] | 0) != 0) {
          _expect(18248);
         }
         $240 = HEAP32[$46 >> 2] | 0;
         _next();
         $n_0_i = $240;
        }
        $244 = _get_tok_str($57, 0) | 0;
        _sprintf($12 | 0, (($n_0_i | 0) != 0 ? 18080 : 17944) | 0, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $244, HEAP32[tempVarArgs + 8 >> 2] = $n_0_i, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
        $246 = _find_section($s1, $12) | 0;
        HEAP32[HEAP32[13918] >> 2] = HEAP32[5434];
        HEAP32[13918] = $246;
        HEAP32[5434] = HEAP32[$246 >> 2];
        label = 151;
        break L36;
        break;
       }
      case 421:
       {
        _next();
        $98 = $56 + 20 | 0;
        while (1) {
         $102 = HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0;
         HEAP32[$p_i >> 2] = $102;
         if ((HEAP32[5310] | 0) == 206) {
          $108 = $102;
          label = 24;
         } else {
          $106 = $102;
          label = 23;
         }
         while (1) {
          if ((label | 0) == 23) {
           label = 0;
           _tcc_error(18952, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
           STACKTOP = tempVarArgs;
           $108 = $106;
           label = 24;
           continue;
          } else if ((label | 0) == 24) {
           label = 0;
           $109$0 = _strtoll($108 | 0, $p_i | 0, 0) | 0;
           $109$1 = tempRet0;
           $110 = HEAP32[$p_i >> 2] | 0;
           if ((HEAP8[$110] | 0) == 0) {
            break;
           } else {
            $106 = $110;
            label = 23;
            continue;
           }
          }
         }
         _next();
         if ((HEAP32[$98 >> 2] | 0) == 8) {
          HEAP32[5434] = (HEAP32[5434] | 0) + 8;
         } else {
          _gen_le32($109$0);
          _gen_le32($109$1);
         }
         $124 = HEAP32[5310] | 0;
         if (($124 | 0) != 44) {
          $445 = $124;
          label = 152;
          break L36;
         }
         _next();
        }
        break;
       }
      case 402:
      case 295:
       {
        $size_2_i = 2;
        break;
       }
      case 279:
      case 256:
       {
        $size_2_i = 4;
        break;
       }
      case 403:
      case 404:
      case 405:
       {
        _next();
        _asm_expr_sum($s1, $e_i_i);
        if ((HEAP32[$20 >> 2] | 0) != 0) {
         _expect(18248);
        }
        $62 = HEAP32[$21 >> 2] | 0;
        do {
         if (($57 | 0) == 403) {
          $_pre46_pre_i = $62 - 1 | 0;
          if ((($_pre46_pre_i | -2147483648) & $62 | 0) != 0) {
           _tcc_error(19240, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
           STACKTOP = tempVarArgs;
          }
          $69 = HEAP32[5434] | 0;
          $73 = ($69 + $_pre46_pre_i & -$62) - $69 | 0;
          $74 = $56 + 32 | 0;
          if ((HEAP32[$74 >> 2] | 0) >= ($62 | 0)) {
           $size_0_i = $73;
           break;
          }
          HEAP32[$74 >> 2] = $62;
          $size_0_i = $73;
         } else {
          $size_0_i = $62;
         }
        } while (0);
        if ((HEAP32[5310] | 0) != 44) {
         $v_0_off0_i = 0;
         $size_1_i = $size_0_i;
         label = 18;
         break L38;
        }
        _next();
        _asm_expr_sum($s1, $e_i18_i);
        if ((HEAP32[$23 >> 2] | 0) != 0) {
         _expect(18248);
        }
        $v_0_off0_i = HEAP32[$24 >> 2] & 255;
        $size_1_i = $size_0_i;
        label = 18;
        break;
       }
      case 413:
       {
        _next();
        if ((_label_find(HEAP32[5310] | 0) | 0) == 0) {
         $290 = _get_tok_str(HEAP32[5310] | 0, 0) | 0;
         _tcc_error(17552, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $290, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        _next();
        _skip(44);
        if ((HEAP32[$47 >> 2] | 0) != 0) {
         $296 = _get_tok_str(HEAP32[5310] | 0, 0) | 0;
         _tcc_warning(17400, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $296, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        while (1) {
         $297 = HEAP32[5310] | 0;
         if (($297 | 0) == (-1 | 0) | ($297 | 0) == 10) {
          $445 = $297;
          label = 152;
          break L36;
         }
         _next();
        }
        break;
       }
      case 401:
       {
        $size_2_i = 1;
        break;
       }
      default:
       {
        $373 = _get_tok_str($57, 0) | 0;
        _tcc_error(16528, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $373, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        label = 151;
        break L36;
       }
      }
     } while (0);
     if ((label | 0) == 18) {
      label = 0;
      if ((HEAP32[$56 + 20 >> 2] | 0) != 8) {
       HEAP32[$56 >> 2] = HEAP32[5434];
       _memset(_section_ptr_add($56, $size_1_i) | 0, $v_0_off0_i | 0, $size_1_i | 0) | 0;
      }
      HEAP32[5434] = (HEAP32[5434] | 0) + $size_1_i;
      label = 151;
      break;
     }
     _next();
     $130 = $56 + 20 | 0;
     $131 = ($size_2_i | 0) == 4;
     $132 = ($size_2_i | 0) == 1;
     while (1) {
      _asm_expr_sum($s1, $e_i);
      do {
       if ((HEAP32[$130 >> 2] | 0) == 8) {
        HEAP32[5434] = (HEAP32[5434] | 0) + $size_2_i;
       } else {
        if ($131) {
         _gen_expr32($e_i);
         break;
        }
        if ((HEAP32[$25 >> 2] | 0) != 0) {
         _expect(18248);
        }
        $143 = HEAP32[$26 >> 2] | 0;
        if ($132) {
         _g($143);
         break;
        } else {
         _gen_le16($143);
         break;
        }
       }
      } while (0);
      $150 = HEAP32[5310] | 0;
      if (($150 | 0) != 44) {
       $445 = $150;
       label = 152;
       break L36;
      }
      _next();
     }
    } else if ((label | 0) == 150) {
     label = 0;
     _asm_opcode($s1, $54);
     label = 151;
    }
   } while (0);
   if ((label | 0) == 151) {
    label = 0;
    $445 = HEAP32[5310] | 0;
    label = 152;
   }
   do {
    if ((label | 0) == 152) {
     label = 0;
     if (($445 | 0) == 59 | ($445 | 0) == 10) {
      break;
     }
     _expect(10616);
    }
   } while (0);
   HEAP32[5336] = HEAP32[5336] & -5;
   _next();
   $50 = HEAP32[5310] | 0;
  } while (($50 | 0) != -1);
 }
 $451 = HEAP32[$_pre22 >> 2] | 0;
 if (($451 | 0) == 0) {
  HEAP32[$_pre22 >> 2] = 0;
  STACKTOP = sp;
  return;
 }
 $453 = $s1 + 2828 | 0;
 $s_01_i = $451;
 while (1) {
  $456 = HEAP32[$s_01_i + 28 >> 2] | 0;
  $458 = HEAP32[$s_01_i + 8 >> 2] | 0;
  if (($458 | 0) == 65521) {
   $sec_0_i = 1;
   label = 159;
  } else if (($458 | 0) != 0) {
   $sec_0_i = HEAP32[(HEAP32[$453 >> 2] | 0) + ($458 << 2) >> 2] | 0;
   label = 159;
  }
  if ((label | 0) == 159) {
   label = 0;
   _put_extern_sym2($s_01_i, $sec_0_i, HEAP32[$s_01_i + 24 >> 2] | 0, 0, 0);
  }
  HEAP32[(HEAP32[(HEAP32[5316] | 0) + ((HEAP32[$s_01_i >> 2] | 0) - 256 << 2) >> 2] | 0) + 8 >> 2] = 0;
  _sym_free($s_01_i);
  if (($456 | 0) == 0) {
   break;
  } else {
   $s_01_i = $456;
  }
 }
 HEAP32[$_pre22 >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _next() {
 var $bn_i = 0, $nested_list = 0, $str = 0, $ml = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $n_0_ph_i_i = 0, $p_0_i_i = 0, $n_0_i_i = 0, $tab_0_i_i = 0, $34 = 0, $p_1_i_i_ph = 0, $_pr = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $57 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $len_0_i_i = 0, $81 = 0, $82 = 0, $86 = 0, $92 = 0, $101 = 0, $tmpcast_i = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $b_0_i = 0, $ch_0_i = 0, $q_0_i = 0, $_0_i = 0, $t_0_i = 0, $extract_t40_i = 0, $b_1_i = 0, $ch_1_off0_i = 0, $q_1_i = 0, $_1_i = 0, $b_2_i = 0, $ch_2_off0_i = 0, $q_2_i = 0, $_2_i = 0, $146 = 0, $148 = 0, $153 = 0, $156 = 0, $__i = 0, $158 = 0, $159 = 0, $161 = 0, $163 = 0, $_in104_i = 0, $166 = 0, $167 = 0, $_02_i_i = 0, $i_01_i_i = 0, $177 = 0, $178 = 0, $182 = 0, $184 = 0, $frac_bits_0_i = 0, $ch_3_in_in_i = 0, $ch_3_in_i = 0, $_3_i = 0, $ch_3_i = 0, $t_2_i = 0, $_02_i57_i = 0, $i_01_i58_i = 0, $200 = 0, $201 = 0, $205 = 0, $frac_bits_1_i = 0, $ch_4_i = 0, $_4_i = 0, $210 = 0, $211 = 0, $s_0_i = 0, $ch_5_in_i = 0, $_5_i = 0, $ch_5_i = 0, $_686_i = 0, $ch_685_i = 0, $exp_val_084_i = 0, $224 = 0, $225 = 0, $227 = 0, $_6_lcssa_i = 0, $ch_6_lcssa_i = 0, $exp_val_0_lcssa_i = 0, $229 = 0, $238 = 0.0, $_c_i56_i = 0, $243 = 0, $247 = 0, $extract_t42_i = 0, $ch_7_ph_i = 0, $q_4_ph_i = 0, $_7_ph_i = 0, $_777_i = 0, $q_476_i = 0, $ch_775_off0_i = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $ch_8_i = 0, $q_5_i = 0, $_8_i = 0, $extract_t43_i = 0, $271 = 0, $272 = 0, $273 = 0, $ch_9_in_i = 0, $q_6_i = 0, $_9_i = 0, $ch_9_i = 0, $_1066_i = 0, $q_765_i = 0, $ch_1064_off0_i = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $ch_11_i = 0, $q_8_i = 0, $_11_i = 0, $_c_i54_i = 0, $294 = 0, $298 = 0, $or_cond52_i = 0, $b_5_i = 0, $q_9_i = 0, $305 = 0, $307$0 = 0, $307$1 = 0, $_in_i = 0, $q_9_pn_i = 0, $n_099_i$0 = 0, $n_099_i$1 = 0, $309 = 0, $310 = 0, $319 = 0, $t_3_i = 0, $328 = 0, $$etemp$4$1 = 0, $$etemp$5$1 = 0, $$etemp$6$1 = 0, $n_0_lcssa126128_i$0 = 0, $n_0_lcssa126128_i$1 = 0, $n_0_lcssa125_i$0 = 0, $n_0_lcssa125_i$1 = 0, $ch_12_ph_i = 0, $_12_ph_i = 0, $lcount_0_ph_i = 0, $ucount_0_ph_i = 0, $ch_12_i = 0, $_12_i = 0, $ucount_0_i = 0, $_c_i_i = 0, $345 = 0, $348 = 0, $359 = 0, $360 = 0, $366 = 0, $368 = 0, $$etemp$7 = 0, $ch_13_i = 0, $323$0 = 0, $325$0 = 0, $325$1 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $bn_i = sp | 0;
 $nested_list = sp + 8 | 0;
 $str = sp + 16 | 0;
 $ml = sp + 32 | 0;
 $1 = $str | 0;
 $2 = $str + 4 | 0;
 $3 = $str + 8 | 0;
 $4 = $str + 12 | 0;
 L1 : while (1) {
  L3 : do {
   if ((HEAP32[5336] & 16 | 0) == 0) {
    _next_nomacro();
    label = 17;
   } else {
    $9 = HEAP32[5350] | 0;
    if (($9 | 0) == 0) {
     _next_nomacro1();
     label = 17;
     break;
    }
    $11 = HEAP32[$9 >> 2] | 0;
    HEAP32[5310] = $11;
    if (($11 | 0) == 0) {
     break;
    } else {
     $13 = $9;
    }
    L8 : while (1) {
     $14 = $13 + 4 | 0;
     $15 = HEAP32[$13 >> 2] | 0;
     HEAP32[5310] = $15;
     switch ($15 | 0) {
     case 179:
     case 200:
     case 180:
     case 183:
     case 185:
     case 186:
      {
       HEAP32[5302] = HEAP32[$14 >> 2];
       $p_1_i_i_ph = $13 + 8 | 0;
       break;
      }
     case 181:
     case 184:
     case 206:
      {
       HEAP32[5302] = $14;
       HEAP32[$13 + 8 >> 2] = $13 + 20;
       $p_1_i_i_ph = $13 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
       break;
      }
     case 193:
      {
       $n_0_ph_i_i = 3;
       label = 10;
       break;
      }
     case 192:
     case 201:
     case 202:
      {
       $n_0_ph_i_i = 2;
       label = 10;
       break;
      }
     default:
      {
       break L8;
      }
     }
     if ((label | 0) == 10) {
      label = 0;
      $tab_0_i_i = 21208;
      $n_0_i_i = $n_0_ph_i_i;
      $p_0_i_i = $14;
      while (1) {
       HEAP32[$tab_0_i_i >> 2] = HEAP32[$p_0_i_i >> 2];
       $34 = $n_0_i_i - 1 | 0;
       if (($34 | 0) == 0) {
        break;
       } else {
        $tab_0_i_i = $tab_0_i_i + 4 | 0;
        $n_0_i_i = $34;
        $p_0_i_i = $p_0_i_i + 4 | 0;
       }
      }
      $p_1_i_i_ph = $13 + ($n_0_ph_i_i + 1 << 2) | 0;
     }
     $_pr = HEAP32[5310] | 0;
     HEAP32[5350] = $p_1_i_i_ph;
     if (($_pr | 0) != 186) {
      $48 = $p_1_i_i_ph;
      $47 = $_pr;
      label = 18;
      break L3;
     }
     HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
     $42 = HEAP32[5350] | 0;
     $43 = HEAP32[$42 >> 2] | 0;
     HEAP32[5310] = $43;
     if (($43 | 0) == 0) {
      $48 = $42;
      $47 = 0;
      label = 18;
      break L3;
     } else {
      $13 = $42;
     }
    }
    HEAP32[5350] = $14;
    $86 = $15;
    label = 28;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   $48 = HEAP32[5350] | 0;
   $47 = HEAP32[5310] | 0;
   label = 18;
  }
  do {
   if ((label | 0) == 18) {
    label = 0;
    if (($48 | 0) != 0) {
     $86 = $47;
     label = 28;
     break;
    }
    if (($47 | 0) <= 255) {
     $92 = $47;
     break L1;
    }
    if ((HEAP32[5336] & 1 | 0) == 0) {
     $92 = $47;
     break L1;
    }
    $57 = $47 - 256 | 0;
    if ($57 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
     $92 = $47;
     break L1;
    }
    $65 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($57 << 2) >> 2] | 0) + 4 >> 2] | 0;
    if (($65 | 0) == 0) {
     $92 = $47;
     break L1;
    }
    HEAP32[$1 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$4 >> 2] = -1;
    HEAP32[$nested_list >> 2] = 0;
    HEAP32[$ml >> 2] = 0;
    if ((_macro_subst_tok($str, $nested_list, $65, $ml) | 0) != 0) {
     label = 24;
     break L1;
    }
    $71 = HEAP32[$2 >> 2] | 0;
    $72 = HEAP32[$1 >> 2] | 0;
    $73 = HEAP32[$3 >> 2] | 0;
    if (($71 | 0) < ($73 | 0)) {
     $82 = $72;
    } else {
     $len_0_i_i = ($73 | 0) == 0 ? 8 : $73 << 1;
     $81 = _tcc_realloc($72, $len_0_i_i << 2) | 0;
     HEAP32[$3 >> 2] = $len_0_i_i;
     HEAP32[$1 >> 2] = $81;
     $82 = $81;
    }
    HEAP32[$82 + ($71 << 2) >> 2] = 0;
    HEAP32[$2 >> 2] = $71 + 1;
    HEAP32[5350] = $82;
    HEAP32[5348] = $82;
    continue L1;
   }
  } while (0);
  if ((label | 0) == 28) {
   label = 0;
   if (($86 | 0) == 207) {
    continue;
   } else if (($86 | 0) != 0) {
    $92 = $86;
    break;
   }
  }
  if (HEAP8[40] | 0) {
   HEAP32[5350] = HEAP32[5026];
   HEAP8[40] = 0;
   continue;
  } else {
   _tcc_free(HEAP32[5348] | 0);
   HEAP32[5348] = 0;
   HEAP32[5350] = 0;
   continue;
  }
 }
 if ((label | 0) == 24) {
  $92 = HEAP32[5310] | 0;
 }
 if (($92 | 0) != 206) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[5336] & 2 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $101 = HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0;
 $tmpcast_i = $bn_i;
 $104 = HEAP8[$101] | 0;
 $105 = $101 + 2 | 0;
 $106 = HEAP8[$101 + 1 | 0] | 0;
 $107 = $106 << 24 >> 24;
 HEAP8[20160] = $104;
 do {
  if (($104 << 24 >> 24 | 0) == 48) {
   $109 = $106 & -33;
   if ($109 << 24 >> 24 == 88) {
    $_0_i = $101 + 3 | 0;
    $q_0_i = 20160;
    $ch_0_i = HEAP8[$105] | 0;
    $b_0_i = 16;
    label = 39;
    break;
   }
   if (!((HEAP32[1394] | 0) != 0 & $109 << 24 >> 24 == 66)) {
    $_0_i = $105;
    $q_0_i = 20161;
    $ch_0_i = $107;
    $b_0_i = 10;
    label = 39;
    break;
   }
   $_0_i = $101 + 3 | 0;
   $q_0_i = 20160;
   $ch_0_i = HEAP8[$105] | 0;
   $b_0_i = 2;
   label = 39;
  } else if (($104 << 24 >> 24 | 0) == 46) {
   $_7_ph_i = $105;
   $q_4_ph_i = 20161;
   $ch_7_ph_i = $107;
   label = 92;
  } else {
   $_0_i = $105;
   $q_0_i = 20161;
   $ch_0_i = $107;
   $b_0_i = 10;
   label = 39;
  }
 } while (0);
 L57 : while (1) {
  L58 : do {
   if ((label | 0) == 39) {
    label = 0;
    do {
     if (($ch_0_i - 97 | 0) >>> 0 < 6 >>> 0) {
      $t_0_i = $ch_0_i - 87 | 0;
      label = 46;
     } else {
      if (($ch_0_i - 65 | 0) >>> 0 < 6 >>> 0) {
       $t_0_i = $ch_0_i - 55 | 0;
       label = 46;
       break;
      }
      if (($ch_0_i | 0) <= 47) {
       label = 50;
       break;
      }
      if (($ch_0_i | 0) >= 58) {
       label = 51;
       break;
      }
      $t_0_i = $ch_0_i - 48 | 0;
      label = 46;
     }
    } while (0);
    do {
     if ((label | 0) == 46) {
      label = 0;
      if (($t_0_i | 0) >= ($b_0_i | 0)) {
       label = 50;
       break;
      }
      $extract_t40_i = $ch_0_i & 255;
      if ($q_0_i >>> 0 < 21184 >>> 0) {
       $_2_i = $_0_i;
       $q_2_i = $q_0_i;
       $ch_2_off0_i = $extract_t40_i;
       $b_2_i = $b_0_i;
       break L58;
      } else {
       $_1_i = $_0_i;
       $q_1_i = $q_0_i;
       $ch_1_off0_i = $extract_t40_i;
       $b_1_i = $b_0_i;
       label = 48;
       break L58;
      }
     }
    } while (0);
    if ((label | 0) == 50) {
     label = 0;
     if (($ch_0_i | 0) == 46) {
      $153 = 1;
     } else {
      label = 51;
     }
    }
    if ((label | 0) == 51) {
     label = 0;
     $146 = $ch_0_i & -33;
     $148 = ($b_0_i | 0) == 10;
     if (($146 | 0) == 69 & $148) {
      $153 = 0;
     } else {
      label = 52;
      break L57;
     }
    }
    if (($b_0_i | 0) != 10) {
     $156 = $153;
     label = 55;
     break L57;
    }
    if (!$153) {
     $_8_i = $_0_i;
     $q_5_i = $q_0_i;
     $ch_8_i = $ch_0_i;
     label = 96;
     break;
    }
    $extract_t42_i = $ch_0_i & 255;
    if ($q_0_i >>> 0 >= 21184 >>> 0) {
     $_1_i = $_0_i;
     $q_1_i = $q_0_i;
     $ch_1_off0_i = $extract_t42_i;
     $b_1_i = 10;
     label = 48;
     break;
    }
    HEAP8[$q_0_i] = $extract_t42_i;
    $_7_ph_i = $_0_i + 1 | 0;
    $q_4_ph_i = $q_0_i + 1 | 0;
    $ch_7_ph_i = HEAP8[$_0_i] | 0;
    label = 92;
    continue L57;
   } else if ((label | 0) == 92) {
    label = 0;
    if (($ch_7_ph_i - 48 | 0) >>> 0 >= 10 >>> 0) {
     $_8_i = $_7_ph_i;
     $q_5_i = $q_4_ph_i;
     $ch_8_i = $ch_7_ph_i;
     label = 96;
     break;
    }
    $ch_775_off0_i = $ch_7_ph_i & 255;
    $q_476_i = $q_4_ph_i;
    $_777_i = $_7_ph_i;
    while (1) {
     if ($q_476_i >>> 0 >= 21184 >>> 0) {
      $_1_i = $_777_i;
      $q_1_i = $q_476_i;
      $ch_1_off0_i = $ch_775_off0_i;
      $b_1_i = 10;
      label = 48;
      break L58;
     }
     $261 = $q_476_i + 1 | 0;
     HEAP8[$q_476_i] = $ch_775_off0_i;
     $262 = $_777_i + 1 | 0;
     $263 = HEAP8[$_777_i] | 0;
     $264 = $263 << 24 >> 24;
     if (($264 - 48 | 0) >>> 0 < 10 >>> 0) {
      $ch_775_off0_i = $263;
      $q_476_i = $261;
      $_777_i = $262;
     } else {
      $_8_i = $262;
      $q_5_i = $261;
      $ch_8_i = $264;
      label = 96;
      break;
     }
    }
   }
  } while (0);
  L84 : do {
   if ((label | 0) == 96) {
    label = 0;
    if (($ch_8_i & -33 | 0) != 69) {
     $_11_i = $_8_i;
     $q_8_i = $q_5_i;
     $ch_11_i = $ch_8_i;
     label = 105;
     break L57;
    }
    $extract_t43_i = $ch_8_i & 255;
    if ($q_5_i >>> 0 >= 21184 >>> 0) {
     $_1_i = $_8_i;
     $q_1_i = $q_5_i;
     $ch_1_off0_i = $extract_t43_i;
     $b_1_i = 10;
     label = 48;
     break;
    }
    $271 = $q_5_i + 1 | 0;
    HEAP8[$q_5_i] = $extract_t43_i;
    $272 = $_8_i + 1 | 0;
    $273 = HEAP8[$_8_i] | 0;
    if (($273 << 24 >> 24 | 0) == 45 | ($273 << 24 >> 24 | 0) == 43) {
     if ($271 >>> 0 >= 21184 >>> 0) {
      $_1_i = $272;
      $q_1_i = $271;
      $ch_1_off0_i = $273;
      $b_1_i = 10;
      label = 48;
      break;
     }
     HEAP8[$271] = $273;
     $_9_i = $_8_i + 2 | 0;
     $q_6_i = $q_5_i + 2 | 0;
     $ch_9_in_i = HEAP8[$272] | 0;
    } else {
     $_9_i = $272;
     $q_6_i = $271;
     $ch_9_in_i = $273;
    }
    $ch_9_i = $ch_9_in_i << 24 >> 24;
    if (($ch_9_i - 48 | 0) >>> 0 > 9 >>> 0) {
     label = 102;
     break L57;
    } else {
     $ch_1064_off0_i = $ch_9_in_i;
     $q_765_i = $q_6_i;
     $_1066_i = $_9_i;
    }
    while (1) {
     if ($q_765_i >>> 0 >= 21184 >>> 0) {
      $_1_i = $_1066_i;
      $q_1_i = $q_765_i;
      $ch_1_off0_i = $ch_1064_off0_i;
      $b_1_i = 10;
      label = 48;
      break L84;
     }
     $284 = $q_765_i + 1 | 0;
     HEAP8[$q_765_i] = $ch_1064_off0_i;
     $285 = $_1066_i + 1 | 0;
     $286 = HEAP8[$_1066_i] | 0;
     $287 = $286 << 24 >> 24;
     if (($287 - 48 | 0) >>> 0 < 10 >>> 0) {
      $ch_1064_off0_i = $286;
      $q_765_i = $284;
      $_1066_i = $285;
     } else {
      $_11_i = $285;
      $q_8_i = $284;
      $ch_11_i = $287;
      label = 105;
      break L57;
     }
    }
   }
  } while (0);
  if ((label | 0) == 48) {
   label = 0;
   _tcc_error(15176, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $_2_i = $_1_i;
   $q_2_i = $q_1_i;
   $ch_2_off0_i = $ch_1_off0_i;
   $b_2_i = $b_1_i;
  }
  HEAP8[$q_2_i] = $ch_2_off0_i;
  $_0_i = $_2_i + 1 | 0;
  $q_0_i = $q_2_i + 1 | 0;
  $ch_0_i = HEAP8[$_2_i] | 0;
  $b_0_i = $b_2_i;
  label = 39;
 }
 do {
  if ((label | 0) == 52) {
   if (($146 | 0) == 80) {
    if (($b_0_i | 0) == 2 | ($b_0_i | 0) == 16) {
     $156 = 0;
     label = 55;
     break;
    }
   }
   HEAP8[$q_0_i] = 0;
   $or_cond52_i = $148 & (HEAP8[20160] | 0) == 48;
   $b_5_i = $or_cond52_i ? 8 : $b_0_i;
   $q_9_i = $or_cond52_i ? 20161 : 20160;
   $305 = HEAP8[$q_9_i] | 0;
   do {
    if ($305 << 24 >> 24 == 0) {
     $n_0_lcssa126128_i$1 = 0;
     $n_0_lcssa126128_i$0 = 0;
     label = 126;
    } else {
     $307$0 = $b_5_i;
     $307$1 = ($b_5_i | 0) < 0 | 0 ? -1 : 0;
     $n_099_i$1 = 0;
     $n_099_i$0 = 0;
     $q_9_pn_i = $q_9_i;
     $_in_i = $305;
     while (1) {
      $309 = $q_9_pn_i + 1 | 0;
      $310 = $_in_i << 24 >> 24;
      do {
       if ($_in_i << 24 >> 24 > 96) {
        $t_3_i = $310 - 87 | 0;
       } else {
        if ($_in_i << 24 >> 24 > 64) {
         $t_3_i = $310 - 55 | 0;
         break;
        }
        $319 = $310 - 48 | 0;
        if (($319 | 0) < ($b_5_i | 0)) {
         $t_3_i = $319;
         break;
        }
        _tcc_error(15104, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $t_3_i = $319;
       }
      } while (0);
      $323$0 = ___muldi3($n_099_i$0, $n_099_i$1, $307$0, $307$1) | 0;
      $325$0 = _i64Add($t_3_i, ($t_3_i | 0) < 0 | 0 ? -1 : 0, $323$0, tempRet0) | 0;
      $325$1 = tempRet0;
      if ($325$1 >>> 0 < $n_099_i$1 >>> 0 | $325$1 >>> 0 == $n_099_i$1 >>> 0 & $325$0 >>> 0 < $n_099_i$0 >>> 0) {
       _tcc_error(14888, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
      $328 = HEAP8[$309] | 0;
      if ($328 << 24 >> 24 == 0) {
       break;
      } else {
       $n_099_i$1 = $325$1;
       $n_099_i$0 = $325$0;
       $q_9_pn_i = $309;
       $_in_i = $328;
      }
     }
     $$etemp$4$1 = 0;
     if (!($325$1 >>> 0 > $$etemp$4$1 >>> 0 | $325$1 >>> 0 == $$etemp$4$1 >>> 0 & $325$0 >>> 0 > -1 >>> 0)) {
      $$etemp$6$1 = 0;
      if (!($325$1 >>> 0 > $$etemp$6$1 >>> 0 | $325$1 >>> 0 == $$etemp$6$1 >>> 0 & $325$0 >>> 0 > 2147483647 >>> 0)) {
       $n_0_lcssa126128_i$1 = $325$1;
       $n_0_lcssa126128_i$0 = $325$0;
       label = 126;
       break;
      }
      HEAP32[5310] = 200;
      $n_0_lcssa125_i$1 = $325$1;
      $n_0_lcssa125_i$0 = $325$0;
      break;
     }
     $$etemp$5$1 = 0;
     if (($325$1 | 0) < ($$etemp$5$1 | 0) | ($325$1 | 0) == ($$etemp$5$1 | 0) & $325$0 >>> 0 < 0 >>> 0) {
      HEAP32[5310] = 202;
      $n_0_lcssa125_i$1 = $325$1;
      $n_0_lcssa125_i$0 = $325$0;
      break;
     } else {
      HEAP32[5310] = 201;
      $n_0_lcssa125_i$1 = $325$1;
      $n_0_lcssa125_i$0 = $325$0;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 126) {
    HEAP32[5310] = 179;
    $n_0_lcssa125_i$1 = $n_0_lcssa126128_i$1;
    $n_0_lcssa125_i$0 = $n_0_lcssa126128_i$0;
   }
   $ucount_0_ph_i = 0;
   $lcount_0_ph_i = 0;
   $_12_ph_i = $_0_i;
   $ch_12_ph_i = $ch_0_i;
   L130 : while (1) {
    $ucount_0_i = $ucount_0_ph_i;
    $_12_i = $_12_ph_i;
    $ch_12_i = $ch_12_ph_i;
    while (1) {
     $_c_i_i = ($ch_12_i - 97 | 0) >>> 0 < 26 >>> 0 ? $ch_12_i - 32 | 0 : $ch_12_i;
     if (($_c_i_i | 0) == 76) {
      break;
     } else if (($_c_i_i | 0) != 85) {
      break L130;
     }
     if (($ucount_0_i | 0) > 0) {
      _tcc_error(14568, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     $359 = $ucount_0_i + 1 | 0;
     $360 = HEAP32[5310] | 0;
     if (($360 | 0) == 179) {
      HEAP32[5310] = 200;
     } else if (($360 | 0) == 201) {
      HEAP32[5310] = 202;
     }
     $366 = HEAP8[$_12_i] | 0;
     $ucount_0_i = $359;
     $_12_i = $_12_i + 1 | 0;
     $ch_12_i = $366;
    }
    if (($lcount_0_ph_i | 0) > 1) {
     _tcc_error(14720, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    $345 = $lcount_0_ph_i + 1 | 0;
    do {
     if (($345 | 0) == 2) {
      $348 = HEAP32[5310] | 0;
      if (($348 | 0) == 179) {
       HEAP32[5310] = 201;
       break;
      } else if (($348 | 0) == 200) {
       HEAP32[5310] = 202;
       break;
      } else {
       break;
      }
     }
    } while (0);
    $ucount_0_ph_i = $ucount_0_i;
    $lcount_0_ph_i = $345;
    $_12_ph_i = $_12_i + 1 | 0;
    $ch_12_ph_i = HEAP8[$_12_i] | 0;
   }
   $368 = HEAP32[5310] | 0;
   if (($368 | 0) == 200 | ($368 | 0) == 179) {
    HEAP32[5302] = $n_0_lcssa125_i$0;
    $ch_13_i = $ch_12_i;
    break;
   } else {
    $$etemp$7 = 21208;
    HEAP32[$$etemp$7 >> 2] = $n_0_lcssa125_i$0;
    HEAP32[$$etemp$7 + 4 >> 2] = $n_0_lcssa125_i$1;
    $ch_13_i = $ch_12_i;
    break;
   }
  } else if ((label | 0) == 102) {
   _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 14976, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $_11_i = $_9_i;
   $q_8_i = $q_6_i;
   $ch_11_i = $ch_9_i;
   label = 105;
  }
 } while (0);
 do {
  if ((label | 0) == 55) {
   HEAP8[$q_0_i] = 0;
   $__i = ($b_0_i | 0) == 16 ? 4 : 2;
   $158 = $bn_i;
   HEAP32[$bn_i >> 2] = 0;
   HEAP32[$bn_i + 4 >> 2] = 0;
   $159 = HEAP8[20160] | 0;
   if ($159 << 24 >> 24 != 0) {
    $161 = 32 - $__i | 0;
    $166 = 20161;
    $_in104_i = $159;
    while (1) {
     $167 = $_in104_i << 24 >> 24;
     do {
      if ($_in104_i << 24 >> 24 > 96) {
       $i_01_i_i = 0;
       $_02_i_i = $167 - 87 | 0;
      } else {
       if ($_in104_i << 24 >> 24 > 64) {
        $i_01_i_i = 0;
        $_02_i_i = $167 - 55 | 0;
        break;
       } else {
        $i_01_i_i = 0;
        $_02_i_i = $167 - 48 | 0;
        break;
       }
      }
     } while (0);
     while (1) {
      $177 = $158 + ($i_01_i_i << 2) | 0;
      $178 = HEAP32[$177 >> 2] | 0;
      HEAP32[$177 >> 2] = $178 << $__i | $_02_i_i;
      $182 = $i_01_i_i + 1 | 0;
      if (($182 | 0) < 2) {
       $i_01_i_i = $182;
       $_02_i_i = $178 >>> ($161 >>> 0);
      } else {
       break;
      }
     }
     $163 = HEAP8[$166] | 0;
     if ($163 << 24 >> 24 == 0) {
      break;
     } else {
      $166 = $166 + 1 | 0;
      $_in104_i = $163;
     }
    }
   }
   L177 : do {
    if ($156) {
     $184 = 32 - $__i | 0;
     $ch_3_in_in_i = $_0_i;
     $frac_bits_0_i = 0;
     while (1) {
      $ch_3_in_i = HEAP8[$ch_3_in_in_i] | 0;
      $_3_i = $ch_3_in_in_i + 1 | 0;
      $ch_3_i = $ch_3_in_i << 24 >> 24;
      do {
       if (($ch_3_in_i - 97 & 255) >>> 0 < 6 >>> 0) {
        $t_2_i = $ch_3_i - 87 | 0;
       } else {
        if (($ch_3_in_i - 65 & 255) >>> 0 < 6 >>> 0) {
         $t_2_i = $ch_3_i - 55 | 0;
         break;
        }
        if (($ch_3_in_i - 48 & 255) >>> 0 >= 10 >>> 0) {
         $_4_i = $_3_i;
         $ch_4_i = $ch_3_i;
         $frac_bits_1_i = $frac_bits_0_i;
         break L177;
        }
        $t_2_i = $ch_3_i - 48 | 0;
       }
      } while (0);
      if (($t_2_i | 0) < ($b_0_i | 0)) {
       $i_01_i58_i = 0;
       $_02_i57_i = $t_2_i;
      } else {
       _tcc_error(15104, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $i_01_i58_i = 0;
       $_02_i57_i = $t_2_i;
      }
      while (1) {
       $200 = $158 + ($i_01_i58_i << 2) | 0;
       $201 = HEAP32[$200 >> 2] | 0;
       HEAP32[$200 >> 2] = $201 << $__i | $_02_i57_i;
       $205 = $i_01_i58_i + 1 | 0;
       if (($205 | 0) < 2) {
        $i_01_i58_i = $205;
        $_02_i57_i = $201 >>> ($184 >>> 0);
       } else {
        break;
       }
      }
      $ch_3_in_in_i = $_3_i;
      $frac_bits_0_i = $frac_bits_0_i + $__i | 0;
     }
    } else {
     $_4_i = $_0_i;
     $ch_4_i = $ch_0_i;
     $frac_bits_1_i = 0;
    }
   } while (0);
   if (!(($ch_4_i | 0) == 112 | ($ch_4_i | 0) == 80)) {
    _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 15056, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $210 = $_4_i + 1 | 0;
   $211 = HEAP8[$_4_i] | 0;
   if (($211 << 24 >> 24 | 0) == 43) {
    $_5_i = $_4_i + 2 | 0;
    $ch_5_in_i = HEAP8[$210] | 0;
    $s_0_i = 1;
   } else if (($211 << 24 >> 24 | 0) == 45) {
    $_5_i = $_4_i + 2 | 0;
    $ch_5_in_i = HEAP8[$210] | 0;
    $s_0_i = -1;
   } else {
    $_5_i = $210;
    $ch_5_in_i = $211;
    $s_0_i = 1;
   }
   $ch_5_i = $ch_5_in_i << 24 >> 24;
   if (($ch_5_in_i - 48 & 255) >>> 0 > 9 >>> 0) {
    _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 14976, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   if (($ch_5_i - 48 | 0) >>> 0 < 10 >>> 0) {
    $exp_val_084_i = 0;
    $ch_685_i = $ch_5_i;
    $_686_i = $_5_i;
    while (1) {
     $224 = $ch_685_i - 48 + ($exp_val_084_i * 10 | 0) | 0;
     $225 = $_686_i + 1 | 0;
     $227 = HEAP8[$_686_i] | 0;
     if (($227 - 48 | 0) >>> 0 < 10 >>> 0) {
      $exp_val_084_i = $224;
      $ch_685_i = $227;
      $_686_i = $225;
     } else {
      $exp_val_0_lcssa_i = $224;
      $ch_6_lcssa_i = $227;
      $_6_lcssa_i = $225;
      break;
     }
    }
   } else {
    $exp_val_0_lcssa_i = 0;
    $ch_6_lcssa_i = $ch_5_i;
    $_6_lcssa_i = $_5_i;
   }
   $229 = Math_imul($exp_val_0_lcssa_i, $s_0_i) | 0;
   $238 = +_ldexp(+((HEAP32[$tmpcast_i + 4 >> 2] | 0) >>> 0 >>> 0) * 4294967296.0 + +((HEAP32[$158 >> 2] | 0) >>> 0 >>> 0), $229 - $frac_bits_1_i | 0);
   $_c_i56_i = ($ch_6_lcssa_i - 97 | 0) >>> 0 < 26 >>> 0 ? $ch_6_lcssa_i - 32 | 0 : $ch_6_lcssa_i;
   if (($_c_i56_i | 0) == 70) {
    $243 = HEAP8[$_6_lcssa_i] | 0;
    HEAP32[5310] = 185;
    HEAPF32[5302] = $238;
    $ch_13_i = $243;
    break;
   } else if (($_c_i56_i | 0) == 76) {
    $247 = HEAP8[$_6_lcssa_i] | 0;
    HEAP32[5310] = 193;
    HEAPF64[2651] = $238;
    $ch_13_i = $247;
    break;
   } else {
    HEAP32[5310] = 192;
    HEAPF64[2651] = $238;
    $ch_13_i = $ch_6_lcssa_i;
    break;
   }
  } else if ((label | 0) == 105) {
   HEAP8[$q_8_i] = 0;
   $_c_i54_i = ($ch_11_i - 97 | 0) >>> 0 < 26 >>> 0 ? $ch_11_i - 32 | 0 : $ch_11_i;
   HEAP32[(___errno_location() | 0) >> 2] = 0;
   if (($_c_i54_i | 0) == 76) {
    $298 = HEAP8[$_11_i] | 0;
    HEAP32[5310] = 193;
    HEAPF64[2651] = +_strtold(20160, 0);
    $ch_13_i = $298;
    break;
   } else if (($_c_i54_i | 0) == 70) {
    $294 = HEAP8[$_11_i] | 0;
    HEAP32[5310] = 185;
    HEAPF32[5302] = +_strtof(20160, 0);
    $ch_13_i = $294;
    break;
   } else {
    HEAP32[5310] = 192;
    HEAPF64[2651] = +_strtod(20160, 0);
    $ch_13_i = $ch_11_i;
    break;
   }
  }
 } while (0);
 if (($ch_13_i | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _tcc_error(14496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 STACKTOP = sp;
 return;
}
function _gen_cast($type) {
 $type = $type | 0;
 var $cval_i36_sroa_4 = 0, $cval_i33_sroa_4 = 0, $cval_i30_sroa_4 = 0, $cval_i27_sroa_4 = 0, $cval_i24_sroa_4 = 0, $tmp_i_i_i20 = 0, $cval_i_sroa_4 = 0, $tmp_i_i_i = 0, $1 = 0, $2 = 0, $3 = 0, $12 = 0, $14 = 0, $_pre46 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $42 = 0, $46 = 0, $59 = 0, $60 = 0, $61$0 = 0, $61$1 = 0, $74 = 0, $76 = 0, $86 = 0, $92 = 0, $93 = 0, $96 = 0, $98 = 0.0, $100 = 0, $102 = 0, $105 = 0, $114 = 0, $116 = 0.0, $118 = 0, $126 = 0, $130 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $145 = 0, $s_0 = 0, $160 = 0, $164 = 0, $173 = 0, $182 = 0, $183 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $198 = 0, $202 = 0, $207 = 0, $214 = 0, $215 = 0, $216 = 0, $$etemp$18 = 0, $217$1 = 0, $222 = 0, $226 = 0, $233 = 0, $237 = 0, $242 = 0, $249 = 0, $250 = 0, $251 = 0, $$etemp$25 = 0, $252$1 = 0, $257 = 0, $261 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $277 = 0, $282 = 0, $289 = 0, $290 = 0, $291 = 0, $$etemp$34 = 0, $292$1 = 0, $297 = 0, $301 = 0, $320 = 0, $321 = 0, $325 = 0, $330 = 0, $337 = 0, $338 = 0, $339 = 0, $$etemp$41 = 0, $340$1 = 0, $345 = 0, $349 = 0, $353 = 0, $354 = 0, $358 = 0, $363 = 0, $370 = 0, $371 = 0, $372 = 0, $$etemp$48 = 0, $373$1 = 0, $378 = 0, $382 = 0, $384 = 0, $388 = 0, $391 = 0, $408 = 0, $412 = 0, $417 = 0, $424 = 0, $425 = 0, $426 = 0, $$etemp$55 = 0, $427$1 = 0, $432 = 0, $436 = 0, $446 = 0, $448 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $467 = 0, $470 = 0, $489 = 0, $491 = 0, $495 = 0, $499 = 0, $500 = 0, $r_0_i = 0, $_0_i = 0, $508 = 0, $509 = 0, $510$1 = 0, $99$1 = 0, $117$1 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $cval_i36_sroa_4 = sp | 0;
 $cval_i33_sroa_4 = sp + 16 | 0;
 $cval_i30_sroa_4 = sp + 32 | 0;
 $cval_i27_sroa_4 = sp + 48 | 0;
 $cval_i24_sroa_4 = sp + 64 | 0;
 $tmp_i_i_i20 = sp + 80 | 0;
 $cval_i_sroa_4 = sp + 120 | 0;
 $tmp_i_i_i = sp + 136 | 0;
 $1 = HEAP32[5024] | 0;
 $2 = $1 + 8 | 0;
 $3 = HEAP16[$2 >> 1] | 0;
 if (($3 & 1024) == 0) {
  $12 = $1;
 } else {
  HEAP16[$2 >> 1] = $3 & -1025;
  _force_charshort_cast(HEAP32[HEAP32[5024] >> 2] | 0);
  $12 = HEAP32[5024] | 0;
 }
 $14 = HEAP32[$12 >> 2] | 0;
 if (($14 & 64 | 0) == 0) {
  $21 = $12;
  $20 = $14;
 } else {
  _gv(1) | 0;
  $_pre46 = HEAP32[5024] | 0;
  $21 = $_pre46;
  $20 = HEAP32[$_pre46 >> 2] | 0;
 }
 $22 = $type | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 $24 = $23 & 31;
 $25 = $21 | 0;
 $26 = $20 & 31;
 do {
  if (($26 | 0) == ($24 | 0)) {
   if (($23 & 15 | 0) != 4) {
    break;
   }
   $489 = $21 + 8 | 0;
   $491 = HEAPU16[$489 >> 1] | 0;
   if (($491 & 256 | 0) != 0) {
    break;
   }
   $495 = $491 & 36863;
   $499 = HEAP32[(HEAP32[$type + 4 >> 2] | 0) + 16 >> 2] | 0;
   $500 = $499 & 15;
   if (($500 | 0) == 2) {
    $r_0_i = 8192;
    label = 128;
   } else if (($500 | 0) == 11 | ($500 | 0) == 1) {
    $r_0_i = 4096;
    label = 128;
   } else {
    $_0_i = 0;
   }
   if ((label | 0) == 128) {
    $_0_i = $r_0_i | $499 << 10 & 16384;
   }
   HEAP16[$489 >> 1] = $_0_i | $495;
  } else {
   $29 = $20 & 15;
   if (($29 - 9 | 0) >>> 0 < 2 >>> 0) {
    $33 = 1;
   } else {
    $33 = ($29 | 0) == 8 | 0;
   }
   $34 = $23 & 15;
   if (($34 - 9 | 0) >>> 0 < 2 >>> 0) {
    $38 = 1;
   } else {
    $38 = ($34 | 0) == 8 | 0;
   }
   $39 = $21 + 8 | 0;
   $42 = HEAP16[$39 >> 1] & 831;
   if (($42 | 0) == 48) {
    if (($26 | 0) == 8) {
     $46 = $21 + 16 | 0;
     HEAPF64[$46 >> 3] = +HEAPF32[$46 >> 2];
    }
    if (($38 | 0) != 0) {
     do {
      if (($29 | 0) == 12) {
       $59 = (HEAP32[5024] | 0) + 16 | 0;
       $60 = $59;
       $61$0 = HEAP32[$60 >> 2] | 0;
       $61$1 = HEAP32[$60 + 4 >> 2] | 0;
       if (($20 & 16 | 0) == 0) {
        HEAPF64[$59 >> 3] = +($61$0 >>> 0) + +($61$1 | 0) * 4294967296.0;
        break;
       } else {
        HEAPF64[$59 >> 3] = +($61$0 >>> 0) + +($61$1 >>> 0) * 4294967296.0;
        break;
       }
      } else {
       if (($33 | 0) != 0) {
        break;
       }
       $74 = (HEAP32[5024] | 0) + 16 | 0;
       $76 = HEAP32[$74 >> 2] | 0;
       if (($20 & 16 | 0) == 0) {
        HEAPF64[$74 >> 3] = +($76 | 0);
        break;
       } else {
        HEAPF64[$74 >> 3] = +($76 >>> 0 >>> 0);
        break;
       }
      }
     } while (0);
     if (($24 | 0) != 8) {
      break;
     }
     $86 = (HEAP32[5024] | 0) + 16 | 0;
     HEAPF32[$86 >> 2] = +HEAPF64[$86 >> 3];
     break;
    }
    $92 = ($33 | 0) != 0;
    $93 = ($24 | 0) == 28;
    if ($92 & $93) {
     $96 = (HEAP32[5024] | 0) + 16 | 0;
     $98 = +HEAPF64[$96 >> 3];
     $99$1 = (tempDouble = +$98, +Math_abs(tempDouble) >= 1.0 ? tempDouble > 0.0 ? (Math_min(+Math_floor(tempDouble / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0) >>> 0 : 0);
     $100 = $96;
     HEAP32[$100 >> 2] = ~~+$98 >>> 0;
     HEAP32[$100 + 4 >> 2] = $99$1;
     break;
    }
    $102 = ($24 | 0) == 11;
    if ($92 & $102) {
     $105 = (HEAP32[5024] | 0) + 16 | 0;
     HEAP32[$105 >> 2] = +HEAPF64[$105 >> 3] != 0.0;
     break;
    }
    do {
     if ($92) {
      $114 = (HEAP32[5024] | 0) + 16 | 0;
      $116 = +HEAPF64[$114 >> 3];
      $117$1 = (tempDouble = +$116, +Math_abs(tempDouble) >= 1.0 ? tempDouble > 0.0 ? (Math_min(+Math_floor(tempDouble / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0) >>> 0 : 0);
      $118 = $114;
      HEAP32[$118 >> 2] = ~~+$116 >>> 0;
      HEAP32[$118 + 4 >> 2] = $117$1;
     } else {
      if (($26 | 0) == 28) {
       break;
      }
      if (($20 & 16 | 0) != 0) {
       $126 = (HEAP32[5024] | 0) + 16 | 0;
       $130 = $126;
       HEAP32[$130 >> 2] = HEAP32[$126 >> 2];
       HEAP32[$130 + 4 >> 2] = 0;
       break;
      }
      if (($26 | 0) == 12) {
       break;
      }
      $135 = (HEAP32[5024] | 0) + 16 | 0;
      $137 = HEAP32[$135 >> 2] | 0;
      $139 = $135;
      HEAP32[$139 >> 2] = $137;
      HEAP32[$139 + 4 >> 2] = ($137 | 0) < 0 | 0 ? -1 : 0;
     }
    } while (0);
    if ($93) {
     break;
    }
    if ($102) {
     $144 = (HEAP32[5024] | 0) + 16 | 0;
     $145 = $144;
     HEAP32[$144 >> 2] = ((HEAP32[$145 >> 2] | 0) != 0 | (HEAP32[$145 + 4 >> 2] | 0) != 0) & 1;
     break;
    }
    if (($24 | 0) == 12) {
     break;
    }
    if (($34 | 0) == 1) {
     $s_0 = 24;
    } else {
     $s_0 = ($34 | 0) == 2 ? 16 : 0;
    }
    $160 = (HEAP32[5024] | 0) + 16 | 0;
    $164 = HEAP32[$160 >> 2] << $s_0;
    if (($23 & 16 | 0) == 0) {
     HEAP32[$160 >> 2] = $164 >> $s_0;
     break;
    } else {
     HEAP32[$160 >> 2] = $164 >>> ($s_0 >>> 0);
     break;
    }
   }
   $173 = ($24 | 0) == 11;
   if (($42 | 0) == 560 & $173) {
    HEAP16[$39 >> 1] = 48;
    HEAP32[(HEAP32[5024] | 0) + 16 >> 2] = 1;
    break;
   }
   if ((HEAP32[5338] | 0) != 0) {
    break;
   }
   $182 = ($33 | 0) != 0;
   $183 = ($38 | 0) != 0;
   if ($182 & $183) {
    _gen_cvt_ftof($24);
    break;
   }
   if ($183) {
    if (($26 | 0) != 28) {
     _gen_cvt_itof($24);
     break;
    }
    if (($24 | 0) == 8) {
     _vpush_global_sym(55624, 382);
    } else if (($24 | 0) == 10) {
     _vpush_global_sym(55624, 384);
    } else {
     _vpush_global_sym(55624, 383);
    }
    $192 = HEAP32[5024] | 0;
    $193 = $tmp_i_i_i;
    $194 = $192;
    HEAP32[$193 >> 2] = HEAP32[$194 >> 2];
    HEAP32[$193 + 4 >> 2] = HEAP32[$194 + 4 >> 2];
    HEAP32[$193 + 8 >> 2] = HEAP32[$194 + 8 >> 2];
    HEAP32[$193 + 12 >> 2] = HEAP32[$194 + 12 >> 2];
    HEAP32[$193 + 16 >> 2] = HEAP32[$194 + 16 >> 2];
    HEAP32[$193 + 20 >> 2] = HEAP32[$194 + 20 >> 2];
    HEAP32[$193 + 24 >> 2] = HEAP32[$194 + 24 >> 2];
    HEAP32[$193 + 28 >> 2] = HEAP32[$194 + 28 >> 2];
    HEAP32[$193 + 32 >> 2] = HEAP32[$194 + 32 >> 2];
    HEAP32[$193 + 36 >> 2] = HEAP32[$194 + 36 >> 2];
    $196 = $192 - 40 | 0;
    HEAP32[$194 >> 2] = HEAP32[$196 >> 2];
    HEAP32[$194 + 4 >> 2] = HEAP32[$196 + 4 >> 2];
    HEAP32[$194 + 8 >> 2] = HEAP32[$196 + 8 >> 2];
    HEAP32[$194 + 12 >> 2] = HEAP32[$196 + 12 >> 2];
    HEAP32[$194 + 16 >> 2] = HEAP32[$196 + 16 >> 2];
    HEAP32[$194 + 20 >> 2] = HEAP32[$196 + 20 >> 2];
    HEAP32[$194 + 24 >> 2] = HEAP32[$196 + 24 >> 2];
    HEAP32[$194 + 28 >> 2] = HEAP32[$196 + 28 >> 2];
    HEAP32[$194 + 32 >> 2] = HEAP32[$196 + 32 >> 2];
    HEAP32[$194 + 36 >> 2] = HEAP32[$196 + 36 >> 2];
    HEAP32[$196 >> 2] = HEAP32[$193 >> 2];
    HEAP32[$196 + 4 >> 2] = HEAP32[$193 + 4 >> 2];
    HEAP32[$196 + 8 >> 2] = HEAP32[$193 + 8 >> 2];
    HEAP32[$196 + 12 >> 2] = HEAP32[$193 + 12 >> 2];
    HEAP32[$196 + 16 >> 2] = HEAP32[$193 + 16 >> 2];
    HEAP32[$196 + 20 >> 2] = HEAP32[$193 + 20 >> 2];
    HEAP32[$196 + 24 >> 2] = HEAP32[$193 + 24 >> 2];
    HEAP32[$196 + 28 >> 2] = HEAP32[$193 + 28 >> 2];
    HEAP32[$196 + 32 >> 2] = HEAP32[$193 + 32 >> 2];
    HEAP32[$196 + 36 >> 2] = HEAP32[$193 + 36 >> 2];
    _gfunc_call(1);
    $197 = $cval_i33_sroa_4 | 0;
    $198 = HEAP32[5024] | 0;
    if ($198 >>> 0 < 66472 >>> 0) {
     $202 = $198;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $202 = HEAP32[5024] | 0;
    }
    do {
     if ($202 >>> 0 < 56272 >>> 0) {
      $214 = $202;
     } else {
      $207 = HEAPU16[$202 + 8 >> 1] | 0;
      if (!(($207 & 63 | 0) == 51 | ($207 & 62 | 0) == 52)) {
       $214 = $202;
       break;
      }
      _gv(1) | 0;
      $214 = HEAP32[5024] | 0;
     }
    } while (0);
    $215 = $214 + 40 | 0;
    HEAP32[5024] = $215;
    $216 = $215;
    $$etemp$18 = 21728;
    $217$1 = HEAP32[$$etemp$18 + 4 >> 2] | 0;
    HEAP32[$216 >> 2] = HEAP32[$$etemp$18 >> 2];
    HEAP32[$216 + 4 >> 2] = $217$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $222 = HEAP32[5024] | 0;
    HEAP32[$222 + 16 >> 2] = 0;
    $226 = $222 + 20 | 0;
    HEAP32[$226 >> 2] = HEAP32[$197 >> 2];
    HEAP32[$226 + 4 >> 2] = HEAP32[$197 + 4 >> 2];
    HEAP32[$226 + 8 >> 2] = HEAP32[$197 + 8 >> 2];
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 3;
    break;
   }
   if ($182) {
    if ($173) {
     $233 = $cval_i_sroa_4 | 0;
     if ($21 >>> 0 < 66472 >>> 0) {
      $237 = $21;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $237 = HEAP32[5024] | 0;
     }
     do {
      if ($237 >>> 0 < 56272 >>> 0) {
       $249 = $237;
      } else {
       $242 = HEAPU16[$237 + 8 >> 1] | 0;
       if (!(($242 & 63 | 0) == 51 | ($242 & 62 | 0) == 52)) {
        $249 = $237;
        break;
       }
       _gv(1) | 0;
       $249 = HEAP32[5024] | 0;
      }
     } while (0);
     $250 = $249 + 40 | 0;
     HEAP32[5024] = $250;
     $251 = $250;
     $$etemp$25 = 21728;
     $252$1 = HEAP32[$$etemp$25 + 4 >> 2] | 0;
     HEAP32[$251 >> 2] = HEAP32[$$etemp$25 >> 2];
     HEAP32[$251 + 4 >> 2] = $252$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $257 = HEAP32[5024] | 0;
     HEAP32[$257 + 16 >> 2] = 0;
     $261 = $257 + 20 | 0;
     HEAP32[$261 >> 2] = HEAP32[$233 >> 2];
     HEAP32[$261 + 4 >> 2] = HEAP32[$233 + 4 >> 2];
     HEAP32[$261 + 8 >> 2] = HEAP32[$233 + 8 >> 2];
     _gen_op(149);
     break;
    }
    if (($24 | 0) == 12 | ($24 | 0) == 16) {
     _gen_cvt_ftoi($24);
     break;
    } else if (($24 | 0) == 28) {
     if (($29 | 0) == 8) {
      _vpush_global_sym(55624, 386);
     } else if (($29 | 0) == 10) {
      _vpush_global_sym(55624, 385);
     } else {
      _vpush_global_sym(55624, 387);
     }
     $267 = HEAP32[5024] | 0;
     $268 = $tmp_i_i_i20;
     $269 = $267;
     HEAP32[$268 >> 2] = HEAP32[$269 >> 2];
     HEAP32[$268 + 4 >> 2] = HEAP32[$269 + 4 >> 2];
     HEAP32[$268 + 8 >> 2] = HEAP32[$269 + 8 >> 2];
     HEAP32[$268 + 12 >> 2] = HEAP32[$269 + 12 >> 2];
     HEAP32[$268 + 16 >> 2] = HEAP32[$269 + 16 >> 2];
     HEAP32[$268 + 20 >> 2] = HEAP32[$269 + 20 >> 2];
     HEAP32[$268 + 24 >> 2] = HEAP32[$269 + 24 >> 2];
     HEAP32[$268 + 28 >> 2] = HEAP32[$269 + 28 >> 2];
     HEAP32[$268 + 32 >> 2] = HEAP32[$269 + 32 >> 2];
     HEAP32[$268 + 36 >> 2] = HEAP32[$269 + 36 >> 2];
     $271 = $267 - 40 | 0;
     HEAP32[$269 >> 2] = HEAP32[$271 >> 2];
     HEAP32[$269 + 4 >> 2] = HEAP32[$271 + 4 >> 2];
     HEAP32[$269 + 8 >> 2] = HEAP32[$271 + 8 >> 2];
     HEAP32[$269 + 12 >> 2] = HEAP32[$271 + 12 >> 2];
     HEAP32[$269 + 16 >> 2] = HEAP32[$271 + 16 >> 2];
     HEAP32[$269 + 20 >> 2] = HEAP32[$271 + 20 >> 2];
     HEAP32[$269 + 24 >> 2] = HEAP32[$271 + 24 >> 2];
     HEAP32[$269 + 28 >> 2] = HEAP32[$271 + 28 >> 2];
     HEAP32[$269 + 32 >> 2] = HEAP32[$271 + 32 >> 2];
     HEAP32[$269 + 36 >> 2] = HEAP32[$271 + 36 >> 2];
     HEAP32[$271 >> 2] = HEAP32[$268 >> 2];
     HEAP32[$271 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
     HEAP32[$271 + 8 >> 2] = HEAP32[$268 + 8 >> 2];
     HEAP32[$271 + 12 >> 2] = HEAP32[$268 + 12 >> 2];
     HEAP32[$271 + 16 >> 2] = HEAP32[$268 + 16 >> 2];
     HEAP32[$271 + 20 >> 2] = HEAP32[$268 + 20 >> 2];
     HEAP32[$271 + 24 >> 2] = HEAP32[$268 + 24 >> 2];
     HEAP32[$271 + 28 >> 2] = HEAP32[$268 + 28 >> 2];
     HEAP32[$271 + 32 >> 2] = HEAP32[$268 + 32 >> 2];
     HEAP32[$271 + 36 >> 2] = HEAP32[$268 + 36 >> 2];
     _gfunc_call(1);
     $272 = $cval_i36_sroa_4 | 0;
     $273 = HEAP32[5024] | 0;
     if ($273 >>> 0 < 66472 >>> 0) {
      $277 = $273;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $277 = HEAP32[5024] | 0;
     }
     do {
      if ($277 >>> 0 < 56272 >>> 0) {
       $289 = $277;
      } else {
       $282 = HEAPU16[$277 + 8 >> 1] | 0;
       if (!(($282 & 63 | 0) == 51 | ($282 & 62 | 0) == 52)) {
        $289 = $277;
        break;
       }
       _gv(1) | 0;
       $289 = HEAP32[5024] | 0;
      }
     } while (0);
     $290 = $289 + 40 | 0;
     HEAP32[5024] = $290;
     $291 = $290;
     $$etemp$34 = 21728;
     $292$1 = HEAP32[$$etemp$34 + 4 >> 2] | 0;
     HEAP32[$291 >> 2] = HEAP32[$$etemp$34 >> 2];
     HEAP32[$291 + 4 >> 2] = $292$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $297 = HEAP32[5024] | 0;
     HEAP32[$297 + 16 >> 2] = 0;
     $301 = $297 + 20 | 0;
     HEAP32[$301 >> 2] = HEAP32[$272 >> 2];
     HEAP32[$301 + 4 >> 2] = HEAP32[$272 + 4 >> 2];
     HEAP32[$301 + 8 >> 2] = HEAP32[$272 + 8 >> 2];
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 0;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 2;
     break;
    } else {
     _gen_cvt_ftoi(0);
     if ((HEAP32[$22 >> 2] & 31 | 0) == 0) {
      break;
     }
     HEAP32[HEAP32[5024] >> 2] = 0;
     _gen_cast($type);
     break;
    }
   }
   if (($34 | 0) != 12) {
    if ($173) {
     $408 = $cval_i30_sroa_4 | 0;
     if ($21 >>> 0 < 66472 >>> 0) {
      $412 = $21;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $412 = HEAP32[5024] | 0;
     }
     do {
      if ($412 >>> 0 < 56272 >>> 0) {
       $424 = $412;
      } else {
       $417 = HEAPU16[$412 + 8 >> 1] | 0;
       if (!(($417 & 63 | 0) == 51 | ($417 & 62 | 0) == 52)) {
        $424 = $412;
        break;
       }
       _gv(1) | 0;
       $424 = HEAP32[5024] | 0;
      }
     } while (0);
     $425 = $424 + 40 | 0;
     HEAP32[5024] = $425;
     $426 = $425;
     $$etemp$55 = 21728;
     $427$1 = HEAP32[$$etemp$55 + 4 >> 2] | 0;
     HEAP32[$426 >> 2] = HEAP32[$$etemp$55 >> 2];
     HEAP32[$426 + 4 >> 2] = $427$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $432 = HEAP32[5024] | 0;
     HEAP32[$432 + 16 >> 2] = 0;
     $436 = $432 + 20 | 0;
     HEAP32[$436 >> 2] = HEAP32[$408 >> 2];
     HEAP32[$436 + 4 >> 2] = HEAP32[$408 + 4 >> 2];
     HEAP32[$436 + 8 >> 2] = HEAP32[$408 + 8 >> 2];
     _gen_op(149);
     break;
    }
    if (($34 - 1 | 0) >>> 0 < 2 >>> 0) {
     if (($26 | 0) == 4) {
      HEAP32[$25 >> 2] = 0;
      _tcc_warning(19792, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     _force_charshort_cast($24);
     break;
    }
    if (!(($34 | 0) == 0 & ($26 | 0) == 12)) {
     break;
    }
    $446 = $20 & 16;
    _gv(1) | 0;
    $448 = HEAP32[5024] | 0;
    if ($448 >>> 0 < 66472 >>> 0) {
     $451 = $448;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $451 = HEAP32[5024] | 0;
    }
    $452 = $451 + 40 | 0;
    HEAP32[5024] = $452;
    $453 = $452;
    $454 = $448;
    HEAP32[$453 >> 2] = HEAP32[$454 >> 2];
    HEAP32[$453 + 4 >> 2] = HEAP32[$454 + 4 >> 2];
    HEAP32[$453 + 8 >> 2] = HEAP32[$454 + 8 >> 2];
    HEAP32[$453 + 12 >> 2] = HEAP32[$454 + 12 >> 2];
    HEAP32[$453 + 16 >> 2] = HEAP32[$454 + 16 >> 2];
    HEAP32[$453 + 20 >> 2] = HEAP32[$454 + 20 >> 2];
    HEAP32[$453 + 24 >> 2] = HEAP32[$454 + 24 >> 2];
    HEAP32[$453 + 28 >> 2] = HEAP32[$454 + 28 >> 2];
    HEAP32[$453 + 32 >> 2] = HEAP32[$454 + 32 >> 2];
    HEAP32[$453 + 36 >> 2] = HEAP32[$454 + 36 >> 2];
    $455 = HEAP32[5024] | 0;
    HEAP16[$455 + 8 >> 1] = HEAP16[$455 - 40 + 10 >> 1] | 0;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
    HEAP32[HEAP32[5024] >> 2] = $446;
    HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $446;
    $467 = HEAP32[5024] | 0;
    $470 = HEAPU16[$467 + 8 >> 1] | 0;
    do {
     if (($470 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
      if (($470 & 62 | 0) != 52) {
       break;
      }
      _gsym(HEAP32[$467 + 16 >> 2] | 0);
     } else {
      _o(55517);
     }
    } while (0);
    HEAP32[5024] = (HEAP32[5024] | 0) - 40;
    break;
   }
   if (($29 | 0) == 12) {
    break;
   }
   _gv(1) | 0;
   if (($26 | 0) == 16) {
    $320 = $cval_i24_sroa_4 | 0;
    $321 = HEAP32[5024] | 0;
    if ($321 >>> 0 < 66472 >>> 0) {
     $325 = $321;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $325 = HEAP32[5024] | 0;
    }
    do {
     if ($325 >>> 0 < 56272 >>> 0) {
      $337 = $325;
     } else {
      $330 = HEAPU16[$325 + 8 >> 1] | 0;
      if (!(($330 & 63 | 0) == 51 | ($330 & 62 | 0) == 52)) {
       $337 = $325;
       break;
      }
      _gv(1) | 0;
      $337 = HEAP32[5024] | 0;
     }
    } while (0);
    $338 = $337 + 40 | 0;
    HEAP32[5024] = $338;
    $339 = $338;
    $$etemp$41 = 21728;
    $340$1 = HEAP32[$$etemp$41 + 4 >> 2] | 0;
    HEAP32[$339 >> 2] = HEAP32[$$etemp$41 >> 2];
    HEAP32[$339 + 4 >> 2] = $340$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $345 = HEAP32[5024] | 0;
    HEAP32[$345 + 16 >> 2] = 0;
    $349 = $345 + 20 | 0;
    HEAP32[$349 >> 2] = HEAP32[$320 >> 2];
    HEAP32[$349 + 4 >> 2] = HEAP32[$320 + 4 >> 2];
    HEAP32[$349 + 8 >> 2] = HEAP32[$320 + 8 >> 2];
    _gv(1) | 0;
   } else if (($26 | 0) == 4) {
    _gen_cast(21728);
    label = 94;
   } else {
    label = 94;
   }
   if ((label | 0) == 94) {
    _gv_dup();
    $353 = $cval_i27_sroa_4 | 0;
    $354 = HEAP32[5024] | 0;
    if ($354 >>> 0 < 66472 >>> 0) {
     $358 = $354;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $358 = HEAP32[5024] | 0;
    }
    do {
     if ($358 >>> 0 < 56272 >>> 0) {
      $370 = $358;
     } else {
      $363 = HEAPU16[$358 + 8 >> 1] | 0;
      if (!(($363 & 63 | 0) == 51 | ($363 & 62 | 0) == 52)) {
       $370 = $358;
       break;
      }
      _gv(1) | 0;
      $370 = HEAP32[5024] | 0;
     }
    } while (0);
    $371 = $370 + 40 | 0;
    HEAP32[5024] = $371;
    $372 = $371;
    $$etemp$48 = 21728;
    $373$1 = HEAP32[$$etemp$48 + 4 >> 2] | 0;
    HEAP32[$372 >> 2] = HEAP32[$$etemp$48 >> 2];
    HEAP32[$372 + 4 >> 2] = $373$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $378 = HEAP32[5024] | 0;
    HEAP32[$378 + 16 >> 2] = 31;
    $382 = $378 + 20 | 0;
    HEAP32[$382 >> 2] = HEAP32[$353 >> 2];
    HEAP32[$382 + 4 >> 2] = HEAP32[$353 + 4 >> 2];
    HEAP32[$382 + 8 >> 2] = HEAP32[$353 + 8 >> 2];
    _gen_op(2);
   }
   $384 = HEAP32[5024] | 0;
   HEAP16[$384 - 40 + 10 >> 1] = HEAP16[$384 + 8 >> 1] | 0;
   $388 = HEAP32[5024] | 0;
   $391 = HEAPU16[$388 + 8 >> 1] | 0;
   do {
    if (($391 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
     if (($391 & 62 | 0) != 52) {
      break;
     }
     _gsym(HEAP32[$388 + 16 >> 2] | 0);
    } else {
     _o(55517);
    }
   } while (0);
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  }
 } while (0);
 $508 = $type;
 $509 = HEAP32[5024] | 0;
 $510$1 = HEAP32[$508 + 4 >> 2] | 0;
 HEAP32[$509 >> 2] = HEAP32[$508 >> 2];
 HEAP32[$509 + 4 >> 2] = $510$1;
 STACKTOP = sp;
 return;
}
function _macro_subst($tok_str, $nested_list, $macro_str, $can_read_stream) {
 $tok_str = $tok_str | 0;
 $nested_list = $nested_list | 0;
 $macro_str = $macro_str | 0;
 $can_read_stream = $can_read_stream | 0;
 var $macro_str1_i = 0, $cval_i = 0, $cval1_i = 0, $cval = 0, $ml = 0, $4 = 0, $5 = 0, $macro_str23 = 0, $7 = 0, $8 = 0, $n_0_ph_i_i = 0, $p_0_i_i = 0, $n_0_i_i = 0, $tab_0_i_i = 0, $27 = 0, $p_1_i_i = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $macro_str24_ph = 0, $start_of_nosubsts_0_i_ph = 0, $macro_str24 = 0, $38 = 0, $39 = 0, $n_0_ph_i7_i = 0, $p_0_i9_i = 0, $n_0_i10_i = 0, $tab_0_i11_i = 0, $58 = 0, $p_1_i14_i_ph = 0, $61 = 0, $p_1_i14_i = 0, $_start_of_nosubsts_0_i = 0, $68 = 0, $macro_str2655 = 0, $_sink_i = 0, $70 = 0, $storemerge_i18 = 0, $72 = 0, $n_0_ph_i18_i = 0, $p_0_i20_i = 0, $n_0_i21_i = 0, $tab_0_i22_i = 0, $91 = 0, $p_1_i25_i = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $_01_i_i = 0, $101 = 0, $size_0_i_i_i_i = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $_01_i30_i = 0, $125 = 0, $size_0_i_i_i34_i = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $size_0_i_i_i = 0, $150 = 0, $160 = 0, $macro_str26_lcssa = 0, $170 = 0, $173 = 0, $174 = 0, $175 = 0, $len_0_i_i_i = 0, $183 = 0, $184 = 0, $_0_i19 = 0, $187 = 0, $_0_i19_macro_str = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $_ph74 = 0, $macro_str20_ph73 = 0, $force_blank_041 = 0, $macro_str2040 = 0, $198 = 0, $199 = 0, $n_0_ph_i = 0, $p_0_i = 0, $n_0_i = 0, $tab_0_i = 0, $218 = 0, $p_1_i = 0, $222 = 0, $223 = 0, $225 = 0, $len_0_i_i = 0, $233 = 0, $str_0_i = 0, $236 = 0, $237 = 0, $n_0_ph_i3 = 0, $p_0_i5 = 0, $n_0_i6 = 0, $tab_0_i7 = 0, $256 = 0, $260 = 0, $268 = 0, $275 = 0, $276 = 0, $278 = 0, $len_0_i_i12 = 0, $286 = 0, $str_0_i13 = 0, $294 = 0, $295 = 0, $macro_str21 = 0, $308 = 0, $311 = 0, $312 = 0, $313 = 0, $len_0_i_i15 = 0, $321 = 0, $str_0_i16 = 0, $325 = 0, $storemerge_i = 0, $_ph_be = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $macro_str1_i = sp | 0;
 $cval_i = sp + 16 | 0;
 $cval1_i = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ml = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $4 = $cval_i;
 $5 = $cval_i;
 $macro_str23 = $macro_str;
 while (1) {
  $7 = $macro_str23 + 4 | 0;
  $8 = HEAP32[$macro_str23 >> 2] | 0;
  switch ($8 | 0) {
  case 179:
  case 200:
  case 180:
  case 183:
  case 185:
  case 186:
   {
    HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
    $p_1_i_i = $macro_str23 + 8 | 0;
    break;
   }
  case 181:
  case 184:
  case 206:
   {
    HEAP32[$5 >> 2] = $7;
    HEAP32[$macro_str23 + 8 >> 2] = $macro_str23 + 20;
    $p_1_i_i = $macro_str23 + ((((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
    break;
   }
  case 193:
   {
    $n_0_ph_i_i = 3;
    label = 6;
    break;
   }
  case 192:
  case 201:
  case 202:
   {
    $n_0_ph_i_i = 2;
    label = 6;
    break;
   }
  default:
   {
    $p_1_i_i = $7;
   }
  }
  if ((label | 0) == 6) {
   label = 0;
   $tab_0_i_i = $4;
   $n_0_i_i = $n_0_ph_i_i;
   $p_0_i_i = $7;
   while (1) {
    HEAP32[$tab_0_i_i >> 2] = HEAP32[$p_0_i_i >> 2];
    $27 = $n_0_i_i - 1 | 0;
    if (($27 | 0) == 0) {
     break;
    } else {
     $tab_0_i_i = $tab_0_i_i + 4 | 0;
     $n_0_i_i = $27;
     $p_0_i_i = $p_0_i_i + 4 | 0;
    }
   }
   $p_1_i_i = $macro_str23 + ($n_0_ph_i_i + 1 << 2) | 0;
  }
  if (($8 | 0) == 0) {
   $_0_i19 = 0;
   break;
  } else if (($8 | 0) == 182) {
   label = 10;
   break;
  } else {
   $macro_str23 = $p_1_i_i;
  }
 }
 if ((label | 0) == 10) {
  $31 = $macro_str1_i | 0;
  HEAP32[$31 >> 2] = 0;
  $32 = $macro_str1_i + 4 | 0;
  HEAP32[$32 >> 2] = 0;
  $33 = $macro_str1_i + 8 | 0;
  HEAP32[$33 >> 2] = 0;
  HEAP32[$macro_str1_i + 12 >> 2] = -1;
  $35 = $cval1_i;
  $36 = $cval1_i;
  $start_of_nosubsts_0_i_ph = -1;
  $macro_str24_ph = $macro_str;
  L15 : while (1) {
   $macro_str24 = $macro_str24_ph;
   while (1) {
    $38 = $macro_str24 + 4 | 0;
    $39 = HEAP32[$macro_str24 >> 2] | 0;
    HEAP32[5310] = $39;
    switch ($39 | 0) {
    case 192:
    case 201:
    case 202:
     {
      $n_0_ph_i7_i = 2;
      label = 16;
      break;
     }
    case 193:
     {
      $n_0_ph_i7_i = 3;
      label = 16;
      break;
     }
    case 179:
    case 200:
    case 180:
    case 183:
    case 185:
    case 186:
     {
      HEAP32[5302] = HEAP32[$38 >> 2];
      $p_1_i14_i_ph = $macro_str24 + 8 | 0;
      label = 19;
      break;
     }
    case 181:
    case 184:
    case 206:
     {
      HEAP32[5302] = $38;
      HEAP32[$macro_str24 + 8 >> 2] = $macro_str24 + 20;
      $p_1_i14_i_ph = $macro_str24 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
      label = 19;
      break;
     }
    default:
     {
      $p_1_i14_i = $38;
      $61 = $39;
     }
    }
    if ((label | 0) == 16) {
     label = 0;
     $tab_0_i11_i = 21208;
     $n_0_i10_i = $n_0_ph_i7_i;
     $p_0_i9_i = $38;
     while (1) {
      HEAP32[$tab_0_i11_i >> 2] = HEAP32[$p_0_i9_i >> 2];
      $58 = $n_0_i10_i - 1 | 0;
      if (($58 | 0) == 0) {
       break;
      } else {
       $tab_0_i11_i = $tab_0_i11_i + 4 | 0;
       $n_0_i10_i = $58;
       $p_0_i9_i = $p_0_i9_i + 4 | 0;
      }
     }
     $p_1_i14_i_ph = $macro_str24 + ($n_0_ph_i7_i + 1 << 2) | 0;
     label = 19;
    }
    if ((label | 0) == 19) {
     label = 0;
     $p_1_i14_i = $p_1_i14_i_ph;
     $61 = HEAP32[5310] | 0;
    }
    if (($61 | 0) == 0) {
     break L15;
    } else if (($61 | 0) == 182) {
     $macro_str24 = $p_1_i14_i;
    } else {
     break;
    }
   }
   $_start_of_nosubsts_0_i = ($61 | 0) == 207 & ($start_of_nosubsts_0_i_ph | 0) < 0 ? HEAP32[$32 >> 2] | 0 : $start_of_nosubsts_0_i_ph;
   L32 : do {
    if ((HEAP32[$p_1_i14_i >> 2] | 0) == 182) {
     $68 = ($_start_of_nosubsts_0_i | 0) > -1;
     $macro_str2655 = $p_1_i14_i;
     L34 : while (1) {
      if ($68) {
       HEAP32[$32 >> 2] = $_start_of_nosubsts_0_i;
       $_sink_i = $macro_str2655;
      } else {
       $_sink_i = $macro_str2655;
      }
      while (1) {
       $70 = $_sink_i + 4 | 0;
       $storemerge_i18 = HEAP32[$70 >> 2] | 0;
       if (($storemerge_i18 | 0) == 182) {
        $macro_str2655 = $70;
        continue L34;
       } else if (($storemerge_i18 | 0) == 0) {
        $macro_str26_lcssa = $70;
        break L32;
       } else if (($storemerge_i18 | 0) == 207) {
        $_sink_i = $70;
       } else {
        break;
       }
      }
      $72 = $_sink_i + 8 | 0;
      switch ($storemerge_i18 | 0) {
      case 193:
       {
        $n_0_ph_i18_i = 3;
        label = 30;
        break;
       }
      case 192:
      case 201:
      case 202:
       {
        $n_0_ph_i18_i = 2;
        label = 30;
        break;
       }
      case 179:
      case 200:
      case 180:
      case 183:
      case 185:
      case 186:
       {
        HEAP32[$35 >> 2] = HEAP32[$72 >> 2];
        $p_1_i25_i = $_sink_i + 12 | 0;
        break;
       }
      case 181:
      case 184:
      case 206:
       {
        HEAP32[$36 >> 2] = $72;
        HEAP32[$_sink_i + 12 >> 2] = $_sink_i + 24;
        $p_1_i25_i = $_sink_i + ((((HEAP32[HEAP32[$36 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 2 << 2) | 0;
        break;
       }
      default:
       {
        $p_1_i25_i = $72;
       }
      }
      if ((label | 0) == 30) {
       label = 0;
       $tab_0_i22_i = $35;
       $n_0_i21_i = $n_0_ph_i18_i;
       $p_0_i20_i = $72;
       while (1) {
        HEAP32[$tab_0_i22_i >> 2] = HEAP32[$p_0_i20_i >> 2];
        $91 = $n_0_i21_i - 1 | 0;
        if (($91 | 0) == 0) {
         break;
        } else {
         $tab_0_i22_i = $tab_0_i22_i + 4 | 0;
         $n_0_i21_i = $91;
         $p_0_i20_i = $p_0_i20_i + 4 | 0;
        }
       }
       $p_1_i25_i = $_sink_i + ($n_0_ph_i18_i + 2 << 2) | 0;
      }
      $94 = _get_tok_str(HEAP32[5310] | 0, 21208) | 0;
      $95 = HEAP8[$94] | 0;
      if ($95 << 24 >> 24 == 0) {
       $117 = 0;
       $116 = 0;
       $115 = 0;
      } else {
       $_01_i_i = $94;
       $100 = $95;
       $99 = 0;
       $98 = 0;
       $97 = 0;
       while (1) {
        $101 = $99 + 1 | 0;
        if (($99 | 0) < ($97 | 0)) {
         $110 = $98;
         $109 = $97;
        } else {
         $size_0_i_i_i_i = ($97 | 0) == 0 ? 8 : $97;
         while (1) {
          if (($size_0_i_i_i_i | 0) < ($101 | 0)) {
           $size_0_i_i_i_i = $size_0_i_i_i_i << 1;
          } else {
           break;
          }
         }
         $110 = _tcc_realloc($98, $size_0_i_i_i_i) | 0;
         $109 = $size_0_i_i_i_i;
        }
        HEAP8[$110 + $99 | 0] = $100;
        $112 = $_01_i_i + 1 | 0;
        $113 = HEAP8[$112] | 0;
        if ($113 << 24 >> 24 == 0) {
         $117 = $110;
         $116 = $109;
         $115 = $101;
         break;
        } else {
         $_01_i_i = $112;
         $100 = $113;
         $99 = $101;
         $98 = $110;
         $97 = $109;
        }
       }
      }
      $118 = _get_tok_str($storemerge_i18, $cval1_i) | 0;
      $119 = HEAP8[$118] | 0;
      if ($119 << 24 >> 24 == 0) {
       $141 = $117;
       $140 = $116;
       $139 = $115;
      } else {
       $_01_i30_i = $118;
       $124 = $119;
       $123 = $115;
       $122 = $117;
       $121 = $116;
       while (1) {
        $125 = $123 + 1 | 0;
        if (($123 | 0) < ($121 | 0)) {
         $134 = $122;
         $133 = $121;
        } else {
         $size_0_i_i_i34_i = ($121 | 0) == 0 ? 8 : $121;
         while (1) {
          if (($size_0_i_i_i34_i | 0) < ($125 | 0)) {
           $size_0_i_i_i34_i = $size_0_i_i_i34_i << 1;
          } else {
           break;
          }
         }
         $134 = _tcc_realloc($122, $size_0_i_i_i34_i) | 0;
         $133 = $size_0_i_i_i34_i;
        }
        HEAP8[$134 + $123 | 0] = $124;
        $136 = $_01_i30_i + 1 | 0;
        $137 = HEAP8[$136] | 0;
        if ($137 << 24 >> 24 == 0) {
         $141 = $134;
         $140 = $133;
         $139 = $125;
         break;
        } else {
         $_01_i30_i = $136;
         $124 = $137;
         $123 = $125;
         $122 = $134;
         $121 = $133;
        }
       }
      }
      $142 = $139 + 1 | 0;
      if (($139 | 0) < ($140 | 0)) {
       $150 = $141;
      } else {
       $size_0_i_i_i = ($140 | 0) == 0 ? 8 : $140;
       while (1) {
        if (($size_0_i_i_i | 0) < ($142 | 0)) {
         $size_0_i_i_i = $size_0_i_i_i << 1;
        } else {
         break;
        }
       }
       $150 = _tcc_realloc($141, $size_0_i_i_i) | 0;
      }
      HEAP8[$150 + $139 | 0] = 0;
      _tcc_open_bf(HEAP32[5314] | 0, 13952, $142);
      _memcpy((HEAP32[13912] | 0) + 1056 | 0, $150 | 0, $142) | 0;
      _next_nomacro1();
      if ((HEAP8[HEAP32[HEAP32[13912] >> 2] | 0] | 0) != 0) {
       $160 = $150 + $115 | 0;
       do {
        _tok_str_add2($macro_str1_i, HEAP32[5310] | 0, 21208);
        _tcc_warning(13784, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $115, HEAP32[tempVarArgs + 8 >> 2] = $150, HEAP32[tempVarArgs + 16 >> 2] = $160, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        _next_nomacro1();
       } while ((HEAP8[HEAP32[HEAP32[13912] >> 2] | 0] | 0) != 0);
      }
      _tcc_close();
      _tcc_free($150);
      if ((HEAP32[$p_1_i25_i >> 2] | 0) == 182) {
       $macro_str2655 = $p_1_i25_i;
      } else {
       $macro_str26_lcssa = $p_1_i25_i;
       break L32;
      }
     }
    } else {
     $macro_str26_lcssa = $p_1_i14_i;
    }
   } while (0);
   $170 = HEAP32[5310] | 0;
   _tok_str_add2($macro_str1_i, $170, 21208);
   $start_of_nosubsts_0_i_ph = ($170 | 0) == 207 ? $_start_of_nosubsts_0_i : -1;
   $macro_str24_ph = $macro_str26_lcssa;
  }
  $173 = HEAP32[$32 >> 2] | 0;
  $174 = HEAP32[$31 >> 2] | 0;
  $175 = HEAP32[$33 >> 2] | 0;
  if (($173 | 0) < ($175 | 0)) {
   $184 = $174;
  } else {
   $len_0_i_i_i = ($175 | 0) == 0 ? 8 : $175 << 1;
   $183 = _tcc_realloc($174, $len_0_i_i_i << 2) | 0;
   HEAP32[$33 >> 2] = $len_0_i_i_i;
   HEAP32[$31 >> 2] = $183;
   $184 = $183;
  }
  HEAP32[$184 + ($173 << 2) >> 2] = 0;
  HEAP32[$32 >> 2] = $173 + 1;
  $_0_i19 = $184;
 }
 $187 = ($_0_i19 | 0) != 0;
 $_0_i19_macro_str = $187 ? $_0_i19 : $macro_str;
 L88 : do {
  if (($_0_i19_macro_str | 0) != 0) {
   $189 = $cval;
   $190 = $ml + 4 | 0;
   $191 = ($can_read_stream | 0) != 0;
   $192 = $ml | 0;
   $193 = $cval;
   $194 = $tok_str + 4 | 0;
   $195 = $tok_str | 0;
   $196 = $tok_str + 8 | 0;
   $macro_str20_ph73 = $_0_i19_macro_str;
   $_ph74 = 0;
   while (1) {
    $macro_str2040 = $macro_str20_ph73;
    $force_blank_041 = 0;
    while (1) {
     $198 = $macro_str2040 + 4 | 0;
     $199 = HEAP32[$macro_str2040 >> 2] | 0;
     switch ($199 | 0) {
     case 179:
     case 200:
     case 180:
     case 183:
     case 185:
     case 186:
      {
       HEAP32[$189 >> 2] = HEAP32[$198 >> 2];
       $p_1_i = $macro_str2040 + 8 | 0;
       break;
      }
     case 181:
     case 184:
     case 206:
      {
       HEAP32[$193 >> 2] = $198;
       HEAP32[$macro_str2040 + 8 >> 2] = $macro_str2040 + 20;
       $p_1_i = $macro_str2040 + ((((HEAP32[HEAP32[$193 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
       break;
      }
     case 193:
      {
       $n_0_ph_i = 3;
       label = 64;
       break;
      }
     case 192:
     case 201:
     case 202:
      {
       $n_0_ph_i = 2;
       label = 64;
       break;
      }
     default:
      {
       $p_1_i = $198;
      }
     }
     if ((label | 0) == 64) {
      label = 0;
      $tab_0_i = $189;
      $n_0_i = $n_0_ph_i;
      $p_0_i = $198;
      while (1) {
       HEAP32[$tab_0_i >> 2] = HEAP32[$p_0_i >> 2];
       $218 = $n_0_i - 1 | 0;
       if (($218 | 0) == 0) {
        break;
       } else {
        $tab_0_i = $tab_0_i + 4 | 0;
        $n_0_i = $218;
        $p_0_i = $p_0_i + 4 | 0;
       }
      }
      $p_1_i = $macro_str2040 + ($n_0_ph_i + 1 << 2) | 0;
     }
     if (($199 | 0) == 207) {
      label = 68;
      break;
     } else if (($199 | 0) == 0) {
      break L88;
     }
     $260 = $199 - 256 | 0;
     if ($260 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
      $308 = $199;
      $macro_str21 = $p_1_i;
      break;
     }
     $268 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($260 << 2) >> 2] | 0) + 4 >> 2] | 0;
     if (($268 | 0) == 0) {
      $308 = $199;
      $macro_str21 = $p_1_i;
      break;
     }
     if ((_sym_find2(HEAP32[$nested_list >> 2] | 0, $199) | 0) != 0) {
      label = 80;
      break;
     }
     HEAP32[$190 >> 2] = HEAP32[5350];
     if ($191) {
      HEAP32[$192 >> 2] = HEAP32[$can_read_stream >> 2];
      HEAP32[$can_read_stream >> 2] = $ml;
     }
     HEAP32[5350] = $p_1_i;
     HEAP32[5310] = $199;
     $294 = _macro_subst_tok($tok_str, $nested_list, $268, $can_read_stream) | 0;
     $295 = HEAP32[5350] | 0;
     HEAP32[5350] = HEAP32[$190 >> 2];
     do {
      if ($191) {
       if ((HEAP32[$can_read_stream >> 2] | 0) != ($ml | 0)) {
        break;
       }
       HEAP32[$can_read_stream >> 2] = HEAP32[$192 >> 2];
      }
     } while (0);
     if (($294 | 0) != 0) {
      $308 = $199;
      $macro_str21 = $295;
      break;
     }
     if (($295 | 0) == 0) {
      break L88;
     } else {
      $macro_str2040 = $295;
      $force_blank_041 = (HEAP32[5336] & 16 | 0) == 0 ? $force_blank_041 : 1;
     }
    }
    L116 : do {
     if ((label | 0) == 68) {
      label = 0;
      $222 = HEAP32[$194 >> 2] | 0;
      $223 = HEAP32[$195 >> 2] | 0;
      $225 = HEAP32[$196 >> 2] | 0;
      if (($222 + 4 | 0) > ($225 | 0)) {
       $len_0_i_i = ($225 | 0) == 0 ? 8 : $225 << 1;
       $233 = _tcc_realloc($223, $len_0_i_i << 2) | 0;
       HEAP32[$196 >> 2] = $len_0_i_i;
       HEAP32[$195 >> 2] = $233;
       $str_0_i = $233;
      } else {
       $str_0_i = $223;
      }
      HEAP32[$str_0_i + ($222 << 2) >> 2] = 207;
      HEAP32[$194 >> 2] = $222 + 1;
      $236 = $p_1_i + 4 | 0;
      $237 = HEAP32[$p_1_i >> 2] | 0;
      switch ($237 | 0) {
      case 193:
       {
        $n_0_ph_i3 = 3;
        break;
       }
      case 179:
      case 200:
      case 180:
      case 183:
      case 185:
      case 186:
       {
        HEAP32[$189 >> 2] = HEAP32[$236 >> 2];
        $308 = $237;
        $macro_str21 = $p_1_i + 8 | 0;
        break L116;
        break;
       }
      case 181:
      case 184:
      case 206:
       {
        HEAP32[$193 >> 2] = $236;
        HEAP32[$p_1_i + 8 >> 2] = $p_1_i + 20;
        $308 = $237;
        $macro_str21 = $p_1_i + ((((HEAP32[HEAP32[$193 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
        break L116;
        break;
       }
      case 192:
      case 201:
      case 202:
       {
        $n_0_ph_i3 = 2;
        break;
       }
      default:
       {
        $308 = $237;
        $macro_str21 = $236;
        break L116;
       }
      }
      $tab_0_i7 = $189;
      $n_0_i6 = $n_0_ph_i3;
      $p_0_i5 = $236;
      while (1) {
       HEAP32[$tab_0_i7 >> 2] = HEAP32[$p_0_i5 >> 2];
       $256 = $n_0_i6 - 1 | 0;
       if (($256 | 0) == 0) {
        break;
       } else {
        $tab_0_i7 = $tab_0_i7 + 4 | 0;
        $n_0_i6 = $256;
        $p_0_i5 = $p_0_i5 + 4 | 0;
       }
      }
      $308 = $237;
      $macro_str21 = $p_1_i + ($n_0_ph_i3 + 1 << 2) | 0;
     } else if ((label | 0) == 80) {
      label = 0;
      $275 = HEAP32[$194 >> 2] | 0;
      $276 = HEAP32[$195 >> 2] | 0;
      $278 = HEAP32[$196 >> 2] | 0;
      if (($275 + 4 | 0) > ($278 | 0)) {
       $len_0_i_i12 = ($278 | 0) == 0 ? 8 : $278 << 1;
       $286 = _tcc_realloc($276, $len_0_i_i12 << 2) | 0;
       HEAP32[$196 >> 2] = $len_0_i_i12;
       HEAP32[$195 >> 2] = $286;
       $str_0_i13 = $286;
      } else {
       $str_0_i13 = $276;
      }
      HEAP32[$str_0_i13 + ($275 << 2) >> 2] = 207;
      HEAP32[$194 >> 2] = $275 + 1;
      $308 = $199;
      $macro_str21 = $p_1_i;
     }
    } while (0);
    if (($force_blank_041 | 0) == 0) {
     $325 = $_ph74;
    } else {
     $311 = HEAP32[$194 >> 2] | 0;
     $312 = HEAP32[$195 >> 2] | 0;
     $313 = HEAP32[$196 >> 2] | 0;
     if (($311 | 0) < ($313 | 0)) {
      $str_0_i16 = $312;
     } else {
      $len_0_i_i15 = ($313 | 0) == 0 ? 8 : $313 << 1;
      $321 = _tcc_realloc($312, $len_0_i_i15 << 2) | 0;
      HEAP32[$196 >> 2] = $len_0_i_i15;
      HEAP32[$195 >> 2] = $321;
      $str_0_i16 = $321;
     }
     HEAP32[$str_0_i16 + ($311 << 2) >> 2] = 32;
     HEAP32[$194 >> 2] = $311 + 1;
     $325 = 1;
    }
    switch ($308 | 0) {
    case 32:
    case 12:
    case 11:
    case 9:
    case 13:
     {
      if (($325 | 0) == 0) {
       $storemerge_i = 1;
       label = 96;
      } else {
       $_ph_be = $325;
      }
      break;
     }
    default:
     {
      $storemerge_i = 0;
      label = 96;
     }
    }
    if ((label | 0) == 96) {
     label = 0;
     _tok_str_add2($tok_str, $308, $cval);
     $_ph_be = $storemerge_i;
    }
    if (($macro_str21 | 0) == 0) {
     break L88;
    } else {
     $macro_str20_ph73 = $macro_str21;
     $_ph74 = $_ph_be;
    }
   }
  }
 } while (0);
 if (!$187) {
  STACKTOP = sp;
  return;
 }
 _tcc_free($_0_i19);
 STACKTOP = sp;
 return;
}
function _decl0($l, $is_for_loop_init) {
 $l = $l | 0;
 $is_for_loop_init = $is_for_loop_init | 0;
 var $ad_i = 0, $v_i = 0, $btype_i = 0, $type_i = 0, $v = 0, $type = 0, $tmpcast = 0, $btype = 0, $tmpcast23 = 0, $ad = 0, $astr = 0, $func_str = 0, $tsec = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tmpcast15_i = 0, $tmpcast_i = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $phitmp = 0, $_pre45$0 = 0, $_pre45$1 = 0, $36 = 0, $39 = 0, $45 = 0, $57 = 0, $64$1 = 0, $65 = 0, $func_sym_pn_i = 0, $s_0_i30 = 0, $74 = 0, $s_0_i3040 = 0, $75 = 0, $79 = 0, $81 = 0, $82 = 0, $88 = 0, $96 = 0, $97$1 = 0, $107 = 0, $asm_label_0 = 0, $109 = 0, $116 = 0, $128 = 0, $130 = 0, $139 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $156 = 0, $159 = 0, $160 = 0, $168 = 0, $169 = 0, $173 = 0, $174 = 0, $185 = 0, $200 = 0, $202 = 0, $203$1 = 0, $204 = 0, $207 = 0, $i_03_i_i_i_i = 0, $last_sym_02_i_i_i_i = 0, $sym_01_i_i_i_i = 0, $213 = 0, $scevgep4_i_i_i_i = 0, $sym_0_i_i_i = 0, $215 = 0, $220 = 0, $ps_0_i = 0, $231 = 0, $sym_1 = 0, $block_level_0_ph = 0, $247 = 0, $251 = 0, $254 = 0, $257 = 0, $260 = 0, $267 = 0, $272 = 0, $282 = 0, $286 = 0, $293 = 0, $299 = 0, $ps_1_i = 0, $306 = 0, $310 = 0, $311 = 0, $r_0_i = 0, $325 = 0, $r_0 = 0, $326 = 0, $327 = 0, $337 = 0, $352 = 0, $353 = 0, $361 = 0, $367 = 0, $374 = 0, $380 = 0, $ps_1_i_i = 0, $388 = 0, $392 = 0, $393 = 0, $401 = 0, $408 = 0, $s_0_i = 0, $413 = 0, $417 = 0, $424 = 0, $428 = 0, $431 = 0, $439 = 0, $443 = 0, $_0_i2832 = 0, $446 = 0, $450 = 0, $460 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56 | 0;
 $ad_i = sp | 0;
 $v_i = sp + 16 | 0;
 $btype_i = sp + 24 | 0;
 $type_i = sp + 32 | 0;
 $v = sp + 40 | 0;
 $type = sp + 48 | 0;
 $tmpcast = $type;
 $btype = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tmpcast23 = $btype;
 $ad = STACKTOP;
 STACKTOP = STACKTOP + 12 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $astr = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $func_str = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tsec = STACKTOP;
 STACKTOP = STACKTOP + 76 | 0;
 STACKTOP = STACKTOP + 7 & -8;
 $1 = ($is_for_loop_init | 0) == 0;
 $2 = ($l | 0) == 48;
 $3 = ($l | 0) == 50;
 $4 = $btype;
 $5 = $type;
 $6 = $tmpcast + 4 | 0;
 $tmpcast15_i = $btype_i;
 $tmpcast_i = $type_i;
 $7 = $btype_i;
 $8 = $type_i;
 $9 = $tmpcast_i + 4 | 0;
 $10 = $ad;
 $11 = $ad + 8 | 0;
 $12 = $tsec + 16 | 0;
 $13 = $astr + 4 | 0;
 $14 = $func_str | 0;
 $15 = $ad + 4 | 0;
 L1 : while (1) {
  do {
   if ((_parse_btype($tmpcast23, $ad) | 0) == 0) {
    if (!$1) {
     $_0 = 0;
     label = 131;
     break L1;
    }
    $20 = HEAP32[5310] | 0;
    if (($20 | 0) == 59) {
     _next();
     continue L1;
    }
    if ($2 & ($20 - 310 | 0) >>> 0 < 3 >>> 0) {
     _asm_global_instr();
     continue L1;
    }
    if ($3 | ($20 | 0) < 313) {
     $_0 = 0;
     label = 131;
     break L1;
    }
    HEAP32[$4 >> 2] = 0;
   } else {
    $phitmp = HEAP32[$4 >> 2] & 15;
    if (($phitmp | 0) == 5) {
     if ((HEAP32[5310] | 0) != 59) {
      break;
     }
    } else {
     if (!(($phitmp | 0) == 7 & (HEAP32[5310] | 0) == 59)) {
      break;
     }
    }
    _next();
    continue L1;
   }
  } while (0);
  $_pre45$0 = HEAP32[$btype >> 2] | 0;
  $_pre45$1 = HEAP32[$btype + 4 >> 2] | 0;
  while (1) {
   HEAP32[$type >> 2] = $_pre45$0;
   HEAP32[$type + 4 >> 2] = $_pre45$1;
   _type_decl($tmpcast, $ad, $v, 2);
   $36 = HEAP32[$5 >> 2] | 0;
   $39 = $_pre45$0;
   L21 : do {
    if (($36 & 15 | 0) == 6) {
     if (($36 & 256 | 0) != 0 & $3) {
      _tcc_error(17280, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     $45 = HEAP32[$6 >> 2] | 0;
     if ((HEAP32[$45 + 12 >> 2] | 0) != 2) {
      break;
     }
     while (1) {
      switch (HEAP32[5310] | 0) {
      case -1:
      case 312:
      case 311:
      case 310:
      case 123:
      case 59:
      case 44:
       {
        break L21;
        break;
       }
      default:
       {}
      }
      if ((_parse_btype($tmpcast15_i, $ad_i) | 0) == 0) {
       _expect(15376);
      }
      $57 = HEAP32[$7 >> 2] & 15;
      if (($57 | 0) == 5) {
       if ((HEAP32[5310] | 0) != 59) {
        label = 25;
       }
      } else {
       if (!(($57 | 0) == 7 & (HEAP32[5310] | 0) == 59)) {
        label = 25;
       }
      }
      L35 : do {
       if ((label | 0) == 25) {
        while (1) {
         label = 0;
         $64$1 = HEAP32[$btype_i + 4 >> 2] | 0;
         HEAP32[$type_i >> 2] = HEAP32[$btype_i >> 2];
         HEAP32[$type_i + 4 >> 2] = $64$1;
         _type_decl($tmpcast_i, $ad_i, $v_i, 2);
         $65 = HEAP32[$v_i >> 2] | 0;
         $func_sym_pn_i = $45;
         while (1) {
          $s_0_i30 = HEAP32[$func_sym_pn_i + 24 >> 2] | 0;
          if (($s_0_i30 | 0) == 0) {
           label = 28;
           break;
          }
          if ((HEAP32[$s_0_i30 >> 2] & -536870913 | 0) == ($65 | 0)) {
           $s_0_i3040 = $s_0_i30;
           break;
          } else {
           $func_sym_pn_i = $s_0_i30;
          }
         }
         if ((label | 0) == 28) {
          label = 0;
          $74 = _get_tok_str($65, 0) | 0;
          _tcc_error(15208, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $74, tempVarArgs) | 0);
          STACKTOP = tempVarArgs;
          $s_0_i3040 = 0;
         }
         $75 = HEAP32[$8 >> 2] | 0;
         if (($75 & 116608 | 0) == 0) {
          $81 = $75;
         } else {
          $79 = _get_tok_str($65, 0) | 0;
          _tcc_error(15136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $79, tempVarArgs) | 0);
          STACKTOP = tempVarArgs;
          $81 = HEAP32[$8 >> 2] | 0;
         }
         $82 = $81 & -6177;
         HEAP32[$8 >> 2] = $82;
         if (($81 & 15 | 0) == 6) {
          $88 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, $82, -1) | 0;
          HEAP32[$88 + 20 >> 2] = HEAP32[$9 >> 2];
          HEAP32[$88 + 8 >> 2] = 0;
          HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & 116608 | 4;
          HEAP32[$9 >> 2] = $88;
         }
         $96 = $s_0_i3040 + 16 | 0;
         $97$1 = HEAP32[$type_i + 4 >> 2] | 0;
         HEAP32[$96 >> 2] = HEAP32[$type_i >> 2];
         HEAP32[$96 + 4 >> 2] = $97$1;
         if ((HEAP32[5310] | 0) != 44) {
          break L35;
         }
         _next();
         label = 25;
        }
       }
      } while (0);
      _skip(59);
     }
    }
   } while (0);
   do {
    if ((HEAP32[1888] | 0) == 0) {
     $asm_label_0 = 0;
    } else {
     if (((HEAP32[5310] | 0) - 310 | 0) >>> 0 >= 3 >>> 0) {
      $asm_label_0 = 0;
      break;
     }
     _next();
     _parse_asm_str($astr);
     _skip(41);
     $107 = _tcc_strdup(HEAP32[$13 >> 2] | 0) | 0;
     _cstr_free($astr);
     _parse_attribute($ad);
     $asm_label_0 = $107;
    }
   } while (0);
   $109 = HEAP32[$10 >> 2] | 0;
   if (($109 & 1048576 | 0) != 0) {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 65536;
   }
   $116 = HEAP32[5310] | 0;
   if (($116 | 0) == 123) {
    break;
   }
   L61 : do {
    if (($39 & 512 | 0) == 0) {
     $310 = HEAP32[$5 >> 2] | 0;
     $311 = $310 & 15;
     do {
      if (($311 | 0) == 6) {
       HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] = $109;
       $r_0 = 0;
       $325 = HEAP32[5310] | 0;
      } else {
       if (($310 & 32 | 0) != 0) {
        $r_0 = 0;
        $325 = $116;
        break;
       }
       if (($311 | 0) == 2) {
        $r_0_i = 8448;
       } else if (($311 | 0) == 11 | ($311 | 0) == 1) {
        $r_0_i = 4352;
       } else {
        $r_0 = 256;
        $325 = $116;
        break;
       }
       $r_0 = $r_0_i | $310 << 10 & 16384;
       $325 = $116;
      }
     } while (0);
     $326 = ($325 | 0) == 61;
     $327 = $326 & 1;
     do {
      if ($326) {
       if ((HEAP32[$5 >> 2] & 131072 | 0) == 0) {
        break;
       }
       _tcc_error(16472, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
     } while (0);
     L80 : do {
      if (($39 & 128 | 0) == 0) {
       $337 = HEAP32[$5 >> 2] | 0;
       if (($337 & 15 | 0) == 6) {
        break;
       }
       do {
        if (($337 & 32 | 0) != 0) {
         if (!($2 & ((($337 & 256 | 0) == 0 | $326) ^ 1))) {
          break;
         }
         if ((HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0) < 0) {
          break L80;
         }
        }
       } while (0);
       $460 = $337 | $39 & 256;
       HEAP32[$5 >> 2] = $460;
       if ($326) {
        _next();
       }
       _decl_initializer_alloc($tmpcast, $ad, (($460 & 256 | 0) == 0 ? $l : 48) | $r_0, $327, HEAP32[$v >> 2] | 0, $asm_label_0, $l);
       break L61;
      }
     } while (0);
     $352 = HEAP32[$v >> 2] | 0;
     $353 = $352 - 256 | 0;
     do {
      if ($353 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
       $361 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($353 << 2) >> 2] | 0) + 16 >> 2] | 0;
       if (($361 | 0) == 0) {
        label = 107;
        break;
       }
       $392 = $361 + 16 | 0;
       $393 = $361 + 20 | 0;
       if ((HEAP32[$393 >> 2] | 0) == (HEAP32[13907] | 0)) {
        HEAP32[$393 >> 2] = HEAP32[$6 >> 2];
        HEAP32[$361 + 8 >> 2] = $r_0 | 560;
        $401 = $392 | 0;
        HEAP32[$401 >> 2] = HEAP32[$401 >> 2] | 128;
        $s_0_i = $361;
        break;
       }
       if ((_compare_types($392, $tmpcast, 0) | 0) != 0) {
        $s_0_i = $361;
        break;
       }
       $408 = _get_tok_str($352, 0) | 0;
       _tcc_error(18888, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $408, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $s_0_i = $361;
      } else {
       label = 107;
      }
     } while (0);
     if ((label | 0) == 107) {
      label = 0;
      $367 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $352, HEAP32[$5 >> 2] | 0, 0) | 0;
      HEAP32[$367 + 20 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$367 + 8 >> 2] = $r_0 | 560;
      do {
       if (($352 & 536870912 | 0) == 0) {
        $374 = $352 & -1073741825;
        if (($374 | 0) >= 268435456) {
         break;
        }
        $380 = HEAP32[(HEAP32[5316] | 0) + ($374 - 256 << 2) >> 2] | 0;
        $ps_1_i_i = ($352 & 1073741824 | 0) == 0 ? $380 + 16 | 0 : $380 + 12 | 0;
        HEAP32[$367 + 32 >> 2] = HEAP32[$ps_1_i_i >> 2];
        HEAP32[$ps_1_i_i >> 2] = $367;
       }
      } while (0);
      HEAP32[$367 + 4 >> 2] = $asm_label_0;
      $388 = $367 + 16 | 0;
      HEAP32[$388 >> 2] = HEAP32[$388 >> 2] | 128;
      $s_0_i = $367;
     }
     do {
      if ((HEAP32[$5 >> 2] & 65536 | 0) != 0) {
       $413 = $s_0_i + 16 | 0;
       HEAP32[$413 >> 2] = HEAP32[$413 >> 2] | 65536;
       $417 = HEAP32[$s_0_i + 12 >> 2] | 0;
       if (($417 | 0) <= 0) {
        break;
       }
       $424 = (HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) + ($417 << 4) + 12 | 0;
       HEAP8[$424] = HEAP8[$424] & 15 | 32;
      }
     } while (0);
     $428 = HEAP32[$11 >> 2] | 0;
     if (($428 | 0) == 0) {
      break;
     }
     $431 = $428 - 256 | 0;
     do {
      if ($431 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
       $439 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($431 << 2) >> 2] | 0) + 16 >> 2] | 0;
       if (($439 | 0) == 0) {
        $_0_i2832 = 0;
        label = 122;
        break;
       }
       $443 = HEAP32[$439 + 12 >> 2] | 0;
       if (($443 | 0) == 0) {
        $_0_i2832 = $439;
        label = 122;
       } else {
        $446 = $443;
       }
      } else {
       $_0_i2832 = 0;
       label = 122;
      }
     } while (0);
     if ((label | 0) == 122) {
      label = 0;
      _tcc_error(16304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $446 = HEAP32[$_0_i2832 + 12 >> 2] | 0;
     }
     $450 = HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0;
     HEAP32[$12 >> 2] = HEAPU16[$450 + ($446 << 4) + 14 >> 1] | 0;
     _put_extern_sym2($s_0_i, $tsec, HEAP32[$450 + ($446 << 4) + 4 >> 2] | 0, HEAP32[$450 + ($446 << 4) + 8 >> 2] | 0, 0);
    } else {
     $282 = HEAP32[$v >> 2] | 0;
     $286 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $282, HEAP32[$5 >> 2] | 0, 0) | 0;
     HEAP32[$286 + 20 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$286 + 8 >> 2] = $109;
     do {
      if (($282 & 536870912 | 0) == 0) {
       $293 = $282 & -1073741825;
       if (($293 | 0) >= 268435456) {
        break;
       }
       $299 = HEAP32[(HEAP32[5316] | 0) + ($293 - 256 << 2) >> 2] | 0;
       $ps_1_i = ($282 & 1073741824 | 0) == 0 ? $299 + 16 | 0 : $299 + 12 | 0;
       HEAP32[$286 + 32 >> 2] = HEAP32[$ps_1_i >> 2];
       HEAP32[$ps_1_i >> 2] = $286;
      }
     } while (0);
     $306 = $286 + 16 | 0;
     HEAP32[$306 >> 2] = HEAP32[$306 >> 2] | 512;
    }
   } while (0);
   if ((HEAP32[5310] | 0) != 44) {
    label = 128;
    break;
   }
   _next();
   HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -249;
  }
  if ((label | 0) == 128) {
   label = 0;
   if (!$1) {
    $_0 = 1;
    label = 131;
    break;
   }
   _skip(59);
   continue;
  }
  if ($3) {
   _tcc_error(17104, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  if ((HEAP32[$5 >> 2] & 15 | 0) != 6) {
   _expect(16976);
  }
  $128 = HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] | 0;
  if (($128 | 0) != 0) {
   $130 = $128;
   do {
    if ((HEAP32[$130 >> 2] & -536870913 | 0) == 0) {
     _expect(18448);
    }
    $130 = HEAP32[$130 + 24 >> 2] | 0;
   } while (($130 | 0) != 0);
  }
  $139 = HEAP32[$5 >> 2] | 0;
  if (($139 & 1152 | 0) == 1152) {
   $144 = $139 & -385 | 256;
   HEAP32[$5 >> 2] = $144;
   $146 = $144;
  } else {
   $146 = $139;
  }
  $147 = HEAP32[$v >> 2] | 0;
  $148 = $147 - 256 | 0;
  do {
   if ($148 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
    $156 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($148 << 2) >> 2] | 0) + 16 >> 2] | 0;
    if (($156 | 0) == 0) {
     label = 65;
     break;
    }
    $159 = $156 + 16 | 0;
    $160 = $159 | 0;
    if ((HEAP32[$160 >> 2] & 15 | 0) == 6) {
     $168 = HEAP32[(HEAP32[$156 + 20 >> 2] | 0) + 8 >> 2] | 0;
     $169 = $168 & 7;
     do {
      if (($169 | 0) != 0) {
       $173 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
       $174 = HEAP32[$173 >> 2] | 0;
       if (($174 & 7 | 0) != 0) {
        break;
       }
       HEAP32[$173 >> 2] = $174 & -8 | $169;
      }
     } while (0);
     if (($168 & 512 | 0) != 0) {
      $185 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
      HEAP32[$185 >> 2] = HEAP32[$185 >> 2] | 512;
     }
     if ((HEAP32[$160 >> 2] & 256 | 0) != 0) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -385 | 256;
     }
     if ((_compare_types($159, $tmpcast, 0) | 0) == 0) {
      label = 63;
     }
    } else {
     label = 63;
    }
    if ((label | 0) == 63) {
     label = 0;
     $200 = _get_tok_str($147, 0) | 0;
     _tcc_error(18888, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $200, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    $202 = $159;
    $203$1 = HEAP32[$type + 4 >> 2] | 0;
    HEAP32[$202 >> 2] = HEAP32[$type >> 2];
    HEAP32[$202 + 4 >> 2] = $203$1;
    $sym_1 = $156;
   } else {
    label = 65;
   }
  } while (0);
  if ((label | 0) == 65) {
   label = 0;
   $204 = HEAP32[5322] | 0;
   if (($204 | 0) == 0) {
    $207 = _tcc_malloc(8172) | 0;
    _dynarray_add(21280, 21360, $207);
    $sym_01_i_i_i_i = $207;
    $last_sym_02_i_i_i_i = HEAP32[5322] | 0;
    $i_03_i_i_i_i = 0;
    while (1) {
     HEAP32[$sym_01_i_i_i_i + 24 >> 2] = $last_sym_02_i_i_i_i;
     $213 = $i_03_i_i_i_i + 1 | 0;
     if ($213 >>> 0 < 227 >>> 0) {
      $last_sym_02_i_i_i_i = $sym_01_i_i_i_i;
      $sym_01_i_i_i_i = $sym_01_i_i_i_i + 36 | 0;
      $i_03_i_i_i_i = $213;
     } else {
      break;
     }
    }
    $scevgep4_i_i_i_i = $207 + 8136 | 0;
    HEAP32[5322] = $scevgep4_i_i_i_i;
    $sym_0_i_i_i = $scevgep4_i_i_i_i;
   } else {
    $sym_0_i_i_i = $204;
   }
   $215 = $sym_0_i_i_i + 24 | 0;
   HEAP32[5322] = HEAP32[$215 >> 2];
   HEAP32[$sym_0_i_i_i + 4 >> 2] = 0;
   HEAP32[$sym_0_i_i_i >> 2] = $147;
   HEAP32[$sym_0_i_i_i + 16 >> 2] = $146;
   $220 = $sym_0_i_i_i + 20 | 0;
   HEAP32[$220 >> 2] = 0;
   HEAP32[$sym_0_i_i_i + 12 >> 2] = 0;
   HEAP32[$215 >> 2] = 0;
   HEAP32[$sym_0_i_i_i + 28 >> 2] = HEAP32[13628];
   HEAP32[13628] = $sym_0_i_i_i;
   if (($147 | 0) < 268435456) {
    $ps_0_i = (HEAP32[(HEAP32[5316] | 0) + ($148 << 2) >> 2] | 0) + 16 | 0;
    while (1) {
     $231 = HEAP32[$ps_0_i >> 2] | 0;
     if (($231 | 0) == 0) {
      break;
     } else {
      $ps_0_i = $231 + 32 | 0;
     }
    }
    HEAP32[$sym_0_i_i_i + 32 >> 2] = 0;
    HEAP32[$ps_0_i >> 2] = $sym_0_i_i_i;
   }
   HEAP32[$220 >> 2] = HEAP32[$6 >> 2];
   $sym_1 = $sym_0_i_i_i;
  }
  if ((HEAP32[$5 >> 2] & 1280 | 0) != 1280) {
   $272 = HEAP32[$15 >> 2] | 0;
   HEAP32[13918] = $272;
   if (($272 | 0) == 0) {
    HEAP32[13918] = HEAP32[5312];
   }
   HEAP32[$sym_1 + 8 >> 2] = 560;
   _gen_function($sym_1);
   continue;
  }
  _tok_str_new($func_str);
  $block_level_0_ph = 0;
  while (1) {
   while (1) {
    if ((HEAP32[5310] | 0) == -1) {
     _tcc_error(16784, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    _tok_str_add_tok($func_str);
    $247 = HEAP32[5310] | 0;
    _next();
    if (($247 | 0) == 123) {
     label = 80;
     break;
    } else if (($247 | 0) == 125) {
     label = 81;
     break;
    }
   }
   if ((label | 0) == 80) {
    label = 0;
    $block_level_0_ph = $block_level_0_ph + 1 | 0;
    continue;
   } else if ((label | 0) == 81) {
    label = 0;
    $251 = $block_level_0_ph - 1 | 0;
    if (($251 | 0) == 0) {
     break;
    } else {
     $block_level_0_ph = $251;
     continue;
    }
   }
  }
  _tok_str_add($func_str, -1);
  _tok_str_add($func_str, 0);
  $254 = HEAP32[13912] | 0;
  $257 = ($254 | 0) == 0 ? 55744 : $254 + 32 | 0;
  $260 = _tcc_malloc((_strlen($257 | 0) | 0) + 12 | 0) | 0;
  _strcpy($260 + 8 | 0, $257 | 0) | 0;
  HEAP32[$260 + 4 >> 2] = $sym_1;
  HEAP32[$260 >> 2] = HEAP32[$14 >> 2];
  $267 = HEAP32[5314] | 0;
  _dynarray_add($267 + 2820 | 0, $267 + 2824 | 0, $260);
 }
 if ((label | 0) == 131) {
  STACKTOP = sp;
  return $_0 | 0;
 }
 return 0;
}
function _asm_opcode($s1, $opcode) {
 $s1 = $s1 | 0;
 $opcode = $opcode | 0;
 var $ops = 0, $op_type = 0, $seg_prefix_0 = 0, $nb_ops_0 = 0, $pop_0 = 0, $6 = 0, $11 = 0, $14 = 0, $25 = 0, $31 = 0, $seg_prefix_1 = 0, $32 = 0, $seg_prefix_2 = 0, $nb_ops_1 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $indvars = 0, $44 = 0, $48 = 0, $s_1 = 0, $i_076 = 0, $109 = 0, $110 = 0, $v_0 = 0, $119 = 0, $125 = 0, $s_2 = 0, $126 = 0, $127 = 0, $132 = 0, $pa_084 = 0, $s_336 = 0, $opcode_off18 = 0, $137 = 0, $144 = 0, $146 = 0, $pa_083 = 0, $s_335 = 0, $i_170 = 0, $150 = 0, $s_5 = 0, $163 = 0, $166 = 0, $s_6 = 0, $s_639 = 0, $172 = 0, $173 = 0, $_phi_trans_insert_pre_phi = 0, $177 = 0, $s_640 = 0, $179 = 0, $180 = 0, $s_638 = 0, $181 = 0, $189 = 0, $190 = 0, $191 = 0, $198 = 0, $199 = 0, $220 = 0, $224 = 0, $nb_ops_2 = 0, $v_3 = 0, $244 = 0, $i_266 = 0, $254 = 0, $v_4 = 0, $v_5 = 0, $v_6 = 0, $v_7 = 0, $287 = 0, $297 = 0, $305 = 0, $is_short_jmp_0 = 0, $v_8 = 0, $317 = 0, $321 = 0, $322 = 0, $328 = 0, $reg_0 = 0, $353 = 0, $i_361 = 0, $360 = 0, $i_456 = 0, $367 = 0, $i_5 = 0, $i_652 = 0, $379 = 0, $i_5120 = 0, $reg_1 = 0, $393 = 0, $394 = 0, $404 = 0, $409 = 0, $411 = 0, $_pre_phi_i = 0, $mod_0_i = 0, $sib_reg1_0_i = 0, $426 = 0, $__i = 0, $434 = 0, $453 = 0, $458 = 0, $_32 = 0, $460 = 0, $463 = 0, $i_746 = 0, $477 = 0, $_not = 0, $_mux = 0, $506 = 0, $512 = 0, $532 = 0, $541 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $ops = sp | 0;
 $op_type = sp + 48 | 0;
 if (($opcode - 899 | 0) >>> 0 < 11 >>> 0) {
  _unget_tok(59);
 }
 $pop_0 = $ops | 0;
 $nb_ops_0 = 0;
 $seg_prefix_0 = 0;
 while (1) {
  $6 = HEAP32[5310] | 0;
  if (($6 | 0) == 59 | ($6 | 0) == 10) {
   $nb_ops_1 = $nb_ops_0;
   $seg_prefix_2 = $seg_prefix_0;
   break;
  }
  if (($nb_ops_0 | 0) > 2) {
   _tcc_error(12616, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  _parse_operand($s1, $pop_0);
  $11 = HEAP32[5310] | 0;
  if (($11 | 0) == 58) {
   $14 = $pop_0 | 0;
   if ((HEAP32[$14 >> 2] | 0) != 256 | ($seg_prefix_0 | 0) != 0) {
    _tcc_error(18160, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $25 = HEAPU8[7312 + (HEAP8[$pop_0 + 4 | 0] | 0) | 0] | 0;
   _next();
   _parse_operand($s1, $pop_0);
   if ((HEAP32[$14 >> 2] & 1073741824 | 0) == 0) {
    _tcc_error(16592, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $seg_prefix_1 = $25;
   $31 = HEAP32[5310] | 0;
  } else {
   $seg_prefix_1 = $seg_prefix_0;
   $31 = $11;
  }
  $32 = $nb_ops_0 + 1 | 0;
  if (($31 | 0) != 44) {
   $nb_ops_1 = $32;
   $seg_prefix_2 = $seg_prefix_1;
   break;
  }
  _next();
  $pop_0 = $pop_0 + 16 | 0;
  $nb_ops_0 = $32;
  $seg_prefix_0 = $seg_prefix_1;
 }
 $37 = $opcode + 1 | 0;
 $38 = ($nb_ops_1 | 0) > 0;
 $41 = 7648;
 $40 = 813;
 L21 : while (1) {
  $indvars = $41;
  $44 = HEAPU16[$41 + 4 >> 1] | 0;
  do {
   if (($44 & 2048 | 0) == 0) {
    if (($44 & 512 | 0) != 0) {
     if (!(($40 | 0) <= ($opcode | 0) & ($40 + 32 | 0) > ($opcode | 0))) {
      $s_2 = 0;
      break;
     }
     $s_1 = ($opcode - $40 | 0) % 4 | 0;
     label = 33;
     break;
    }
    if (($44 & 128 | 0) != 0) {
     if (!(($40 | 0) <= ($opcode | 0) & ($40 + 28 | 0) > ($opcode | 0))) {
      $s_2 = 0;
      break;
     }
     $s_1 = ($opcode - $40 | 0) % 4 | 0;
     label = 33;
     break;
    }
    if (($44 & 64 | 0) != 0) {
     if (($40 | 0) <= ($opcode | 0) & ($40 + 30 | 0) > ($opcode | 0)) {
      $s_1 = 0;
      label = 33;
      break;
     } else {
      $s_2 = 0;
      break;
     }
    }
    if (($44 & 2 | 0) != 0) {
     if (!(($40 | 0) <= ($opcode | 0) & ($40 + 4 | 0) > ($opcode | 0))) {
      $s_2 = 0;
      break;
     }
     $s_1 = $opcode - $40 | 0;
     label = 33;
     break;
    }
    if (($44 & 4 | 0) == 0) {
     if (($40 | 0) == ($opcode | 0)) {
      $s_1 = 0;
      label = 33;
      break;
     } else {
      $s_2 = 0;
      break;
     }
    }
    if (!(($40 | 0) <= ($opcode | 0) & ($40 + 3 | 0) > ($opcode | 0))) {
     $s_2 = 0;
     break;
    }
    $s_1 = $37 - $40 | 0;
    label = 33;
   } else {
    $48 = $opcode - $40 | 0;
    if ($48 >>> 0 < 48 >>> 0 & (($48 | 0) % 6 | 0 | 0) == 0) {
     $s_1 = 0;
     label = 33;
    } else {
     $s_2 = 0;
    }
   }
  } while (0);
  L45 : do {
   if ((label | 0) == 33) {
    label = 0;
    if ((HEAPU8[$41 + 6 | 0] | 0) != ($nb_ops_1 | 0)) {
     $s_2 = $s_1;
     break;
    }
    if ($38) {
     $i_076 = 0;
    } else {
     label = 43;
     break L21;
    }
    while (1) {
     $109 = HEAPU8[$indvars + 7 + $i_076 | 0] | 0;
     $110 = $109 & 31;
     if (($110 | 0) == 24) {
      $v_0 = 12288;
     } else if (($110 | 0) == 22) {
      $v_0 = 7;
     } else if (($110 | 0) == 23) {
      $v_0 = 6;
     } else if (($110 | 0) == 21) {
      $v_0 = 13312;
     } else {
      $v_0 = 1 << $110;
     }
     $119 = $v_0 | $109 << 23 & 1073741824;
     HEAP32[$op_type + ($i_076 << 2) >> 2] = $119;
     $125 = $i_076 + 1 | 0;
     if ((HEAP32[$ops + ($i_076 << 4) >> 2] & $119 | 0) == 0) {
      $s_2 = $s_1;
      break L45;
     }
     if (($125 | 0) < ($nb_ops_1 | 0)) {
      $i_076 = $125;
     } else {
      label = 43;
      break L21;
     }
    }
   }
  } while (0);
  $126 = $41 + 10 | 0;
  $127 = HEAP16[$126 >> 1] | 0;
  if ($127 << 16 >> 16 == 0) {
   label = 44;
   break;
  } else {
   $41 = $126;
   $40 = $127 & 65535;
  }
 }
 if ((label | 0) == 43) {
  if ((HEAP16[$41 >> 1] | 0) == 0) {
   $s_336 = $s_1;
   $pa_084 = $indvars;
   $132 = $41;
   label = 45;
  } else {
   $s_335 = $s_1;
   $pa_083 = $indvars;
   $146 = $41;
  }
 } else if ((label | 0) == 44) {
  $s_336 = $s_2;
  $pa_084 = $126;
  $132 = $126;
  label = 45;
 }
 do {
  if ((label | 0) == 45) {
   $opcode_off18 = $opcode - 861 | 0;
   if ($opcode_off18 >>> 0 >= 95 >>> 0) {
    $144 = _get_tok_str($opcode, 0) | 0;
    _tcc_error(15264, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $144, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $s_335 = $s_336;
    $pa_083 = $pa_084;
    $146 = $132;
    break;
   }
   $137 = HEAPU16[7352 + ($opcode_off18 << 1) >> 1] | 0;
   if (($137 & 65280 | 0) != 0) {
    _g($137 >>> 8);
   }
   _g($137);
   STACKTOP = sp;
   return;
  }
 } while (0);
 do {
  if (($s_335 | 0) == 3) {
   if ($38) {
    $i_170 = 0;
    do {
     $150 = HEAP32[$ops + ($i_170 << 4) >> 2] & 7;
     do {
      if (($150 | 0) == 0) {
       $s_5 = 3;
      } else {
       if ((HEAP32[$op_type + ($i_170 << 2) >> 2] & 196608 | 0) != 0) {
        $s_5 = 3;
        break;
       }
       $s_5 = HEAPU8[7320 + $150 | 0] | 0;
      }
     } while (0);
     $i_170 = $i_170 + 1 | 0;
     $163 = ($s_5 | 0) == 3;
    } while ($163 & ($i_170 | 0) < ($nb_ops_1 | 0));
    if (!$163) {
     $s_6 = $s_5;
     label = 62;
     break;
    }
   }
   if (($opcode | 0) == 615) {
    $166 = HEAP32[$ops >> 2] | 0;
    label = 60;
   } else if (($opcode | 0) == 618) {
    $166 = HEAP32[$ops >> 2] | 0;
    label = 60;
   }
   if ((label | 0) == 60) {
    if (($166 & 10496 | 0) != 0) {
     $s_639 = 2;
     label = 64;
     break;
    }
   }
   _tcc_error(14320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $s_6 = 3;
   label = 62;
  } else {
   $s_6 = $s_335;
   label = 62;
  }
 } while (0);
 do {
  if ((label | 0) == 62) {
   if (($s_6 | 0) != 1) {
    $s_639 = $s_6;
    label = 64;
    break;
   }
   $s_640 = 1;
   $177 = 1;
   $_phi_trans_insert_pre_phi = $pa_083 + 4 | 0;
   label = 65;
  }
 } while (0);
 if ((label | 0) == 64) {
  $172 = $pa_083 + 4 | 0;
  $173 = HEAP16[$172 >> 1] | 0;
  if (($173 & 256) == 0) {
   $s_638 = $s_639;
   $180 = 0;
   $179 = $173;
  } else {
   $s_640 = $s_639;
   $177 = 0;
   $_phi_trans_insert_pre_phi = $172;
   label = 65;
  }
 }
 if ((label | 0) == 65) {
  _g(102);
  $s_638 = $s_640;
  $180 = $177;
  $179 = HEAP16[$_phi_trans_insert_pre_phi >> 1] | 0;
 }
 $181 = $pa_083 + 4 | 0;
 if (($179 & 32) != 0) {
  _g(155);
 }
 if (($seg_prefix_2 | 0) != 0) {
  _g($seg_prefix_2);
 }
 $189 = $pa_083 + 2 | 0;
 $190 = HEAP16[$189 >> 1] | 0;
 $191 = $190 & 65535;
 L102 : do {
  if (($190 & -3) << 16 >> 16 == 105 & ($nb_ops_1 | 0) == 2) {
   $198 = $ops + 32 | 0;
   $199 = $ops + 16 | 0;
   HEAP32[$198 >> 2] = HEAP32[$199 >> 2];
   HEAP32[$198 + 4 >> 2] = HEAP32[$199 + 4 >> 2];
   HEAP32[$198 + 8 >> 2] = HEAP32[$199 + 8 >> 2];
   HEAP32[$198 + 12 >> 2] = HEAP32[$199 + 12 >> 2];
   HEAP32[$op_type + 8 >> 2] = HEAP32[$op_type + 4 >> 2];
   $v_3 = $191;
   $nb_ops_2 = 3;
  } else {
   do {
    if ($190 << 16 >> 16 == 205) {
     if ((HEAP32[$ops + 8 >> 2] | 0) != 3) {
      break;
     }
     if ((HEAP32[$ops + 12 >> 2] | 0) != 0) {
      label = 76;
      break;
     }
     $v_3 = $191 - 1 | 0;
     $nb_ops_2 = 0;
     break L102;
    } else {
     label = 76;
    }
   } while (0);
   do {
    if ((label | 0) == 76) {
     if (($190 & -2) << 16 >> 16 == 6) {
      $220 = HEAP8[$ops + 4 | 0] | 0;
      $224 = ($220 << 24 >> 24 << 3) + $191 | 0;
      $v_3 = $220 << 24 >> 24 > 3 ? $224 + 3962 | 0 : $224;
      $nb_ops_2 = 0;
      break L102;
     }
     if (($190 & 65535) >>> 0 >= 6 >>> 0) {
      break;
     }
     $v_3 = ((($opcode - 507 | 0) / 4 | 0) << 3) + $191 | 0;
     $nb_ops_2 = $nb_ops_1;
     break L102;
    }
   } while (0);
   if ((HEAP16[$181 >> 1] & 2064) != 2048) {
    $v_3 = $191;
    $nb_ops_2 = $nb_ops_1;
    break;
   }
   $v_3 = ((($opcode - (HEAPU16[$146 >> 1] | 0) | 0) / 6 | 0) << 3) + $191 | 0;
   $nb_ops_2 = $nb_ops_1;
  }
 } while (0);
 $244 = HEAP16[$181 >> 1] | 0;
 if (($244 & 8) == 0) {
  $v_5 = $v_3;
 } else {
  L120 : do {
   if (($nb_ops_2 | 0) > 0) {
    $i_266 = 0;
    while (1) {
     $254 = $i_266 + 1 | 0;
     if ((HEAP32[$op_type + ($i_266 << 2) >> 2] & 519 | 0) != 0) {
      break;
     }
     if (($254 | 0) < ($nb_ops_2 | 0)) {
      $i_266 = $254;
     } else {
      $v_4 = $v_3;
      break L120;
     }
    }
    $v_4 = (HEAP8[$ops + ($i_266 << 4) + 4 | 0] | 0) + $v_3 | 0;
   } else {
    $v_4 = $v_3;
   }
  } while (0);
  $v_5 = (HEAP16[$189 >> 1] | 0) == 176 & ($s_638 | 0) > 0 ? $v_4 + 7 | 0 : $v_4;
 }
 if (($244 & 2) == 0) {
  $v_6 = $v_5;
 } else {
  $v_6 = $v_5 + (($s_638 | 0) > 0) | 0;
 }
 if (($244 & 64) == 0) {
  $v_7 = $v_6;
 } else {
  $v_7 = (HEAPU8[112 + ($opcode - (HEAPU16[$146 >> 1] | 0)) | 0] | 0) + $v_6 | 0;
 }
 L133 : do {
  if (($244 & 1024) == 0) {
   $v_8 = $v_7;
   $is_short_jmp_0 = 0;
  } else {
   $287 = HEAP32[$ops + 12 >> 2] | 0;
   do {
    if (($287 | 0) != 0) {
     if ((HEAP32[$287 + 8 >> 2] | 0) != (HEAP32[(HEAP32[13918] | 0) + 16 >> 2] | 0)) {
      break;
     }
     $297 = $ops + 8 | 0;
     $305 = (HEAP32[$297 >> 2] | 0) - 2 + (HEAP32[$287 + 24 >> 2] | 0) - (HEAP32[5434] | 0) | 0;
     if (($305 | 0) != ($305 << 24 >> 24 | 0)) {
      break;
     }
     HEAP32[$297 >> 2] = $305;
     $v_8 = $v_7;
     $is_short_jmp_0 = 1;
     break L133;
    }
   } while (0);
   if (($244 & 1) == 0) {
    _tcc_error(13288, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $v_8 = $v_7;
    $is_short_jmp_0 = 0;
    break;
   } else {
    $v_8 = ($v_7 | 0) == 235 ? 233 : $v_7 + 3856 | 0;
    $is_short_jmp_0 = 0;
    break;
   }
  }
 } while (0);
 $317 = $v_8 >> 8;
 if (($317 | 0) != 0) {
  _g($317);
 }
 _g($v_8);
 $321 = HEAP16[$181 >> 1] | 0;
 $322 = $321 & 65535;
 do {
  if (($322 & 128 | 0) == 0) {
   if (($322 & 512 | 0) != 0) {
    $reg_0 = ($opcode - (HEAPU16[$146 >> 1] | 0) | 0) / 4 | 0;
    break;
   }
   if (($322 & 2048 | 0) == 0) {
    $reg_0 = $322 >>> 13;
    break;
   } else {
    $reg_0 = ($opcode - (HEAPU16[$146 >> 1] | 0) | 0) / 6 | 0;
    break;
   }
  } else {
   $328 = $opcode - (HEAPU16[$146 >> 1] | 0) | 0;
   $reg_0 = ($328 & -4 | 0) == 24 ? 7 : ($328 | 0) / 4 | 0;
  }
 } while (0);
 L157 : do {
  if (($321 & 16) != 0) {
   $353 = ($nb_ops_2 | 0) > 0;
   L159 : do {
    if ($353) {
     $i_361 = 0;
     while (1) {
      $360 = $i_361 + 1 | 0;
      if ((HEAP32[$op_type + ($i_361 << 2) >> 2] & 1073741824 | 0) != 0) {
       $i_5 = $i_361;
       break;
      }
      if (($360 | 0) < ($nb_ops_2 | 0)) {
       $i_361 = $360;
      } else {
       label = 112;
       break;
      }
     }
     L163 : do {
      if ((label | 0) == 112) {
       if ($353) {
        $i_456 = 0;
       } else {
        $reg_1 = $reg_0;
        $i_5120 = 0;
        break L159;
       }
       while (1) {
        $367 = $i_456 + 1 | 0;
        if ((HEAP32[$op_type + ($i_456 << 2) >> 2] & 524319 | 0) != 0) {
         $i_5 = $i_456;
         break L163;
        }
        if (($367 | 0) < ($nb_ops_2 | 0)) {
         $i_456 = $367;
        } else {
         $i_5 = $367;
         break;
        }
       }
      }
     } while (0);
     if ($353) {
      $i_652 = 0;
     } else {
      $reg_1 = $reg_0;
      $i_5120 = $i_5;
      break;
     }
     while (1) {
      if (($i_652 | 0) != ($i_5 | 0)) {
       if ((HEAP32[$op_type + ($i_652 << 2) >> 2] & 511 | 0) != 0) {
        break;
       }
      }
      $379 = $i_652 + 1 | 0;
      if (($379 | 0) < ($nb_ops_2 | 0)) {
       $i_652 = $379;
      } else {
       $reg_1 = $reg_0;
       $i_5120 = $i_5;
       break L159;
      }
     }
     $reg_1 = HEAP8[$ops + ($i_652 << 4) + 4 | 0] | 0;
     $i_5120 = $i_5;
    } else {
     $reg_1 = $reg_0;
     $i_5120 = 0;
    }
   } while (0);
   if ((HEAP32[$ops + ($i_5120 << 4) >> 2] & 31 | 0) != 0) {
    _g(($reg_1 << 3) + 192 + (HEAP8[$ops + ($i_5120 << 4) + 4 | 0] | 0) | 0);
    break;
   }
   $393 = $ops + ($i_5120 << 4) + 4 | 0;
   $394 = HEAP8[$393] | 0;
   do {
    if ($394 << 24 >> 24 == -1) {
     if ((HEAP8[$ops + ($i_5120 << 4) + 5 | 0] | 0) != -1) {
      $sib_reg1_0_i = 5;
      $mod_0_i = 0;
      $_pre_phi_i = -1;
      break;
     }
     _g($reg_1 << 3 | 5);
     $404 = HEAP32[$ops + ($i_5120 << 4) + 12 >> 2] | 0;
     _gen_addr32(($404 | 0) != 0 ? 512 : 0, $404, HEAP32[$ops + ($i_5120 << 4) + 8 >> 2] | 0);
     break L157;
    } else {
     $409 = $394 << 24 >> 24;
     $411 = HEAP32[$ops + ($i_5120 << 4) + 8 >> 2] | 0;
     if (($411 | 0) == 0) {
      if (!((HEAP32[$ops + ($i_5120 << 4) + 12 >> 2] | 0) != 0 | $394 << 24 >> 24 == 5)) {
       $sib_reg1_0_i = $409;
       $mod_0_i = 0;
       $_pre_phi_i = $409;
       break;
      }
     }
     if (($411 | 0) == ($411 << 24 >> 24 | 0)) {
      if ((HEAP32[$ops + ($i_5120 << 4) + 12 >> 2] | 0) == 0) {
       $sib_reg1_0_i = $409;
       $mod_0_i = 64;
       $_pre_phi_i = $409;
       break;
      }
     }
     $sib_reg1_0_i = $409;
     $mod_0_i = 128;
     $_pre_phi_i = $409;
    }
   } while (0);
   $426 = $ops + ($i_5120 << 4) + 5 | 0;
   $__i = (HEAP8[$426] | 0) != -1 ? 4 : $_pre_phi_i;
   _g($mod_0_i + ($reg_1 << 3) + $__i | 0);
   if (($__i | 0) == 4) {
    $434 = HEAP8[$426] | 0;
    _g(($434 << 24 >> 24 == -1 ? 32 : $434 << 24 >> 24 << 3) + $sib_reg1_0_i + (HEAPU8[$ops + ($i_5120 << 4) + 6 | 0] << 6) | 0);
   }
   if (($mod_0_i | 0) == 64) {
    _g(HEAP32[$ops + ($i_5120 << 4) + 8 >> 2] | 0);
    break;
   } else if (($mod_0_i | 0) != 128) {
    if ((HEAP8[$393] | 0) != -1) {
     break;
    }
   }
   $453 = HEAP32[$ops + ($i_5120 << 4) + 12 >> 2] | 0;
   _gen_addr32(($453 | 0) != 0 ? 512 : 0, $453, HEAP32[$ops + ($i_5120 << 4) + 8 >> 2] | 0);
  }
 } while (0);
 $458 = HEAP16[$189 >> 1] | 0;
 if (($458 << 16 >> 16 | 0) == 154 | ($458 << 16 >> 16 | 0) == 234) {
  $463 = HEAP32[$ops + 28 >> 2] | 0;
  _gen_addr32(($463 | 0) != 0 ? 512 : 0, $463, HEAP32[$ops + 24 >> 2] | 0);
  if ((HEAP32[$ops + 12 >> 2] | 0) != 0) {
   _tcc_error(12264, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  _gen_le16(HEAP32[$ops + 8 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (($nb_ops_2 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $_32 = $180 ? 4096 : 8192;
 $460 = ($is_short_jmp_0 | 0) == 0;
 $i_746 = 0;
 do {
  $477 = HEAP32[$op_type + ($i_746 << 2) >> 2] | 0;
  L210 : do {
   if (($477 & 277504 | 0) != 0) {
    $_not = ($477 | 1024 | 0) != 13312;
    $_mux = $_not ? $477 : $_32;
    do {
     if (($_not | ($s_638 | 0) != 0) & ($_mux & 3072 | 0) == 0) {
      if (($_mux & 4096 | 0) != 0) {
       if ((HEAP32[$ops + ($i_746 << 4) + 12 >> 2] | 0) != 0) {
        break;
       }
       _gen_le16(HEAP32[$ops + ($i_746 << 4) + 8 >> 2] | 0);
       break L210;
      }
      if ((HEAP16[$181 >> 1] & 1025) == 0) {
       $541 = HEAP32[$ops + ($i_746 << 4) + 12 >> 2] | 0;
       _gen_addr32(($541 | 0) != 0 ? 512 : 0, $541, HEAP32[$ops + ($i_746 << 4) + 8 >> 2] | 0);
       break L210;
      }
      $506 = $ops + ($i_746 << 4) + 8 | 0;
      if (!$460) {
       _g(HEAP32[$506 >> 2] | 0);
       break L210;
      }
      $512 = HEAP32[$ops + ($i_746 << 4) + 12 >> 2] | 0;
      do {
       if (($512 | 0) != 0) {
        if ((HEAP32[$512 + 8 >> 2] | 0) == (HEAP32[(HEAP32[13918] | 0) + 16 >> 2] | 0)) {
         _gen_le32((HEAP32[$506 >> 2] | 0) - 4 + (HEAP32[$512 + 24 >> 2] | 0) - (HEAP32[5434] | 0) | 0);
         break L210;
        }
        $532 = $512 + 16 | 0;
        if ((HEAP32[$532 >> 2] | 0) != 3) {
         break;
        }
        HEAP32[$532 >> 2] = 6;
        HEAP32[$512 + 20 >> 2] = 0;
       }
      } while (0);
      _gen_addrpc32(512, $512, HEAP32[$506 >> 2] | 0);
      break L210;
     } else {
      if ((HEAP32[$ops + ($i_746 << 4) + 12 >> 2] | 0) != 0) {
       break;
      }
      _g(HEAP32[$ops + ($i_746 << 4) + 8 >> 2] | 0);
      break L210;
     }
    } while (0);
    _tcc_error(12264, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
  } while (0);
  $i_746 = $i_746 + 1 | 0;
 } while (($i_746 | 0) < ($nb_ops_2 | 0));
 STACKTOP = sp;
 return;
}
function _gv_dup() {
 var $tmp_i19 = 0, $tmp_i14 = 0, $tmp_i13 = 0, $tmp_i9 = 0, $tmp_i5 = 0, $tmp_i1 = 0, $tmp_i = 0, $sv = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $28 = 0, $29 = 0, $34 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $i_01_i = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $i_01_i2 = 0, $67 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $80 = 0, $83 = 0, $96 = 0, $97 = 0, $98 = 0, $100 = 0, $101 = 0, $i_01_i6 = 0, $103 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $i_01_i10 = 0, $116 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $129 = 0, $136 = 0, $137 = 0, $139 = 0, $142 = 0, $143 = 0, $149 = 0, $152 = 0, $165 = 0, $166 = 0, $167 = 0, $172 = 0, $179 = 0, $180 = 0, $182 = 0, $185 = 0, $switch = 0, $_22 = 0, $187 = 0, $188 = 0, $193 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $tmp_i19 = sp | 0;
 $tmp_i14 = sp + 40 | 0;
 $tmp_i13 = sp + 80 | 0;
 $tmp_i9 = sp + 120 | 0;
 $tmp_i5 = sp + 160 | 0;
 $tmp_i1 = sp + 200 | 0;
 $tmp_i = sp + 240 | 0;
 $sv = sp + 280 | 0;
 $3 = HEAP32[HEAP32[5024] >> 2] | 0;
 $4 = $3 & 15;
 if (($4 | 0) != 12) {
  $switch = ($4 - 8 | 0) >>> 0 < 3 >>> 0;
  HEAP32[$sv >> 2] = $switch ? $3 : 0;
  $_22 = $switch ? 2 : 1;
  $187 = _gv($_22) | 0;
  $188 = _get_reg($_22) | 0;
  HEAP16[$sv + 8 >> 1] = $187;
  HEAP32[$sv + 16 >> 2] = 0;
  _load($188, $sv);
  $193 = HEAP32[5024] | 0;
  if ($193 >>> 0 < 66472 >>> 0) {
   $196 = $193;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $196 = HEAP32[5024] | 0;
  }
  $197 = $196 + 40 | 0;
  HEAP32[5024] = $197;
  $198 = $197;
  $199 = $193;
  HEAP32[$198 >> 2] = HEAP32[$199 >> 2];
  HEAP32[$198 + 4 >> 2] = HEAP32[$199 + 4 >> 2];
  HEAP32[$198 + 8 >> 2] = HEAP32[$199 + 8 >> 2];
  HEAP32[$198 + 12 >> 2] = HEAP32[$199 + 12 >> 2];
  HEAP32[$198 + 16 >> 2] = HEAP32[$199 + 16 >> 2];
  HEAP32[$198 + 20 >> 2] = HEAP32[$199 + 20 >> 2];
  HEAP32[$198 + 24 >> 2] = HEAP32[$199 + 24 >> 2];
  HEAP32[$198 + 28 >> 2] = HEAP32[$199 + 28 >> 2];
  HEAP32[$198 + 32 >> 2] = HEAP32[$199 + 32 >> 2];
  HEAP32[$198 + 36 >> 2] = HEAP32[$199 + 36 >> 2];
  if (($187 | 0) == ($188 | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $188;
  STACKTOP = sp;
  return;
 }
 $7 = $3 & 16;
 _gv(1) | 0;
 $9 = HEAP32[5024] | 0;
 if ($9 >>> 0 < 66472 >>> 0) {
  $12 = $9;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $12 = HEAP32[5024] | 0;
 }
 $13 = $12 + 40 | 0;
 HEAP32[5024] = $13;
 $14 = $13;
 $15 = $9;
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$14 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
 HEAP32[$14 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
 HEAP32[$14 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
 HEAP32[$14 + 16 >> 2] = HEAP32[$15 + 16 >> 2];
 HEAP32[$14 + 20 >> 2] = HEAP32[$15 + 20 >> 2];
 HEAP32[$14 + 24 >> 2] = HEAP32[$15 + 24 >> 2];
 HEAP32[$14 + 28 >> 2] = HEAP32[$15 + 28 >> 2];
 HEAP32[$14 + 32 >> 2] = HEAP32[$15 + 32 >> 2];
 HEAP32[$14 + 36 >> 2] = HEAP32[$15 + 36 >> 2];
 $16 = HEAP32[5024] | 0;
 HEAP16[$16 + 8 >> 1] = HEAP16[$16 - 40 + 10 >> 1] | 0;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 HEAP16[(HEAP32[5024] | 0) - 40 + 10 >> 1] = 48;
 HEAP32[HEAP32[5024] >> 2] = $7;
 HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $7;
 _gv_dup();
 $28 = $tmp_i19;
 $29 = HEAP32[5024] | 0;
 do {
  if ($29 >>> 0 < 56272 >>> 0) {
   $41 = $29;
  } else {
   $34 = HEAPU16[$29 + 8 >> 1] | 0;
   if (!(($34 & 63 | 0) == 51 | ($34 & 62 | 0) == 52)) {
    $41 = $29;
    break;
   }
   _gv(1) | 0;
   $41 = HEAP32[5024] | 0;
  }
 } while (0);
 $42 = $41;
 HEAP32[$28 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$28 + 4 >> 2] = HEAP32[$42 + 4 >> 2];
 HEAP32[$28 + 8 >> 2] = HEAP32[$42 + 8 >> 2];
 HEAP32[$28 + 12 >> 2] = HEAP32[$42 + 12 >> 2];
 HEAP32[$28 + 16 >> 2] = HEAP32[$42 + 16 >> 2];
 HEAP32[$28 + 20 >> 2] = HEAP32[$42 + 20 >> 2];
 HEAP32[$28 + 24 >> 2] = HEAP32[$42 + 24 >> 2];
 HEAP32[$28 + 28 >> 2] = HEAP32[$42 + 28 >> 2];
 HEAP32[$28 + 32 >> 2] = HEAP32[$42 + 32 >> 2];
 HEAP32[$28 + 36 >> 2] = HEAP32[$42 + 36 >> 2];
 $44 = $41 - 40 | 0;
 HEAP32[$42 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$42 + 4 >> 2] = HEAP32[$44 + 4 >> 2];
 HEAP32[$42 + 8 >> 2] = HEAP32[$44 + 8 >> 2];
 HEAP32[$42 + 12 >> 2] = HEAP32[$44 + 12 >> 2];
 HEAP32[$42 + 16 >> 2] = HEAP32[$44 + 16 >> 2];
 HEAP32[$42 + 20 >> 2] = HEAP32[$44 + 20 >> 2];
 HEAP32[$42 + 24 >> 2] = HEAP32[$44 + 24 >> 2];
 HEAP32[$42 + 28 >> 2] = HEAP32[$44 + 28 >> 2];
 HEAP32[$42 + 32 >> 2] = HEAP32[$44 + 32 >> 2];
 HEAP32[$42 + 36 >> 2] = HEAP32[$44 + 36 >> 2];
 $47 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$47 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$47 + 4 >> 2] = HEAP32[$28 + 4 >> 2];
 HEAP32[$47 + 8 >> 2] = HEAP32[$28 + 8 >> 2];
 HEAP32[$47 + 12 >> 2] = HEAP32[$28 + 12 >> 2];
 HEAP32[$47 + 16 >> 2] = HEAP32[$28 + 16 >> 2];
 HEAP32[$47 + 20 >> 2] = HEAP32[$28 + 20 >> 2];
 HEAP32[$47 + 24 >> 2] = HEAP32[$28 + 24 >> 2];
 HEAP32[$47 + 28 >> 2] = HEAP32[$28 + 28 >> 2];
 HEAP32[$47 + 32 >> 2] = HEAP32[$28 + 32 >> 2];
 HEAP32[$47 + 36 >> 2] = HEAP32[$28 + 36 >> 2];
 $48 = $tmp_i;
 $49 = HEAP32[5024] | 0;
 $51 = $49 - 80 | 0;
 HEAP32[$48 >> 2] = HEAP32[$51 >> 2];
 HEAP32[$48 + 4 >> 2] = HEAP32[$51 + 4 >> 2];
 HEAP32[$48 + 8 >> 2] = HEAP32[$51 + 8 >> 2];
 HEAP32[$48 + 12 >> 2] = HEAP32[$51 + 12 >> 2];
 HEAP32[$48 + 16 >> 2] = HEAP32[$51 + 16 >> 2];
 HEAP32[$48 + 20 >> 2] = HEAP32[$51 + 20 >> 2];
 HEAP32[$48 + 24 >> 2] = HEAP32[$51 + 24 >> 2];
 HEAP32[$48 + 28 >> 2] = HEAP32[$51 + 28 >> 2];
 HEAP32[$48 + 32 >> 2] = HEAP32[$51 + 32 >> 2];
 HEAP32[$48 + 36 >> 2] = HEAP32[$51 + 36 >> 2];
 $i_01_i = -2;
 $52 = $49;
 while (1) {
  $54 = $i_01_i + 1 | 0;
  $56 = $52 + ($i_01_i * 40 | 0) | 0;
  $57 = $52 + ($54 * 40 | 0) | 0;
  HEAP32[$56 >> 2] = HEAP32[$57 >> 2];
  HEAP32[$56 + 4 >> 2] = HEAP32[$57 + 4 >> 2];
  HEAP32[$56 + 8 >> 2] = HEAP32[$57 + 8 >> 2];
  HEAP32[$56 + 12 >> 2] = HEAP32[$57 + 12 >> 2];
  HEAP32[$56 + 16 >> 2] = HEAP32[$57 + 16 >> 2];
  HEAP32[$56 + 20 >> 2] = HEAP32[$57 + 20 >> 2];
  HEAP32[$56 + 24 >> 2] = HEAP32[$57 + 24 >> 2];
  HEAP32[$56 + 28 >> 2] = HEAP32[$57 + 28 >> 2];
  HEAP32[$56 + 32 >> 2] = HEAP32[$57 + 32 >> 2];
  HEAP32[$56 + 36 >> 2] = HEAP32[$57 + 36 >> 2];
  $59 = HEAP32[5024] | 0;
  if (($54 | 0) == 0) {
   break;
  } else {
   $i_01_i = $54;
   $52 = $59;
  }
 }
 $60 = $59;
 HEAP32[$60 >> 2] = HEAP32[$48 >> 2];
 HEAP32[$60 + 4 >> 2] = HEAP32[$48 + 4 >> 2];
 HEAP32[$60 + 8 >> 2] = HEAP32[$48 + 8 >> 2];
 HEAP32[$60 + 12 >> 2] = HEAP32[$48 + 12 >> 2];
 HEAP32[$60 + 16 >> 2] = HEAP32[$48 + 16 >> 2];
 HEAP32[$60 + 20 >> 2] = HEAP32[$48 + 20 >> 2];
 HEAP32[$60 + 24 >> 2] = HEAP32[$48 + 24 >> 2];
 HEAP32[$60 + 28 >> 2] = HEAP32[$48 + 28 >> 2];
 HEAP32[$60 + 32 >> 2] = HEAP32[$48 + 32 >> 2];
 HEAP32[$60 + 36 >> 2] = HEAP32[$48 + 36 >> 2];
 _gv_dup();
 $61 = $tmp_i1;
 $62 = HEAP32[5024] | 0;
 $64 = $62 - 120 | 0;
 HEAP32[$61 >> 2] = HEAP32[$64 >> 2];
 HEAP32[$61 + 4 >> 2] = HEAP32[$64 + 4 >> 2];
 HEAP32[$61 + 8 >> 2] = HEAP32[$64 + 8 >> 2];
 HEAP32[$61 + 12 >> 2] = HEAP32[$64 + 12 >> 2];
 HEAP32[$61 + 16 >> 2] = HEAP32[$64 + 16 >> 2];
 HEAP32[$61 + 20 >> 2] = HEAP32[$64 + 20 >> 2];
 HEAP32[$61 + 24 >> 2] = HEAP32[$64 + 24 >> 2];
 HEAP32[$61 + 28 >> 2] = HEAP32[$64 + 28 >> 2];
 HEAP32[$61 + 32 >> 2] = HEAP32[$64 + 32 >> 2];
 HEAP32[$61 + 36 >> 2] = HEAP32[$64 + 36 >> 2];
 $i_01_i2 = -3;
 $65 = $62;
 while (1) {
  $67 = $i_01_i2 + 1 | 0;
  $69 = $65 + ($i_01_i2 * 40 | 0) | 0;
  $70 = $65 + ($67 * 40 | 0) | 0;
  HEAP32[$69 >> 2] = HEAP32[$70 >> 2];
  HEAP32[$69 + 4 >> 2] = HEAP32[$70 + 4 >> 2];
  HEAP32[$69 + 8 >> 2] = HEAP32[$70 + 8 >> 2];
  HEAP32[$69 + 12 >> 2] = HEAP32[$70 + 12 >> 2];
  HEAP32[$69 + 16 >> 2] = HEAP32[$70 + 16 >> 2];
  HEAP32[$69 + 20 >> 2] = HEAP32[$70 + 20 >> 2];
  HEAP32[$69 + 24 >> 2] = HEAP32[$70 + 24 >> 2];
  HEAP32[$69 + 28 >> 2] = HEAP32[$70 + 28 >> 2];
  HEAP32[$69 + 32 >> 2] = HEAP32[$70 + 32 >> 2];
  HEAP32[$69 + 36 >> 2] = HEAP32[$70 + 36 >> 2];
  $72 = HEAP32[5024] | 0;
  if (($67 | 0) == 0) {
   break;
  } else {
   $i_01_i2 = $67;
   $65 = $72;
  }
 }
 $73 = $72;
 HEAP32[$73 >> 2] = HEAP32[$61 >> 2];
 HEAP32[$73 + 4 >> 2] = HEAP32[$61 + 4 >> 2];
 HEAP32[$73 + 8 >> 2] = HEAP32[$61 + 8 >> 2];
 HEAP32[$73 + 12 >> 2] = HEAP32[$61 + 12 >> 2];
 HEAP32[$73 + 16 >> 2] = HEAP32[$61 + 16 >> 2];
 HEAP32[$73 + 20 >> 2] = HEAP32[$61 + 20 >> 2];
 HEAP32[$73 + 24 >> 2] = HEAP32[$61 + 24 >> 2];
 HEAP32[$73 + 28 >> 2] = HEAP32[$61 + 28 >> 2];
 HEAP32[$73 + 32 >> 2] = HEAP32[$61 + 32 >> 2];
 HEAP32[$73 + 36 >> 2] = HEAP32[$61 + 36 >> 2];
 _gv2(1, 1);
 $74 = HEAP32[5024] | 0;
 HEAP16[$74 - 40 + 10 >> 1] = HEAP16[$74 + 8 >> 1] | 0;
 HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $3;
 $80 = HEAP32[5024] | 0;
 $83 = HEAPU16[$80 + 8 >> 1] | 0;
 do {
  if (($83 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
   if (($83 & 62 | 0) != 52) {
    break;
   }
   _gsym(HEAP32[$80 + 16 >> 2] | 0);
  } else {
   _o(55517);
  }
 } while (0);
 $96 = HEAP32[5024] | 0;
 $97 = $96 - 40 | 0;
 HEAP32[5024] = $97;
 $98 = $tmp_i5;
 $100 = $96 - 120 | 0;
 HEAP32[$98 >> 2] = HEAP32[$100 >> 2];
 HEAP32[$98 + 4 >> 2] = HEAP32[$100 + 4 >> 2];
 HEAP32[$98 + 8 >> 2] = HEAP32[$100 + 8 >> 2];
 HEAP32[$98 + 12 >> 2] = HEAP32[$100 + 12 >> 2];
 HEAP32[$98 + 16 >> 2] = HEAP32[$100 + 16 >> 2];
 HEAP32[$98 + 20 >> 2] = HEAP32[$100 + 20 >> 2];
 HEAP32[$98 + 24 >> 2] = HEAP32[$100 + 24 >> 2];
 HEAP32[$98 + 28 >> 2] = HEAP32[$100 + 28 >> 2];
 HEAP32[$98 + 32 >> 2] = HEAP32[$100 + 32 >> 2];
 HEAP32[$98 + 36 >> 2] = HEAP32[$100 + 36 >> 2];
 $i_01_i6 = -2;
 $101 = $97;
 while (1) {
  $103 = $i_01_i6 + 1 | 0;
  $105 = $101 + ($i_01_i6 * 40 | 0) | 0;
  $106 = $101 + ($103 * 40 | 0) | 0;
  HEAP32[$105 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$105 + 4 >> 2] = HEAP32[$106 + 4 >> 2];
  HEAP32[$105 + 8 >> 2] = HEAP32[$106 + 8 >> 2];
  HEAP32[$105 + 12 >> 2] = HEAP32[$106 + 12 >> 2];
  HEAP32[$105 + 16 >> 2] = HEAP32[$106 + 16 >> 2];
  HEAP32[$105 + 20 >> 2] = HEAP32[$106 + 20 >> 2];
  HEAP32[$105 + 24 >> 2] = HEAP32[$106 + 24 >> 2];
  HEAP32[$105 + 28 >> 2] = HEAP32[$106 + 28 >> 2];
  HEAP32[$105 + 32 >> 2] = HEAP32[$106 + 32 >> 2];
  HEAP32[$105 + 36 >> 2] = HEAP32[$106 + 36 >> 2];
  $108 = HEAP32[5024] | 0;
  if (($103 | 0) == 0) {
   break;
  } else {
   $i_01_i6 = $103;
   $101 = $108;
  }
 }
 $109 = $108;
 HEAP32[$109 >> 2] = HEAP32[$98 >> 2];
 HEAP32[$109 + 4 >> 2] = HEAP32[$98 + 4 >> 2];
 HEAP32[$109 + 8 >> 2] = HEAP32[$98 + 8 >> 2];
 HEAP32[$109 + 12 >> 2] = HEAP32[$98 + 12 >> 2];
 HEAP32[$109 + 16 >> 2] = HEAP32[$98 + 16 >> 2];
 HEAP32[$109 + 20 >> 2] = HEAP32[$98 + 20 >> 2];
 HEAP32[$109 + 24 >> 2] = HEAP32[$98 + 24 >> 2];
 HEAP32[$109 + 28 >> 2] = HEAP32[$98 + 28 >> 2];
 HEAP32[$109 + 32 >> 2] = HEAP32[$98 + 32 >> 2];
 HEAP32[$109 + 36 >> 2] = HEAP32[$98 + 36 >> 2];
 $110 = $tmp_i9;
 $111 = HEAP32[5024] | 0;
 $113 = $111 - 80 | 0;
 HEAP32[$110 >> 2] = HEAP32[$113 >> 2];
 HEAP32[$110 + 4 >> 2] = HEAP32[$113 + 4 >> 2];
 HEAP32[$110 + 8 >> 2] = HEAP32[$113 + 8 >> 2];
 HEAP32[$110 + 12 >> 2] = HEAP32[$113 + 12 >> 2];
 HEAP32[$110 + 16 >> 2] = HEAP32[$113 + 16 >> 2];
 HEAP32[$110 + 20 >> 2] = HEAP32[$113 + 20 >> 2];
 HEAP32[$110 + 24 >> 2] = HEAP32[$113 + 24 >> 2];
 HEAP32[$110 + 28 >> 2] = HEAP32[$113 + 28 >> 2];
 HEAP32[$110 + 32 >> 2] = HEAP32[$113 + 32 >> 2];
 HEAP32[$110 + 36 >> 2] = HEAP32[$113 + 36 >> 2];
 $i_01_i10 = -2;
 $114 = $111;
 while (1) {
  $116 = $i_01_i10 + 1 | 0;
  $118 = $114 + ($i_01_i10 * 40 | 0) | 0;
  $119 = $114 + ($116 * 40 | 0) | 0;
  HEAP32[$118 >> 2] = HEAP32[$119 >> 2];
  HEAP32[$118 + 4 >> 2] = HEAP32[$119 + 4 >> 2];
  HEAP32[$118 + 8 >> 2] = HEAP32[$119 + 8 >> 2];
  HEAP32[$118 + 12 >> 2] = HEAP32[$119 + 12 >> 2];
  HEAP32[$118 + 16 >> 2] = HEAP32[$119 + 16 >> 2];
  HEAP32[$118 + 20 >> 2] = HEAP32[$119 + 20 >> 2];
  HEAP32[$118 + 24 >> 2] = HEAP32[$119 + 24 >> 2];
  HEAP32[$118 + 28 >> 2] = HEAP32[$119 + 28 >> 2];
  HEAP32[$118 + 32 >> 2] = HEAP32[$119 + 32 >> 2];
  HEAP32[$118 + 36 >> 2] = HEAP32[$119 + 36 >> 2];
  $121 = HEAP32[5024] | 0;
  if (($116 | 0) == 0) {
   break;
  } else {
   $i_01_i10 = $116;
   $114 = $121;
  }
 }
 $122 = $121;
 HEAP32[$122 >> 2] = HEAP32[$110 >> 2];
 HEAP32[$122 + 4 >> 2] = HEAP32[$110 + 4 >> 2];
 HEAP32[$122 + 8 >> 2] = HEAP32[$110 + 8 >> 2];
 HEAP32[$122 + 12 >> 2] = HEAP32[$110 + 12 >> 2];
 HEAP32[$122 + 16 >> 2] = HEAP32[$110 + 16 >> 2];
 HEAP32[$122 + 20 >> 2] = HEAP32[$110 + 20 >> 2];
 HEAP32[$122 + 24 >> 2] = HEAP32[$110 + 24 >> 2];
 HEAP32[$122 + 28 >> 2] = HEAP32[$110 + 28 >> 2];
 HEAP32[$122 + 32 >> 2] = HEAP32[$110 + 32 >> 2];
 HEAP32[$122 + 36 >> 2] = HEAP32[$110 + 36 >> 2];
 $123 = $tmp_i14;
 $124 = HEAP32[5024] | 0;
 do {
  if ($124 >>> 0 < 56272 >>> 0) {
   $136 = $124;
  } else {
   $129 = HEAPU16[$124 + 8 >> 1] | 0;
   if (!(($129 & 63 | 0) == 51 | ($129 & 62 | 0) == 52)) {
    $136 = $124;
    break;
   }
   _gv(1) | 0;
   $136 = HEAP32[5024] | 0;
  }
 } while (0);
 $137 = $136;
 HEAP32[$123 >> 2] = HEAP32[$137 >> 2];
 HEAP32[$123 + 4 >> 2] = HEAP32[$137 + 4 >> 2];
 HEAP32[$123 + 8 >> 2] = HEAP32[$137 + 8 >> 2];
 HEAP32[$123 + 12 >> 2] = HEAP32[$137 + 12 >> 2];
 HEAP32[$123 + 16 >> 2] = HEAP32[$137 + 16 >> 2];
 HEAP32[$123 + 20 >> 2] = HEAP32[$137 + 20 >> 2];
 HEAP32[$123 + 24 >> 2] = HEAP32[$137 + 24 >> 2];
 HEAP32[$123 + 28 >> 2] = HEAP32[$137 + 28 >> 2];
 HEAP32[$123 + 32 >> 2] = HEAP32[$137 + 32 >> 2];
 HEAP32[$123 + 36 >> 2] = HEAP32[$137 + 36 >> 2];
 $139 = $136 - 40 | 0;
 HEAP32[$137 >> 2] = HEAP32[$139 >> 2];
 HEAP32[$137 + 4 >> 2] = HEAP32[$139 + 4 >> 2];
 HEAP32[$137 + 8 >> 2] = HEAP32[$139 + 8 >> 2];
 HEAP32[$137 + 12 >> 2] = HEAP32[$139 + 12 >> 2];
 HEAP32[$137 + 16 >> 2] = HEAP32[$139 + 16 >> 2];
 HEAP32[$137 + 20 >> 2] = HEAP32[$139 + 20 >> 2];
 HEAP32[$137 + 24 >> 2] = HEAP32[$139 + 24 >> 2];
 HEAP32[$137 + 28 >> 2] = HEAP32[$139 + 28 >> 2];
 HEAP32[$137 + 32 >> 2] = HEAP32[$139 + 32 >> 2];
 HEAP32[$137 + 36 >> 2] = HEAP32[$139 + 36 >> 2];
 $142 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$142 >> 2] = HEAP32[$123 >> 2];
 HEAP32[$142 + 4 >> 2] = HEAP32[$123 + 4 >> 2];
 HEAP32[$142 + 8 >> 2] = HEAP32[$123 + 8 >> 2];
 HEAP32[$142 + 12 >> 2] = HEAP32[$123 + 12 >> 2];
 HEAP32[$142 + 16 >> 2] = HEAP32[$123 + 16 >> 2];
 HEAP32[$142 + 20 >> 2] = HEAP32[$123 + 20 >> 2];
 HEAP32[$142 + 24 >> 2] = HEAP32[$123 + 24 >> 2];
 HEAP32[$142 + 28 >> 2] = HEAP32[$123 + 28 >> 2];
 HEAP32[$142 + 32 >> 2] = HEAP32[$123 + 32 >> 2];
 HEAP32[$142 + 36 >> 2] = HEAP32[$123 + 36 >> 2];
 _gv2(1, 1);
 $143 = HEAP32[5024] | 0;
 HEAP16[$143 - 40 + 10 >> 1] = HEAP16[$143 + 8 >> 1] | 0;
 HEAP32[(HEAP32[5024] | 0) - 40 >> 2] = $3;
 $149 = HEAP32[5024] | 0;
 $152 = HEAPU16[$149 + 8 >> 1] | 0;
 do {
  if (($152 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
   if (($152 & 62 | 0) != 52) {
    break;
   }
   _gsym(HEAP32[$149 + 16 >> 2] | 0);
  } else {
   _o(55517);
  }
 } while (0);
 $165 = HEAP32[5024] | 0;
 $166 = $165 - 40 | 0;
 HEAP32[5024] = $166;
 $167 = $tmp_i13;
 do {
  if ($166 >>> 0 < 56272 >>> 0) {
   $179 = $166;
  } else {
   $172 = HEAPU16[$165 - 40 + 8 >> 1] | 0;
   if (!(($172 & 63 | 0) == 51 | ($172 & 62 | 0) == 52)) {
    $179 = $166;
    break;
   }
   _gv(1) | 0;
   $179 = HEAP32[5024] | 0;
  }
 } while (0);
 $180 = $179;
 HEAP32[$167 >> 2] = HEAP32[$180 >> 2];
 HEAP32[$167 + 4 >> 2] = HEAP32[$180 + 4 >> 2];
 HEAP32[$167 + 8 >> 2] = HEAP32[$180 + 8 >> 2];
 HEAP32[$167 + 12 >> 2] = HEAP32[$180 + 12 >> 2];
 HEAP32[$167 + 16 >> 2] = HEAP32[$180 + 16 >> 2];
 HEAP32[$167 + 20 >> 2] = HEAP32[$180 + 20 >> 2];
 HEAP32[$167 + 24 >> 2] = HEAP32[$180 + 24 >> 2];
 HEAP32[$167 + 28 >> 2] = HEAP32[$180 + 28 >> 2];
 HEAP32[$167 + 32 >> 2] = HEAP32[$180 + 32 >> 2];
 HEAP32[$167 + 36 >> 2] = HEAP32[$180 + 36 >> 2];
 $182 = $179 - 40 | 0;
 HEAP32[$180 >> 2] = HEAP32[$182 >> 2];
 HEAP32[$180 + 4 >> 2] = HEAP32[$182 + 4 >> 2];
 HEAP32[$180 + 8 >> 2] = HEAP32[$182 + 8 >> 2];
 HEAP32[$180 + 12 >> 2] = HEAP32[$182 + 12 >> 2];
 HEAP32[$180 + 16 >> 2] = HEAP32[$182 + 16 >> 2];
 HEAP32[$180 + 20 >> 2] = HEAP32[$182 + 20 >> 2];
 HEAP32[$180 + 24 >> 2] = HEAP32[$182 + 24 >> 2];
 HEAP32[$180 + 28 >> 2] = HEAP32[$182 + 28 >> 2];
 HEAP32[$180 + 32 >> 2] = HEAP32[$182 + 32 >> 2];
 HEAP32[$180 + 36 >> 2] = HEAP32[$182 + 36 >> 2];
 $185 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$185 >> 2] = HEAP32[$167 >> 2];
 HEAP32[$185 + 4 >> 2] = HEAP32[$167 + 4 >> 2];
 HEAP32[$185 + 8 >> 2] = HEAP32[$167 + 8 >> 2];
 HEAP32[$185 + 12 >> 2] = HEAP32[$167 + 12 >> 2];
 HEAP32[$185 + 16 >> 2] = HEAP32[$167 + 16 >> 2];
 HEAP32[$185 + 20 >> 2] = HEAP32[$167 + 20 >> 2];
 HEAP32[$185 + 24 >> 2] = HEAP32[$167 + 24 >> 2];
 HEAP32[$185 + 28 >> 2] = HEAP32[$167 + 28 >> 2];
 HEAP32[$185 + 32 >> 2] = HEAP32[$167 + 32 >> 2];
 HEAP32[$185 + 36 >> 2] = HEAP32[$167 + 36 >> 2];
 STACKTOP = sp;
 return;
}
function _tcc_load_object_file($s1, $fd, $file_offset) {
 $s1 = $s1 | 0;
 $fd = $fd | 0;
 $file_offset = $file_offset | 0;
 var $ehdr = 0, $1 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $45 = 0, $48 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $61 = 0, $i_051 = 0, $symtab_050 = 0, $nb_syms_049 = 0, $strtab_048 = 0, $70 = 0, $74 = 0, $75 = 0, $82 = 0, $85 = 0, $87 = 0, $88 = 0, $strtab_1 = 0, $nb_syms_1 = 0, $symtab_1 = 0, $92 = 0, $i_136 = 0, $stabstr_index_035 = 0, $stab_index_034 = 0, $98 = 0, $99 = 0, $100 = 0, $105 = 0, $109 = 0, $111 = 0, $j_028 = 0, $116 = 0, $120 = 0, $128 = 0, $136 = 0, $s_0 = 0, $142 = 0, $143 = 0, $150 = 0, $154 = 0, $155 = 0, $offset_0 = 0, $stab_index_1 = 0, $stabstr_index_1 = 0, $164 = 0, $stab_index_2 = 0, $stabstr_index_2 = 0, $178 = 0, $182 = 0, $184 = 0, $185 = 0, $188 = 0, $190 = 0, $192 = 0, $194 = 0, $196 = 0, $198 = 0, $a_024 = 0, $203 = 0, $i_221 = 0, $210 = 0, $218 = 0, $234 = 0, $241 = 0, $243 = 0, $246 = 0, $248 = 0, $sm_0_lcssa = 0, $250 = 0, $symtab_0_lcssa_pn = 0, $i_316 = 0, $sm_014 = 0, $sym_018 = 0, $251 = 0, $252 = 0, $253 = 0, $257 = 0, $270 = 0, $276 = 0, $281 = 0, $284 = 0, $286 = 0, $288 = 0, $289 = 0, $sm_1 = 0, $sm_2 = 0, $306 = 0, $309 = 0, $i_49 = 0, $311 = 0, $318 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $rel_06 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $340 = 0, $348 = 0, $350 = 0, $354 = 0, $357 = 0, $359 = 0, $360 = 0, $symtab_047 = 0, $strtab_043 = 0, $ret_0 = 0, $old_to_new_syms_1 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56 | 0;
 $ehdr = sp | 0;
 $1 = $ehdr | 0;
 $3 = (_read($fd | 0, $1 | 0, 52) | 0) == 52;
 do {
  if ($3 & (HEAP8[$1] | 0) == 127) {
   if ((HEAP8[$ehdr + 1 | 0] | 0) != 69) {
    break;
   }
   if ((HEAP8[$ehdr + 2 | 0] | 0) != 76) {
    break;
   }
   if ((HEAP8[$ehdr + 3 | 0] | 0) != 70) {
    break;
   }
   if ((HEAP16[$ehdr + 16 >> 1] | 0) != 1) {
    break;
   }
   if ((HEAP8[$ehdr + 5 | 0] | 0) != 1) {
    break;
   }
   if ((HEAP16[$ehdr + 18 >> 1] | 0) != 3) {
    break;
   }
   $34 = (HEAP32[$ehdr + 32 >> 2] | 0) + $file_offset | 0;
   $35 = $ehdr + 48 | 0;
   $36 = HEAP16[$35 >> 1] | 0;
   $37 = $36 & 65535;
   $38 = $37 * 40 | 0;
   $39 = _tcc_malloc($38) | 0;
   _lseek($fd | 0, $34 | 0, 0) | 0;
   _read($fd | 0, $39 | 0, $38 | 0) | 0;
   $42 = $39;
   $44 = _tcc_mallocz($37 * 12 | 0) | 0;
   $45 = $44;
   $48 = HEAPU16[$ehdr + 50 >> 1] | 0;
   $51 = (HEAP32[$42 + ($48 * 40 | 0) + 16 >> 2] | 0) + $file_offset | 0;
   $53 = HEAP32[$42 + ($48 * 40 | 0) + 20 >> 2] | 0;
   $54 = _tcc_malloc($53) | 0;
   _lseek($fd | 0, $51 | 0, 0) | 0;
   _read($fd | 0, $54 | 0, $53 | 0) | 0;
   $57 = ($36 & 65535) >>> 0 > 1 >>> 0;
   L9 : do {
    if ($57) {
     $strtab_048 = 0;
     $nb_syms_049 = 0;
     $symtab_050 = 0;
     $i_051 = 1;
     while (1) {
      if ((HEAP32[$42 + ($i_051 * 40 | 0) + 4 >> 2] | 0) == 2) {
       if (($symtab_050 | 0) != 0) {
        label = 15;
        break;
       }
       $70 = HEAP32[$42 + ($i_051 * 40 | 0) + 20 >> 2] | 0;
       $74 = (HEAP32[$42 + ($i_051 * 40 | 0) + 16 >> 2] | 0) + $file_offset | 0;
       $75 = _tcc_malloc($70) | 0;
       _lseek($fd | 0, $74 | 0, 0) | 0;
       _read($fd | 0, $75 | 0, $70 | 0) | 0;
       HEAP32[$45 + ($i_051 * 12 | 0) >> 2] = HEAP32[5318];
       $82 = HEAP32[$42 + ($i_051 * 40 | 0) + 24 >> 2] | 0;
       $85 = (HEAP32[$42 + ($82 * 40 | 0) + 16 >> 2] | 0) + $file_offset | 0;
       $87 = HEAP32[$42 + ($82 * 40 | 0) + 20 >> 2] | 0;
       $88 = _tcc_malloc($87) | 0;
       _lseek($fd | 0, $85 | 0, 0) | 0;
       _read($fd | 0, $88 | 0, $87 | 0) | 0;
       $symtab_1 = $75;
       $nb_syms_1 = $70 >>> 4;
       $strtab_1 = $88;
      } else {
       $symtab_1 = $symtab_050;
       $nb_syms_1 = $nb_syms_049;
       $strtab_1 = $strtab_048;
      }
      $92 = $i_051 + 1 | 0;
      if (($92 | 0) < ($37 | 0)) {
       $strtab_048 = $strtab_1;
       $nb_syms_049 = $nb_syms_1;
       $symtab_050 = $symtab_1;
       $i_051 = $92;
      } else {
       break;
      }
     }
     if ((label | 0) == 15) {
      _tcc_error_noabort(17224, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $old_to_new_syms_1 = 0;
      $ret_0 = -1;
      $strtab_043 = $strtab_048;
      $symtab_047 = $symtab_050;
      break;
     }
     do {
      if ($57) {
       $60 = $s1 + 2832 | 0;
       $61 = $s1 + 2828 | 0;
       $stab_index_034 = 0;
       $stabstr_index_035 = 0;
       $i_136 = 1;
       L22 : while (1) {
        L24 : do {
         if (($i_136 | 0) == ($48 | 0)) {
          $stabstr_index_2 = $stabstr_index_035;
          $stab_index_2 = $stab_index_034;
         } else {
          $98 = $54 + (HEAP32[$42 + ($i_136 * 40 | 0) >> 2] | 0) | 0;
          $99 = $42 + ($i_136 * 40 | 0) + 4 | 0;
          $100 = HEAP32[$99 >> 2] | 0;
          switch ($100 | 0) {
          case 1:
          case 9:
          case 8:
          case 16:
          case 14:
          case 15:
           {
            break;
           }
          default:
           {
            if ((_strcmp($98 | 0, 17080) | 0) != 0) {
             $stabstr_index_2 = $stabstr_index_035;
             $stab_index_2 = $stab_index_034;
             break L24;
            }
           }
          }
          $105 = $42 + ($i_136 * 40 | 0) + 32 | 0;
          if ((HEAP32[$105 >> 2] | 0) == 0) {
           HEAP32[$105 >> 2] = 1;
          }
          $109 = HEAP32[$60 >> 2] | 0;
          L32 : do {
           if (($109 | 0) > 1) {
            $111 = HEAP32[$61 >> 2] | 0;
            $j_028 = 1;
            while (1) {
             $116 = HEAP32[$111 + ($j_028 << 2) >> 2] | 0;
             $120 = $j_028 + 1 | 0;
             if ((_strcmp($116 + 72 | 0, $98 | 0) | 0) == 0) {
              break;
             }
             if (($120 | 0) < ($109 | 0)) {
              $j_028 = $120;
             } else {
              label = 29;
              break L32;
             }
            }
            if ((_strncmp($98 | 0, 16944, 13) | 0) != 0) {
             $s_0 = $116;
             $136 = $100;
             break;
            }
            HEAP8[$45 + ($i_136 * 12 | 0) + 9 | 0] = 1;
            $stabstr_index_2 = $stabstr_index_035;
            $stab_index_2 = $stab_index_034;
            break L24;
           } else {
            label = 29;
           }
          } while (0);
          if ((label | 0) == 29) {
           label = 0;
           $128 = _new_section($s1, $98, $100, HEAP32[$42 + ($i_136 * 40 | 0) + 8 >> 2] | 0) | 0;
           HEAP32[$128 + 32 >> 2] = HEAP32[$105 >> 2];
           HEAP32[$128 + 36 >> 2] = HEAP32[$42 + ($i_136 * 40 | 0) + 36 >> 2];
           HEAP8[$45 + ($i_136 * 12 | 0) + 8 | 0] = 1;
           $s_0 = $128;
           $136 = HEAP32[$99 >> 2] | 0;
          }
          if (($136 | 0) != (HEAP32[$s_0 + 20 >> 2] | 0)) {
           label = 31;
           break L22;
          }
          $142 = $s_0 | 0;
          $143 = HEAP32[$142 >> 2] | 0;
          do {
           if ((_strcmp($98 | 0, 16568) | 0) == 0) {
            $stabstr_index_1 = $stabstr_index_035;
            $stab_index_1 = $i_136;
            $offset_0 = $143;
           } else {
            if ((_strcmp($98 | 0, 17080) | 0) == 0) {
             $stabstr_index_1 = $i_136;
             $stab_index_1 = $stab_index_034;
             $offset_0 = $143;
             break;
            }
            $150 = HEAP32[$105 >> 2] | 0;
            $154 = $143 - 1 + $150 & -$150;
            $155 = $s_0 + 32 | 0;
            if ($150 >>> 0 > (HEAP32[$155 >> 2] | 0) >>> 0) {
             HEAP32[$155 >> 2] = $150;
            }
            HEAP32[$142 >> 2] = $154;
            $stabstr_index_1 = $stabstr_index_035;
            $stab_index_1 = $stab_index_034;
            $offset_0 = $154;
           }
          } while (0);
          HEAP32[$45 + ($i_136 * 12 | 0) + 4 >> 2] = $offset_0;
          HEAP32[$45 + ($i_136 * 12 | 0) >> 2] = $s_0;
          $164 = HEAP32[$42 + ($i_136 * 40 | 0) + 20 >> 2] | 0;
          if ((HEAP32[$99 >> 2] | 0) == 8) {
           HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + $164;
           $stabstr_index_2 = $stabstr_index_1;
           $stab_index_2 = $stab_index_1;
           break;
          } else {
           _lseek($fd | 0, (HEAP32[$42 + ($i_136 * 40 | 0) + 16 >> 2] | 0) + $file_offset | 0, 0) | 0;
           _read($fd | 0, _section_ptr_add($s_0, $164) | 0, $164 | 0) | 0;
           $stabstr_index_2 = $stabstr_index_1;
           $stab_index_2 = $stab_index_1;
           break;
          }
         }
        } while (0);
        $178 = $i_136 + 1 | 0;
        if (($178 | 0) < ($37 | 0)) {
         $stab_index_034 = $stab_index_2;
         $stabstr_index_035 = $stabstr_index_2;
         $i_136 = $178;
        } else {
         break;
        }
       }
       if ((label | 0) == 31) {
        _tcc_error_noabort(16744, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $old_to_new_syms_1 = 0;
        $ret_0 = -1;
        $strtab_043 = $strtab_1;
        $symtab_047 = $symtab_1;
        break L9;
       }
       do {
        if (($stab_index_2 | 0) != 0 & ($stabstr_index_2 | 0) != 0) {
         $188 = HEAP32[$45 + ($stab_index_2 * 12 | 0) >> 2] | 0;
         $190 = HEAP32[$188 + 4 >> 2] | 0;
         $192 = HEAP32[$45 + ($stab_index_2 * 12 | 0) + 4 >> 2] | 0;
         $194 = HEAP32[$188 >> 2] | 0;
         $196 = $190 + $194 | 0;
         $198 = HEAP32[$45 + ($stabstr_index_2 * 12 | 0) + 4 >> 2] | 0;
         if (($192 | 0) >= ($194 | 0)) {
          $182 = $36;
          break;
         }
         $a_024 = $190 + $192 | 0;
         do {
          $203 = $a_024 | 0;
          HEAP32[$203 >> 2] = (HEAP32[$203 >> 2] | 0) + $198;
          $a_024 = $a_024 + 12 | 0;
         } while ($a_024 >>> 0 < $196 >>> 0);
         $182 = HEAP16[$35 >> 1] | 0;
        } else {
         $182 = $36;
        }
       } while (0);
       if (($182 & 65535) >>> 0 <= 1 >>> 0) {
        $243 = $182;
        break;
       }
       $184 = $182 & 65535;
       $185 = $s1 + 2828 | 0;
       $i_221 = 1;
       while (1) {
        $210 = HEAP32[$45 + ($i_221 * 12 | 0) >> 2] | 0;
        do {
         if (($210 | 0) != 0) {
          if ((HEAP8[$45 + ($i_221 * 12 | 0) + 8 | 0] | 0) == 0) {
           break;
          }
          $218 = HEAP32[$42 + ($i_221 * 40 | 0) + 24 >> 2] | 0;
          if (($218 | 0) != 0) {
           HEAP32[$210 + 56 >> 2] = HEAP32[$45 + ($218 * 12 | 0) >> 2];
          }
          if ((HEAP32[$42 + ($i_221 * 40 | 0) + 4 >> 2] | 0) != 9) {
           break;
          }
          $234 = HEAP32[(HEAP32[$45 + ((HEAP32[$42 + ($i_221 * 40 | 0) + 28 >> 2] | 0) * 12 | 0) >> 2] | 0) + 16 >> 2] | 0;
          HEAP32[$210 + 28 >> 2] = $234;
          HEAP32[(HEAP32[(HEAP32[$185 >> 2] | 0) + ($234 << 2) >> 2] | 0) + 60 >> 2] = $210;
         }
        } while (0);
        $241 = $i_221 + 1 | 0;
        if (($241 | 0) < ($184 | 0)) {
         $i_221 = $241;
        } else {
         $243 = $182;
         break;
        }
       }
      } else {
       $243 = $36;
      }
     } while (0);
     $246 = _tcc_mallocz($nb_syms_1 << 2) | 0;
     if (($nb_syms_1 | 0) > 1) {
      $sm_014 = $45;
      $i_316 = 1;
      $symtab_0_lcssa_pn = $symtab_1;
      while (1) {
       $sym_018 = $symtab_0_lcssa_pn + 16 | 0;
       $251 = $symtab_0_lcssa_pn + 30 | 0;
       $252 = HEAP16[$251 >> 1] | 0;
       $253 = $252 & 65535;
       do {
        if ($252 << 16 >> 16 != 0 & ($252 & 65535) >>> 0 < 65280 >>> 0) {
         $257 = $45 + ($253 * 12 | 0) | 0;
         if ((HEAP8[$45 + ($253 * 12 | 0) + 9 | 0] | 0) == 0) {
          $276 = HEAP32[$257 >> 2] | 0;
          if (($276 | 0) == 0) {
           $sm_2 = $257;
           break;
          }
          $281 = HEAP32[$276 + 16 >> 2] & 65535;
          HEAP16[$251 >> 1] = $281;
          $284 = $symtab_0_lcssa_pn + 20 | 0;
          $286 = (HEAP32[$284 >> 2] | 0) + (HEAP32[$45 + ($253 * 12 | 0) + 4 >> 2] | 0) | 0;
          HEAP32[$284 >> 2] = $286;
          $sm_1 = $257;
          $289 = $286;
          $288 = $281;
          label = 67;
          break;
         }
         if ((HEAPU8[$symtab_0_lcssa_pn + 28 | 0] | 0) >>> 0 <= 15 >>> 0) {
          $sm_2 = $257;
          break;
         }
         $270 = _find_elf_sym(HEAP32[5318] | 0, $strtab_1 + (HEAP32[$sym_018 >> 2] | 0) | 0) | 0;
         if (($270 | 0) == 0) {
          $sm_2 = $257;
          break;
         }
         HEAP32[$246 + ($i_316 << 2) >> 2] = $270;
         $sm_2 = $257;
        } else {
         $sm_1 = $sm_014;
         $289 = HEAP32[$symtab_0_lcssa_pn + 20 >> 2] | 0;
         $288 = $252;
         label = 67;
        }
       } while (0);
       if ((label | 0) == 67) {
        label = 0;
        HEAP32[$246 + ($i_316 << 2) >> 2] = _add_elf_sym(HEAP32[5318] | 0, $289, HEAP32[$symtab_0_lcssa_pn + 24 >> 2] | 0, HEAPU8[$symtab_0_lcssa_pn + 28 | 0] | 0, HEAPU8[$symtab_0_lcssa_pn + 29 | 0] | 0, $288 & 65535, $strtab_1 + (HEAP32[$sym_018 >> 2] | 0) | 0) | 0;
        $sm_2 = $sm_1;
       }
       $306 = $i_316 + 1 | 0;
       if (($306 | 0) < ($nb_syms_1 | 0)) {
        $sm_014 = $sm_2;
        $i_316 = $306;
        $symtab_0_lcssa_pn = $sym_018;
       } else {
        break;
       }
      }
      $sm_0_lcssa = $sm_2;
      $248 = HEAP16[$35 >> 1] | 0;
     } else {
      $sm_0_lcssa = $45;
      $248 = $243;
     }
     if (($248 & 65535) >>> 0 <= 1 >>> 0) {
      $old_to_new_syms_1 = $246;
      $ret_0 = 0;
      $strtab_043 = $strtab_1;
      $symtab_047 = $symtab_1;
      break;
     }
     $250 = $sm_0_lcssa + 9 | 0;
     $i_49 = 1;
     $309 = $248;
     L94 : while (1) {
      $311 = HEAP32[$45 + ($i_49 * 12 | 0) >> 2] | 0;
      do {
       if (($311 | 0) == 0) {
        $359 = $309;
       } else {
        if ((HEAP32[$311 + 20 >> 2] | 0) != 9) {
         $359 = $309;
         break;
        }
        $318 = HEAP32[$45 + ($i_49 * 12 | 0) + 4 >> 2] | 0;
        $322 = HEAP32[$45 + ((HEAP32[$42 + ($i_49 * 40 | 0) + 28 >> 2] | 0) * 12 | 0) + 4 >> 2] | 0;
        $324 = HEAP32[$311 + 4 >> 2] | 0;
        $326 = HEAP32[$311 >> 2] | 0;
        $328 = $324 + $326 | 0;
        if (($318 | 0) >= ($326 | 0)) {
         $359 = $309;
         break;
        }
        $rel_06 = $324 + $318 | 0;
        while (1) {
         $333 = $rel_06 + 4 | 0;
         $334 = HEAP32[$333 >> 2] | 0;
         $335 = $334 & 255;
         $336 = $334 >>> 8;
         if ($336 >>> 0 >= $nb_syms_1 >>> 0) {
          break L94;
         }
         $340 = HEAP32[$246 + ($336 << 2) >> 2] | 0;
         if (($340 | 0) == 0) {
          if ((HEAP8[$250] | 0) == 0) {
           break L94;
          }
         }
         HEAP32[$333 >> 2] = $340 << 8 | $335;
         $354 = $rel_06 | 0;
         HEAP32[$354 >> 2] = (HEAP32[$354 >> 2] | 0) + $322;
         $357 = $rel_06 + 8 | 0;
         if ($357 >>> 0 < $328 >>> 0) {
          $rel_06 = $357;
         } else {
          break;
         }
        }
        $359 = HEAP16[$35 >> 1] | 0;
       }
      } while (0);
      $360 = $i_49 + 1 | 0;
      if (($360 | 0) < ($359 & 65535 | 0)) {
       $i_49 = $360;
       $309 = $359;
      } else {
       $old_to_new_syms_1 = $246;
       $ret_0 = 0;
       $strtab_043 = $strtab_1;
       $symtab_047 = $symtab_1;
       break L9;
      }
     }
     $348 = $54 + (HEAP32[$42 + ($i_49 * 40 | 0) >> 2] | 0) | 0;
     $350 = HEAP32[$rel_06 >> 2] | 0;
     _tcc_error_noabort(16400, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $i_49, HEAP32[tempVarArgs + 8 >> 2] = $348, HEAP32[tempVarArgs + 16 >> 2] = $350, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $old_to_new_syms_1 = $246;
     $ret_0 = -1;
     $strtab_043 = $strtab_1;
     $symtab_047 = $symtab_1;
    } else {
     $old_to_new_syms_1 = _tcc_mallocz(0) | 0;
     $ret_0 = 0;
     $strtab_043 = 0;
     $symtab_047 = 0;
    }
   } while (0);
   _tcc_free($symtab_047);
   _tcc_free($strtab_043);
   _tcc_free($old_to_new_syms_1);
   _tcc_free($44);
   _tcc_free($54);
   _tcc_free($39);
   $_0 = $ret_0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 _tcc_error_noabort(17432, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 $_0 = -1;
 STACKTOP = sp;
 return $_0 | 0;
}
function _gen_opi($op) {
 $op = $op | 0;
 var $opc_0 = 0, $8 = 0, $12 = 0, $16 = 0, $21 = 0, $_01_i = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $34 = 0, $41 = 0, $_01_i11 = 0, $42 = 0, $43 = 0, $48 = 0, $49 = 0, $54 = 0, $_pre_i16 = 0, $57 = 0, $58 = 0, $63 = 0, $64 = 0, $73 = 0, $_01_i23 = 0, $74 = 0, $75 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $94 = 0, $95 = 0, $_pre_i29 = 0, $101 = 0, $102 = 0, $107 = 0, $108 = 0, $116 = 0, $_01_i_i = 0, $117 = 0, $118 = 0, $123 = 0, $124 = 0, $129 = 0, $131 = 0, $132 = 0, $137 = 0, $138 = 0, $144 = 0, $146 = 0, $148 = 0, $152 = 0, $_01_i38 = 0, $153 = 0, $154 = 0, $159 = 0, $160 = 0, $165 = 0, $173 = 0, $_01_i44 = 0, $174 = 0, $175 = 0, $180 = 0, $181 = 0, $186 = 0, $188 = 0, $203 = 0, $206 = 0, $208 = 0, $_pre_i49 = 0, $210 = 0, $_01_i50 = 0, $211 = 0, $212 = 0, $217 = 0, $218 = 0, $223 = 0, $232 = 0, $_01_i56 = 0, $233 = 0, $234 = 0, $239 = 0, $240 = 0, $245 = 0, $opc_1 = 0, $256 = 0, $260 = 0, $_pre_i61 = 0, $261 = 0, $262 = 0, $267 = 0, $268 = 0, $275 = 0, $_01_i68 = 0, $276 = 0, $277 = 0, $282 = 0, $283 = 0, $288 = 0, $290 = 0, $291 = 0, $296 = 0, $297 = 0, $305 = 0, $_pre_i76 = 0, $306 = 0, $307 = 0, $312 = 0, $313 = 0, $321 = 0, $_01_i83 = 0, $322 = 0, $323 = 0, $328 = 0, $329 = 0, $334 = 0, $339 = 0, $343 = 0, $_pre_i88 = 0, $346 = 0, $347 = 0, $352 = 0, $353 = 0, $360 = 0, $_01_i95 = 0, $361 = 0, $362 = 0, $367 = 0, $368 = 0, $373 = 0, $_pre_i100 = 0, $380 = 0, $_01_i101 = 0, $381 = 0, $382 = 0, $387 = 0, $388 = 0, $393 = 0, $398 = 0, $_01_i107 = 0, $399 = 0, $400 = 0, $405 = 0, $406 = 0, $411 = 0, $413 = 0, $_01_i113 = 0, $414 = 0, $415 = 0, $420 = 0, $421 = 0, $426 = 0, $431 = 0, $_01_i119 = 0, $432 = 0, $433 = 0, $438 = 0, $439 = 0, $444 = 0, $r_0_off0 = 0, label = 0;
 switch ($op | 0) {
 case 43:
 case 195:
  {
   $opc_0 = 0;
   break;
  }
 case 205:
  {
   $opc_1 = 232;
   label = 58;
   break;
  }
 case 45:
 case 197:
  {
   $opc_0 = 5;
   break;
  }
 case 196:
  {
   $opc_0 = 2;
   break;
  }
 case 198:
  {
   $opc_0 = 3;
   break;
  }
 case 47:
 case 176:
 case 178:
 case 37:
 case 177:
 case 194:
  {
   _gv2(4, 16);
   $339 = HEAP32[5024] | 0;
   $343 = HEAPU16[$339 + 8 >> 1] | 0;
   HEAP32[5024] = $339 - 40;
   _save_reg(2);
   do {
    if (($op | 0) == 194) {
     $_pre_i88 = HEAP32[5434] | 0;
     $346 = $_pre_i88 + 1 | 0;
     $347 = HEAP32[13918] | 0;
     if ($346 >>> 0 > (HEAP32[$347 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($347, $346);
      $353 = HEAP32[5434] | 0;
      $352 = HEAP32[13918] | 0;
     } else {
      $353 = $_pre_i88;
      $352 = $347;
     }
     HEAP8[(HEAP32[$352 + 4 >> 2] | 0) + $353 | 0] = -9;
     HEAP32[5434] = $346;
     $_01_i95 = $343 + 224 | 0;
     $360 = $_pre_i88 + 1 | 0;
     while (1) {
      $361 = $360 + 1 | 0;
      $362 = HEAP32[13918] | 0;
      if ($361 >>> 0 > (HEAP32[$362 + 8 >> 2] | 0) >>> 0) {
       _section_realloc($362, $361);
       $368 = HEAP32[5434] | 0;
       $367 = HEAP32[13918] | 0;
      } else {
       $368 = $360;
       $367 = $362;
      }
      HEAP8[(HEAP32[$367 + 4 >> 2] | 0) + $368 | 0] = $_01_i95;
      HEAP32[5434] = $361;
      $373 = $_01_i95 >>> 8;
      if (($373 | 0) == 0) {
       break;
      } else {
       $_01_i95 = $373;
       $360 = $361;
      }
     }
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 2;
     $r_0_off0 = 0;
    } else {
     $_pre_i100 = HEAP32[5434] | 0;
     if (($op & -2 | 0) == 176) {
      $_01_i101 = 16241201;
      $380 = $_pre_i100;
      while (1) {
       $381 = $380 + 1 | 0;
       $382 = HEAP32[13918] | 0;
       if ($381 >>> 0 > (HEAP32[$382 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($382, $381);
        $388 = HEAP32[5434] | 0;
        $387 = HEAP32[13918] | 0;
       } else {
        $388 = $380;
        $387 = $382;
       }
       HEAP8[(HEAP32[$387 + 4 >> 2] | 0) + $388 | 0] = $_01_i101;
       HEAP32[5434] = $381;
       $393 = $_01_i101 >>> 8;
       if (($393 | 0) == 0) {
        break;
       } else {
        $_01_i101 = $393;
        $380 = $381;
       }
      }
      $_01_i107 = $343 + 240 | 0;
      $398 = $_pre_i100 + 3 | 0;
      while (1) {
       $399 = $398 + 1 | 0;
       $400 = HEAP32[13918] | 0;
       if ($399 >>> 0 > (HEAP32[$400 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($400, $399);
        $406 = HEAP32[5434] | 0;
        $405 = HEAP32[13918] | 0;
       } else {
        $406 = $398;
        $405 = $400;
       }
       HEAP8[(HEAP32[$405 + 4 >> 2] | 0) + $406 | 0] = $_01_i107;
       HEAP32[5434] = $399;
       $411 = $_01_i107 >>> 8;
       if (($411 | 0) == 0) {
        break;
       } else {
        $_01_i107 = $411;
        $398 = $399;
       }
      }
     } else {
      $_01_i113 = 63385;
      $413 = $_pre_i100;
      while (1) {
       $414 = $413 + 1 | 0;
       $415 = HEAP32[13918] | 0;
       if ($414 >>> 0 > (HEAP32[$415 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($415, $414);
        $421 = HEAP32[5434] | 0;
        $420 = HEAP32[13918] | 0;
       } else {
        $421 = $413;
        $420 = $415;
       }
       HEAP8[(HEAP32[$420 + 4 >> 2] | 0) + $421 | 0] = $_01_i113;
       HEAP32[5434] = $414;
       $426 = $_01_i113 >>> 8;
       if (($426 | 0) == 0) {
        break;
       } else {
        $_01_i113 = $426;
        $413 = $414;
       }
      }
      $_01_i119 = $343 + 248 | 0;
      $431 = $_pre_i100 + 2 | 0;
      while (1) {
       $432 = $431 + 1 | 0;
       $433 = HEAP32[13918] | 0;
       if ($432 >>> 0 > (HEAP32[$433 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($433, $432);
        $439 = HEAP32[5434] | 0;
        $438 = HEAP32[13918] | 0;
       } else {
        $439 = $431;
        $438 = $433;
       }
       HEAP8[(HEAP32[$438 + 4 >> 2] | 0) + $439 | 0] = $_01_i119;
       HEAP32[5434] = $432;
       $444 = $_01_i119 >>> 8;
       if (($444 | 0) == 0) {
        break;
       } else {
        $_01_i119 = $444;
        $431 = $432;
       }
      }
     }
     if (($op | 0) == 177 | ($op | 0) == 37) {
      $r_0_off0 = 2;
      break;
     }
     $r_0_off0 = 0;
    }
   } while (0);
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $r_0_off0;
   return;
  }
 case 42:
  {
   _gv2(1, 1);
   $203 = HEAP32[5024] | 0;
   $206 = HEAP16[$203 - 40 + 8 >> 1] | 0;
   $208 = HEAP16[$203 + 8 >> 1] | 0;
   HEAP32[5024] = $203 - 40;
   $_pre_i49 = HEAP32[5434] | 0;
   $_01_i50 = 44815;
   $210 = $_pre_i49;
   while (1) {
    $211 = $210 + 1 | 0;
    $212 = HEAP32[13918] | 0;
    if ($211 >>> 0 > (HEAP32[$212 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($212, $211);
     $218 = HEAP32[5434] | 0;
     $217 = HEAP32[13918] | 0;
    } else {
     $218 = $210;
     $217 = $212;
    }
    HEAP8[(HEAP32[$217 + 4 >> 2] | 0) + $218 | 0] = $_01_i50;
    HEAP32[5434] = $211;
    $223 = $_01_i50 >>> 8;
    if (($223 | 0) == 0) {
     break;
    } else {
     $_01_i50 = $223;
     $210 = $211;
    }
   }
   $_01_i56 = ($208 & 65535) + 192 + (($206 & 65535) << 3) | 0;
   $232 = $_pre_i49 + 2 | 0;
   while (1) {
    $233 = $232 + 1 | 0;
    $234 = HEAP32[13918] | 0;
    if ($233 >>> 0 > (HEAP32[$234 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($234, $233);
     $240 = HEAP32[5434] | 0;
     $239 = HEAP32[13918] | 0;
    } else {
     $240 = $232;
     $239 = $234;
    }
    HEAP8[(HEAP32[$239 + 4 >> 2] | 0) + $240 | 0] = $_01_i56;
    HEAP32[5434] = $233;
    $245 = $_01_i56 >>> 8;
    if (($245 | 0) == 0) {
     break;
    } else {
     $_01_i56 = $245;
     $232 = $233;
    }
   }
   return;
  }
 case 2:
  {
   $opc_1 = 248;
   label = 58;
   break;
  }
 case 1:
  {
   $opc_1 = 224;
   label = 58;
   break;
  }
 case 38:
  {
   $opc_0 = 4;
   break;
  }
 case 94:
  {
   $opc_0 = 6;
   break;
  }
 case 124:
  {
   $opc_0 = 1;
   break;
  }
 default:
  {
   $opc_0 = 7;
  }
 }
 if ((label | 0) == 58) {
  if ((HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 831) == 48) {
   _vswap();
   $256 = _gv(1) | 0;
   _vswap();
   $260 = HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0;
   $_pre_i61 = HEAP32[5434] | 0;
   $261 = $_pre_i61 + 1 | 0;
   $262 = HEAP32[13918] | 0;
   if ($261 >>> 0 > (HEAP32[$262 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($262, $261);
    $268 = HEAP32[5434] | 0;
    $267 = HEAP32[13918] | 0;
   } else {
    $268 = $_pre_i61;
    $267 = $262;
   }
   HEAP8[(HEAP32[$267 + 4 >> 2] | 0) + $268 | 0] = -63;
   HEAP32[5434] = $261;
   $_01_i68 = $256 | $opc_1;
   $275 = $_pre_i61 + 1 | 0;
   while (1) {
    $276 = $275 + 1 | 0;
    $277 = HEAP32[13918] | 0;
    if ($276 >>> 0 > (HEAP32[$277 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($277, $276);
     $283 = HEAP32[5434] | 0;
     $282 = HEAP32[13918] | 0;
    } else {
     $283 = $275;
     $282 = $277;
    }
    HEAP8[(HEAP32[$282 + 4 >> 2] | 0) + $283 | 0] = $_01_i68;
    HEAP32[5434] = $276;
    $288 = $_01_i68 >>> 8;
    if (($288 | 0) == 0) {
     break;
    } else {
     $_01_i68 = $288;
     $275 = $276;
    }
   }
   $290 = $275 + 2 | 0;
   $291 = HEAP32[13918] | 0;
   if ($290 >>> 0 > (HEAP32[$291 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($291, $290);
    $297 = HEAP32[5434] | 0;
    $296 = HEAP32[13918] | 0;
   } else {
    $297 = $276;
    $296 = $291;
   }
   HEAP8[(HEAP32[$296 + 4 >> 2] | 0) + $297 | 0] = $260 & 31;
   HEAP32[5434] = $290;
  } else {
   _gv2(1, 16);
   $305 = HEAP16[(HEAP32[5024] | 0) - 40 + 8 >> 1] | 0;
   $_pre_i76 = HEAP32[5434] | 0;
   $306 = $_pre_i76 + 1 | 0;
   $307 = HEAP32[13918] | 0;
   if ($306 >>> 0 > (HEAP32[$307 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($307, $306);
    $313 = HEAP32[5434] | 0;
    $312 = HEAP32[13918] | 0;
   } else {
    $313 = $_pre_i76;
    $312 = $307;
   }
   HEAP8[(HEAP32[$312 + 4 >> 2] | 0) + $313 | 0] = -45;
   HEAP32[5434] = $306;
   $_01_i83 = $305 & 65535 | $opc_1;
   $321 = $_pre_i76 + 1 | 0;
   while (1) {
    $322 = $321 + 1 | 0;
    $323 = HEAP32[13918] | 0;
    if ($322 >>> 0 > (HEAP32[$323 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($323, $322);
     $329 = HEAP32[5434] | 0;
     $328 = HEAP32[13918] | 0;
    } else {
     $329 = $321;
     $328 = $323;
    }
    HEAP8[(HEAP32[$328 + 4 >> 2] | 0) + $329 | 0] = $_01_i83;
    HEAP32[5434] = $322;
    $334 = $_01_i83 >>> 8;
    if (($334 | 0) == 0) {
     break;
    } else {
     $_01_i83 = $334;
     $321 = $322;
    }
   }
  }
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  return;
 }
 L92 : do {
  if ((HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 831) == 48) {
   _vswap();
   $8 = _gv(1) | 0;
   _vswap();
   $12 = HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0;
   if (($12 | 0) != ($12 << 24 >> 24 | 0)) {
    $_pre_i29 = HEAP32[5434] | 0;
    $101 = $_pre_i29 + 1 | 0;
    $102 = HEAP32[13918] | 0;
    if ($101 >>> 0 > (HEAP32[$102 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($102, $101);
     $108 = HEAP32[5434] | 0;
     $107 = HEAP32[13918] | 0;
    } else {
     $108 = $_pre_i29;
     $107 = $102;
    }
    HEAP8[(HEAP32[$107 + 4 >> 2] | 0) + $108 | 0] = -127;
    HEAP32[5434] = $101;
    $_01_i_i = $opc_0 << 3 | $8 | 192;
    $116 = $_pre_i29 + 1 | 0;
    while (1) {
     $117 = $116 + 1 | 0;
     $118 = HEAP32[13918] | 0;
     if ($117 >>> 0 > (HEAP32[$118 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($118, $117);
      $124 = HEAP32[5434] | 0;
      $123 = HEAP32[13918] | 0;
     } else {
      $124 = $116;
      $123 = $118;
     }
     HEAP8[(HEAP32[$123 + 4 >> 2] | 0) + $124 | 0] = $_01_i_i;
     HEAP32[5434] = $117;
     $129 = $_01_i_i >>> 8;
     if (($129 | 0) == 0) {
      break;
     } else {
      $_01_i_i = $129;
      $116 = $117;
     }
    }
    $131 = $116 + 5 | 0;
    $132 = HEAP32[13918] | 0;
    if ($131 >>> 0 > (HEAP32[$132 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($132, $131);
     $138 = HEAP32[13918] | 0;
     $137 = HEAP32[5434] | 0;
    } else {
     $138 = $132;
     $137 = $117;
    }
    HEAP32[(HEAP32[$138 + 4 >> 2] | 0) + $137 >> 2] = $12;
    HEAP32[5434] = $131;
    break;
   }
   $16 = ($12 | 0) == 1;
   if ($16 & ($opc_0 | 0) == 0) {
    $_01_i = $8 | 64;
    $21 = HEAP32[5434] | 0;
    while (1) {
     $22 = $21 + 1 | 0;
     $23 = HEAP32[13918] | 0;
     if ($22 >>> 0 > (HEAP32[$23 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($23, $22);
      $29 = HEAP32[5434] | 0;
      $28 = HEAP32[13918] | 0;
     } else {
      $29 = $21;
      $28 = $23;
     }
     HEAP8[(HEAP32[$28 + 4 >> 2] | 0) + $29 | 0] = $_01_i;
     HEAP32[5434] = $22;
     $34 = $_01_i >>> 8;
     if (($34 | 0) == 0) {
      break L92;
     } else {
      $_01_i = $34;
      $21 = $22;
     }
    }
   }
   if ($16 & ($opc_0 | 0) == 5) {
    $_01_i11 = $8 | 72;
    $41 = HEAP32[5434] | 0;
    while (1) {
     $42 = $41 + 1 | 0;
     $43 = HEAP32[13918] | 0;
     if ($42 >>> 0 > (HEAP32[$43 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($43, $42);
      $49 = HEAP32[5434] | 0;
      $48 = HEAP32[13918] | 0;
     } else {
      $49 = $41;
      $48 = $43;
     }
     HEAP8[(HEAP32[$48 + 4 >> 2] | 0) + $49 | 0] = $_01_i11;
     HEAP32[5434] = $42;
     $54 = $_01_i11 >>> 8;
     if (($54 | 0) == 0) {
      break L92;
     } else {
      $_01_i11 = $54;
      $41 = $42;
     }
    }
   }
   $_pre_i16 = HEAP32[5434] | 0;
   $57 = $_pre_i16 + 1 | 0;
   $58 = HEAP32[13918] | 0;
   if ($57 >>> 0 > (HEAP32[$58 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($58, $57);
    $64 = HEAP32[5434] | 0;
    $63 = HEAP32[13918] | 0;
   } else {
    $64 = $_pre_i16;
    $63 = $58;
   }
   HEAP8[(HEAP32[$63 + 4 >> 2] | 0) + $64 | 0] = -125;
   HEAP32[5434] = $57;
   $_01_i23 = $opc_0 << 3 | $8 | 192;
   $73 = $_pre_i16 + 1 | 0;
   while (1) {
    $74 = $73 + 1 | 0;
    $75 = HEAP32[13918] | 0;
    if ($74 >>> 0 > (HEAP32[$75 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($75, $74);
     $81 = HEAP32[5434] | 0;
     $80 = HEAP32[13918] | 0;
    } else {
     $81 = $73;
     $80 = $75;
    }
    HEAP8[(HEAP32[$80 + 4 >> 2] | 0) + $81 | 0] = $_01_i23;
    HEAP32[5434] = $74;
    $86 = $_01_i23 >>> 8;
    if (($86 | 0) == 0) {
     break;
    } else {
     $_01_i23 = $86;
     $73 = $74;
    }
   }
   $88 = $73 + 2 | 0;
   $89 = HEAP32[13918] | 0;
   if ($88 >>> 0 > (HEAP32[$89 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($89, $88);
    $95 = HEAP32[5434] | 0;
    $94 = HEAP32[13918] | 0;
   } else {
    $95 = $74;
    $94 = $89;
   }
   HEAP8[(HEAP32[$94 + 4 >> 2] | 0) + $95 | 0] = $12;
   HEAP32[5434] = $88;
  } else {
   _gv2(1, 1);
   $144 = HEAP32[5024] | 0;
   $146 = HEAP16[$144 - 40 + 8 >> 1] | 0;
   $148 = HEAP16[$144 + 8 >> 1] | 0;
   $_01_i38 = $opc_0 << 3 | 1;
   $152 = HEAP32[5434] | 0;
   while (1) {
    $153 = $152 + 1 | 0;
    $154 = HEAP32[13918] | 0;
    if ($153 >>> 0 > (HEAP32[$154 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($154, $153);
     $160 = HEAP32[5434] | 0;
     $159 = HEAP32[13918] | 0;
    } else {
     $160 = $152;
     $159 = $154;
    }
    HEAP8[(HEAP32[$159 + 4 >> 2] | 0) + $160 | 0] = $_01_i38;
    HEAP32[5434] = $153;
    $165 = $_01_i38 >>> 8;
    if (($165 | 0) == 0) {
     break;
    } else {
     $_01_i38 = $165;
     $152 = $153;
    }
   }
   $_01_i44 = ($146 & 65535) + 192 + (($148 & 65535) << 3) | 0;
   $173 = $153;
   while (1) {
    $174 = $173 + 1 | 0;
    $175 = HEAP32[13918] | 0;
    if ($174 >>> 0 > (HEAP32[$175 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($175, $174);
     $181 = HEAP32[5434] | 0;
     $180 = HEAP32[13918] | 0;
    } else {
     $181 = $173;
     $180 = $175;
    }
    HEAP8[(HEAP32[$180 + 4 >> 2] | 0) + $181 | 0] = $_01_i44;
    HEAP32[5434] = $174;
    $186 = $_01_i44 >>> 8;
    if (($186 | 0) == 0) {
     break;
    } else {
     $_01_i44 = $186;
     $173 = $174;
    }
   }
  }
 } while (0);
 $188 = HEAP32[5024] | 0;
 HEAP32[5024] = $188 - 40;
 if (($op - 146 | 0) >>> 0 >= 14 >>> 0) {
  return;
 }
 HEAP16[$188 - 40 + 8 >> 1] = 51;
 HEAP32[(HEAP32[5024] | 0) + 16 >> 2] = $op;
 return;
}
function _load($r, $sv) {
 $r = $r | 0;
 $sv = $sv | 0;
 var $v1 = 0, $3 = 0, $5 = 0, $8 = 0, $9 = 0, $fr_0 = 0, $fr_1 = 0, $24 = 0, $_pre_i2 = 0, $26 = 0, $27 = 0, $_pre_i9 = 0, $33 = 0, $34 = 0, $_pre_i16 = 0, $40 = 0, $41 = 0, $47 = 0, $50 = 0, $_01_i25 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $63 = 0, $67 = 0, $_01_i32 = 0, $68 = 0, $69 = 0, $74 = 0, $75 = 0, $80 = 0, $84 = 0, $_01_i39 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $97 = 0, $101 = 0, $_01_i46 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $114 = 0, $_pre_i51 = 0, $117 = 0, $118 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $_0 = 0, $147 = 0, $150 = 0, $_01_i60 = 0, $151 = 0, $152 = 0, $157 = 0, $158 = 0, $163 = 0, $_pre_i72 = 0, $174 = 0, $175 = 0, $178 = 0, $180 = 0, $181 = 0, $188 = 0, $189 = 0, $193 = 0, $196 = 0, $_01_i81 = 0, $197 = 0, $198 = 0, $203 = 0, $204 = 0, $209 = 0, $212 = 0, $_pre_i86 = 0, $214 = 0, $_01_i_i = 0, $215 = 0, $216 = 0, $221 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $237 = 0, $238 = 0, $243 = 0, $244 = 0, $249 = 0, $250 = 0, $256 = 0, $_01_i96 = 0, $257 = 0, $258 = 0, $263 = 0, $264 = 0, $269 = 0, $_pre_i101 = 0, $271 = 0, $273 = 0, $_01_i103 = 0, $274 = 0, $275 = 0, $280 = 0, $281 = 0, $286 = 0, $292 = 0, $293 = 0, $294 = 0, $_pre_i108 = 0, $295 = 0, $_01_i_i109 = 0, $296 = 0, $297 = 0, $302 = 0, $303 = 0, $308 = 0, $310 = 0, $311 = 0, $312 = 0, $317 = 0, $318 = 0, $324 = 0, $_01_i120 = 0, $325 = 0, $326 = 0, $331 = 0, $332 = 0, $337 = 0, $340 = 0, $_01_i_i126 = 0, $346 = 0, $347 = 0, $_pre_i127 = 0, $350 = 0, $351 = 0, $_01_i_i128 = 0, $352 = 0, $353 = 0, $358 = 0, $359 = 0, $364 = 0, $366 = 0, $367 = 0, $368 = 0, $373 = 0, $374 = 0, $_pre_i137 = 0, $382 = 0, $383 = 0, $388 = 0, $389 = 0, $395 = 0, $398 = 0, $_01_i = 0, $399 = 0, $400 = 0, $405 = 0, $406 = 0, $411 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $v1 = sp | 0;
 $3 = HEAPU16[$sv + 8 >> 1] | 0;
 $5 = HEAP32[$sv >> 2] | 0;
 $8 = HEAP32[$sv + 16 >> 2] | 0;
 $9 = $3 & 63;
 if (($3 & 256 | 0) != 0) {
  if (($9 | 0) == 49) {
   HEAP32[$v1 >> 2] = 0;
   HEAP16[$v1 + 8 >> 1] = 306;
   HEAP32[$v1 + 16 >> 2] = $8;
   if (($r | 0) == 3) {
    $fr_0 = _get_reg(1) | 0;
   } else {
    $fr_0 = $r;
   }
   _load($fr_0, $v1);
   $fr_1 = $fr_0;
  } else {
   $fr_1 = $3;
  }
  $24 = $5 & 15;
  do {
   if (($24 | 0) == 8) {
    $_pre_i2 = HEAP32[5434] | 0;
    $26 = $_pre_i2 + 1 | 0;
    $27 = HEAP32[13918] | 0;
    if ($26 >>> 0 > (HEAP32[$27 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($27, $26);
     $129 = HEAP32[5434] | 0;
     $128 = HEAP32[13918] | 0;
    } else {
     $129 = $_pre_i2;
     $128 = $27;
    }
    HEAP8[(HEAP32[$128 + 4 >> 2] | 0) + $129 | 0] = -39;
    HEAP32[5434] = $26;
    $_0 = 0;
   } else if (($24 | 0) == 10) {
    $_pre_i16 = HEAP32[5434] | 0;
    $40 = $_pre_i16 + 1 | 0;
    $41 = HEAP32[13918] | 0;
    if ($40 >>> 0 > (HEAP32[$41 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($41, $40);
     $139 = HEAP32[5434] | 0;
     $138 = HEAP32[13918] | 0;
    } else {
     $139 = $_pre_i16;
     $138 = $41;
    }
    HEAP8[(HEAP32[$138 + 4 >> 2] | 0) + $139 | 0] = -37;
    HEAP32[5434] = $40;
    $_0 = 5;
   } else if (($24 | 0) == 9) {
    $_pre_i9 = HEAP32[5434] | 0;
    $33 = $_pre_i9 + 1 | 0;
    $34 = HEAP32[13918] | 0;
    if ($33 >>> 0 > (HEAP32[$34 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($34, $33);
     $134 = HEAP32[5434] | 0;
     $133 = HEAP32[13918] | 0;
    } else {
     $134 = $_pre_i9;
     $133 = $34;
    }
    HEAP8[(HEAP32[$133 + 4 >> 2] | 0) + $134 | 0] = -35;
    HEAP32[5434] = $33;
    $_0 = 0;
   } else {
    $47 = $5 & -116609;
    if (($47 | 0) == 17) {
     $_01_i32 = 46607;
     $67 = HEAP32[5434] | 0;
     while (1) {
      $68 = $67 + 1 | 0;
      $69 = HEAP32[13918] | 0;
      if ($68 >>> 0 > (HEAP32[$69 + 8 >> 2] | 0) >>> 0) {
       _section_realloc($69, $68);
       $75 = HEAP32[5434] | 0;
       $74 = HEAP32[13918] | 0;
      } else {
       $75 = $67;
       $74 = $69;
      }
      HEAP8[(HEAP32[$74 + 4 >> 2] | 0) + $75 | 0] = $_01_i32;
      HEAP32[5434] = $68;
      $80 = $_01_i32 >>> 8;
      if (($80 | 0) == 0) {
       $_0 = $r;
       break;
      } else {
       $_01_i32 = $80;
       $67 = $68;
      }
     }
    } else if (($47 | 0) == 2) {
     $_01_i39 = 48911;
     $84 = HEAP32[5434] | 0;
     while (1) {
      $85 = $84 + 1 | 0;
      $86 = HEAP32[13918] | 0;
      if ($85 >>> 0 > (HEAP32[$86 + 8 >> 2] | 0) >>> 0) {
       _section_realloc($86, $85);
       $92 = HEAP32[5434] | 0;
       $91 = HEAP32[13918] | 0;
      } else {
       $92 = $84;
       $91 = $86;
      }
      HEAP8[(HEAP32[$91 + 4 >> 2] | 0) + $92 | 0] = $_01_i39;
      HEAP32[5434] = $85;
      $97 = $_01_i39 >>> 8;
      if (($97 | 0) == 0) {
       $_0 = $r;
       break;
      } else {
       $_01_i39 = $97;
       $84 = $85;
      }
     }
    } else if (($47 | 0) == 18) {
     $_01_i46 = 46863;
     $101 = HEAP32[5434] | 0;
     while (1) {
      $102 = $101 + 1 | 0;
      $103 = HEAP32[13918] | 0;
      if ($102 >>> 0 > (HEAP32[$103 + 8 >> 2] | 0) >>> 0) {
       _section_realloc($103, $102);
       $109 = HEAP32[5434] | 0;
       $108 = HEAP32[13918] | 0;
      } else {
       $109 = $101;
       $108 = $103;
      }
      HEAP8[(HEAP32[$108 + 4 >> 2] | 0) + $109 | 0] = $_01_i46;
      HEAP32[5434] = $102;
      $114 = $_01_i46 >>> 8;
      if (($114 | 0) == 0) {
       $_0 = $r;
       break;
      } else {
       $_01_i46 = $114;
       $101 = $102;
      }
     }
    } else if (($47 | 0) == 1) {
     $_01_i25 = 48655;
     $50 = HEAP32[5434] | 0;
     while (1) {
      $51 = $50 + 1 | 0;
      $52 = HEAP32[13918] | 0;
      if ($51 >>> 0 > (HEAP32[$52 + 8 >> 2] | 0) >>> 0) {
       _section_realloc($52, $51);
       $58 = HEAP32[5434] | 0;
       $57 = HEAP32[13918] | 0;
      } else {
       $58 = $50;
       $57 = $52;
      }
      HEAP8[(HEAP32[$57 + 4 >> 2] | 0) + $58 | 0] = $_01_i25;
      HEAP32[5434] = $51;
      $63 = $_01_i25 >>> 8;
      if (($63 | 0) == 0) {
       $_0 = $r;
       break;
      } else {
       $_01_i25 = $63;
       $50 = $51;
      }
     }
    } else {
     $_pre_i51 = HEAP32[5434] | 0;
     $117 = $_pre_i51 + 1 | 0;
     $118 = HEAP32[13918] | 0;
     if ($117 >>> 0 > (HEAP32[$118 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($118, $117);
      $124 = HEAP32[5434] | 0;
      $123 = HEAP32[13918] | 0;
     } else {
      $124 = $_pre_i51;
      $123 = $118;
     }
     HEAP8[(HEAP32[$123 + 4 >> 2] | 0) + $124 | 0] = -117;
     HEAP32[5434] = $117;
     $_0 = $r;
     break;
    }
   }
  } while (0);
  _gen_modrm($_0, $fr_1, HEAP32[$sv + 32 >> 2] | 0, $8);
  STACKTOP = sp;
  return;
 }
 if (($9 | 0) == 51) {
  $212 = $r + 184 | 0;
  $_pre_i86 = HEAP32[5434] | 0;
  if (($212 | 0) == 0) {
   $229 = $_pre_i86;
  } else {
   $_01_i_i = $212;
   $214 = $_pre_i86;
   while (1) {
    $215 = $214 + 1 | 0;
    $216 = HEAP32[13918] | 0;
    if ($215 >>> 0 > (HEAP32[$216 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($216, $215);
     $222 = HEAP32[5434] | 0;
     $221 = HEAP32[13918] | 0;
    } else {
     $222 = $214;
     $221 = $216;
    }
    HEAP8[(HEAP32[$221 + 4 >> 2] | 0) + $222 | 0] = $_01_i_i;
    HEAP32[5434] = $215;
    $227 = $_01_i_i >>> 8;
    if (($227 | 0) == 0) {
     $229 = $215;
     break;
    } else {
     $_01_i_i = $227;
     $214 = $215;
    }
   }
  }
  $230 = $229 + 4 | 0;
  $231 = HEAP32[13918] | 0;
  if ($230 >>> 0 > (HEAP32[$231 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($231, $230);
   $238 = HEAP32[13918] | 0;
   $237 = HEAP32[5434] | 0;
  } else {
   $238 = $231;
   $237 = $229;
  }
  HEAP32[(HEAP32[$238 + 4 >> 2] | 0) + $237 >> 2] = 0;
  HEAP32[5434] = $230;
  $243 = $229 + 5 | 0;
  $244 = HEAP32[13918] | 0;
  if ($243 >>> 0 > (HEAP32[$244 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($244, $243);
   $250 = HEAP32[5434] | 0;
   $249 = HEAP32[13918] | 0;
  } else {
   $250 = $230;
   $249 = $244;
  }
  HEAP8[(HEAP32[$249 + 4 >> 2] | 0) + $250 | 0] = 15;
  HEAP32[5434] = $243;
  if (($8 | 0) == 0) {
   $_pre_i101 = $243;
  } else {
   $_01_i96 = $8;
   $256 = $229 + 5 | 0;
   while (1) {
    $257 = $256 + 1 | 0;
    $258 = HEAP32[13918] | 0;
    if ($257 >>> 0 > (HEAP32[$258 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($258, $257);
     $264 = HEAP32[5434] | 0;
     $263 = HEAP32[13918] | 0;
    } else {
     $264 = $256;
     $263 = $258;
    }
    HEAP8[(HEAP32[$263 + 4 >> 2] | 0) + $264 | 0] = $_01_i96;
    HEAP32[5434] = $257;
    $269 = $_01_i96 >>> 8;
    if (($269 | 0) == 0) {
     $_pre_i101 = $257;
     break;
    } else {
     $_01_i96 = $269;
     $256 = $257;
    }
   }
  }
  $271 = $r + 192 | 0;
  if (($271 | 0) == 0) {
   STACKTOP = sp;
   return;
  } else {
   $_01_i103 = $271;
   $273 = $_pre_i101;
  }
  while (1) {
   $274 = $273 + 1 | 0;
   $275 = HEAP32[13918] | 0;
   if ($274 >>> 0 > (HEAP32[$275 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($275, $274);
    $281 = HEAP32[5434] | 0;
    $280 = HEAP32[13918] | 0;
   } else {
    $281 = $273;
    $280 = $275;
   }
   HEAP8[(HEAP32[$280 + 4 >> 2] | 0) + $281 | 0] = $_01_i103;
   HEAP32[5434] = $274;
   $286 = $_01_i103 >>> 8;
   if (($286 | 0) == 0) {
    break;
   } else {
    $_01_i103 = $286;
    $273 = $274;
   }
  }
  STACKTOP = sp;
  return;
 } else if (($9 | 0) == 50) {
  $_pre_i72 = HEAP32[5434] | 0;
  $174 = $_pre_i72 + 1 | 0;
  $175 = HEAP32[13918] | 0;
  $178 = $174 >>> 0 > (HEAP32[$175 + 8 >> 2] | 0) >>> 0;
  if (($8 | 0) != 0) {
   if ($178) {
    _section_realloc($175, $174);
    $181 = HEAP32[5434] | 0;
    $180 = HEAP32[13918] | 0;
   } else {
    $181 = $_pre_i72;
    $180 = $175;
   }
   HEAP8[(HEAP32[$180 + 4 >> 2] | 0) + $181 | 0] = -115;
   HEAP32[5434] = $174;
   _gen_modrm($r, 50, HEAP32[$sv + 32 >> 2] | 0, $8);
   STACKTOP = sp;
   return;
  }
  if ($178) {
   _section_realloc($175, $174);
   $189 = HEAP32[5434] | 0;
   $188 = HEAP32[13918] | 0;
  } else {
   $189 = $_pre_i72;
   $188 = $175;
  }
  HEAP8[(HEAP32[$188 + 4 >> 2] | 0) + $189 | 0] = -119;
  HEAP32[5434] = $174;
  $193 = $r + 232 | 0;
  if (($193 | 0) == 0) {
   STACKTOP = sp;
   return;
  }
  $_01_i81 = $193;
  $196 = $_pre_i72 + 1 | 0;
  while (1) {
   $197 = $196 + 1 | 0;
   $198 = HEAP32[13918] | 0;
   if ($197 >>> 0 > (HEAP32[$198 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($198, $197);
    $204 = HEAP32[5434] | 0;
    $203 = HEAP32[13918] | 0;
   } else {
    $204 = $196;
    $203 = $198;
   }
   HEAP8[(HEAP32[$203 + 4 >> 2] | 0) + $204 | 0] = $_01_i81;
   HEAP32[5434] = $197;
   $209 = $_01_i81 >>> 8;
   if (($209 | 0) == 0) {
    break;
   } else {
    $_01_i81 = $209;
    $196 = $197;
   }
  }
  STACKTOP = sp;
  return;
 } else if (($9 | 0) == 48) {
  $147 = $r + 184 | 0;
  if (($147 | 0) != 0) {
   $_01_i60 = $147;
   $150 = HEAP32[5434] | 0;
   while (1) {
    $151 = $150 + 1 | 0;
    $152 = HEAP32[13918] | 0;
    if ($151 >>> 0 > (HEAP32[$152 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($152, $151);
     $158 = HEAP32[5434] | 0;
     $157 = HEAP32[13918] | 0;
    } else {
     $158 = $150;
     $157 = $152;
    }
    HEAP8[(HEAP32[$157 + 4 >> 2] | 0) + $158 | 0] = $_01_i60;
    HEAP32[5434] = $151;
    $163 = $_01_i60 >>> 8;
    if (($163 | 0) == 0) {
     break;
    } else {
     $_01_i60 = $163;
     $150 = $151;
    }
   }
  }
  if (($3 & 512 | 0) != 0) {
   _greloc(HEAP32[13918] | 0, HEAP32[$sv + 32 >> 2] | 0, HEAP32[5434] | 0, 1);
  }
  _gen_le32($8);
  STACKTOP = sp;
  return;
 } else {
  if (($3 & 62 | 0) != 52) {
   if (($9 | 0) == ($r | 0)) {
    STACKTOP = sp;
    return;
   }
   $_pre_i137 = HEAP32[5434] | 0;
   $382 = $_pre_i137 + 1 | 0;
   $383 = HEAP32[13918] | 0;
   if ($382 >>> 0 > (HEAP32[$383 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($383, $382);
    $389 = HEAP32[5434] | 0;
    $388 = HEAP32[13918] | 0;
   } else {
    $389 = $_pre_i137;
    $388 = $383;
   }
   HEAP8[(HEAP32[$388 + 4 >> 2] | 0) + $389 | 0] = -119;
   HEAP32[5434] = $382;
   $395 = $r + 192 + ($9 << 3) | 0;
   if (($395 | 0) == 0) {
    STACKTOP = sp;
    return;
   }
   $_01_i = $395;
   $398 = $_pre_i137 + 1 | 0;
   while (1) {
    $399 = $398 + 1 | 0;
    $400 = HEAP32[13918] | 0;
    if ($399 >>> 0 > (HEAP32[$400 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($400, $399);
     $406 = HEAP32[5434] | 0;
     $405 = HEAP32[13918] | 0;
    } else {
     $406 = $398;
     $405 = $400;
    }
    HEAP8[(HEAP32[$405 + 4 >> 2] | 0) + $406 | 0] = $_01_i;
    HEAP32[5434] = $399;
    $411 = $_01_i >>> 8;
    if (($411 | 0) == 0) {
     break;
    } else {
     $_01_i = $411;
     $398 = $399;
    }
   }
   STACKTOP = sp;
   return;
  }
  $292 = $3 & 1;
  $293 = $r + 184 | 0;
  $294 = ($293 | 0) == 0;
  $_pre_i108 = HEAP32[5434] | 0;
  if ($294) {
   $310 = $_pre_i108;
  } else {
   $_01_i_i109 = $293;
   $295 = $_pre_i108;
   while (1) {
    $296 = $295 + 1 | 0;
    $297 = HEAP32[13918] | 0;
    if ($296 >>> 0 > (HEAP32[$297 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($297, $296);
     $303 = HEAP32[5434] | 0;
     $302 = HEAP32[13918] | 0;
    } else {
     $303 = $295;
     $302 = $297;
    }
    HEAP8[(HEAP32[$302 + 4 >> 2] | 0) + $303 | 0] = $_01_i_i109;
    HEAP32[5434] = $296;
    $308 = $_01_i_i109 >>> 8;
    if (($308 | 0) == 0) {
     $310 = $296;
     break;
    } else {
     $_01_i_i109 = $308;
     $295 = $296;
    }
   }
  }
  $311 = $310 + 4 | 0;
  $312 = HEAP32[13918] | 0;
  if ($311 >>> 0 > (HEAP32[$312 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($312, $311);
   $318 = HEAP32[13918] | 0;
   $317 = HEAP32[5434] | 0;
  } else {
   $318 = $312;
   $317 = $310;
  }
  HEAP32[(HEAP32[$318 + 4 >> 2] | 0) + $317 >> 2] = $292;
  HEAP32[5434] = $311;
  $_01_i120 = 1515;
  $324 = $311;
  while (1) {
   $325 = $324 + 1 | 0;
   $326 = HEAP32[13918] | 0;
   if ($325 >>> 0 > (HEAP32[$326 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($326, $325);
    $332 = HEAP32[5434] | 0;
    $331 = HEAP32[13918] | 0;
   } else {
    $332 = $324;
    $331 = $326;
   }
   HEAP8[(HEAP32[$331 + 4 >> 2] | 0) + $332 | 0] = $_01_i120;
   HEAP32[5434] = $325;
   $337 = $_01_i120 >>> 8;
   if (($337 | 0) == 0) {
    break;
   } else {
    $_01_i120 = $337;
    $324 = $325;
   }
  }
  if (($8 | 0) == 0) {
   $_pre_i127 = $325;
  } else {
   $340 = $310 + 2 | 0;
   $_01_i_i126 = $8;
   while (1) {
    $346 = (HEAP32[(HEAP32[13918] | 0) + 4 >> 2] | 0) + $_01_i_i126 | 0;
    $347 = HEAP32[$346 >> 2] | 0;
    HEAP32[$346 >> 2] = $340 - $_01_i_i126;
    if (($347 | 0) == 0) {
     break;
    } else {
     $_01_i_i126 = $347;
    }
   }
   $_pre_i127 = HEAP32[5434] | 0;
  }
  $350 = $292 ^ 1;
  if ($294) {
   $366 = $_pre_i127;
  } else {
   $_01_i_i128 = $293;
   $351 = $_pre_i127;
   while (1) {
    $352 = $351 + 1 | 0;
    $353 = HEAP32[13918] | 0;
    if ($352 >>> 0 > (HEAP32[$353 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($353, $352);
     $359 = HEAP32[5434] | 0;
     $358 = HEAP32[13918] | 0;
    } else {
     $359 = $351;
     $358 = $353;
    }
    HEAP8[(HEAP32[$358 + 4 >> 2] | 0) + $359 | 0] = $_01_i_i128;
    HEAP32[5434] = $352;
    $364 = $_01_i_i128 >>> 8;
    if (($364 | 0) == 0) {
     $366 = $352;
     break;
    } else {
     $_01_i_i128 = $364;
     $351 = $352;
    }
   }
  }
  $367 = $366 + 4 | 0;
  $368 = HEAP32[13918] | 0;
  if ($367 >>> 0 > (HEAP32[$368 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($368, $367);
   $374 = HEAP32[13918] | 0;
   $373 = HEAP32[5434] | 0;
  } else {
   $374 = $368;
   $373 = $366;
  }
  HEAP32[(HEAP32[$374 + 4 >> 2] | 0) + $373 >> 2] = $350;
  HEAP32[5434] = $367;
  STACKTOP = sp;
  return;
 }
}
function _post_type($type, $ad) {
 $type = $type | 0;
 $ad = $ad | 0;
 var $cval_sroa_2_i15 = 0, $tmp_i = 0, $cval_i_i_sroa_4 = 0, $cval_sroa_2_i = 0, $n = 0, $align = 0, $first = 0, $ad1 = 0, $pt = 0, $1 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $l_0 = 0, $arg_size_0 = 0, $plast_0 = 0, $33 = 0, $l_2 = 0, $arg_size_1 = 0, $38 = 0, $39 = 0, $45 = 0, $51 = 0, $52 = 0, $57 = 0, $66 = 0, $l_3 = 0, $arg_size_2 = 0, $70 = 0, $79 = 0, $84 = 0, $88 = 0, $89 = 0, $96 = 0, $100 = 0, $110 = 0, $111 = 0, $112 = 0, $116 = 0, $121 = 0, $128 = 0, $129 = 0, $130 = 0, $$etemp$1 = 0, $131$1 = 0, $136 = 0, $140 = 0, $141 = 0, $144 = 0, $161 = 0, $169 = 0, $175 = 0, $177 = 0, $t1_0 = 0, $178 = 0, $181 = 0, $184 = 0, $189 = 0, $197 = 0, $198 = 0, $199 = 0, $203 = 0, $208 = 0, $215 = 0, $216 = 0, $217 = 0, $$etemp$8 = 0, $218$1 = 0, $223 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $235 = 0, $240 = 0, $247 = 0, $248 = 0, $249 = 0, $$etemp$15 = 0, $250$1 = 0, $255 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $266 = 0, $271 = 0, $278 = 0, $279 = 0, $280 = 0, $$etemp$22 = 0, $281$1 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $297 = 0, $304 = 0, $305 = 0, $307 = 0, $310 = 0, $312 = 0, $315 = 0, $318 = 0, $337 = 0, $338 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 136 | 0;
 $cval_sroa_2_i15 = sp | 0;
 $tmp_i = sp + 16 | 0;
 $cval_i_i_sroa_4 = sp + 56 | 0;
 $cval_sroa_2_i = sp + 72 | 0;
 $n = sp + 88 | 0;
 $align = sp + 96 | 0;
 $first = sp + 104 | 0;
 $ad1 = sp + 112 | 0;
 $pt = sp + 128 | 0;
 $1 = HEAP32[5310] | 0;
 if (($1 | 0) == 40) {
  _next();
  HEAP32[$first >> 2] = 0;
  $3 = HEAP32[5310] | 0;
  L3 : do {
   if (($3 | 0) == 41) {
    $arg_size_2 = 0;
    $l_3 = 0;
   } else {
    $5 = $pt | 0;
    $6 = $pt + 4 | 0;
    $plast_0 = $first;
    $arg_size_0 = 0;
    $l_0 = 0;
    $8 = $3;
    while (1) {
     L7 : do {
      if (($l_0 | 0) == 2) {
       $33 = $8;
       label = 13;
      } else {
       do {
        if ((_parse_btype($pt, $ad1) | 0) == 0) {
         if (($l_0 | 0) == 0) {
          $33 = HEAP32[5310] | 0;
          label = 13;
          break L7;
         } else {
          _tcc_error(12392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
          STACKTOP = tempVarArgs;
          break;
         }
        }
       } while (0);
       if ((HEAP32[$5 >> 2] & 15 | 0) == 3 & (HEAP32[5310] | 0) == 41) {
        $arg_size_2 = $arg_size_0;
        $l_3 = 1;
        break L3;
       }
       _type_decl($pt, $ad1, $n, 3);
       if ((HEAP32[$5 >> 2] & 15 | 0) == 3) {
        _tcc_error(12296, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
       }
       $arg_size_1 = (((_type_size($pt, $align) | 0) + 3 | 0) / 4 | 0) + $arg_size_0 | 0;
       $l_2 = 1;
      }
     } while (0);
     if ((label | 0) == 13) {
      label = 0;
      HEAP32[$n >> 2] = $33;
      if (($33 | 0) < 313) {
       _expect(18448);
      }
      HEAP32[$5 >> 2] = 0;
      _next();
      $arg_size_1 = $arg_size_0;
      $l_2 = 2;
     }
     $38 = HEAP32[$5 >> 2] | 0;
     $39 = $38 & -6177;
     HEAP32[$5 >> 2] = $39;
     if (($38 & 15 | 0) == 6) {
      $45 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, $39, -1) | 0;
      HEAP32[$45 + 20 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$45 + 8 >> 2] = 0;
      $51 = HEAP32[$5 >> 2] & 116608 | 4;
      HEAP32[$5 >> 2] = $51;
      HEAP32[$6 >> 2] = $45;
      $52 = $51;
     } else {
      $52 = $39;
     }
     $57 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, HEAP32[$n >> 2] | 536870912, $52, 0) | 0;
     HEAP32[$57 + 20 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$57 + 8 >> 2] = 0;
     HEAP32[$plast_0 >> 2] = $57;
     if ((HEAP32[5310] | 0) == 41) {
      $arg_size_2 = $arg_size_1;
      $l_3 = $l_2;
      break L3;
     }
     _skip(44);
     $66 = HEAP32[5310] | 0;
     if (($l_2 | 0) == 1 & ($66 | 0) == 204) {
      break;
     } else {
      $plast_0 = $57 + 24 | 0;
      $arg_size_0 = $arg_size_1;
      $l_0 = $l_2;
      $8 = $66;
     }
    }
    _next();
    $arg_size_2 = $arg_size_1;
    $l_3 = 3;
   }
  } while (0);
  _skip(41);
  $70 = $type | 0;
  HEAP32[$70 >> 2] = HEAP32[$70 >> 2] & -2049;
  if ((HEAP32[5310] | 0) == 91) {
   _next();
   _skip(93);
   HEAP32[$70 >> 2] = HEAP32[$70 >> 2] | 4;
  }
  $79 = $ad;
  $84 = HEAP32[$79 >> 2] & -63489 | $arg_size_2 << 11 & 63488;
  HEAP32[$79 >> 2] = $84;
  $88 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, HEAP32[$70 >> 2] | 0, ($l_3 | 0) == 0 ? 2 : $l_3) | 0;
  $89 = $type + 4 | 0;
  HEAP32[$88 + 20 >> 2] = HEAP32[$89 >> 2];
  HEAP32[$88 + 8 >> 2] = $84;
  HEAP32[$88 + 24 >> 2] = HEAP32[$first >> 2];
  HEAP32[$70 >> 2] = 6;
  HEAP32[$89 >> 2] = $88;
  STACKTOP = sp;
  return;
 } else if (($1 | 0) == 91) {
  _next();
  $96 = HEAP32[5310] | 0;
  if (($96 | 0) == 288) {
   _next();
   $100 = HEAP32[5310] | 0;
  } else {
   $100 = $96;
  }
  HEAP32[$n >> 2] = -1;
  do {
   if (($100 | 0) == 93) {
    $t1_0 = 0;
    $177 = -1;
   } else {
    do {
     if ((HEAP32[5352] | 0) == 0 | (HEAP32[5338] | 0) != 0) {
      $110 = _expr_const() | 0;
      $111 = $cval_sroa_2_i | 0;
      $112 = HEAP32[5024] | 0;
      if ($112 >>> 0 < 66472 >>> 0) {
       $116 = $112;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $116 = HEAP32[5024] | 0;
      }
      do {
       if ($116 >>> 0 < 56272 >>> 0) {
        $128 = $116;
       } else {
        $121 = HEAPU16[$116 + 8 >> 1] | 0;
        if (!(($121 & 63 | 0) == 51 | ($121 & 62 | 0) == 52)) {
         $128 = $116;
         break;
        }
        _gv(1) | 0;
        $128 = HEAP32[5024] | 0;
       }
      } while (0);
      $129 = $128 + 40 | 0;
      HEAP32[5024] = $129;
      $130 = $129;
      $$etemp$1 = 21728;
      $131$1 = HEAP32[$$etemp$1 + 4 >> 2] | 0;
      HEAP32[$130 >> 2] = HEAP32[$$etemp$1 >> 2];
      HEAP32[$130 + 4 >> 2] = $131$1;
      HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
      HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
      $136 = HEAP32[5024] | 0;
      HEAP32[$136 + 16 >> 2] = $110;
      $140 = $136 + 20 | 0;
      HEAP32[$140 >> 2] = HEAP32[$111 >> 2];
      HEAP32[$140 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
      HEAP32[$140 + 8 >> 2] = HEAP32[$111 + 8 >> 2];
     } else {
      _expr_eq();
      if ((HEAP32[5310] | 0) != 44) {
       break;
      }
      do {
       $141 = HEAP32[5024] | 0;
       $144 = HEAPU16[$141 + 8 >> 1] | 0;
       do {
        if (($144 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
         if (($144 & 62 | 0) != 52) {
          break;
         }
         _gsym(HEAP32[$141 + 16 >> 2] | 0);
        } else {
         _o(55517);
        }
       } while (0);
       HEAP32[5024] = (HEAP32[5024] | 0) - 40;
       _next();
       _expr_eq();
      } while ((HEAP32[5310] | 0) == 44);
     }
    } while (0);
    $161 = HEAP32[5024] | 0;
    if ((HEAP16[$161 + 8 >> 1] & 831) == 48) {
     $169 = HEAP32[$161 + 16 >> 2] | 0;
     HEAP32[$n >> 2] = $169;
     if (($169 | 0) >= 0) {
      $t1_0 = 0;
      $177 = $169;
      break;
     }
     _tcc_error(12240, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $t1_0 = 0;
     $177 = $169;
     break;
    } else {
     $175 = HEAP32[$161 >> 2] & 15;
     if (($175 | 0) == 12 | ($175 | 0) == 2 | ($175 | 0) == 1 | ($175 | 0) == 0) {
      $t1_0 = 131072;
      $177 = -1;
      break;
     }
     _tcc_error(12120, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $t1_0 = 131072;
     $177 = -1;
     break;
    }
   }
  } while (0);
  _skip(93);
  _post_type($type, $ad);
  $178 = $type | 0;
  $181 = HEAP32[$178 >> 2] & 131072 | $t1_0;
  if (($181 | 0) == 0) {
   $312 = $177;
  } else {
   $184 = _type_size(21728, $align) | 0;
   $189 = (HEAP32[5356] | 0) - $184 & -(HEAP32[$align >> 2] | 0);
   HEAP32[5356] = $189;
   HEAP32[$n >> 2] = $189;
   if ((HEAP32[$178 >> 2] & 131072 | 0) == 0) {
    $229 = _type_size($type, $align) | 0;
    $230 = $cval_i_i_sroa_4 | 0;
    $231 = HEAP32[5024] | 0;
    if ($231 >>> 0 < 66472 >>> 0) {
     $235 = $231;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $235 = HEAP32[5024] | 0;
    }
    do {
     if ($235 >>> 0 < 56272 >>> 0) {
      $247 = $235;
     } else {
      $240 = HEAPU16[$235 + 8 >> 1] | 0;
      if (!(($240 & 63 | 0) == 51 | ($240 & 62 | 0) == 52)) {
       $247 = $235;
       break;
      }
      _gv(1) | 0;
      $247 = HEAP32[5024] | 0;
     }
    } while (0);
    $248 = $247 + 40 | 0;
    HEAP32[5024] = $248;
    $249 = $248;
    $$etemp$15 = 21728;
    $250$1 = HEAP32[$$etemp$15 + 4 >> 2] | 0;
    HEAP32[$249 >> 2] = HEAP32[$$etemp$15 >> 2];
    HEAP32[$249 + 4 >> 2] = $250$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $255 = HEAP32[5024] | 0;
    HEAP32[$255 + 16 >> 2] = $229;
    $259 = $255 + 20 | 0;
    HEAP32[$259 >> 2] = HEAP32[$230 >> 2];
    HEAP32[$259 + 4 >> 2] = HEAP32[$230 + 4 >> 2];
    HEAP32[$259 + 8 >> 2] = HEAP32[$230 + 8 >> 2];
   } else {
    $197 = HEAP32[(HEAP32[$type + 4 >> 2] | 0) + 12 >> 2] | 0;
    $198 = $cval_sroa_2_i15 | 0;
    $199 = HEAP32[5024] | 0;
    if ($199 >>> 0 < 66472 >>> 0) {
     $203 = $199;
    } else {
     _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $203 = HEAP32[5024] | 0;
    }
    do {
     if ($203 >>> 0 < 56272 >>> 0) {
      $215 = $203;
     } else {
      $208 = HEAPU16[$203 + 8 >> 1] | 0;
      if (!(($208 & 63 | 0) == 51 | ($208 & 62 | 0) == 52)) {
       $215 = $203;
       break;
      }
      _gv(1) | 0;
      $215 = HEAP32[5024] | 0;
     }
    } while (0);
    $216 = $215 + 40 | 0;
    HEAP32[5024] = $216;
    $217 = $216;
    $$etemp$8 = 21728;
    $218$1 = HEAP32[$$etemp$8 + 4 >> 2] | 0;
    HEAP32[$217 >> 2] = HEAP32[$$etemp$8 >> 2];
    HEAP32[$217 + 4 >> 2] = $218$1;
    HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
    HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
    $223 = HEAP32[5024] | 0;
    HEAP32[$223 + 16 >> 2] = $197;
    $227 = $223 + 20 | 0;
    HEAP32[$227 >> 2] = HEAP32[$198 >> 2];
    HEAP32[$227 + 4 >> 2] = HEAP32[$198 + 4 >> 2];
    HEAP32[$227 + 8 >> 2] = HEAP32[$198 + 8 >> 2];
   }
   _gen_op(42);
   $260 = HEAP32[5356] | 0;
   $261 = $cval_sroa_2_i | 0;
   $262 = HEAP32[5024] | 0;
   if ($262 >>> 0 < 66472 >>> 0) {
    $266 = $262;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $266 = HEAP32[5024] | 0;
   }
   do {
    if ($266 >>> 0 < 56272 >>> 0) {
     $278 = $266;
    } else {
     $271 = HEAPU16[$266 + 8 >> 1] | 0;
     if (!(($271 & 63 | 0) == 51 | ($271 & 62 | 0) == 52)) {
      $278 = $266;
      break;
     }
     _gv(1) | 0;
     $278 = HEAP32[5024] | 0;
    }
   } while (0);
   $279 = $278 + 40 | 0;
   HEAP32[5024] = $279;
   $280 = $279;
   $$etemp$22 = 21728;
   $281$1 = HEAP32[$$etemp$22 + 4 >> 2] | 0;
   HEAP32[$280 >> 2] = HEAP32[$$etemp$22 >> 2];
   HEAP32[$280 + 4 >> 2] = $281$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $286 = HEAP32[5024] | 0;
   HEAP32[$286 + 16 >> 2] = $260;
   $290 = $286 + 20 | 0;
   HEAP32[$290 >> 2] = HEAP32[$261 >> 2];
   HEAP32[$290 + 4 >> 2] = HEAP32[$261 + 4 >> 2];
   HEAP32[$290 + 8 >> 2] = HEAP32[$261 + 8 >> 2];
   $291 = $tmp_i;
   $292 = HEAP32[5024] | 0;
   do {
    if ($292 >>> 0 < 56272 >>> 0) {
     $304 = $292;
    } else {
     $297 = HEAPU16[$292 + 8 >> 1] | 0;
     if (!(($297 & 63 | 0) == 51 | ($297 & 62 | 0) == 52)) {
      $304 = $292;
      break;
     }
     _gv(1) | 0;
     $304 = HEAP32[5024] | 0;
    }
   } while (0);
   $305 = $304;
   HEAP32[$291 >> 2] = HEAP32[$305 >> 2];
   HEAP32[$291 + 4 >> 2] = HEAP32[$305 + 4 >> 2];
   HEAP32[$291 + 8 >> 2] = HEAP32[$305 + 8 >> 2];
   HEAP32[$291 + 12 >> 2] = HEAP32[$305 + 12 >> 2];
   HEAP32[$291 + 16 >> 2] = HEAP32[$305 + 16 >> 2];
   HEAP32[$291 + 20 >> 2] = HEAP32[$305 + 20 >> 2];
   HEAP32[$291 + 24 >> 2] = HEAP32[$305 + 24 >> 2];
   HEAP32[$291 + 28 >> 2] = HEAP32[$305 + 28 >> 2];
   HEAP32[$291 + 32 >> 2] = HEAP32[$305 + 32 >> 2];
   HEAP32[$291 + 36 >> 2] = HEAP32[$305 + 36 >> 2];
   $307 = $304 - 40 | 0;
   HEAP32[$305 >> 2] = HEAP32[$307 >> 2];
   HEAP32[$305 + 4 >> 2] = HEAP32[$307 + 4 >> 2];
   HEAP32[$305 + 8 >> 2] = HEAP32[$307 + 8 >> 2];
   HEAP32[$305 + 12 >> 2] = HEAP32[$307 + 12 >> 2];
   HEAP32[$305 + 16 >> 2] = HEAP32[$307 + 16 >> 2];
   HEAP32[$305 + 20 >> 2] = HEAP32[$307 + 20 >> 2];
   HEAP32[$305 + 24 >> 2] = HEAP32[$307 + 24 >> 2];
   HEAP32[$305 + 28 >> 2] = HEAP32[$307 + 28 >> 2];
   HEAP32[$305 + 32 >> 2] = HEAP32[$307 + 32 >> 2];
   HEAP32[$305 + 36 >> 2] = HEAP32[$307 + 36 >> 2];
   $310 = (HEAP32[5024] | 0) - 40 | 0;
   HEAP32[$310 >> 2] = HEAP32[$291 >> 2];
   HEAP32[$310 + 4 >> 2] = HEAP32[$291 + 4 >> 2];
   HEAP32[$310 + 8 >> 2] = HEAP32[$291 + 8 >> 2];
   HEAP32[$310 + 12 >> 2] = HEAP32[$291 + 12 >> 2];
   HEAP32[$310 + 16 >> 2] = HEAP32[$291 + 16 >> 2];
   HEAP32[$310 + 20 >> 2] = HEAP32[$291 + 20 >> 2];
   HEAP32[$310 + 24 >> 2] = HEAP32[$291 + 24 >> 2];
   HEAP32[$310 + 28 >> 2] = HEAP32[$291 + 28 >> 2];
   HEAP32[$310 + 32 >> 2] = HEAP32[$291 + 32 >> 2];
   HEAP32[$310 + 36 >> 2] = HEAP32[$291 + 36 >> 2];
   _vstore();
   $312 = $189;
  }
  if (($312 | 0) != -1) {
   $315 = HEAP32[5024] | 0;
   $318 = HEAPU16[$315 + 8 >> 1] | 0;
   do {
    if (($318 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
     if (($318 & 62 | 0) != 52) {
      break;
     }
     _gsym(HEAP32[$315 + 16 >> 2] | 0);
    } else {
     _o(55517);
    }
   } while (0);
   HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  }
  $337 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, HEAP32[$178 >> 2] | 0, $312) | 0;
  $338 = $type + 4 | 0;
  HEAP32[$337 + 20 >> 2] = HEAP32[$338 >> 2];
  HEAP32[$337 + 8 >> 2] = 0;
  HEAP32[$178 >> 2] = ($181 | 0) != 0 ? 131076 : 36;
  HEAP32[$338 >> 2] = $337;
  STACKTOP = sp;
  return;
 } else {
  STACKTOP = sp;
  return;
 }
}
function _free($mem) {
 $mem = $mem | 0;
 var $3 = 0, $4 = 0, $5 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $_sum3 = 0, $24 = 0, $25 = 0, $26 = 0, $32 = 0, $37 = 0, $40 = 0, $43 = 0, $64 = 0, $_pre_phi83 = 0, $69 = 0, $72 = 0, $75 = 0, $80 = 0, $84 = 0, $88 = 0, $94 = 0, $95 = 0, $99 = 0, $100 = 0, $RP_0 = 0, $R_0 = 0, $102 = 0, $103 = 0, $106 = 0, $107 = 0, $R_1 = 0, $118 = 0, $120 = 0, $134 = 0, $151 = 0, $164 = 0, $177 = 0, $psize_0 = 0, $p_0 = 0, $189 = 0, $193 = 0, $194 = 0, $204 = 0, $215 = 0, $222 = 0, $223 = 0, $228 = 0, $231 = 0, $234 = 0, $257 = 0, $_pre_phi81 = 0, $262 = 0, $265 = 0, $268 = 0, $273 = 0, $278 = 0, $282 = 0, $288 = 0, $289 = 0, $293 = 0, $294 = 0, $RP9_0 = 0, $R7_0 = 0, $296 = 0, $297 = 0, $300 = 0, $301 = 0, $R7_1 = 0, $313 = 0, $315 = 0, $329 = 0, $346 = 0, $359 = 0, $psize_1 = 0, $385 = 0, $388 = 0, $390 = 0, $391 = 0, $392 = 0, $398 = 0, $399 = 0, $_pre_phi = 0, $F16_0 = 0, $409 = 0, $410 = 0, $417 = 0, $418 = 0, $421 = 0, $423 = 0, $426 = 0, $431 = 0, $I18_0 = 0, $438 = 0, $442 = 0, $443 = 0, $452 = 0, $458 = 0, $K19_073 = 0, $T_072 = 0, $472 = 0, $473 = 0, $T_0_lcssa = 0, $484 = 0, $485 = 0, $487 = 0, $498 = 0, $sp_0_in_i = 0, $sp_0_i = 0;
 if (($mem | 0) == 0) {
  return;
 }
 $3 = $mem - 8 | 0;
 $4 = $3;
 $5 = HEAP32[13944] | 0;
 if ($3 >>> 0 < $5 >>> 0) {
  _abort();
 }
 $10 = HEAP32[$mem - 4 >> 2] | 0;
 $11 = $10 & 3;
 if (($11 | 0) == 1) {
  _abort();
 }
 $14 = $10 & -8;
 $15 = $mem + ($14 - 8) | 0;
 $16 = $15;
 L10 : do {
  if (($10 & 1 | 0) == 0) {
   $21 = HEAP32[$3 >> 2] | 0;
   if (($11 | 0) == 0) {
    return;
   }
   $_sum3 = -8 - $21 | 0;
   $24 = $mem + $_sum3 | 0;
   $25 = $24;
   $26 = $21 + $14 | 0;
   if ($24 >>> 0 < $5 >>> 0) {
    _abort();
   }
   if (($25 | 0) == (HEAP32[13945] | 0)) {
    $177 = $mem + ($14 - 4) | 0;
    if ((HEAP32[$177 >> 2] & 3 | 0) != 3) {
     $p_0 = $25;
     $psize_0 = $26;
     break;
    }
    HEAP32[13942] = $26;
    HEAP32[$177 >> 2] = HEAP32[$177 >> 2] & -2;
    HEAP32[$mem + ($_sum3 + 4) >> 2] = $26 | 1;
    HEAP32[$15 >> 2] = $26;
    return;
   }
   $32 = $21 >>> 3;
   if ($21 >>> 0 < 256 >>> 0) {
    $37 = HEAP32[$mem + ($_sum3 + 8) >> 2] | 0;
    $40 = HEAP32[$mem + ($_sum3 + 12) >> 2] | 0;
    $43 = 55800 + ($32 << 1 << 2) | 0;
    do {
     if (($37 | 0) != ($43 | 0)) {
      if ($37 >>> 0 < $5 >>> 0) {
       _abort();
      }
      if ((HEAP32[$37 + 12 >> 2] | 0) == ($25 | 0)) {
       break;
      }
      _abort();
     }
    } while (0);
    if (($40 | 0) == ($37 | 0)) {
     HEAP32[13940] = HEAP32[13940] & ~(1 << $32);
     $p_0 = $25;
     $psize_0 = $26;
     break;
    }
    do {
     if (($40 | 0) == ($43 | 0)) {
      $_pre_phi83 = $40 + 8 | 0;
     } else {
      if ($40 >>> 0 < $5 >>> 0) {
       _abort();
      }
      $64 = $40 + 8 | 0;
      if ((HEAP32[$64 >> 2] | 0) == ($25 | 0)) {
       $_pre_phi83 = $64;
       break;
      }
      _abort();
     }
    } while (0);
    HEAP32[$37 + 12 >> 2] = $40;
    HEAP32[$_pre_phi83 >> 2] = $37;
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
   $69 = $24;
   $72 = HEAP32[$mem + ($_sum3 + 24) >> 2] | 0;
   $75 = HEAP32[$mem + ($_sum3 + 12) >> 2] | 0;
   do {
    if (($75 | 0) == ($69 | 0)) {
     $94 = $mem + ($_sum3 + 20) | 0;
     $95 = HEAP32[$94 >> 2] | 0;
     if (($95 | 0) == 0) {
      $99 = $mem + ($_sum3 + 16) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if (($100 | 0) == 0) {
       $R_1 = 0;
       break;
      } else {
       $R_0 = $100;
       $RP_0 = $99;
      }
     } else {
      $R_0 = $95;
      $RP_0 = $94;
     }
     while (1) {
      $102 = $R_0 + 20 | 0;
      $103 = HEAP32[$102 >> 2] | 0;
      if (($103 | 0) != 0) {
       $R_0 = $103;
       $RP_0 = $102;
       continue;
      }
      $106 = $R_0 + 16 | 0;
      $107 = HEAP32[$106 >> 2] | 0;
      if (($107 | 0) == 0) {
       break;
      } else {
       $R_0 = $107;
       $RP_0 = $106;
      }
     }
     if ($RP_0 >>> 0 < $5 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      $R_1 = $R_0;
      break;
     }
    } else {
     $80 = HEAP32[$mem + ($_sum3 + 8) >> 2] | 0;
     if ($80 >>> 0 < $5 >>> 0) {
      _abort();
     }
     $84 = $80 + 12 | 0;
     if ((HEAP32[$84 >> 2] | 0) != ($69 | 0)) {
      _abort();
     }
     $88 = $75 + 8 | 0;
     if ((HEAP32[$88 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$84 >> 2] = $75;
      HEAP32[$88 >> 2] = $80;
      $R_1 = $75;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if (($72 | 0) == 0) {
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
   $118 = $mem + ($_sum3 + 28) | 0;
   $120 = 56064 + (HEAP32[$118 >> 2] << 2) | 0;
   do {
    if (($69 | 0) == (HEAP32[$120 >> 2] | 0)) {
     HEAP32[$120 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$118 >> 2]);
     $p_0 = $25;
     $psize_0 = $26;
     break L10;
    } else {
     if ($72 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     }
     $134 = $72 + 16 | 0;
     if ((HEAP32[$134 >> 2] | 0) == ($69 | 0)) {
      HEAP32[$134 >> 2] = $R_1;
     } else {
      HEAP32[$72 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      $p_0 = $25;
      $psize_0 = $26;
      break L10;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
    _abort();
   }
   HEAP32[$R_1 + 24 >> 2] = $72;
   $151 = HEAP32[$mem + ($_sum3 + 16) >> 2] | 0;
   do {
    if (($151 | 0) != 0) {
     if ($151 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1 + 16 >> 2] = $151;
      HEAP32[$151 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   $164 = HEAP32[$mem + ($_sum3 + 20) >> 2] | 0;
   if (($164 | 0) == 0) {
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
   if ($164 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
    _abort();
   } else {
    HEAP32[$R_1 + 20 >> 2] = $164;
    HEAP32[$164 + 24 >> 2] = $R_1;
    $p_0 = $25;
    $psize_0 = $26;
    break;
   }
  } else {
   $p_0 = $4;
   $psize_0 = $14;
  }
 } while (0);
 $189 = $p_0;
 if ($189 >>> 0 >= $15 >>> 0) {
  _abort();
 }
 $193 = $mem + ($14 - 4) | 0;
 $194 = HEAP32[$193 >> 2] | 0;
 if (($194 & 1 | 0) == 0) {
  _abort();
 }
 do {
  if (($194 & 2 | 0) == 0) {
   if (($16 | 0) == (HEAP32[13946] | 0)) {
    $204 = (HEAP32[13943] | 0) + $psize_0 | 0;
    HEAP32[13943] = $204;
    HEAP32[13946] = $p_0;
    HEAP32[$p_0 + 4 >> 2] = $204 | 1;
    if (($p_0 | 0) != (HEAP32[13945] | 0)) {
     return;
    }
    HEAP32[13945] = 0;
    HEAP32[13942] = 0;
    return;
   }
   if (($16 | 0) == (HEAP32[13945] | 0)) {
    $215 = (HEAP32[13942] | 0) + $psize_0 | 0;
    HEAP32[13942] = $215;
    HEAP32[13945] = $p_0;
    HEAP32[$p_0 + 4 >> 2] = $215 | 1;
    HEAP32[$189 + $215 >> 2] = $215;
    return;
   }
   $222 = ($194 & -8) + $psize_0 | 0;
   $223 = $194 >>> 3;
   L112 : do {
    if ($194 >>> 0 < 256 >>> 0) {
     $228 = HEAP32[$mem + $14 >> 2] | 0;
     $231 = HEAP32[$mem + ($14 | 4) >> 2] | 0;
     $234 = 55800 + ($223 << 1 << 2) | 0;
     do {
      if (($228 | 0) != ($234 | 0)) {
       if ($228 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       }
       if ((HEAP32[$228 + 12 >> 2] | 0) == ($16 | 0)) {
        break;
       }
       _abort();
      }
     } while (0);
     if (($231 | 0) == ($228 | 0)) {
      HEAP32[13940] = HEAP32[13940] & ~(1 << $223);
      break;
     }
     do {
      if (($231 | 0) == ($234 | 0)) {
       $_pre_phi81 = $231 + 8 | 0;
      } else {
       if ($231 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       }
       $257 = $231 + 8 | 0;
       if ((HEAP32[$257 >> 2] | 0) == ($16 | 0)) {
        $_pre_phi81 = $257;
        break;
       }
       _abort();
      }
     } while (0);
     HEAP32[$228 + 12 >> 2] = $231;
     HEAP32[$_pre_phi81 >> 2] = $228;
    } else {
     $262 = $15;
     $265 = HEAP32[$mem + ($14 + 16) >> 2] | 0;
     $268 = HEAP32[$mem + ($14 | 4) >> 2] | 0;
     do {
      if (($268 | 0) == ($262 | 0)) {
       $288 = $mem + ($14 + 12) | 0;
       $289 = HEAP32[$288 >> 2] | 0;
       if (($289 | 0) == 0) {
        $293 = $mem + ($14 + 8) | 0;
        $294 = HEAP32[$293 >> 2] | 0;
        if (($294 | 0) == 0) {
         $R7_1 = 0;
         break;
        } else {
         $R7_0 = $294;
         $RP9_0 = $293;
        }
       } else {
        $R7_0 = $289;
        $RP9_0 = $288;
       }
       while (1) {
        $296 = $R7_0 + 20 | 0;
        $297 = HEAP32[$296 >> 2] | 0;
        if (($297 | 0) != 0) {
         $R7_0 = $297;
         $RP9_0 = $296;
         continue;
        }
        $300 = $R7_0 + 16 | 0;
        $301 = HEAP32[$300 >> 2] | 0;
        if (($301 | 0) == 0) {
         break;
        } else {
         $R7_0 = $301;
         $RP9_0 = $300;
        }
       }
       if ($RP9_0 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$RP9_0 >> 2] = 0;
        $R7_1 = $R7_0;
        break;
       }
      } else {
       $273 = HEAP32[$mem + $14 >> 2] | 0;
       if ($273 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       }
       $278 = $273 + 12 | 0;
       if ((HEAP32[$278 >> 2] | 0) != ($262 | 0)) {
        _abort();
       }
       $282 = $268 + 8 | 0;
       if ((HEAP32[$282 >> 2] | 0) == ($262 | 0)) {
        HEAP32[$278 >> 2] = $268;
        HEAP32[$282 >> 2] = $273;
        $R7_1 = $268;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     if (($265 | 0) == 0) {
      break;
     }
     $313 = $mem + ($14 + 20) | 0;
     $315 = 56064 + (HEAP32[$313 >> 2] << 2) | 0;
     do {
      if (($262 | 0) == (HEAP32[$315 >> 2] | 0)) {
       HEAP32[$315 >> 2] = $R7_1;
       if (($R7_1 | 0) != 0) {
        break;
       }
       HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$313 >> 2]);
       break L112;
      } else {
       if ($265 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       }
       $329 = $265 + 16 | 0;
       if ((HEAP32[$329 >> 2] | 0) == ($262 | 0)) {
        HEAP32[$329 >> 2] = $R7_1;
       } else {
        HEAP32[$265 + 20 >> 2] = $R7_1;
       }
       if (($R7_1 | 0) == 0) {
        break L112;
       }
      }
     } while (0);
     if ($R7_1 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     }
     HEAP32[$R7_1 + 24 >> 2] = $265;
     $346 = HEAP32[$mem + ($14 + 8) >> 2] | 0;
     do {
      if (($346 | 0) != 0) {
       if ($346 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$R7_1 + 16 >> 2] = $346;
        HEAP32[$346 + 24 >> 2] = $R7_1;
        break;
       }
      }
     } while (0);
     $359 = HEAP32[$mem + ($14 + 12) >> 2] | 0;
     if (($359 | 0) == 0) {
      break;
     }
     if ($359 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R7_1 + 20 >> 2] = $359;
      HEAP32[$359 + 24 >> 2] = $R7_1;
      break;
     }
    }
   } while (0);
   HEAP32[$p_0 + 4 >> 2] = $222 | 1;
   HEAP32[$189 + $222 >> 2] = $222;
   if (($p_0 | 0) != (HEAP32[13945] | 0)) {
    $psize_1 = $222;
    break;
   }
   HEAP32[13942] = $222;
   return;
  } else {
   HEAP32[$193 >> 2] = $194 & -2;
   HEAP32[$p_0 + 4 >> 2] = $psize_0 | 1;
   HEAP32[$189 + $psize_0 >> 2] = $psize_0;
   $psize_1 = $psize_0;
  }
 } while (0);
 $385 = $psize_1 >>> 3;
 if ($psize_1 >>> 0 < 256 >>> 0) {
  $388 = $385 << 1;
  $390 = 55800 + ($388 << 2) | 0;
  $391 = HEAP32[13940] | 0;
  $392 = 1 << $385;
  do {
   if (($391 & $392 | 0) == 0) {
    HEAP32[13940] = $391 | $392;
    $F16_0 = $390;
    $_pre_phi = 55800 + ($388 + 2 << 2) | 0;
   } else {
    $398 = 55800 + ($388 + 2 << 2) | 0;
    $399 = HEAP32[$398 >> 2] | 0;
    if ($399 >>> 0 >= (HEAP32[13944] | 0) >>> 0) {
     $F16_0 = $399;
     $_pre_phi = $398;
     break;
    }
    _abort();
   }
  } while (0);
  HEAP32[$_pre_phi >> 2] = $p_0;
  HEAP32[$F16_0 + 12 >> 2] = $p_0;
  HEAP32[$p_0 + 8 >> 2] = $F16_0;
  HEAP32[$p_0 + 12 >> 2] = $390;
  return;
 }
 $409 = $p_0;
 $410 = $psize_1 >>> 8;
 do {
  if (($410 | 0) == 0) {
   $I18_0 = 0;
  } else {
   if ($psize_1 >>> 0 > 16777215 >>> 0) {
    $I18_0 = 31;
    break;
   }
   $417 = ($410 + 1048320 | 0) >>> 16 & 8;
   $418 = $410 << $417;
   $421 = ($418 + 520192 | 0) >>> 16 & 4;
   $423 = $418 << $421;
   $426 = ($423 + 245760 | 0) >>> 16 & 2;
   $431 = 14 - ($421 | $417 | $426) + ($423 << $426 >>> 15) | 0;
   $I18_0 = $psize_1 >>> (($431 + 7 | 0) >>> 0) & 1 | $431 << 1;
  }
 } while (0);
 $438 = 56064 + ($I18_0 << 2) | 0;
 HEAP32[$p_0 + 28 >> 2] = $I18_0;
 HEAP32[$p_0 + 20 >> 2] = 0;
 HEAP32[$p_0 + 16 >> 2] = 0;
 $442 = HEAP32[13941] | 0;
 $443 = 1 << $I18_0;
 L199 : do {
  if (($442 & $443 | 0) == 0) {
   HEAP32[13941] = $442 | $443;
   HEAP32[$438 >> 2] = $409;
   HEAP32[$p_0 + 24 >> 2] = $438;
   HEAP32[$p_0 + 12 >> 2] = $p_0;
   HEAP32[$p_0 + 8 >> 2] = $p_0;
  } else {
   $452 = HEAP32[$438 >> 2] | 0;
   if (($I18_0 | 0) == 31) {
    $458 = 0;
   } else {
    $458 = 25 - ($I18_0 >>> 1) | 0;
   }
   L205 : do {
    if ((HEAP32[$452 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
     $T_0_lcssa = $452;
    } else {
     $T_072 = $452;
     $K19_073 = $psize_1 << $458;
     while (1) {
      $472 = $T_072 + 16 + ($K19_073 >>> 31 << 2) | 0;
      $473 = HEAP32[$472 >> 2] | 0;
      if (($473 | 0) == 0) {
       break;
      }
      if ((HEAP32[$473 + 4 >> 2] & -8 | 0) == ($psize_1 | 0)) {
       $T_0_lcssa = $473;
       break L205;
      } else {
       $T_072 = $473;
       $K19_073 = $K19_073 << 1;
      }
     }
     if ($472 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$472 >> 2] = $409;
      HEAP32[$p_0 + 24 >> 2] = $T_072;
      HEAP32[$p_0 + 12 >> 2] = $p_0;
      HEAP32[$p_0 + 8 >> 2] = $p_0;
      break L199;
     }
    }
   } while (0);
   $484 = $T_0_lcssa + 8 | 0;
   $485 = HEAP32[$484 >> 2] | 0;
   $487 = HEAP32[13944] | 0;
   if ($T_0_lcssa >>> 0 >= $487 >>> 0 & $485 >>> 0 >= $487 >>> 0) {
    HEAP32[$485 + 12 >> 2] = $409;
    HEAP32[$484 >> 2] = $409;
    HEAP32[$p_0 + 8 >> 2] = $485;
    HEAP32[$p_0 + 12 >> 2] = $T_0_lcssa;
    HEAP32[$p_0 + 24 >> 2] = 0;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $498 = (HEAP32[13948] | 0) - 1 | 0;
 HEAP32[13948] = $498;
 if (($498 | 0) == 0) {
  $sp_0_in_i = 56216;
 } else {
  return;
 }
 while (1) {
  $sp_0_i = HEAP32[$sp_0_in_i >> 2] | 0;
  if (($sp_0_i | 0) == 0) {
   break;
  } else {
   $sp_0_in_i = $sp_0_i + 8 | 0;
  }
 }
 HEAP32[13948] = -1;
 return;
}
function _decl_initializer_alloc($type, $ad, $r, $has_init, $v, $asm_label, $scope) {
 $type = $type | 0;
 $ad = $ad | 0;
 $r = $r | 0;
 $has_init = $has_init | 0;
 $v = $v | 0;
 $asm_label = $asm_label | 0;
 $scope = $scope | 0;
 var $align_i = 0, $cval_sroa_2_i = 0, $align = 0, $saved_parse_state = 0, $init_str = 0, $cval_sroa_2 = 0, $2 = 0, $field_0 = 0, $12 = 0, $field_0_lcssa = 0, $flexible_array_0 = 0, $25 = 0, $32 = 0, $level_0 = 0, $_pr = 0, $38 = 0, $level_1 = 0, $46 = 0, $49 = 0, $size_0 = 0, $53 = 0, $56 = 0, $58 = 0, $size_1 = 0, $66 = 0, $68 = 0, $83 = 0, $98 = 0, $108 = 0, $118 = 0, $126 = 0, $132 = 0, $ps_1_i17 = 0, $140 = 0, $141 = 0, $145 = 0, $150 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161$1 = 0, $167 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $184 = 0, $187 = 0, $191 = 0, $193 = 0, $194 = 0, $204 = 0, $211 = 0, $sym_0 = 0, $217 = 0, $sec_0_in = 0, $sec_0 = 0, $sec_019 = 0, $229 = 0, $231 = 0, $235 = 0, $_13 = 0, $250 = 0, $251 = 0, $255 = 0, $sec_020 = 0, $addr_0 = 0, $263 = 0, $271 = 0, $277 = 0, $ps_1_i = 0, $sym_1 = 0, $297 = 0, $298 = 0, $302 = 0, $307 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318$1 = 0, $323 = 0, $327 = 0, $328 = 0, $sym_2 = 0, $336 = 0, $340 = 0, $347 = 0, $356 = 0, $360 = 0, $sec_1 = 0, $addr_1 = 0, $371 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $align_i = sp | 0;
 $cval_sroa_2_i = sp + 8 | 0;
 $align = sp + 24 | 0;
 $saved_parse_state = sp + 32 | 0;
 $init_str = sp + 64 | 0;
 $cval_sroa_2 = sp + 80 | 0;
 _memset($saved_parse_state | 0, 0, 32) | 0;
 $2 = $type | 0;
 do {
  if ((HEAP32[$2 >> 2] & 15 | 0) == 7) {
   $field_0 = HEAP32[$type + 4 >> 2] | 0;
   while (1) {
    if (($field_0 | 0) == 0) {
     $field_0_lcssa = 0;
     break;
    }
    $12 = HEAP32[$field_0 + 24 >> 2] | 0;
    if (($12 | 0) == 0) {
     $field_0_lcssa = $field_0;
     break;
    } else {
     $field_0 = $12;
    }
   }
   if ((HEAP32[$field_0_lcssa + 16 >> 2] & 32 | 0) == 0) {
    $flexible_array_0 = 0;
    break;
   }
   $flexible_array_0 = (HEAP32[(HEAP32[$field_0_lcssa + 20 >> 2] | 0) + 12 >> 2] | 0) < 0 ? $field_0_lcssa : 0;
  } else {
   $flexible_array_0 = 0;
  }
 } while (0);
 $25 = _type_size($type, $align) | 0;
 _tok_str_new($init_str);
 if (($25 | 0) < 0) {
  label = 9;
 } else {
  if (($flexible_array_0 | 0) != 0 & ($has_init | 0) != 0) {
   label = 9;
  } else {
   $size_0 = $25;
  }
 }
 do {
  if ((label | 0) == 9) {
   L13 : do {
    if (($has_init | 0) == 0) {
     _tcc_error(15032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $level_0 = 0;
     label = 13;
    } else if (($has_init | 0) == 2) {
     while (1) {
      $32 = HEAP32[5310] | 0;
      if (!(($32 | 0) == 184 | ($32 | 0) == 181)) {
       break L13;
      }
      _tok_str_add_tok($init_str);
      _next();
     }
    } else {
     $level_0 = 0;
     label = 13;
    }
   } while (0);
   L18 : do {
    if ((label | 0) == 13) {
     while (1) {
      label = 0;
      $_pr = HEAP32[5310] | 0;
      if (($level_0 | 0) <= 0) {
       if (($_pr | 0) == 59 | ($_pr | 0) == 44) {
        break L18;
       }
      }
      if (($_pr | 0) < 0) {
       _tcc_error(14936, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
      _tok_str_add_tok($init_str);
      $38 = HEAP32[5310] | 0;
      if (($38 | 0) == 123) {
       $level_1 = $level_0 + 1 | 0;
      } else if (($38 | 0) == 125) {
       if (($level_0 | 0) < 2) {
        break;
       } else {
        $level_1 = $level_0 - 1 | 0;
       }
      } else {
       $level_1 = $level_0;
      }
      _next();
      $level_0 = $level_1;
      label = 13;
     }
     _next();
    }
   } while (0);
   _tok_str_add($init_str, -1);
   _tok_str_add($init_str, 0);
   _save_parse_state($saved_parse_state);
   $46 = $init_str | 0;
   HEAP32[5350] = HEAP32[$46 >> 2];
   _next();
   _decl_initializer($type, 0, 0, 1, 1);
   HEAP32[5350] = HEAP32[$46 >> 2];
   _next();
   $49 = _type_size($type, $align) | 0;
   if (($49 | 0) >= 0) {
    $size_0 = $49;
    break;
   }
   _tcc_error(15032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $size_0 = $49;
  }
 } while (0);
 $53 = ($flexible_array_0 | 0) != 0;
 if ($53) {
  $56 = HEAP32[$flexible_array_0 + 20 >> 2] | 0;
  $58 = HEAP32[$56 + 12 >> 2] | 0;
  $size_1 = (Math_imul(_type_size($56 + 16 | 0, $align_i) | 0, $58) | 0) + $size_0 | 0;
 } else {
  $size_1 = $size_0;
 }
 $66 = HEAP32[$ad >> 2] | 0;
 $68 = $66 >>> 3 & 31;
 do {
  if (($68 | 0) == 0) {
   if (($66 & 256 | 0) == 0) {
    break;
   }
   HEAP32[$align >> 2] = 1;
  } else {
   if (($68 | 0) <= (HEAP32[$align >> 2] | 0)) {
    break;
   }
   HEAP32[$align >> 2] = $68;
  }
 } while (0);
 do {
  if (($r & 63 | 0) == 50) {
   $83 = (HEAP32[5314] | 0) + 84 | 0;
   do {
    if ((HEAP32[$83 >> 2] | 0) != 0) {
     if ((HEAP32[$2 >> 2] & 32 | 0) == 0) {
      break;
     }
     HEAP32[5356] = (HEAP32[5356] | 0) - 1;
    }
   } while (0);
   $98 = (HEAP32[5356] | 0) - $size_1 & -(HEAP32[$align >> 2] | 0);
   HEAP32[5356] = $98;
   do {
    if ((HEAP32[$83 >> 2] | 0) != 0) {
     if ((HEAP32[$2 >> 2] & 32 | 0) == 0) {
      break;
     }
     HEAP32[5356] = $98 - 1;
     $108 = _section_ptr_add(HEAP32[5358] | 0, 8) | 0;
     HEAP32[$108 >> 2] = $98;
     HEAP32[$108 + 4 >> 2] = $size_1;
    }
   } while (0);
   if (($v | 0) != 0) {
    $118 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $v, HEAP32[$2 >> 2] | 0, $98) | 0;
    HEAP32[$118 + 20 >> 2] = HEAP32[$type + 4 >> 2];
    HEAP32[$118 + 8 >> 2] = $r;
    if (($v & 536870912 | 0) != 0) {
     $addr_1 = $98;
     $sec_1 = 0;
     break;
    }
    $126 = $v & -1073741825;
    if (($126 | 0) >= 268435456) {
     $addr_1 = $98;
     $sec_1 = 0;
     break;
    }
    $132 = HEAP32[(HEAP32[5316] | 0) + ($126 - 256 << 2) >> 2] | 0;
    $ps_1_i17 = ($v & 1073741824 | 0) == 0 ? $132 + 16 | 0 : $132 + 12 | 0;
    HEAP32[$118 + 32 >> 2] = HEAP32[$ps_1_i17 >> 2];
    HEAP32[$ps_1_i17 >> 2] = $118;
    $addr_1 = $98;
    $sec_1 = 0;
    break;
   }
   $140 = $cval_sroa_2_i | 0;
   $141 = HEAP32[5024] | 0;
   if ($141 >>> 0 < 66472 >>> 0) {
    $145 = $141;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $145 = HEAP32[5024] | 0;
   }
   do {
    if ($145 >>> 0 < 56272 >>> 0) {
     $157 = $145;
    } else {
     $150 = HEAPU16[$145 + 8 >> 1] | 0;
     if (!(($150 & 63 | 0) == 51 | ($150 & 62 | 0) == 52)) {
      $157 = $145;
      break;
     }
     _gv(1) | 0;
     $157 = HEAP32[5024] | 0;
    }
   } while (0);
   $158 = $157 + 40 | 0;
   HEAP32[5024] = $158;
   $159 = $type;
   $160 = $158;
   $161$1 = HEAP32[$159 + 4 >> 2] | 0;
   HEAP32[$160 >> 2] = HEAP32[$159 >> 2];
   HEAP32[$160 + 4 >> 2] = $161$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $r;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $167 = HEAP32[5024] | 0;
   HEAP32[$167 + 16 >> 2] = $98;
   $171 = $167 + 20 | 0;
   HEAP32[$171 >> 2] = HEAP32[$140 >> 2];
   HEAP32[$171 + 4 >> 2] = HEAP32[$140 + 4 >> 2];
   HEAP32[$171 + 8 >> 2] = HEAP32[$140 + 8 >> 2];
   $addr_1 = $98;
   $sec_1 = 0;
  } else {
   $173 = ($v | 0) != 0;
   $174 = ($scope | 0) == 48;
   do {
    if ($173 & $174) {
     $176 = $v - 256 | 0;
     if ($176 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
      $sym_0 = 0;
      break;
     }
     $184 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($176 << 2) >> 2] | 0) + 16 >> 2] | 0;
     if (($184 | 0) == 0) {
      $sym_0 = 0;
      break;
     }
     $187 = $184 + 16 | 0;
     if ((_compare_types($187, $type, 0) | 0) == 0) {
      $191 = _get_tok_str($v, 0) | 0;
      _tcc_error(18888, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $191, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     $193 = $187 | 0;
     $194 = HEAP32[$193 >> 2] | 0;
     if (($194 & 128 | 0) == 0) {
      if (($has_init | 0) != 0) {
       $sym_0 = $184;
       break;
      }
      STACKTOP = sp;
      return;
     }
     HEAP32[$193 >> 2] = $194 & -129;
     if (($194 & 32 | 0) == 0) {
      $sym_0 = $184;
      break;
     }
     $204 = (HEAP32[$184 + 20 >> 2] | 0) + 12 | 0;
     if ((HEAP32[$204 >> 2] | 0) >= 0) {
      $sym_0 = $184;
      break;
     }
     $211 = HEAP32[(HEAP32[$type + 4 >> 2] | 0) + 12 >> 2] | 0;
     if (($211 | 0) <= -1) {
      $sym_0 = $184;
      break;
     }
     HEAP32[$204 >> 2] = $211;
     $sym_0 = $184;
    } else {
     $sym_0 = 0;
    }
   } while (0);
   $217 = HEAP32[$ad + 4 >> 2] | 0;
   do {
    if (($217 | 0) == 0) {
     if (($has_init | 0) == 0) {
      if ((HEAP32[(HEAP32[5314] | 0) + 12 >> 2] | 0) == 0) {
       $addr_0 = 0;
       $sec_020 = 0;
       $255 = 0;
       break;
      } else {
       $sec_0_in = 55704;
      }
     } else {
      $sec_0_in = 55664;
     }
     $sec_0 = HEAP32[$sec_0_in >> 2] | 0;
     if (($sec_0 | 0) == 0) {
      $addr_0 = 0;
      $sec_020 = 0;
      $255 = 0;
     } else {
      $sec_019 = $sec_0;
      label = 64;
     }
    } else {
     $sec_019 = $217;
     label = 64;
    }
   } while (0);
   do {
    if ((label | 0) == 64) {
     $229 = $sec_019 | 0;
     $231 = HEAP32[$align >> 2] | 0;
     $235 = (HEAP32[$229 >> 2] | 0) - 1 + $231 & -$231;
     $_13 = $235 + $size_1 + ((HEAP32[(HEAP32[5314] | 0) + 84 >> 2] | 0) != 0) | 0;
     HEAP32[$229 >> 2] = $_13;
     do {
      if ((HEAP32[$sec_019 + 20 >> 2] | 0) != 8) {
       if ($_13 >>> 0 <= (HEAP32[$sec_019 + 8 >> 2] | 0) >>> 0) {
        break;
       }
       _section_realloc($sec_019, $_13);
      }
     } while (0);
     $250 = HEAP32[$align >> 2] | 0;
     $251 = $sec_019 + 32 | 0;
     if (($250 | 0) <= (HEAP32[$251 >> 2] | 0)) {
      $addr_0 = $235;
      $sec_020 = $sec_019;
      $255 = 1;
      break;
     }
     HEAP32[$251 >> 2] = $250;
     $addr_0 = $235;
     $sec_020 = $sec_019;
     $255 = 1;
    }
   } while (0);
   do {
    if ($173) {
     if ($174 & ($sym_0 | 0) != 0) {
      $sym_1 = $sym_0;
     } else {
      $263 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $v, HEAP32[$2 >> 2] | 0, 0) | 0;
      HEAP32[$263 + 20 >> 2] = HEAP32[$type + 4 >> 2];
      HEAP32[$263 + 8 >> 2] = $r | 512;
      do {
       if (($v & 536870912 | 0) == 0) {
        $271 = $v & -1073741825;
        if (($271 | 0) >= 268435456) {
         break;
        }
        $277 = HEAP32[(HEAP32[5316] | 0) + ($271 - 256 << 2) >> 2] | 0;
        $ps_1_i = ($v & 1073741824 | 0) == 0 ? $277 + 16 | 0 : $277 + 12 | 0;
        HEAP32[$263 + 32 >> 2] = HEAP32[$ps_1_i >> 2];
        HEAP32[$ps_1_i >> 2] = $263;
       }
      } while (0);
      HEAP32[$263 + 4 >> 2] = $asm_label;
      $sym_1 = $263;
     }
     if ($255) {
      _put_extern_sym($sym_1, $sec_020, $addr_0, $size_1);
      $sym_2 = $sym_1;
      break;
     } else {
      _put_extern_sym($sym_1, 0, HEAP32[$align >> 2] | 0, $size_1);
      HEAP16[(HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) + (HEAP32[$sym_1 + 12 >> 2] << 4) + 14 >> 1] = -14;
      $sym_2 = $sym_1;
      break;
     }
    } else {
     $297 = _get_sym_ref($type, $sec_020, $addr_0, $size_1) | 0;
     $298 = HEAP32[5024] | 0;
     if ($298 >>> 0 < 66472 >>> 0) {
      $302 = $298;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $302 = HEAP32[5024] | 0;
     }
     do {
      if ($302 >>> 0 < 56272 >>> 0) {
       $314 = $302;
      } else {
       $307 = HEAPU16[$302 + 8 >> 1] | 0;
       if (!(($307 & 63 | 0) == 51 | ($307 & 62 | 0) == 52)) {
        $314 = $302;
        break;
       }
       _gv(1) | 0;
       $314 = HEAP32[5024] | 0;
      }
     } while (0);
     $315 = $314 + 40 | 0;
     HEAP32[5024] = $315;
     $316 = $type;
     $317 = $315;
     $318$1 = HEAP32[$316 + 4 >> 2] | 0;
     HEAP32[$317 >> 2] = HEAP32[$316 >> 2];
     HEAP32[$317 + 4 >> 2] = $318$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 560;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $323 = HEAP32[5024] | 0;
     HEAP32[$323 + 16 >> 2] = 0;
     $327 = $323 + 20 | 0;
     $328 = $cval_sroa_2 | 0;
     HEAP32[$327 >> 2] = HEAP32[$328 >> 2];
     HEAP32[$327 + 4 >> 2] = HEAP32[$328 + 4 >> 2];
     HEAP32[$327 + 8 >> 2] = HEAP32[$328 + 8 >> 2];
     HEAP32[(HEAP32[5024] | 0) + 32 >> 2] = $297;
     $sym_2 = $297;
    }
   } while (0);
   do {
    if ((HEAP32[$2 >> 2] & 65536 | 0) != 0) {
     $336 = $sym_2 + 16 | 0;
     HEAP32[$336 >> 2] = HEAP32[$336 >> 2] | 65536;
     $340 = HEAP32[$sym_2 + 12 >> 2] | 0;
     if (($340 | 0) <= 0) {
      break;
     }
     $347 = (HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) + ($340 << 4) + 12 | 0;
     HEAP8[$347] = HEAP8[$347] & 15 | 32;
    }
   } while (0);
   if ((HEAP32[(HEAP32[5314] | 0) + 84 >> 2] | 0) == 0) {
    $addr_1 = $addr_0;
    $sec_1 = $sec_020;
    break;
   }
   $356 = HEAP32[13928] | 0;
   _greloc($356, $sym_2, HEAP32[$356 >> 2] | 0, 1);
   $360 = _section_ptr_add(HEAP32[13928] | 0, 8) | 0;
   HEAP32[$360 >> 2] = 0;
   HEAP32[$360 + 4 >> 2] = $size_1;
   $addr_1 = $addr_0;
   $sec_1 = $sec_020;
  }
 } while (0);
 do {
  if (($has_init | 0) == 0) {
   if ((HEAP32[$2 >> 2] & 131072 | 0) != 0) {
    break;
   }
   STACKTOP = sp;
   return;
  }
 } while (0);
 _decl_initializer($type, $sec_1, $addr_1, 1, 0);
 $371 = HEAP32[$init_str >> 2] | 0;
 if (($371 | 0) != 0) {
  _tok_str_free($371);
  _restore_parse_state($saved_parse_state);
 }
 if (!$53) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$flexible_array_0 + 20 >> 2] | 0) + 12 >> 2] = -1;
 STACKTOP = sp;
 return;
}
function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 var $buf_i = 0, $tv_i8 = 0, $tv_i = 0, $1 = 0, $2 = 0, $5 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $endptr_i = 0, $34 = 0, $44 = 0, $46 = 0, $53 = 0, $55 = 0, $i_01_i_i = 0, $66 = 0, $68 = 0, $i_01_i1_i = 0, $79 = 0, $81 = 0, $i_01_i4_i = 0, $95 = 0, $100 = 0, $116 = 0, $119 = 0, $120 = 0, $126 = 0, $134 = 0, $139 = 0, $143 = 0, $start_time_0$0 = 0, $start_time_0$1 = 0, $151 = 0, $first_file_012 = 0, $i_010 = 0, $155 = 0, $_lobit = 0, $ret_2 = 0, $first_file_1 = 0, $175 = 0, $178 = 0, $first_file_0_lcssa19 = 0, $183 = 0, $187 = 0, $192 = 0, $197 = 0, $198 = 0, $199 = 0, $207 = 0, $name_0_i = 0, $216 = 0, $217 = 0, $226 = 0, $228 = 0, $230 = 0, $231 = 0, $236 = 0, $238 = 0, $239 = 0, $243 = 0, $_0_i = 0, $255 = 0, $260 = 0, $263 = 0, $i_01_i = 0, $ret_3 = 0, $_0 = 0, $141$0 = 0, $145$0 = 0, $185$0 = 0, $185$1 = 0, $189$0 = 0, $190$0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5136 | 0;
 $buf_i = sp | 0;
 $tv_i8 = sp + 1024 | 0;
 $tv_i = sp + 1032 | 0;
 $1 = _tcc_new() | 0;
 $2 = $1 + 44 | 0;
 HEAP32[$2 >> 2] = 1;
 $5 = _tcc_parse_args($1, $argc - 1 | 0, $argv + 4 | 0) | 0;
 if (($5 | 0) == 0) {
  _puts(5600) | 0;
  $_0 = 1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $10 = HEAP32[$1 + 2896 >> 2] | 0;
 do {
  if (($10 | 0) != 0) {
   $13 = sp + 1040 | 0;
   $14 = _atoi($10 | 0) | 0;
   if (($14 | 0) == 32 | ($14 | 0) == 0) {
    break;
   } else if (($14 | 0) != 64) {
    _tcc_warning(15600, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $10, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    break;
   }
   _pstrcpy($13, 4056, HEAP32[$argv >> 2] | 0) | 0;
   $18 = _tcc_basename($13) | 0;
   HEAP8[$18] = HEAP8[16136] | 0;
   HEAP8[$18 + 1 | 0] = HEAP8[16137] | 0;
   HEAP8[$18 + 2 | 0] = HEAP8[16138] | 0;
   HEAP8[$18 + 3 | 0] = HEAP8[16139] | 0;
   HEAP8[$18 + 4 | 0] = HEAP8[16140] | 0;
   HEAP8[$18 + 5 | 0] = HEAP8[16141] | 0;
   HEAP8[$18 + 6 | 0] = HEAP8[16142] | 0;
   $endptr_i = $18 + (_strlen($18 | 0) | 0) | 0;
   HEAP8[$endptr_i] = HEAP8[16024] | 0;
   HEAP8[$endptr_i + 1 | 0] = HEAP8[16025] | 0;
   HEAP8[$endptr_i + 2 | 0] = HEAP8[16026] | 0;
   HEAP8[$endptr_i + 3 | 0] = HEAP8[16027] | 0;
   HEAP8[$endptr_i + 4 | 0] = HEAP8[16028] | 0;
   if ((_strcmp(HEAP32[$argv >> 2] | 0, $13 | 0) | 0) != 0) {
    if ((HEAP32[$1 >> 2] | 0) > 0) {
     _printf(15880, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $18, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     _fflush(HEAP32[_stdout >> 2] | 0) | 0;
    }
    HEAP32[$argv >> 2] = $13;
    _execl($13 | 0, $argv | 0) | 0;
   }
   _tcc_error(15728, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $18, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
 } while (0);
 $34 = $1 | 0;
 if ((HEAP32[$34 >> 2] | 0) != 0) {
  _printf(17904, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 17784, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 do {
  if ((HEAP32[$1 + 2900 >> 2] | 0) == 0) {
   $44 = HEAP32[$34 >> 2] | 0;
   $46 = ($5 | 0) == 1;
   if (($44 | 0) == 2 & $46) {
    break;
   }
   if (($44 | 0) != 0 & $46) {
    $_0 = 0;
    STACKTOP = sp;
    return $_0 | 0;
   }
   $95 = $1 + 2884 | 0;
   if ((HEAP32[$95 >> 2] | 0) == 0) {
    _tcc_error(20080, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $100 = HEAP32[$2 >> 2] | 0;
   if (($100 | 0) == 3) {
    do {
     if ((HEAP32[$1 + 2904 >> 2] | 0) == 0) {
      if ((HEAP32[$1 + 2888 >> 2] | 0) != 0) {
       _tcc_error(20040, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
      }
      if ((HEAP32[$95 >> 2] | 0) == 1) {
       break;
      }
      _tcc_error(17648, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
    } while (0);
    $116 = HEAP32[$2 >> 2] | 0;
   } else {
    $116 = $100;
   }
   do {
    if (($116 | 0) == 4) {
     $119 = $1 + 2892 | 0;
     $120 = HEAP32[$119 >> 2] | 0;
     if (($120 | 0) == 0) {
      HEAP32[$1 + 324 >> 2] = HEAP32[_stdout >> 2];
      break;
     }
     $126 = _fopen($120 | 0, 16144) | 0;
     HEAP32[$1 + 324 >> 2] = $126;
     if (($126 | 0) != 0) {
      break;
     }
     _tcc_error(15e3, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$119 >> 2], tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
   } while (0);
   $134 = (HEAP32[$1 + 2908 >> 2] | 0) != 0;
   if ($134) {
    _gettimeofday($tv_i | 0, 0) | 0;
    $139 = HEAP32[$tv_i >> 2] | 0;
    $141$0 = ___muldi3($139, ($139 | 0) < 0 | 0 ? -1 : 0, 1e6, 0) | 0;
    $143 = HEAP32[$tv_i + 4 >> 2] | 0;
    $145$0 = _i64Add($141$0, tempRet0, $143, ($143 | 0) < 0 | 0 ? -1 : 0) | 0;
    $start_time_0$1 = tempRet0;
    $start_time_0$0 = $145$0;
   } else {
    $start_time_0$1 = 0;
    $start_time_0$0 = 0;
   }
   _tcc_set_output_type($1, HEAP32[$2 >> 2] | 0) | 0;
   do {
    if ((HEAP32[$95 >> 2] | 0) > 0) {
     $151 = $1 + 2880 | 0;
     $i_010 = 0;
     $first_file_012 = 0;
     L51 : while (1) {
      $155 = HEAP32[(HEAP32[$151 >> 2] | 0) + ($i_010 << 2) >> 2] | 0;
      do {
       if ((HEAP8[$155] | 0) == 45) {
        if ((HEAP8[$155 + 1 | 0] | 0) != 108) {
         label = 45;
         break;
        }
        if ((_tcc_add_library($1, $155 + 2 | 0) | 0) < 0) {
         label = 44;
         break L51;
        } else {
         $first_file_1 = $first_file_012;
         $ret_2 = 0;
        }
       } else {
        label = 45;
       }
      } while (0);
      if ((label | 0) == 45) {
       label = 0;
       if ((HEAP32[$34 >> 2] | 0) == 1) {
        _printf(12824, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $155, tempVarArgs) | 0) | 0;
        STACKTOP = tempVarArgs;
       }
       $_lobit = (_tcc_add_file($1, $155) | 0) >>> 31;
       $first_file_1 = ($first_file_012 | 0) == 0 ? $155 : $first_file_012;
       $ret_2 = $_lobit;
      }
      $175 = $i_010 + 1 | 0;
      $178 = ($ret_2 | 0) == 0;
      if (($175 | 0) < (HEAP32[$95 >> 2] | 0) & $178) {
       $i_010 = $175;
       $first_file_012 = $first_file_1;
      } else {
       label = 49;
       break;
      }
     }
     if ((label | 0) == 44) {
      _tcc_error_noabort(14064, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $155, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $ret_3 = 1;
      break;
     } else if ((label | 0) == 49) {
      if ($178) {
       $first_file_0_lcssa19 = $first_file_1;
       label = 50;
       break;
      } else {
       $ret_3 = $ret_2;
       break;
      }
     }
    } else {
     $first_file_0_lcssa19 = 0;
     label = 50;
    }
   } while (0);
   do {
    if ((label | 0) == 50) {
     if ($134) {
      _gettimeofday($tv_i8 | 0, 0) | 0;
      $183 = HEAP32[$tv_i8 >> 2] | 0;
      $185$0 = ___muldi3($183, ($183 | 0) < 0 | 0 ? -1 : 0, 1e6, 0) | 0;
      $185$1 = tempRet0;
      $187 = HEAP32[$tv_i8 + 4 >> 2] | 0;
      $189$0 = _i64Subtract($187, ($187 | 0) < 0 | 0 ? -1 : 0, $start_time_0$0, $start_time_0$1) | 0;
      $190$0 = _i64Add($189$0, tempRet0, $185$0, $185$1) | 0;
      _tcc_print_stats($1, $190$0, tempRet0);
     }
     $192 = HEAP32[$2 >> 2] | 0;
     if (($192 | 0) == 0) {
      _tcc_error_noabort(11984, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $ret_3 = 1;
      break;
     }
     $197 = $1 + 2892 | 0;
     $198 = HEAP32[$197 >> 2] | 0;
     $199 = ($198 | 0) != 0;
     if (($192 | 0) == 4) {
      if (!$199) {
       $ret_3 = 0;
       break;
      }
      _fclose(HEAP32[$1 + 324 >> 2] | 0) | 0;
      $ret_3 = 0;
      break;
     }
     if ($199) {
      $228 = $198;
     } else {
      $207 = $buf_i | 0;
      do {
       if (($first_file_0_lcssa19 | 0) == 0) {
        $name_0_i = 18552;
       } else {
        if ((_strcmp($first_file_0_lcssa19 | 0, 18328) | 0) == 0) {
         $name_0_i = 18552;
         break;
        }
        $name_0_i = _tcc_basename($first_file_0_lcssa19) | 0;
       }
      } while (0);
      _pstrcpy($207, 1024, $name_0_i) | 0;
      $216 = _tcc_fileextension($207) | 0;
      $217 = HEAP32[$2 >> 2] | 0;
      if (($217 | 0) == 3) {
       if ((HEAP32[$1 + 2904 >> 2] | 0) == 0) {
        label = 63;
       } else {
        label = 65;
       }
      } else if (($217 | 0) == 4) {
       label = 63;
      } else {
       label = 65;
      }
      do {
       if ((label | 0) == 63) {
        if ((HEAP8[$216] | 0) == 0) {
         label = 65;
         break;
        }
        HEAP8[$216] = HEAP8[18192] | 0;
        HEAP8[$216 + 1 | 0] = HEAP8[18193] | 0;
        HEAP8[$216 + 2 | 0] = HEAP8[18194] | 0;
       }
      } while (0);
      if ((label | 0) == 65) {
       HEAP8[$207] = HEAP8[18040] | 0;
       HEAP8[$207 + 1 | 0] = HEAP8[18041] | 0;
       HEAP8[$207 + 2 | 0] = HEAP8[18042] | 0;
       HEAP8[$207 + 3 | 0] = HEAP8[18043] | 0;
       HEAP8[$207 + 4 | 0] = HEAP8[18044] | 0;
       HEAP8[$207 + 5 | 0] = HEAP8[18045] | 0;
      }
      $226 = _tcc_strdup($207) | 0;
      HEAP32[$197 >> 2] = $226;
      $228 = $226;
     }
     $230 = (_tcc_output_file($1, $228) | 0) != 0;
     $231 = $230 & 1;
     if ((HEAP32[$1 + 2912 >> 2] | 0) == 0 | $230) {
      $ret_3 = $231;
      break;
     }
     $236 = HEAP32[$197 >> 2] | 0;
     $238 = HEAP32[$1 + 2916 >> 2] | 0;
     $239 = $buf_i | 0;
     if (($238 | 0) == 0) {
      _pstrcpy($239, 1024, $236) | 0;
      $243 = _tcc_fileextension($239) | 0;
      _pstrcpy($243, $buf_i + 1024 - $243 | 0, 11296) | 0;
      $_0_i = $239;
     } else {
      $_0_i = $238;
     }
     if ((HEAP32[$34 >> 2] | 0) != 0) {
      _printf(10824, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $_0_i, tempVarArgs) | 0) | 0;
      STACKTOP = tempVarArgs;
     }
     $255 = _fopen($_0_i | 0, 16144) | 0;
     if (($255 | 0) == 0) {
      _tcc_error(20016, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $_0_i, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     _fprintf($255 | 0, 19488, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $236, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     $260 = $1 + 332 | 0;
     if ((HEAP32[$260 >> 2] | 0) > 0) {
      $263 = $1 + 328 | 0;
      $i_01_i = 0;
      do {
       _fprintf($255 | 0, 19136, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[(HEAP32[$263 >> 2] | 0) + ($i_01_i << 2) >> 2], tempVarArgs) | 0) | 0;
       STACKTOP = tempVarArgs;
       $i_01_i = $i_01_i + 1 | 0;
      } while (($i_01_i | 0) < (HEAP32[$260 >> 2] | 0));
     }
     _fputc(10, $255 | 0) | 0;
     _fclose($255 | 0) | 0;
     $ret_3 = $231;
    }
   } while (0);
   _tcc_delete($1);
   if (!$134) {
    $_0 = $ret_3;
    STACKTOP = sp;
    return $_0 | 0;
   }
   _tcc_memstats();
   $_0 = $ret_3;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 _tcc_set_output_type($1, 0) | 0;
 _printf(17632, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$1 + 32 >> 2], tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $53 = HEAP32[$1 + 144 >> 2] | 0;
 $55 = HEAP32[$1 + 148 >> 2] | 0;
 _printf(16688, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 17512, HEAP32[tempVarArgs + 8 >> 2] = ($55 | 0) != 0 ? 55736 : 16360, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 if (($55 | 0) > 0) {
  $i_01_i_i = 0;
  do {
   _printf(16248, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$53 + ($i_01_i_i << 2) >> 2], tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $i_01_i_i = $i_01_i_i + 1 | 0;
  } while (($i_01_i_i | 0) < ($55 | 0));
 }
 $66 = HEAP32[$1 + 136 >> 2] | 0;
 $68 = HEAP32[$1 + 140 >> 2] | 0;
 _printf(16688, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 17360, HEAP32[tempVarArgs + 8 >> 2] = ($68 | 0) != 0 ? 55736 : 16360, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 if (($68 | 0) > 0) {
  $i_01_i1_i = 0;
  do {
   _printf(16248, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$66 + ($i_01_i1_i << 2) >> 2], tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $i_01_i1_i = $i_01_i1_i + 1 | 0;
  } while (($i_01_i1_i | 0) < ($68 | 0));
 }
 $79 = HEAP32[$1 + 128 >> 2] | 0;
 $81 = HEAP32[$1 + 132 >> 2] | 0;
 _printf(16688, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = 17160, HEAP32[tempVarArgs + 8 >> 2] = ($81 | 0) != 0 ? 55736 : 16360, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 if (($81 | 0) > 0) {
  $i_01_i4_i = 0;
  do {
   _printf(16248, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$79 + ($i_01_i4_i << 2) >> 2], tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $i_01_i4_i = $i_01_i4_i + 1 | 0;
  } while (($i_01_i4_i | 0) < ($81 | 0));
 }
 _printf(17032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 16848, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $_0 = 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $56 = 0, $_pre_phi66 = 0, $61 = 0, $64 = 0, $67 = 0, $72 = 0, $76 = 0, $80 = 0, $_sum28 = 0, $86 = 0, $87 = 0, $91 = 0, $92 = 0, $RP_0 = 0, $R_0 = 0, $94 = 0, $95 = 0, $98 = 0, $99 = 0, $R_1 = 0, $110 = 0, $112 = 0, $126 = 0, $_sum31 = 0, $143 = 0, $156 = 0, $169 = 0, $_02 = 0, $_0 = 0, $182 = 0, $186 = 0, $187 = 0, $195 = 0, $206 = 0, $214 = 0, $215 = 0, $220 = 0, $223 = 0, $226 = 0, $247 = 0, $_pre_phi64 = 0, $252 = 0, $255 = 0, $258 = 0, $263 = 0, $267 = 0, $271 = 0, $277 = 0, $278 = 0, $282 = 0, $283 = 0, $RP9_0 = 0, $R7_0 = 0, $285 = 0, $286 = 0, $289 = 0, $290 = 0, $R7_1 = 0, $301 = 0, $303 = 0, $317 = 0, $334 = 0, $347 = 0, $_1 = 0, $375 = 0, $378 = 0, $380 = 0, $381 = 0, $382 = 0, $388 = 0, $389 = 0, $_pre_phi = 0, $F16_0 = 0, $399 = 0, $400 = 0, $407 = 0, $408 = 0, $411 = 0, $413 = 0, $416 = 0, $421 = 0, $I19_0 = 0, $428 = 0, $432 = 0, $433 = 0, $442 = 0, $448 = 0, $K20_057 = 0, $T_056 = 0, $462 = 0, $463 = 0, $T_0_lcssa = 0, $474 = 0, $475 = 0, $477 = 0;
 $1 = $p;
 $2 = $1 + $psize | 0;
 $3 = $2;
 $5 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do {
  if (($5 & 1 | 0) == 0) {
   $10 = HEAP32[$p >> 2] | 0;
   if (($5 & 3 | 0) == 0) {
    return;
   }
   $15 = $1 + (-$10 | 0) | 0;
   $16 = $15;
   $17 = $10 + $psize | 0;
   $18 = HEAP32[13944] | 0;
   if ($15 >>> 0 < $18 >>> 0) {
    _abort();
   }
   if (($16 | 0) == (HEAP32[13945] | 0)) {
    $169 = $1 + ($psize + 4) | 0;
    if ((HEAP32[$169 >> 2] & 3 | 0) != 3) {
     $_0 = $16;
     $_02 = $17;
     break;
    }
    HEAP32[13942] = $17;
    HEAP32[$169 >> 2] = HEAP32[$169 >> 2] & -2;
    HEAP32[$1 + (4 - $10) >> 2] = $17 | 1;
    HEAP32[$2 >> 2] = $17;
    return;
   }
   $24 = $10 >>> 3;
   if ($10 >>> 0 < 256 >>> 0) {
    $29 = HEAP32[$1 + (8 - $10) >> 2] | 0;
    $32 = HEAP32[$1 + (12 - $10) >> 2] | 0;
    $35 = 55800 + ($24 << 1 << 2) | 0;
    do {
     if (($29 | 0) != ($35 | 0)) {
      if ($29 >>> 0 < $18 >>> 0) {
       _abort();
      }
      if ((HEAP32[$29 + 12 >> 2] | 0) == ($16 | 0)) {
       break;
      }
      _abort();
     }
    } while (0);
    if (($32 | 0) == ($29 | 0)) {
     HEAP32[13940] = HEAP32[13940] & ~(1 << $24);
     $_0 = $16;
     $_02 = $17;
     break;
    }
    do {
     if (($32 | 0) == ($35 | 0)) {
      $_pre_phi66 = $32 + 8 | 0;
     } else {
      if ($32 >>> 0 < $18 >>> 0) {
       _abort();
      }
      $56 = $32 + 8 | 0;
      if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
       $_pre_phi66 = $56;
       break;
      }
      _abort();
     }
    } while (0);
    HEAP32[$29 + 12 >> 2] = $32;
    HEAP32[$_pre_phi66 >> 2] = $29;
    $_0 = $16;
    $_02 = $17;
    break;
   }
   $61 = $15;
   $64 = HEAP32[$1 + (24 - $10) >> 2] | 0;
   $67 = HEAP32[$1 + (12 - $10) >> 2] | 0;
   do {
    if (($67 | 0) == ($61 | 0)) {
     $_sum28 = 16 - $10 | 0;
     $86 = $1 + ($_sum28 + 4) | 0;
     $87 = HEAP32[$86 >> 2] | 0;
     if (($87 | 0) == 0) {
      $91 = $1 + $_sum28 | 0;
      $92 = HEAP32[$91 >> 2] | 0;
      if (($92 | 0) == 0) {
       $R_1 = 0;
       break;
      } else {
       $R_0 = $92;
       $RP_0 = $91;
      }
     } else {
      $R_0 = $87;
      $RP_0 = $86;
     }
     while (1) {
      $94 = $R_0 + 20 | 0;
      $95 = HEAP32[$94 >> 2] | 0;
      if (($95 | 0) != 0) {
       $R_0 = $95;
       $RP_0 = $94;
       continue;
      }
      $98 = $R_0 + 16 | 0;
      $99 = HEAP32[$98 >> 2] | 0;
      if (($99 | 0) == 0) {
       break;
      } else {
       $R_0 = $99;
       $RP_0 = $98;
      }
     }
     if ($RP_0 >>> 0 < $18 >>> 0) {
      _abort();
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      $R_1 = $R_0;
      break;
     }
    } else {
     $72 = HEAP32[$1 + (8 - $10) >> 2] | 0;
     if ($72 >>> 0 < $18 >>> 0) {
      _abort();
     }
     $76 = $72 + 12 | 0;
     if ((HEAP32[$76 >> 2] | 0) != ($61 | 0)) {
      _abort();
     }
     $80 = $67 + 8 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($61 | 0)) {
      HEAP32[$76 >> 2] = $67;
      HEAP32[$80 >> 2] = $72;
      $R_1 = $67;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   if (($64 | 0) == 0) {
    $_0 = $16;
    $_02 = $17;
    break;
   }
   $110 = $1 + (28 - $10) | 0;
   $112 = 56064 + (HEAP32[$110 >> 2] << 2) | 0;
   do {
    if (($61 | 0) == (HEAP32[$112 >> 2] | 0)) {
     HEAP32[$112 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$110 >> 2]);
     $_0 = $16;
     $_02 = $17;
     break L1;
    } else {
     if ($64 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     }
     $126 = $64 + 16 | 0;
     if ((HEAP32[$126 >> 2] | 0) == ($61 | 0)) {
      HEAP32[$126 >> 2] = $R_1;
     } else {
      HEAP32[$64 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      $_0 = $16;
      $_02 = $17;
      break L1;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
    _abort();
   }
   HEAP32[$R_1 + 24 >> 2] = $64;
   $_sum31 = 16 - $10 | 0;
   $143 = HEAP32[$1 + $_sum31 >> 2] | 0;
   do {
    if (($143 | 0) != 0) {
     if ($143 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R_1 + 16 >> 2] = $143;
      HEAP32[$143 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   $156 = HEAP32[$1 + ($_sum31 + 4) >> 2] | 0;
   if (($156 | 0) == 0) {
    $_0 = $16;
    $_02 = $17;
    break;
   }
   if ($156 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
    _abort();
   } else {
    HEAP32[$R_1 + 20 >> 2] = $156;
    HEAP32[$156 + 24 >> 2] = $R_1;
    $_0 = $16;
    $_02 = $17;
    break;
   }
  } else {
   $_0 = $p;
   $_02 = $psize;
  }
 } while (0);
 $182 = HEAP32[13944] | 0;
 if ($2 >>> 0 < $182 >>> 0) {
  _abort();
 }
 $186 = $1 + ($psize + 4) | 0;
 $187 = HEAP32[$186 >> 2] | 0;
 do {
  if (($187 & 2 | 0) == 0) {
   if (($3 | 0) == (HEAP32[13946] | 0)) {
    $195 = (HEAP32[13943] | 0) + $_02 | 0;
    HEAP32[13943] = $195;
    HEAP32[13946] = $_0;
    HEAP32[$_0 + 4 >> 2] = $195 | 1;
    if (($_0 | 0) != (HEAP32[13945] | 0)) {
     return;
    }
    HEAP32[13945] = 0;
    HEAP32[13942] = 0;
    return;
   }
   if (($3 | 0) == (HEAP32[13945] | 0)) {
    $206 = (HEAP32[13942] | 0) + $_02 | 0;
    HEAP32[13942] = $206;
    HEAP32[13945] = $_0;
    HEAP32[$_0 + 4 >> 2] = $206 | 1;
    HEAP32[$_0 + $206 >> 2] = $206;
    return;
   }
   $214 = ($187 & -8) + $_02 | 0;
   $215 = $187 >>> 3;
   L101 : do {
    if ($187 >>> 0 < 256 >>> 0) {
     $220 = HEAP32[$1 + ($psize + 8) >> 2] | 0;
     $223 = HEAP32[$1 + ($psize + 12) >> 2] | 0;
     $226 = 55800 + ($215 << 1 << 2) | 0;
     do {
      if (($220 | 0) != ($226 | 0)) {
       if ($220 >>> 0 < $182 >>> 0) {
        _abort();
       }
       if ((HEAP32[$220 + 12 >> 2] | 0) == ($3 | 0)) {
        break;
       }
       _abort();
      }
     } while (0);
     if (($223 | 0) == ($220 | 0)) {
      HEAP32[13940] = HEAP32[13940] & ~(1 << $215);
      break;
     }
     do {
      if (($223 | 0) == ($226 | 0)) {
       $_pre_phi64 = $223 + 8 | 0;
      } else {
       if ($223 >>> 0 < $182 >>> 0) {
        _abort();
       }
       $247 = $223 + 8 | 0;
       if ((HEAP32[$247 >> 2] | 0) == ($3 | 0)) {
        $_pre_phi64 = $247;
        break;
       }
       _abort();
      }
     } while (0);
     HEAP32[$220 + 12 >> 2] = $223;
     HEAP32[$_pre_phi64 >> 2] = $220;
    } else {
     $252 = $2;
     $255 = HEAP32[$1 + ($psize + 24) >> 2] | 0;
     $258 = HEAP32[$1 + ($psize + 12) >> 2] | 0;
     do {
      if (($258 | 0) == ($252 | 0)) {
       $277 = $1 + ($psize + 20) | 0;
       $278 = HEAP32[$277 >> 2] | 0;
       if (($278 | 0) == 0) {
        $282 = $1 + ($psize + 16) | 0;
        $283 = HEAP32[$282 >> 2] | 0;
        if (($283 | 0) == 0) {
         $R7_1 = 0;
         break;
        } else {
         $R7_0 = $283;
         $RP9_0 = $282;
        }
       } else {
        $R7_0 = $278;
        $RP9_0 = $277;
       }
       while (1) {
        $285 = $R7_0 + 20 | 0;
        $286 = HEAP32[$285 >> 2] | 0;
        if (($286 | 0) != 0) {
         $R7_0 = $286;
         $RP9_0 = $285;
         continue;
        }
        $289 = $R7_0 + 16 | 0;
        $290 = HEAP32[$289 >> 2] | 0;
        if (($290 | 0) == 0) {
         break;
        } else {
         $R7_0 = $290;
         $RP9_0 = $289;
        }
       }
       if ($RP9_0 >>> 0 < $182 >>> 0) {
        _abort();
       } else {
        HEAP32[$RP9_0 >> 2] = 0;
        $R7_1 = $R7_0;
        break;
       }
      } else {
       $263 = HEAP32[$1 + ($psize + 8) >> 2] | 0;
       if ($263 >>> 0 < $182 >>> 0) {
        _abort();
       }
       $267 = $263 + 12 | 0;
       if ((HEAP32[$267 >> 2] | 0) != ($252 | 0)) {
        _abort();
       }
       $271 = $258 + 8 | 0;
       if ((HEAP32[$271 >> 2] | 0) == ($252 | 0)) {
        HEAP32[$267 >> 2] = $258;
        HEAP32[$271 >> 2] = $263;
        $R7_1 = $258;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     if (($255 | 0) == 0) {
      break;
     }
     $301 = $1 + ($psize + 28) | 0;
     $303 = 56064 + (HEAP32[$301 >> 2] << 2) | 0;
     do {
      if (($252 | 0) == (HEAP32[$303 >> 2] | 0)) {
       HEAP32[$303 >> 2] = $R7_1;
       if (($R7_1 | 0) != 0) {
        break;
       }
       HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$301 >> 2]);
       break L101;
      } else {
       if ($255 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       }
       $317 = $255 + 16 | 0;
       if ((HEAP32[$317 >> 2] | 0) == ($252 | 0)) {
        HEAP32[$317 >> 2] = $R7_1;
       } else {
        HEAP32[$255 + 20 >> 2] = $R7_1;
       }
       if (($R7_1 | 0) == 0) {
        break L101;
       }
      }
     } while (0);
     if ($R7_1 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     }
     HEAP32[$R7_1 + 24 >> 2] = $255;
     $334 = HEAP32[$1 + ($psize + 16) >> 2] | 0;
     do {
      if (($334 | 0) != 0) {
       if ($334 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
        _abort();
       } else {
        HEAP32[$R7_1 + 16 >> 2] = $334;
        HEAP32[$334 + 24 >> 2] = $R7_1;
        break;
       }
      }
     } while (0);
     $347 = HEAP32[$1 + ($psize + 20) >> 2] | 0;
     if (($347 | 0) == 0) {
      break;
     }
     if ($347 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
     } else {
      HEAP32[$R7_1 + 20 >> 2] = $347;
      HEAP32[$347 + 24 >> 2] = $R7_1;
      break;
     }
    }
   } while (0);
   HEAP32[$_0 + 4 >> 2] = $214 | 1;
   HEAP32[$_0 + $214 >> 2] = $214;
   if (($_0 | 0) != (HEAP32[13945] | 0)) {
    $_1 = $214;
    break;
   }
   HEAP32[13942] = $214;
   return;
  } else {
   HEAP32[$186 >> 2] = $187 & -2;
   HEAP32[$_0 + 4 >> 2] = $_02 | 1;
   HEAP32[$_0 + $_02 >> 2] = $_02;
   $_1 = $_02;
  }
 } while (0);
 $375 = $_1 >>> 3;
 if ($_1 >>> 0 < 256 >>> 0) {
  $378 = $375 << 1;
  $380 = 55800 + ($378 << 2) | 0;
  $381 = HEAP32[13940] | 0;
  $382 = 1 << $375;
  do {
   if (($381 & $382 | 0) == 0) {
    HEAP32[13940] = $381 | $382;
    $F16_0 = $380;
    $_pre_phi = 55800 + ($378 + 2 << 2) | 0;
   } else {
    $388 = 55800 + ($378 + 2 << 2) | 0;
    $389 = HEAP32[$388 >> 2] | 0;
    if ($389 >>> 0 >= (HEAP32[13944] | 0) >>> 0) {
     $F16_0 = $389;
     $_pre_phi = $388;
     break;
    }
    _abort();
   }
  } while (0);
  HEAP32[$_pre_phi >> 2] = $_0;
  HEAP32[$F16_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $F16_0;
  HEAP32[$_0 + 12 >> 2] = $380;
  return;
 }
 $399 = $_0;
 $400 = $_1 >>> 8;
 do {
  if (($400 | 0) == 0) {
   $I19_0 = 0;
  } else {
   if ($_1 >>> 0 > 16777215 >>> 0) {
    $I19_0 = 31;
    break;
   }
   $407 = ($400 + 1048320 | 0) >>> 16 & 8;
   $408 = $400 << $407;
   $411 = ($408 + 520192 | 0) >>> 16 & 4;
   $413 = $408 << $411;
   $416 = ($413 + 245760 | 0) >>> 16 & 2;
   $421 = 14 - ($411 | $407 | $416) + ($413 << $416 >>> 15) | 0;
   $I19_0 = $_1 >>> (($421 + 7 | 0) >>> 0) & 1 | $421 << 1;
  }
 } while (0);
 $428 = 56064 + ($I19_0 << 2) | 0;
 HEAP32[$_0 + 28 >> 2] = $I19_0;
 HEAP32[$_0 + 20 >> 2] = 0;
 HEAP32[$_0 + 16 >> 2] = 0;
 $432 = HEAP32[13941] | 0;
 $433 = 1 << $I19_0;
 if (($432 & $433 | 0) == 0) {
  HEAP32[13941] = $432 | $433;
  HEAP32[$428 >> 2] = $399;
  HEAP32[$_0 + 24 >> 2] = $428;
  HEAP32[$_0 + 12 >> 2] = $_0;
  HEAP32[$_0 + 8 >> 2] = $_0;
  return;
 }
 $442 = HEAP32[$428 >> 2] | 0;
 if (($I19_0 | 0) == 31) {
  $448 = 0;
 } else {
  $448 = 25 - ($I19_0 >>> 1) | 0;
 }
 L194 : do {
  if ((HEAP32[$442 + 4 >> 2] & -8 | 0) == ($_1 | 0)) {
   $T_0_lcssa = $442;
  } else {
   $T_056 = $442;
   $K20_057 = $_1 << $448;
   while (1) {
    $462 = $T_056 + 16 + ($K20_057 >>> 31 << 2) | 0;
    $463 = HEAP32[$462 >> 2] | 0;
    if (($463 | 0) == 0) {
     break;
    }
    if ((HEAP32[$463 + 4 >> 2] & -8 | 0) == ($_1 | 0)) {
     $T_0_lcssa = $463;
     break L194;
    } else {
     $T_056 = $463;
     $K20_057 = $K20_057 << 1;
    }
   }
   if ($462 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
    _abort();
   }
   HEAP32[$462 >> 2] = $399;
   HEAP32[$_0 + 24 >> 2] = $T_056;
   HEAP32[$_0 + 12 >> 2] = $_0;
   HEAP32[$_0 + 8 >> 2] = $_0;
   return;
  }
 } while (0);
 $474 = $T_0_lcssa + 8 | 0;
 $475 = HEAP32[$474 >> 2] | 0;
 $477 = HEAP32[13944] | 0;
 if (!($T_0_lcssa >>> 0 >= $477 >>> 0 & $475 >>> 0 >= $477 >>> 0)) {
  _abort();
 }
 HEAP32[$475 + 12 >> 2] = $399;
 HEAP32[$474 >> 2] = $399;
 HEAP32[$_0 + 8 >> 2] = $475;
 HEAP32[$_0 + 12 >> 2] = $T_0_lcssa;
 HEAP32[$_0 + 24 >> 2] = 0;
 return;
}
function _gv($rc) {
 $rc = $rc | 0;
 var $cval_i20_sroa_4 = 0, $cval_i17_sroa_4 = 0, $cval_i14_sroa_4 = 0, $align = 0, $type = 0, $1 = 0, $2 = 0, $3 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $_1 = 0, $_2 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $33 = 0, $40 = 0, $41 = 0, $42 = 0, $$etemp$1 = 0, $43$1 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $64 = 0, $71 = 0, $72 = 0, $73 = 0, $$etemp$8 = 0, $74$1 = 0, $79 = 0, $83 = 0, $93 = 0, $95 = 0, $97 = 0, $101 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $i_032 = 0, $114 = 0, $116 = 0, $_lcssa = 0, $120 = 0, $122 = 0, $131 = 0, $133 = 0, $_pre34 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $_ = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $172 = 0, $173 = 0, $178 = 0, $179 = 0, $180$1 = 0, $188 = 0, $189 = 0, $190 = 0, $194 = 0, $199 = 0, $206 = 0, $207 = 0, $208 = 0, $$etemp$17 = 0, $209$1 = 0, $214 = 0, $218 = 0, $224 = 0, $p_01_i = 0, $229 = 0, $235 = 0, $236 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $248 = 0, $250 = 0, $_pre38 = 0, $256 = 0, $257 = 0, $260 = 0, $261 = 0, $262 = 0, $268 = 0, $269 = 0, $273 = 0, $278 = 0, $285 = 0, $286 = 0, $287 = 0, $$etemp$24 = 0, $288$1 = 0, $293 = 0, $297 = 0, $299 = 0, $303 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $313 = 0, $318 = 0, $320 = 0, $323 = 0, $336 = 0, $t_0 = 0, $r_0 = 0, $r_1 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $cval_i20_sroa_4 = sp | 0;
 $cval_i17_sroa_4 = sp + 16 | 0;
 $cval_i14_sroa_4 = sp + 32 | 0;
 $align = sp + 64 | 0;
 $type = sp + 72 | 0;
 $1 = HEAP32[5024] | 0;
 $2 = $1 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 & 64 | 0) != 0) {
  $10 = $3 >>> 24 & 63;
  HEAP32[$2 >> 2] = $3 & 262079;
  $14 = HEAP32[HEAP32[5024] >> 2] | 0;
  $15 = $14 & 15;
  $16 = ($15 | 0) == 12;
  $_1 = $16 ? 12 : 0;
  $_2 = $16 ? 64 : 32;
  HEAP32[$type >> 2] = ($14 & 16 | 0) != 0 | ($15 | 0) == 11 ? $_1 | 16 : $_1;
  _gen_cast($type);
  $22 = $_2 - (($3 >>> 18 & 63) + $10) | 0;
  $23 = sp + 48 | 0;
  $24 = HEAP32[5024] | 0;
  if ($24 >>> 0 < 66472 >>> 0) {
   $28 = $24;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $28 = HEAP32[5024] | 0;
  }
  do {
   if ($28 >>> 0 < 56272 >>> 0) {
    $40 = $28;
   } else {
    $33 = HEAPU16[$28 + 8 >> 1] | 0;
    if (!(($33 & 63 | 0) == 51 | ($33 & 62 | 0) == 52)) {
     $40 = $28;
     break;
    }
    _gv(1) | 0;
    $40 = HEAP32[5024] | 0;
   }
  } while (0);
  $41 = $40 + 40 | 0;
  HEAP32[5024] = $41;
  $42 = $41;
  $$etemp$1 = 21728;
  $43$1 = HEAP32[$$etemp$1 + 4 >> 2] | 0;
  HEAP32[$42 >> 2] = HEAP32[$$etemp$1 >> 2];
  HEAP32[$42 + 4 >> 2] = $43$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $48 = HEAP32[5024] | 0;
  HEAP32[$48 + 16 >> 2] = $22;
  $52 = $48 + 20 | 0;
  HEAP32[$52 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$52 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
  HEAP32[$52 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
  _gen_op(1);
  $53 = $_2 - $10 | 0;
  $54 = $cval_i14_sroa_4 | 0;
  $55 = HEAP32[5024] | 0;
  if ($55 >>> 0 < 66472 >>> 0) {
   $59 = $55;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $59 = HEAP32[5024] | 0;
  }
  do {
   if ($59 >>> 0 < 56272 >>> 0) {
    $71 = $59;
   } else {
    $64 = HEAPU16[$59 + 8 >> 1] | 0;
    if (!(($64 & 63 | 0) == 51 | ($64 & 62 | 0) == 52)) {
     $71 = $59;
     break;
    }
    _gv(1) | 0;
    $71 = HEAP32[5024] | 0;
   }
  } while (0);
  $72 = $71 + 40 | 0;
  HEAP32[5024] = $72;
  $73 = $72;
  $$etemp$8 = 21728;
  $74$1 = HEAP32[$$etemp$8 + 4 >> 2] | 0;
  HEAP32[$73 >> 2] = HEAP32[$$etemp$8 >> 2];
  HEAP32[$73 + 4 >> 2] = $74$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $79 = HEAP32[5024] | 0;
  HEAP32[$79 + 16 >> 2] = $53;
  $83 = $79 + 20 | 0;
  HEAP32[$83 >> 2] = HEAP32[$54 >> 2];
  HEAP32[$83 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
  HEAP32[$83 + 8 >> 2] = HEAP32[$54 + 8 >> 2];
  _gen_op(2);
  $r_1 = _gv($rc) | 0;
  STACKTOP = sp;
  return $r_1 | 0;
 }
 do {
  if ((($3 & 15) - 8 | 0) >>> 0 < 3 >>> 0) {
   if ((HEAP16[$1 + 8 >> 1] & 319) != 48) {
    $131 = $1;
    break;
   }
   $93 = _type_size($1 | 0, $align) | 0;
   $95 = HEAP32[13916] | 0;
   $97 = HEAP32[$align >> 2] | 0;
   $101 = (HEAP32[$95 >> 2] | 0) - 1 + $97 & -$97;
   HEAP32[$95 >> 2] = $101;
   $104 = _section_ptr_add(HEAP32[13916] | 0, $93) | 0;
   $105 = $93 >> 2;
   $107 = HEAP32[5024] | 0;
   if (($105 | 0) > 0) {
    $i_032 = 0;
    $108 = $107;
    while (1) {
     HEAP32[$104 + ($i_032 << 2) >> 2] = HEAP32[$108 + 16 + ($i_032 << 2) >> 2];
     $114 = $i_032 + 1 | 0;
     $116 = HEAP32[5024] | 0;
     if (($114 | 0) < ($105 | 0)) {
      $i_032 = $114;
      $108 = $116;
     } else {
      $_lcssa = $116;
      break;
     }
    }
   } else {
    $_lcssa = $107;
   }
   $120 = _get_sym_ref($_lcssa | 0, HEAP32[13916] | 0, $101, $105 << 2) | 0;
   $122 = (HEAP32[5024] | 0) + 8 | 0;
   HEAP16[$122 >> 1] = HEAP16[$122 >> 1] | 768;
   HEAP32[(HEAP32[5024] | 0) + 32 >> 2] = $120;
   HEAP32[(HEAP32[5024] | 0) + 16 >> 2] = 0;
   $131 = HEAP32[5024] | 0;
  } else {
   $131 = $1;
  }
 } while (0);
 $133 = HEAP16[$131 + 8 >> 1] | 0;
 if (($133 & 2048) == 0) {
  $139 = $131;
  $138 = $133;
 } else {
  _gbound();
  $_pre34 = HEAP32[5024] | 0;
  $139 = $_pre34;
  $138 = HEAP16[$_pre34 + 8 >> 1] | 0;
 }
 $140 = $138 & 65535;
 $141 = $140 & 63;
 $_ = ($rc | 0) == 4 ? 32 : 1;
 do {
  if ($141 >>> 0 < 48 >>> 0 & ($140 & 256 | 0) == 0) {
   if ((HEAP32[7336 + ($141 << 2) >> 2] & $rc | 0) == 0) {
    label = 24;
    break;
   }
   if ((HEAP32[$139 >> 2] & 15 | 0) != 12) {
    $r_0 = $141;
    break;
   }
   if ((HEAP32[7336 + ((HEAPU16[$139 + 10 >> 1] | 0) << 2) >> 2] & $_ | 0) == 0) {
    label = 24;
   } else {
    $r_0 = $141;
   }
  } else {
   label = 24;
  }
 } while (0);
 do {
  if ((label | 0) == 24) {
   $165 = _get_reg($rc) | 0;
   $166 = HEAP32[5024] | 0;
   $167 = $166 | 0;
   $168 = HEAP32[$167 >> 2] | 0;
   $169 = $168 & 15;
   $172 = HEAP16[$166 + 8 >> 1] | 0;
   $173 = $172 & 65535;
   if (($169 | 0) != 12) {
    if (($173 & 256 | 0) == 0 | ($169 - 9 | 0) >>> 0 < 2 >>> 0 | ($169 | 0) == 8) {
     _load($165, $166);
     $r_0 = $165;
     break;
    }
    if (($173 & 4096 | 0) == 0) {
     $t_0 = ($173 & 8192 | 0) == 0 ? $168 : 2;
    } else {
     $t_0 = 1;
    }
    HEAP32[$167 >> 2] = ($172 & 65535) >>> 10 & 16 | $t_0;
    _load($165, HEAP32[5024] | 0);
    HEAP32[HEAP32[5024] >> 2] = $168;
    $r_0 = $165;
    break;
   }
   do {
    if (($173 & 319 | 0) == 48) {
     $178 = $166 + 16 | 0;
     $179 = $178;
     $180$1 = HEAP32[$179 + 4 >> 2] | 0;
     HEAP32[$178 >> 2] = HEAP32[$179 >> 2];
     _load($165, HEAP32[5024] | 0);
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $165;
     $188 = $180$1;
     $189 = $cval_i17_sroa_4 | 0;
     $190 = HEAP32[5024] | 0;
     if ($190 >>> 0 < 66472 >>> 0) {
      $194 = $190;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $194 = HEAP32[5024] | 0;
     }
     do {
      if ($194 >>> 0 < 56272 >>> 0) {
       $206 = $194;
      } else {
       $199 = HEAPU16[$194 + 8 >> 1] | 0;
       if (!(($199 & 63 | 0) == 51 | ($199 & 62 | 0) == 52)) {
        $206 = $194;
        break;
       }
       _gv(1) | 0;
       $206 = HEAP32[5024] | 0;
      }
     } while (0);
     $207 = $206 + 40 | 0;
     HEAP32[5024] = $207;
     $208 = $207;
     $$etemp$17 = 21728;
     $209$1 = HEAP32[$$etemp$17 + 4 >> 2] | 0;
     HEAP32[$208 >> 2] = HEAP32[$$etemp$17 >> 2];
     HEAP32[$208 + 4 >> 2] = $209$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $214 = HEAP32[5024] | 0;
     HEAP32[$214 + 16 >> 2] = $188;
     $218 = $214 + 20 | 0;
     HEAP32[$218 >> 2] = HEAP32[$189 >> 2];
     HEAP32[$218 + 4 >> 2] = HEAP32[$189 + 4 >> 2];
     HEAP32[$218 + 8 >> 2] = HEAP32[$189 + 8 >> 2];
    } else {
     if (($165 | 0) < 48 & ($173 & 256 | 0) == 0) {
      _load($165, $166);
      $303 = HEAP32[5024] | 0;
      if ($303 >>> 0 < 66472 >>> 0) {
       $306 = $303;
      } else {
       _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $306 = HEAP32[5024] | 0;
      }
      $307 = $306 + 40 | 0;
      HEAP32[5024] = $307;
      $308 = $307;
      $309 = $303;
      HEAP32[$308 >> 2] = HEAP32[$309 >> 2];
      HEAP32[$308 + 4 >> 2] = HEAP32[$309 + 4 >> 2];
      HEAP32[$308 + 8 >> 2] = HEAP32[$309 + 8 >> 2];
      HEAP32[$308 + 12 >> 2] = HEAP32[$309 + 12 >> 2];
      HEAP32[$308 + 16 >> 2] = HEAP32[$309 + 16 >> 2];
      HEAP32[$308 + 20 >> 2] = HEAP32[$309 + 20 >> 2];
      HEAP32[$308 + 24 >> 2] = HEAP32[$309 + 24 >> 2];
      HEAP32[$308 + 28 >> 2] = HEAP32[$309 + 28 >> 2];
      HEAP32[$308 + 32 >> 2] = HEAP32[$309 + 32 >> 2];
      HEAP32[$308 + 36 >> 2] = HEAP32[$309 + 36 >> 2];
      HEAP16[(HEAP32[5024] | 0) - 40 + 8 >> 1] = $165;
      $313 = HEAP32[5024] | 0;
      HEAP16[$313 + 8 >> 1] = HEAP16[$313 - 40 + 10 >> 1] | 0;
      break;
     }
     $224 = $166 - 40 | 0;
     if ($224 >>> 0 < 56272 >>> 0) {
      $235 = $166;
     } else {
      $p_01_i = 56272;
      do {
       $229 = HEAP16[$p_01_i + 8 >> 1] & 63;
       if ($229 >>> 0 < 48 >>> 0) {
        _save_reg($229);
       }
       $p_01_i = $p_01_i + 40 | 0;
      } while ($p_01_i >>> 0 <= $224 >>> 0);
      $235 = HEAP32[5024] | 0;
     }
     _load($165, $235);
     $236 = HEAP32[5024] | 0;
     if ($236 >>> 0 < 66472 >>> 0) {
      $239 = $236;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $239 = HEAP32[5024] | 0;
     }
     $240 = $239 + 40 | 0;
     HEAP32[5024] = $240;
     $241 = $240;
     $242 = $236;
     HEAP32[$241 >> 2] = HEAP32[$242 >> 2];
     HEAP32[$241 + 4 >> 2] = HEAP32[$242 + 4 >> 2];
     HEAP32[$241 + 8 >> 2] = HEAP32[$242 + 8 >> 2];
     HEAP32[$241 + 12 >> 2] = HEAP32[$242 + 12 >> 2];
     HEAP32[$241 + 16 >> 2] = HEAP32[$242 + 16 >> 2];
     HEAP32[$241 + 20 >> 2] = HEAP32[$242 + 20 >> 2];
     HEAP32[$241 + 24 >> 2] = HEAP32[$242 + 24 >> 2];
     HEAP32[$241 + 28 >> 2] = HEAP32[$242 + 28 >> 2];
     HEAP32[$241 + 32 >> 2] = HEAP32[$242 + 32 >> 2];
     HEAP32[$241 + 36 >> 2] = HEAP32[$242 + 36 >> 2];
     HEAP16[(HEAP32[5024] | 0) - 40 + 8 >> 1] = $165;
     HEAP32[HEAP32[5024] >> 2] = 0;
     $248 = HEAP32[5024] | 0;
     $250 = HEAP16[$248 + 8 >> 1] | 0;
     if (($250 & 64) == 0) {
      $257 = $248;
      $256 = $250;
     } else {
      _gv(1) | 0;
      $_pre38 = HEAP32[5024] | 0;
      $257 = $_pre38;
      $256 = HEAP16[$_pre38 + 8 >> 1] | 0;
     }
     HEAP16[$257 + 8 >> 1] = $256 & -257;
     $260 = HEAP32[5024] | 0;
     $261 = $260 + 8 | 0;
     $262 = HEAP16[$261 >> 1] | 0;
     if (($262 & 63) == 49) {
      HEAP16[$261 >> 1] = $262 & -28992 | 306;
      $268 = HEAP32[5024] | 0;
     } else {
      $268 = $260;
     }
     $269 = $cval_i20_sroa_4 | 0;
     if ($268 >>> 0 < 66472 >>> 0) {
      $273 = $268;
     } else {
      _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $273 = HEAP32[5024] | 0;
     }
     do {
      if ($273 >>> 0 < 56272 >>> 0) {
       $285 = $273;
      } else {
       $278 = HEAPU16[$273 + 8 >> 1] | 0;
       if (!(($278 & 63 | 0) == 51 | ($278 & 62 | 0) == 52)) {
        $285 = $273;
        break;
       }
       _gv(1) | 0;
       $285 = HEAP32[5024] | 0;
      }
     } while (0);
     $286 = $285 + 40 | 0;
     HEAP32[5024] = $286;
     $287 = $286;
     $$etemp$24 = 21728;
     $288$1 = HEAP32[$$etemp$24 + 4 >> 2] | 0;
     HEAP32[$287 >> 2] = HEAP32[$$etemp$24 >> 2];
     HEAP32[$287 + 4 >> 2] = $288$1;
     HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
     HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
     $293 = HEAP32[5024] | 0;
     HEAP32[$293 + 16 >> 2] = 4;
     $297 = $293 + 20 | 0;
     HEAP32[$297 >> 2] = HEAP32[$269 >> 2];
     HEAP32[$297 + 4 >> 2] = HEAP32[$269 + 4 >> 2];
     HEAP32[$297 + 8 >> 2] = HEAP32[$269 + 8 >> 2];
     _gen_op(43);
     $299 = (HEAP32[5024] | 0) + 8 | 0;
     HEAP16[$299 >> 1] = HEAP16[$299 >> 1] | 256;
    }
   } while (0);
   $318 = _get_reg($_) | 0;
   _load($318, HEAP32[5024] | 0);
   $320 = HEAP32[5024] | 0;
   $323 = HEAPU16[$320 + 8 >> 1] | 0;
   do {
    if (($323 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
     if (($323 & 62 | 0) != 52) {
      break;
     }
     _gsym(HEAP32[$320 + 16 >> 2] | 0);
    } else {
     _o(55517);
    }
   } while (0);
   $336 = HEAP32[5024] | 0;
   HEAP32[5024] = $336 - 40;
   HEAP16[$336 - 40 + 10 >> 1] = $318;
   $r_0 = $165;
  }
 } while (0);
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $r_0;
 $r_1 = $r_0;
 STACKTOP = sp;
 return $r_1 | 0;
}
function _asm_compute_constraints($operands, $nb_operands, $nb_outputs, $clobber_regs, $pout_reg) {
 $operands = $operands | 0;
 $nb_operands = $nb_operands | 0;
 $nb_outputs = $nb_outputs | 0;
 $clobber_regs = $clobber_regs | 0;
 $pout_reg = $pout_reg | 0;
 var $sorted_op = 0, $regs_allocated = 0, $1 = 0, $i_056 = 0, $i_153 = 0, $_0_i = 0, $12 = 0, $16 = 0, $22 = 0, $_in_i = 0, $_02_i = 0, $priority_01_i = 0, $28 = 0, $29 = 0, $pr_0_i = 0, $pr_0_priority_0_i = 0, $37 = 0, $priority_0_lcssa_i = 0, $43 = 0, $i_249 = 0, $i_346 = 0, $49 = 0, $51 = 0, $j_042 = 0, $53 = 0, $56 = 0, $57 = 0, $i_440 = 0, $74 = 0, $75 = 0, $i_537 = 0, $78 = 0, $79 = 0, $80 = 0, $85 = 0, $reg_mask_0_ph = 0, $90 = 0, $91 = 0, $92 = 0, $reg_mask_0 = 0, $str_0 = 0, $93 = 0, $94 = 0, $95 = 0, $101 = 0, $106 = 0, $reg_0 = 0, $123 = 0, $reg_124 = 0, $130 = 0, $134 = 0, $reg_219 = 0, $138 = 0, $142 = 0, $143 = 0, $reg_3 = 0, $reg_414 = 0, $171 = 0, $172 = 0, $175 = 0, $181 = 0, $182 = 0, $i_69 = 0, $reg_57 = 0, $215 = 0, $reg_56 = 0, $218 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $sorted_op = sp | 0;
 $regs_allocated = sp + 120 | 0;
 $1 = ($nb_operands | 0) > 0;
 do {
  if ($1) {
   $i_056 = 0;
   do {
    HEAP32[$operands + ($i_056 * 56 | 0) + 32 >> 2] = -1;
    HEAP32[$operands + ($i_056 * 56 | 0) + 28 >> 2] = -1;
    HEAP32[$operands + ($i_056 * 56 | 0) + 40 >> 2] = -1;
    HEAP32[$operands + ($i_056 * 56 | 0) + 48 >> 2] = 0;
    HEAP32[$operands + ($i_056 * 56 | 0) + 52 >> 2] = 0;
    $i_056 = $i_056 + 1 | 0;
   } while (($i_056 | 0) < ($nb_operands | 0));
   if ($1) {
    $i_153 = 0;
   } else {
    break;
   }
   do {
    $_0_i = HEAP32[$operands + ($i_153 * 56 | 0) + 4 >> 2] | 0;
    while (1) {
     $12 = HEAP8[$_0_i] | 0;
     if (!(($12 << 24 >> 24 | 0) == 61 | ($12 << 24 >> 24 | 0) == 38 | ($12 << 24 >> 24 | 0) == 43 | ($12 << 24 >> 24 | 0) == 37)) {
      break;
     }
     $_0_i = $_0_i + 1 | 0;
    }
    L11 : do {
     if (($12 - 48 & 255) >>> 0 < 10 >>> 0) {
      label = 10;
     } else {
      L13 : do {
       if (($12 << 24 >> 24 | 0) == 91) {
        label = 10;
        break L11;
       } else if (($12 << 24 >> 24 | 0) == 0) {
        $priority_0_lcssa_i = 0;
       } else {
        $priority_01_i = 0;
        $_02_i = $_0_i;
        $_in_i = $12;
        while (1) {
         $28 = $_in_i << 24 >> 24;
         $29 = $_02_i + 1 | 0;
         switch ($28 | 0) {
         case 78:
         case 77:
         case 73:
         case 105:
         case 109:
         case 103:
          {
           $pr_0_i = 4;
           break;
          }
         case 65:
          {
           $pr_0_i = 0;
           break;
          }
         case 113:
          {
           $pr_0_i = 2;
           break;
          }
         case 114:
          {
           $pr_0_i = 3;
           break;
          }
         case 97:
         case 98:
         case 99:
         case 100:
         case 83:
         case 68:
          {
           $pr_0_i = 1;
           break;
          }
         default:
          {
           _tcc_error(17376, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $28, tempVarArgs) | 0);
           STACKTOP = tempVarArgs;
           $pr_0_i = 0;
          }
         }
         $pr_0_priority_0_i = ($pr_0_i | 0) > ($priority_01_i | 0) ? $pr_0_i : $priority_01_i;
         $37 = HEAP8[$29] | 0;
         if ($37 << 24 >> 24 == 0) {
          $priority_0_lcssa_i = $pr_0_priority_0_i;
          break L13;
         } else {
          $priority_01_i = $pr_0_priority_0_i;
          $_02_i = $29;
          $_in_i = $37;
         }
        }
       }
      } while (0);
      HEAP32[$operands + ($i_153 * 56 | 0) + 36 >> 2] = $priority_0_lcssa_i;
     }
    } while (0);
    if ((label | 0) == 10) {
     label = 0;
     $16 = _find_constraint($operands, $nb_operands, $_0_i, 0) | 0;
     if ($16 >>> 0 >= $i_153 >>> 0 | ($i_153 | 0) < ($nb_outputs | 0)) {
      _tcc_error(11504, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $i_153, HEAP32[tempVarArgs + 8 >> 2] = $_0_i, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     HEAP32[$operands + ($i_153 * 56 | 0) + 28 >> 2] = $16;
     $22 = $operands + ($16 * 56 | 0) + 32 | 0;
     if ((HEAP32[$22 >> 2] | 0) > -1) {
      _tcc_error(10920, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     HEAP32[$22 >> 2] = $i_153;
     HEAP32[$operands + ($i_153 * 56 | 0) + 36 >> 2] = 5;
    }
    $i_153 = $i_153 + 1 | 0;
   } while (($i_153 | 0) < ($nb_operands | 0));
   if ($1) {
    $i_249 = 0;
   } else {
    break;
   }
   do {
    HEAP32[$sorted_op + ($i_249 << 2) >> 2] = $i_249;
    $i_249 = $i_249 + 1 | 0;
   } while (($i_249 | 0) < ($nb_operands | 0));
  }
 } while (0);
 $43 = $nb_operands - 1 | 0;
 if (($43 | 0) > 0) {
  $i_346 = 0;
  while (1) {
   $49 = $i_346 + 1 | 0;
   if (($49 | 0) < ($nb_operands | 0)) {
    $51 = $sorted_op + ($i_346 << 2) | 0;
    $j_042 = $49;
    do {
     $53 = HEAP32[$51 >> 2] | 0;
     $56 = $sorted_op + ($j_042 << 2) | 0;
     $57 = HEAP32[$56 >> 2] | 0;
     if ((HEAP32[$operands + ($57 * 56 | 0) + 36 >> 2] | 0) < (HEAP32[$operands + ($53 * 56 | 0) + 36 >> 2] | 0)) {
      HEAP32[$51 >> 2] = $57;
      HEAP32[$56 >> 2] = $53;
     }
     $j_042 = $j_042 + 1 | 0;
    } while (($j_042 | 0) < ($nb_operands | 0));
   }
   if (($49 | 0) < ($43 | 0)) {
    $i_346 = $49;
   } else {
    $i_440 = 0;
    break;
   }
  }
 } else {
  $i_440 = 0;
 }
 do {
  HEAP8[$regs_allocated + $i_440 | 0] = (HEAP8[$clobber_regs + $i_440 | 0] | 0) == 0 ? 0 : 3;
  $i_440 = $i_440 + 1 | 0;
 } while (($i_440 | 0) < 8);
 HEAP8[$regs_allocated + 4 | 0] = 3;
 HEAP8[$regs_allocated + 5 | 0] = 3;
 if (!$1) {
  HEAP32[$pout_reg >> 2] = -1;
  STACKTOP = sp;
  return;
 }
 $74 = $regs_allocated | 0;
 $75 = $regs_allocated + 2 | 0;
 $i_537 = 0;
 while (1) {
  $78 = HEAP32[$sorted_op + ($i_537 << 2) >> 2] | 0;
  $79 = $operands + ($78 * 56 | 0) + 4 | 0;
  $80 = HEAP32[$79 >> 2] | 0;
  do {
   if ((HEAP32[$operands + ($78 * 56 | 0) + 28 >> 2] | 0) <= -1) {
    $85 = $operands + ($78 * 56 | 0) + 32 | 0;
    if ((HEAP32[$85 >> 2] | 0) > -1) {
     $reg_mask_0_ph = 3;
    } else {
     $reg_mask_0_ph = ($78 | 0) < ($nb_outputs | 0) ? 1 : 2;
    }
    $90 = $operands + ($78 * 56 | 0) + 52 | 0;
    $91 = ($78 | 0) < ($nb_outputs | 0);
    $92 = $operands + ($78 * 56 | 0) + 24 | 0;
    $str_0 = $80;
    $reg_mask_0 = $reg_mask_0_ph;
    L62 : while (1) {
     $93 = $str_0 + 1 | 0;
     $94 = HEAP8[$str_0] | 0;
     $95 = $94 << 24 >> 24;
     switch ($95 | 0) {
     case 68:
      {
       $reg_0 = 7;
       label = 52;
       break;
      }
     case 65:
      {
       $101 = HEAPU8[$74] | 0;
       if (($101 & $reg_mask_0 | 0) != 0) {
        $str_0 = $93;
        $reg_mask_0 = $reg_mask_0;
        continue L62;
       }
       $106 = HEAPU8[$75] | 0;
       if (($106 & $reg_mask_0 | 0) == 0) {
        label = 46;
        break L62;
       } else {
        $str_0 = $93;
        $reg_mask_0 = $reg_mask_0;
        continue L62;
       }
       break;
      }
     case 99:
      {
       $reg_0 = 1;
       label = 52;
       break;
      }
     case 73:
     case 78:
     case 77:
      {
       if ((HEAP16[(HEAP32[$92 >> 2] | 0) + 8 >> 1] & 831) == 48) {
        break L62;
       } else {
        $str_0 = $93;
        $reg_mask_0 = $reg_mask_0;
        continue L62;
       }
       break;
      }
     case 109:
     case 103:
      {
       if (!($91 | $94 << 24 >> 24 == 109)) {
        break L62;
       }
       if ((HEAP16[(HEAP32[$92 >> 2] | 0) + 8 >> 1] & 63) == 49) {
        $reg_414 = 0;
       } else {
        break L62;
       }
       while (1) {
        $171 = $regs_allocated + $reg_414 | 0;
        $172 = HEAP8[$171] | 0;
        $175 = $reg_414 + 1 | 0;
        if (($172 & 2) == 0) {
         label = 64;
         break L62;
        }
        if (($175 | 0) < 8) {
         $reg_414 = $175;
        } else {
         $str_0 = $93;
         $reg_mask_0 = $reg_mask_0;
         continue L62;
        }
       }
       break;
      }
     case 114:
      {
       $reg_219 = 0;
       while (1) {
        $138 = HEAP8[$regs_allocated + $reg_219 | 0] | 0;
        $142 = $reg_219 + 1 | 0;
        if (($138 & 255 & $reg_mask_0 | 0) == 0) {
         $reg_3 = $reg_219;
         $143 = $138;
         label = 57;
         break L62;
        }
        if (($142 | 0) < 8) {
         $reg_219 = $142;
        } else {
         $str_0 = $93;
         $reg_mask_0 = $reg_mask_0;
         continue L62;
        }
       }
       break;
      }
     case 38:
      {
       break;
      }
     case 97:
      {
       $reg_0 = 0;
       label = 52;
       break;
      }
     case 43:
      {
       HEAP32[$90 >> 2] = 1;
       break;
      }
     case 113:
      {
       $reg_124 = 0;
       while (1) {
        $130 = HEAP8[$regs_allocated + $reg_124 | 0] | 0;
        $134 = $reg_124 + 1 | 0;
        if (($130 & 255 & $reg_mask_0 | 0) == 0) {
         $reg_3 = $reg_124;
         $143 = $130;
         label = 57;
         break L62;
        }
        if (($134 | 0) < 4) {
         $reg_124 = $134;
        } else {
         $str_0 = $93;
         $reg_mask_0 = $reg_mask_0;
         continue L62;
        }
       }
       break;
      }
     case 61:
      {
       $str_0 = $93;
       $reg_mask_0 = $reg_mask_0;
       continue L62;
       break;
      }
     case 105:
      {
       if ((HEAP16[(HEAP32[$92 >> 2] | 0) + 8 >> 1] & 319) == 48) {
        break L62;
       } else {
        $str_0 = $93;
        $reg_mask_0 = $reg_mask_0;
        continue L62;
       }
       break;
      }
     case 100:
      {
       $reg_0 = 2;
       label = 52;
       break;
      }
     case 98:
      {
       $reg_0 = 3;
       label = 52;
       break;
      }
     case 83:
      {
       $reg_0 = 6;
       label = 52;
       break;
      }
     default:
      {
       label = 65;
       break L62;
      }
     }
     if ((label | 0) == 52) {
      label = 0;
      $123 = HEAP8[$regs_allocated + $reg_0 | 0] | 0;
      if (($123 & 255 & $reg_mask_0 | 0) == 0) {
       $reg_3 = $reg_0;
       $143 = $123;
       label = 57;
       break;
      } else {
       $str_0 = $93;
       $reg_mask_0 = $reg_mask_0;
       continue;
      }
     }
     if ($91) {
      $str_0 = $93;
      $reg_mask_0 = 3;
      continue;
     }
     _tcc_error(10528, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $95, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $str_0 = $93;
     $reg_mask_0 = 3;
    }
    if ((label | 0) == 46) {
     label = 0;
     HEAP32[$operands + ($78 * 56 | 0) + 44 >> 2] = 1;
     HEAP32[$operands + ($78 * 56 | 0) + 40 >> 2] = 0;
     HEAP8[$74] = $101 | $reg_mask_0;
     HEAP8[$75] = $106 | $reg_mask_0;
    } else if ((label | 0) == 57) {
     label = 0;
     HEAP32[$operands + ($78 * 56 | 0) + 44 >> 2] = 0;
     HEAP32[$operands + ($78 * 56 | 0) + 40 >> 2] = $reg_3;
     HEAP8[$regs_allocated + $reg_3 | 0] = $143 & 255 | $reg_mask_0;
    } else if ((label | 0) == 64) {
     label = 0;
     HEAP8[$171] = $172 | 2;
     HEAP32[$operands + ($78 * 56 | 0) + 40 >> 2] = $reg_414;
     HEAP32[$operands + ($78 * 56 | 0) + 48 >> 2] = 1;
    } else if ((label | 0) == 65) {
     label = 0;
     $181 = HEAP32[$79 >> 2] | 0;
     _tcc_error(19648, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $78, HEAP32[tempVarArgs + 8 >> 2] = $181, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    $182 = HEAP32[$85 >> 2] | 0;
    if (($182 | 0) <= -1) {
     break;
    }
    HEAP32[$operands + ($182 * 56 | 0) + 40 >> 2] = HEAP32[$operands + ($78 * 56 | 0) + 40 >> 2];
    HEAP32[$operands + ((HEAP32[$85 >> 2] | 0) * 56 | 0) + 44 >> 2] = HEAP32[$operands + ($78 * 56 | 0) + 44 >> 2];
   }
  } while (0);
  $i_537 = $i_537 + 1 | 0;
  if (($i_537 | 0) >= ($nb_operands | 0)) {
   break;
  }
 }
 HEAP32[$pout_reg >> 2] = -1;
 if ($1) {
  $i_69 = 0;
 } else {
  STACKTOP = sp;
  return;
 }
 L101 : while (1) {
  do {
   if ((HEAP32[$operands + ($i_69 * 56 | 0) + 40 >> 2] | 0) > -1) {
    if ((HEAP16[(HEAP32[$operands + ($i_69 * 56 | 0) + 24 >> 2] | 0) + 8 >> 1] & 63) != 49) {
     break;
    }
    if ((HEAP32[$operands + ($i_69 * 56 | 0) + 48 >> 2] | 0) == 0) {
     $reg_57 = 0;
     break L101;
    }
   }
  } while (0);
  $218 = $i_69 + 1 | 0;
  if (($218 | 0) < ($nb_operands | 0)) {
   $i_69 = $218;
  } else {
   label = 78;
   break;
  }
 }
 if ((label | 0) == 78) {
  STACKTOP = sp;
  return;
 }
 while (1) {
  $215 = $reg_57 + 1 | 0;
  if ((HEAP8[$regs_allocated + $reg_57 | 0] & 1) == 0) {
   $reg_56 = $reg_57;
   break;
  }
  if (($215 | 0) < 8) {
   $reg_57 = $215;
  } else {
   label = 75;
   break;
  }
 }
 if ((label | 0) == 75) {
  _tcc_error(19168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $reg_56 = $215;
 }
 HEAP32[$pout_reg >> 2] = $reg_56;
 STACKTOP = sp;
 return;
}
function _gfunc_call($nb_args) {
 $nb_args = $nb_args | 0;
 var $align = 0, $3 = 0, $i_082 = 0, $args_size_081 = 0, $5 = 0, $11 = 0, $_pre_i = 0, $12 = 0, $13 = 0, $_01_i_i = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $36 = 0, $37 = 0, $42 = 0, $_pre_i8 = 0, $43 = 0, $44 = 0, $49 = 0, $50 = 0, $54 = 0, $57 = 0, $_01_i10 = 0, $58 = 0, $59 = 0, $64 = 0, $65 = 0, $70 = 0, $83 = 0, $size_0 = 0, $_pre_i15 = 0, $87 = 0, $88 = 0, $_01_i_i16 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $101 = 0, $103 = 0, $104 = 0, $109 = 0, $110 = 0, $116 = 0, $_01_i27 = 0, $117 = 0, $118 = 0, $123 = 0, $124 = 0, $129 = 0, $134 = 0, $_01_i34 = 0, $135 = 0, $136 = 0, $141 = 0, $142 = 0, $147 = 0, $149 = 0, $150 = 0, $151 = 0, $156 = 0, $157 = 0, $161 = 0, $162 = 0, $167 = 0, $168 = 0, $173 = 0, $174 = 0, $185 = 0, $_01_i46 = 0, $186 = 0, $187 = 0, $192 = 0, $193 = 0, $198 = 0, $size_1 = 0, $200 = 0, $203 = 0, $_01_i53 = 0, $204 = 0, $205 = 0, $210 = 0, $211 = 0, $216 = 0, $_pn = 0, $args_size_1 = 0, $219 = 0, $220 = 0, $args_size_0_lcssa = 0, $227 = 0, $230 = 0, $fastcall_nb_regs_0 = 0, $fastcall_regs_ptr_0 = 0, $234 = 0, $237 = 0, $239 = 0, $_pre_i58 = 0, $i_175 = 0, $args_size_274 = 0, $246 = 0, $_01_i60 = 0, $247 = 0, $248 = 0, $253 = 0, $254 = 0, $259 = 0, $261 = 0, $262 = 0, $args_size_3 = 0, $_pre_i_i65 = 0, $271 = 0, $272 = 0, $_01_i_i66 = 0, $273 = 0, $274 = 0, $279 = 0, $280 = 0, $285 = 0, $287 = 0, $288 = 0, $293 = 0, $294 = 0, $299 = 0, $_01_i_i_i = 0, $300 = 0, $301 = 0, $306 = 0, $307 = 0, $312 = 0, $314 = 0, $315 = 0, $320 = 0, $321 = 0, $storemerge_i = 0, $327 = 0, $328 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $align = sp | 0;
 if (($nb_args | 0) > 0) {
  $args_size_081 = 0;
  $i_082 = 0;
  $3 = HEAP32[5024] | 0;
  while (1) {
   $5 = HEAP32[$3 >> 2] | 0;
   L5 : do {
    if (($5 & 15 | 0) == 7) {
     $11 = (_type_size($3 | 0, $align) | 0) + 3 | 0;
     $_pre_i = HEAP32[5434] | 0;
     $12 = $_pre_i + 2 | 0;
     $_01_i_i = 60545;
     $13 = $_pre_i;
     while (1) {
      $14 = $13 + 1 | 0;
      $15 = HEAP32[13918] | 0;
      if ($14 >>> 0 > (HEAP32[$15 + 8 >> 2] | 0) >>> 0) {
       _section_realloc($15, $14);
       $21 = HEAP32[5434] | 0;
       $20 = HEAP32[13918] | 0;
      } else {
       $21 = $13;
       $20 = $15;
      }
      HEAP8[(HEAP32[$20 + 4 >> 2] | 0) + $21 | 0] = $_01_i_i;
      HEAP32[5434] = $14;
      $26 = $_01_i_i >>> 8;
      if (($26 | 0) == 0) {
       break;
      } else {
       $_01_i_i = $26;
       $13 = $14;
      }
     }
     $28 = $11 & -4;
     $29 = $_pre_i + 6 | 0;
     $30 = HEAP32[13918] | 0;
     if ($29 >>> 0 > (HEAP32[$30 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($30, $29);
      $37 = HEAP32[13918] | 0;
      $36 = HEAP32[5434] | 0;
     } else {
      $37 = $30;
      $36 = $12;
     }
     HEAP32[(HEAP32[$37 + 4 >> 2] | 0) + $36 >> 2] = $28;
     HEAP32[5434] = $29;
     $42 = _get_reg(1) | 0;
     $_pre_i8 = HEAP32[5434] | 0;
     $43 = $_pre_i8 + 1 | 0;
     $44 = HEAP32[13918] | 0;
     if ($43 >>> 0 > (HEAP32[$44 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($44, $43);
      $50 = HEAP32[5434] | 0;
      $49 = HEAP32[13918] | 0;
     } else {
      $50 = $_pre_i8;
      $49 = $44;
     }
     HEAP8[(HEAP32[$49 + 4 >> 2] | 0) + $50 | 0] = -119;
     HEAP32[5434] = $43;
     $54 = $42 + 224 | 0;
     if (($54 | 0) != 0) {
      $_01_i10 = $54;
      $57 = $_pre_i8 + 1 | 0;
      while (1) {
       $58 = $57 + 1 | 0;
       $59 = HEAP32[13918] | 0;
       if ($58 >>> 0 > (HEAP32[$59 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($59, $58);
        $65 = HEAP32[5434] | 0;
        $64 = HEAP32[13918] | 0;
       } else {
        $65 = $57;
        $64 = $59;
       }
       HEAP8[(HEAP32[$64 + 4 >> 2] | 0) + $65 | 0] = $_01_i10;
       HEAP32[5434] = $58;
       $70 = $_01_i10 >>> 8;
       if (($70 | 0) == 0) {
        break;
       } else {
        $_01_i10 = $70;
        $57 = $58;
       }
      }
     }
     _vset(HEAP32[5024] | 0, $42 | 256, 0);
     _vswap();
     _vstore();
     $_pn = $28;
    } else {
     if ((_is_float($5) | 0) == 0) {
      $173 = _gv(1) | 0;
      $174 = HEAP32[5024] | 0;
      if ((HEAP32[$174 >> 2] & 15 | 0) == 12) {
       $_01_i46 = (HEAPU16[$174 + 10 >> 1] | 0) + 80 | 0;
       $185 = HEAP32[5434] | 0;
       while (1) {
        $186 = $185 + 1 | 0;
        $187 = HEAP32[13918] | 0;
        if ($186 >>> 0 > (HEAP32[$187 + 8 >> 2] | 0) >>> 0) {
         _section_realloc($187, $186);
         $193 = HEAP32[5434] | 0;
         $192 = HEAP32[13918] | 0;
        } else {
         $193 = $185;
         $192 = $187;
        }
        HEAP8[(HEAP32[$192 + 4 >> 2] | 0) + $193 | 0] = $_01_i46;
        HEAP32[5434] = $186;
        $198 = $_01_i46 >>> 8;
        if (($198 | 0) == 0) {
         $size_1 = 8;
         break;
        } else {
         $_01_i46 = $198;
         $185 = $186;
        }
       }
      } else {
       $size_1 = 4;
      }
      $200 = $173 + 80 | 0;
      if (($200 | 0) == 0) {
       $_pn = $size_1;
       break;
      }
      $_01_i53 = $200;
      $203 = HEAP32[5434] | 0;
      while (1) {
       $204 = $203 + 1 | 0;
       $205 = HEAP32[13918] | 0;
       if ($204 >>> 0 > (HEAP32[$205 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($205, $204);
        $211 = HEAP32[5434] | 0;
        $210 = HEAP32[13918] | 0;
       } else {
        $211 = $203;
        $210 = $205;
       }
       HEAP8[(HEAP32[$210 + 4 >> 2] | 0) + $211 | 0] = $_01_i53;
       HEAP32[5434] = $204;
       $216 = $_01_i53 >>> 8;
       if (($216 | 0) == 0) {
        $_pn = $size_1;
        break L5;
       } else {
        $_01_i53 = $216;
        $203 = $204;
       }
      }
     }
     _gv(2) | 0;
     $83 = HEAP32[HEAP32[5024] >> 2] & 15;
     if (($83 | 0) == 9) {
      $size_0 = 8;
     } else if (($83 | 0) == 8) {
      $size_0 = 4;
     } else {
      $size_0 = 12;
     }
     $_pre_i15 = HEAP32[5434] | 0;
     $87 = $_pre_i15 + 2 | 0;
     $_01_i_i16 = 60545;
     $88 = $_pre_i15;
     while (1) {
      $89 = $88 + 1 | 0;
      $90 = HEAP32[13918] | 0;
      if ($89 >>> 0 > (HEAP32[$90 + 8 >> 2] | 0) >>> 0) {
       _section_realloc($90, $89);
       $96 = HEAP32[5434] | 0;
       $95 = HEAP32[13918] | 0;
      } else {
       $96 = $88;
       $95 = $90;
      }
      HEAP8[(HEAP32[$95 + 4 >> 2] | 0) + $96 | 0] = $_01_i_i16;
      HEAP32[5434] = $89;
      $101 = $_01_i_i16 >>> 8;
      if (($101 | 0) == 0) {
       break;
      } else {
       $_01_i_i16 = $101;
       $88 = $89;
      }
     }
     $103 = $_pre_i15 + 6 | 0;
     $104 = HEAP32[13918] | 0;
     if ($103 >>> 0 > (HEAP32[$104 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($104, $103);
      $110 = HEAP32[13918] | 0;
      $109 = HEAP32[5434] | 0;
     } else {
      $110 = $104;
      $109 = $87;
     }
     HEAP32[(HEAP32[$110 + 4 >> 2] | 0) + $109 >> 2] = $size_0;
     HEAP32[5434] = $103;
     if (($size_0 | 0) == 12) {
      $_01_i27 = 31963;
      $116 = $103;
      while (1) {
       $117 = $116 + 1 | 0;
       $118 = HEAP32[13918] | 0;
       if ($117 >>> 0 > (HEAP32[$118 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($118, $117);
        $124 = HEAP32[5434] | 0;
        $123 = HEAP32[13918] | 0;
       } else {
        $124 = $116;
        $123 = $118;
       }
       HEAP8[(HEAP32[$123 + 4 >> 2] | 0) + $124 | 0] = $_01_i27;
       HEAP32[5434] = $117;
       $129 = $_01_i27 >>> 8;
       if (($129 | 0) == 0) {
        $149 = $117;
        break;
       } else {
        $_01_i27 = $129;
        $116 = $117;
       }
      }
     } else {
      $_01_i34 = $size_0 + 23765 | 0;
      $134 = $103;
      while (1) {
       $135 = $134 + 1 | 0;
       $136 = HEAP32[13918] | 0;
       if ($135 >>> 0 > (HEAP32[$136 + 8 >> 2] | 0) >>> 0) {
        _section_realloc($136, $135);
        $142 = HEAP32[5434] | 0;
        $141 = HEAP32[13918] | 0;
       } else {
        $142 = $134;
        $141 = $136;
       }
       HEAP8[(HEAP32[$141 + 4 >> 2] | 0) + $142 | 0] = $_01_i34;
       HEAP32[5434] = $135;
       $147 = $_01_i34 >>> 8;
       if (($147 | 0) == 0) {
        $149 = $135;
        break;
       } else {
        $_01_i34 = $147;
        $134 = $135;
       }
      }
     }
     $150 = $149 + 1 | 0;
     $151 = HEAP32[13918] | 0;
     if ($150 >>> 0 > (HEAP32[$151 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($151, $150);
      $157 = HEAP32[5434] | 0;
      $156 = HEAP32[13918] | 0;
     } else {
      $157 = $149;
      $156 = $151;
     }
     HEAP8[(HEAP32[$156 + 4 >> 2] | 0) + $157 | 0] = 36;
     HEAP32[5434] = $150;
     $161 = $149 + 2 | 0;
     $162 = HEAP32[13918] | 0;
     if ($161 >>> 0 > (HEAP32[$162 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($162, $161);
      $168 = HEAP32[5434] | 0;
      $167 = HEAP32[13918] | 0;
     } else {
      $168 = $150;
      $167 = $162;
     }
     HEAP8[(HEAP32[$167 + 4 >> 2] | 0) + $168 | 0] = 0;
     HEAP32[5434] = $161;
     $_pn = $size_0;
    }
   } while (0);
   $args_size_1 = $_pn + $args_size_081 | 0;
   $219 = (HEAP32[5024] | 0) - 40 | 0;
   HEAP32[5024] = $219;
   $220 = $i_082 + 1 | 0;
   if (($220 | 0) < ($nb_args | 0)) {
    $args_size_081 = $args_size_1;
    $i_082 = $220;
    $3 = $219;
   } else {
    $args_size_0_lcssa = $args_size_1;
    break;
   }
  }
 } else {
  $args_size_0_lcssa = 0;
 }
 _save_regs(0);
 $227 = HEAP32[(HEAP32[(HEAP32[5024] | 0) + 4 >> 2] | 0) + 8 >> 2] & 7;
 do {
  if (($227 - 2 | 0) >>> 0 < 4 >>> 0) {
   $230 = ($227 | 0) == 5;
   $fastcall_nb_regs_0 = $230 ? 2 : $227 - 1 | 0;
   $fastcall_regs_ptr_0 = $230 ? 7592 : 7600;
   if (($fastcall_nb_regs_0 | 0) < 1 | ($args_size_0_lcssa | 0) < 1) {
    $args_size_3 = $args_size_0_lcssa;
    break;
   }
   $234 = -$fastcall_nb_regs_0 | 0;
   $237 = ~(($args_size_0_lcssa - 1 | 0) >>> 2);
   $239 = ($234 >>> 0 > $237 >>> 0 ? $234 : $237) << 2;
   $args_size_274 = $args_size_0_lcssa;
   $i_175 = 0;
   $_pre_i58 = HEAP32[5434] | 0;
   while (1) {
    $_01_i60 = (HEAPU8[$fastcall_regs_ptr_0 + $i_175 | 0] | 0) + 88 | 0;
    $246 = $_pre_i58;
    while (1) {
     $247 = $246 + 1 | 0;
     $248 = HEAP32[13918] | 0;
     if ($247 >>> 0 > (HEAP32[$248 + 8 >> 2] | 0) >>> 0) {
      _section_realloc($248, $247);
      $254 = HEAP32[5434] | 0;
      $253 = HEAP32[13918] | 0;
     } else {
      $254 = $246;
      $253 = $248;
     }
     HEAP8[(HEAP32[$253 + 4 >> 2] | 0) + $254 | 0] = $_01_i60;
     HEAP32[5434] = $247;
     $259 = $_01_i60 >>> 8;
     if (($259 | 0) == 0) {
      break;
     } else {
      $_01_i60 = $259;
      $246 = $247;
     }
    }
    $261 = $args_size_274 - 4 | 0;
    $262 = $i_175 + 1 | 0;
    if (($262 | 0) >= ($fastcall_nb_regs_0 | 0) | ($261 | 0) < 1) {
     break;
    } else {
     $args_size_274 = $261;
     $i_175 = $262;
     $_pre_i58 = $247;
    }
   }
   $args_size_3 = $args_size_0_lcssa + $239 | 0;
  } else {
   $args_size_3 = $args_size_0_lcssa;
  }
 } while (0);
 _gcall_or_jmp(0);
 if (!(($args_size_3 | 0) != 0 & ($227 | 0) != 1)) {
  $327 = HEAP32[5024] | 0;
  $328 = $327 - 40 | 0;
  HEAP32[5024] = $328;
  STACKTOP = sp;
  return;
 }
 $_pre_i_i65 = HEAP32[5434] | 0;
 $271 = $_pre_i_i65 + 2 | 0;
 if (($args_size_3 << 24 >> 24 | 0) == ($args_size_3 | 0)) {
  $_01_i_i66 = 50307;
  $272 = $_pre_i_i65;
  while (1) {
   $273 = $272 + 1 | 0;
   $274 = HEAP32[13918] | 0;
   if ($273 >>> 0 > (HEAP32[$274 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($274, $273);
    $280 = HEAP32[5434] | 0;
    $279 = HEAP32[13918] | 0;
   } else {
    $280 = $272;
    $279 = $274;
   }
   HEAP8[(HEAP32[$279 + 4 >> 2] | 0) + $280 | 0] = $_01_i_i66;
   HEAP32[5434] = $273;
   $285 = $_01_i_i66 >>> 8;
   if (($285 | 0) == 0) {
    break;
   } else {
    $_01_i_i66 = $285;
    $272 = $273;
   }
  }
  $287 = $_pre_i_i65 + 3 | 0;
  $288 = HEAP32[13918] | 0;
  if ($287 >>> 0 > (HEAP32[$288 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($288, $287);
   $294 = HEAP32[5434] | 0;
   $293 = HEAP32[13918] | 0;
  } else {
   $294 = $271;
   $293 = $288;
  }
  HEAP8[(HEAP32[$293 + 4 >> 2] | 0) + $294 | 0] = $args_size_3;
  $storemerge_i = $287;
 } else {
  $_01_i_i_i = 50305;
  $299 = $_pre_i_i65;
  while (1) {
   $300 = $299 + 1 | 0;
   $301 = HEAP32[13918] | 0;
   if ($300 >>> 0 > (HEAP32[$301 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($301, $300);
    $307 = HEAP32[5434] | 0;
    $306 = HEAP32[13918] | 0;
   } else {
    $307 = $299;
    $306 = $301;
   }
   HEAP8[(HEAP32[$306 + 4 >> 2] | 0) + $307 | 0] = $_01_i_i_i;
   HEAP32[5434] = $300;
   $312 = $_01_i_i_i >>> 8;
   if (($312 | 0) == 0) {
    break;
   } else {
    $_01_i_i_i = $312;
    $299 = $300;
   }
  }
  $314 = $_pre_i_i65 + 6 | 0;
  $315 = HEAP32[13918] | 0;
  if ($314 >>> 0 > (HEAP32[$315 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($315, $314);
   $321 = HEAP32[13918] | 0;
   $320 = HEAP32[5434] | 0;
  } else {
   $321 = $315;
   $320 = $271;
  }
  HEAP32[(HEAP32[$321 + 4 >> 2] | 0) + $320 >> 2] = $args_size_3;
  $storemerge_i = $314;
 }
 HEAP32[5434] = $storemerge_i;
 $327 = HEAP32[5024] | 0;
 $328 = $327 - 40 | 0;
 HEAP32[5024] = $328;
 STACKTOP = sp;
 return;
}
function _struct_decl($type, $u) {
 $type = $type | 0;
 $u = $u | 0;
 var $v = 0, $align = 0, $ad = 0, $type1 = 0, $tmpcast = 0, $btype = 0, $tmpcast18 = 0, $1 = 0, $2 = 0, $8 = 0, $16 = 0, $24 = 0, $26 = 0, $31 = 0, $35 = 0, $39 = 0, $46 = 0, $s_0 = 0, $55 = 0, $_pr = 0, $61 = 0, $c_0 = 0, $c_1 = 0, $73 = 0, $80 = 0, $86 = 0, $ps_1_i = 0, $93 = 0, $100 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $ps_043 = 0, $prevbt_042 = 0, $maxalign_041 = 0, $c_240 = 0, $bit_pos_039 = 0, $offset_038 = 0, $offset_1 = 0, $bit_pos_1 = 0, $c_3 = 0, $maxalign_1 = 0, $prevbt_1 = 0, $ps_1 = 0, $114$1 = 0, $118 = 0, $126 = 0, $132 = 0, $135 = 0, $136 = 0, $138 = 0, $143 = 0, $_pr35 = 0, $bit_size_0 = 0, $145 = 0, $146 = 0, $148 = 0, $151 = 0, $162 = 0, $164 = 0, $168 = 0, $172 = 0, $175 = 0, $178 = 0, $bit_pos_2 = 0, $bit_pos_4 = 0, $lbit_pos_1 = 0, $prevbt_2 = 0, $194 = 0, $206 = 0, $offset_2 = 0, $c_4 = 0, $_maxalign_1 = 0, $maxalign_258 = 0, $c_555 = 0, $offset_352 = 0, $219 = 0, $221 = 0, $ps_237 = 0, $223 = 0, $231 = 0, $239 = 0, $245 = 0, $ps_1_i27 = 0, $252 = 0, $254 = 0, $maxalign_262 = 0, $c_561 = 0, $offset_360 = 0, $259 = 0, $maxalign_257 = 0, $c_554 = 0, $offset_351 = 0, $ps_3 = 0, $264 = 0, $maxalign_0_lcssa = 0, $c_2_lcssa = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $v = sp | 0;
 $align = sp + 8 | 0;
 $ad = sp + 16 | 0;
 $type1 = sp + 32 | 0;
 $tmpcast = $type1;
 $btype = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tmpcast18 = $btype;
 $1 = HEAP32[5310] | 0;
 _next();
 $2 = HEAP32[5310] | 0;
 do {
  if (($2 | 0) == 123) {
   $24 = HEAP32[13930] | 0;
   HEAP32[13930] = $24 + 1;
   HEAP32[$v >> 2] = $24;
   $26 = $24;
   label = 9;
  } else {
   HEAP32[$v >> 2] = $2;
   _next();
   if (($2 | 0) < 256) {
    _expect(11944);
   }
   $8 = $2 - 256 | 0;
   if ($8 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
    $26 = $2;
    label = 9;
    break;
   }
   $16 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($8 << 2) >> 2] | 0) + 12 >> 2] | 0;
   if (($16 | 0) == 0) {
    $26 = $2;
    label = 9;
    break;
   }
   if ((HEAP32[$16 + 16 >> 2] | 0) == ($1 | 0)) {
    $s_0 = $16;
    break;
   }
   _tcc_error(12392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $s_0 = $16;
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$type1 >> 2] = $1;
  $31 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $26 | 1073741824, $1, -1) | 0;
  HEAP32[$31 + 20 >> 2] = HEAP32[$tmpcast + 4 >> 2];
  $35 = $31 + 8 | 0;
  HEAP32[$35 >> 2] = 0;
  do {
   if (($26 & 536870912 | 0) == 0) {
    $39 = $26 & -1073741825;
    if (($39 | 0) >= 268435456) {
     break;
    }
    $46 = (HEAP32[(HEAP32[5316] | 0) + ($39 - 256 << 2) >> 2] | 0) + 12 | 0;
    HEAP32[$31 + 32 >> 2] = HEAP32[$46 >> 2];
    HEAP32[$46 >> 2] = $31;
   }
  } while (0);
  HEAP32[$35 >> 2] = 0;
  $s_0 = $31;
 }
 HEAP32[$type >> 2] = $u;
 HEAP32[$type + 4 >> 2] = $s_0;
 if ((HEAP32[5310] | 0) != 123) {
  STACKTOP = sp;
  return;
 }
 _next();
 $55 = $s_0 + 12 | 0;
 if ((HEAP32[$55 >> 2] | 0) != -1) {
  _tcc_error(11896, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 $_pr = HEAP32[5310] | 0;
 if (($1 | 0) == 300) {
  $c_0 = 0;
  $61 = $_pr;
  while (1) {
   if (($61 | 0) < 313) {
    _expect(18448);
   }
   _next();
   if ((HEAP32[5310] | 0) == 61) {
    _next();
    $c_1 = _expr_const() | 0;
   } else {
    $c_1 = $c_0;
   }
   $73 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $61, HEAP32[5432] | 0, $c_1) | 0;
   HEAP32[$73 + 20 >> 2] = HEAP32[5433];
   HEAP32[$73 + 8 >> 2] = 48;
   do {
    if (($61 & 536870912 | 0) == 0) {
     $80 = $61 & -1073741825;
     if (($80 | 0) >= 268435456) {
      break;
     }
     $86 = HEAP32[(HEAP32[5316] | 0) + ($80 - 256 << 2) >> 2] | 0;
     $ps_1_i = ($61 & 1073741824 | 0) == 0 ? $86 + 16 | 0 : $86 + 12 | 0;
     HEAP32[$73 + 32 >> 2] = HEAP32[$ps_1_i >> 2];
     HEAP32[$ps_1_i >> 2] = $73;
    }
   } while (0);
   $93 = $73 + 16 | 0;
   HEAP32[$93 >> 2] = HEAP32[$93 >> 2] | 256;
   if ((HEAP32[5310] | 0) != 44) {
    break;
   }
   _next();
   $100 = HEAP32[5310] | 0;
   if (($100 | 0) == 125) {
    break;
   } else {
    $c_0 = $c_1 + 1 | 0;
    $61 = $100;
   }
  }
  HEAP32[$v >> 2] = $61;
  _skip(125);
  STACKTOP = sp;
  return;
 }
 if (($_pr | 0) == 125) {
  $c_2_lcssa = 0;
  $maxalign_0_lcssa = 1;
 } else {
  $106 = $ad;
  $107 = $type1;
  $108 = ($1 | 0) == 297;
  $109 = ($1 | 0) == 296;
  $110 = $tmpcast + 4 | 0;
  $offset_038 = 0;
  $bit_pos_039 = 0;
  $c_240 = 0;
  $maxalign_041 = 1;
  $prevbt_042 = 0;
  $ps_043 = $s_0 + 24 | 0;
  while (1) {
   _parse_btype($tmpcast18, $ad) | 0;
   $ps_1 = $ps_043;
   $prevbt_1 = $prevbt_042;
   $maxalign_1 = $maxalign_041;
   $c_3 = $c_240;
   $bit_pos_1 = $bit_pos_039;
   $offset_1 = $offset_038;
   while (1) {
    HEAP32[$v >> 2] = 0;
    $114$1 = HEAP32[$btype + 4 >> 2] | 0;
    HEAP32[$type1 >> 2] = HEAP32[$btype >> 2];
    HEAP32[$type1 + 4 >> 2] = $114$1;
    if ((HEAP32[5310] | 0) == 58) {
     $135 = 0;
     label = 37;
    } else {
     _type_decl($tmpcast, $ad, $v, 3);
     $118 = HEAP32[$v >> 2] | 0;
     do {
      if (($118 | 0) == 0) {
       if ((HEAP32[$107 >> 2] & 15 | 0) == 7) {
        break;
       }
       _expect(18448);
      }
     } while (0);
     $126 = HEAP32[$107 >> 2] | 0;
     if (!(($126 & 15 | 0) != 6 & ($126 & 1920 | 0) == 0)) {
      $132 = _get_tok_str($118, 0) | 0;
      _tcc_error(11840, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $132, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     if ((HEAP32[5310] | 0) == 58) {
      $135 = $118;
      label = 37;
     } else {
      $bit_size_0 = -1;
      $_pr35 = $118;
     }
    }
    do {
     if ((label | 0) == 37) {
      label = 0;
      _next();
      $136 = _expr_const() | 0;
      if (($136 | 0) < 0) {
       $138 = _get_tok_str($135, 0) | 0;
       _tcc_error(11744, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $138, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $bit_size_0 = $136;
       $_pr35 = $135;
       break;
      }
      if (!(($135 | 0) != 0 & ($136 | 0) == 0)) {
       $bit_size_0 = $136;
       $_pr35 = $135;
       break;
      }
      $143 = _get_tok_str($135, 0) | 0;
      _tcc_error(11648, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $143, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $bit_size_0 = 0;
      $_pr35 = $135;
     }
    } while (0);
    $145 = _type_size($tmpcast, $align) | 0;
    $146 = HEAP32[$106 >> 2] | 0;
    $148 = $146 >>> 3 & 31;
    do {
     if (($148 | 0) == 0) {
      if (($146 & 256 | 0) != 0) {
       HEAP32[$align >> 2] = 1;
       $168 = 1;
       break;
      }
      $162 = HEAP32[HEAP32[(HEAP32[5314] | 0) + 2816 >> 2] >> 2] | 0;
      $164 = HEAP32[$align >> 2] | 0;
      if (!(($162 | 0) != 0 & ($164 | 0) > ($162 | 0))) {
       $168 = $164;
       break;
      }
      HEAP32[$align >> 2] = $162;
      $168 = $162;
     } else {
      $151 = HEAP32[$align >> 2] | 0;
      if (($151 | 0) >= ($148 | 0)) {
       $168 = $151;
       break;
      }
      HEAP32[$align >> 2] = $148;
      $168 = $148;
     }
    } while (0);
    do {
     if (($bit_size_0 | 0) > -1) {
      $172 = HEAP32[$107 >> 2] & 15;
      switch ($172 | 0) {
      case 12:
      case 11:
      case 5:
      case 2:
      case 1:
      case 0:
       {
        break;
       }
      default:
       {
        _tcc_error(11568, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
       }
      }
      $175 = $145 << 3;
      if (($bit_size_0 | 0) > ($175 | 0)) {
       $178 = _get_tok_str($_pr35, 0) | 0;
       _tcc_error(11472, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $178, tempVarArgs) | 0);
       STACKTOP = tempVarArgs;
       $prevbt_2 = $172;
       $lbit_pos_1 = 0;
       $bit_pos_4 = $bit_pos_1;
       break;
      }
      if (($bit_size_0 | 0) == ($175 | 0) | ($bit_size_0 | 0) == 0) {
       $prevbt_2 = $172;
       $lbit_pos_1 = 0;
       $bit_pos_4 = 0;
       break;
      }
      $bit_pos_2 = ($bit_size_0 + $bit_pos_1 | 0) > ($175 | 0) | (($172 | 0) != ($prevbt_1 | 0) | $108) ? 0 : $bit_pos_1;
      HEAP32[$107 >> 2] = $bit_size_0 << 24 | $bit_pos_2 << 18 | HEAP32[$107 >> 2] | 64;
      $prevbt_2 = $172;
      $lbit_pos_1 = $bit_pos_2;
      $bit_pos_4 = $bit_pos_2 + $bit_size_0 | 0;
     } else {
      $prevbt_2 = $prevbt_1;
      $lbit_pos_1 = 0;
      $bit_pos_4 = 0;
     }
    } while (0);
    $194 = ($_pr35 | 0) == 0;
    if ($194) {
     if ((HEAP32[$107 >> 2] & 15 | 0) == 7 & ($lbit_pos_1 | 0) == 0) {
      label = 58;
     } else {
      $offset_352 = $offset_1;
      $c_555 = $c_3;
      $maxalign_258 = $maxalign_1;
      label = 62;
     }
    } else {
     if (($lbit_pos_1 | 0) == 0) {
      label = 58;
     } else {
      $offset_360 = $offset_1;
      $c_561 = $c_3;
      $maxalign_262 = $maxalign_1;
      label = 68;
     }
    }
    if ((label | 0) == 58) {
     label = 0;
     if ($109) {
      $206 = $c_3 - 1 + $168 & -$168;
      $c_4 = $206 + (($145 | 0) > 0 ? $145 : 0) | 0;
      $offset_2 = $206;
     } else {
      $c_4 = ($145 | 0) > ($c_3 | 0) ? $145 : $c_3;
      $offset_2 = 0;
     }
     $_maxalign_1 = ($168 | 0) > ($maxalign_1 | 0) ? $168 : $maxalign_1;
     if ($194) {
      $offset_352 = $offset_2;
      $c_555 = $c_4;
      $maxalign_258 = $_maxalign_1;
      label = 62;
     } else {
      $offset_360 = $offset_2;
      $c_561 = $c_4;
      $maxalign_262 = $_maxalign_1;
      label = 68;
     }
    }
    do {
     if ((label | 0) == 62) {
      label = 0;
      if ((HEAP32[$107 >> 2] & 15 | 0) != 7) {
       $ps_3 = $ps_1;
       $offset_351 = $offset_352;
       $c_554 = $c_555;
       $maxalign_257 = $maxalign_258;
       break;
      }
      $219 = HEAP32[(HEAP32[$110 >> 2] | 0) + 24 >> 2] | 0;
      if (($219 | 0) == 0) {
       $ps_3 = $ps_1;
       $offset_351 = $offset_352;
       $c_554 = $c_555;
       $maxalign_257 = $maxalign_258;
       break;
      } else {
       $ps_237 = $ps_1;
       $221 = $219;
      }
      while (1) {
       $223 = HEAP32[$221 >> 2] | 0;
       $231 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $223, HEAP32[$221 + 16 >> 2] | 0, (HEAP32[$221 + 12 >> 2] | 0) + $offset_352 | 0) | 0;
       HEAP32[$231 + 20 >> 2] = HEAP32[$221 + 20 >> 2];
       HEAP32[$231 + 8 >> 2] = 0;
       do {
        if (($223 & 536870912 | 0) == 0) {
         $239 = $223 & -1073741825;
         if (($239 | 0) >= 268435456) {
          break;
         }
         $245 = HEAP32[(HEAP32[5316] | 0) + ($239 - 256 << 2) >> 2] | 0;
         $ps_1_i27 = ($223 & 1073741824 | 0) == 0 ? $245 + 16 | 0 : $245 + 12 | 0;
         HEAP32[$231 + 32 >> 2] = HEAP32[$ps_1_i27 >> 2];
         HEAP32[$ps_1_i27 >> 2] = $231;
        }
       } while (0);
       HEAP32[$ps_237 >> 2] = $231;
       $252 = $231 + 24 | 0;
       $254 = HEAP32[$221 + 24 >> 2] | 0;
       if (($254 | 0) == 0) {
        $ps_3 = $252;
        $offset_351 = $offset_352;
        $c_554 = $c_555;
        $maxalign_257 = $maxalign_258;
        break;
       } else {
        $ps_237 = $252;
        $221 = $254;
       }
      }
     } else if ((label | 0) == 68) {
      label = 0;
      $259 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $_pr35 | 536870912, HEAP32[$107 >> 2] | 0, $offset_360) | 0;
      HEAP32[$259 + 20 >> 2] = HEAP32[$110 >> 2];
      HEAP32[$259 + 8 >> 2] = 0;
      HEAP32[$ps_1 >> 2] = $259;
      $ps_3 = $259 + 24 | 0;
      $offset_351 = $offset_360;
      $c_554 = $c_561;
      $maxalign_257 = $maxalign_262;
     }
    } while (0);
    $264 = HEAP32[5310] | 0;
    if (($264 | 0) == (-1 | 0) | ($264 | 0) == 59) {
     break;
    }
    _skip(44);
    $ps_1 = $ps_3;
    $prevbt_1 = $prevbt_2;
    $maxalign_1 = $maxalign_257;
    $c_3 = $c_554;
    $bit_pos_1 = $bit_pos_4;
    $offset_1 = $offset_351;
   }
   _skip(59);
   if ((HEAP32[5310] | 0) == 125) {
    $c_2_lcssa = $c_554;
    $maxalign_0_lcssa = $maxalign_257;
    break;
   } else {
    $offset_038 = $offset_351;
    $bit_pos_039 = $bit_pos_4;
    $c_240 = $c_554;
    $maxalign_041 = $maxalign_257;
    $prevbt_042 = $prevbt_2;
    $ps_043 = $ps_3;
   }
  }
 }
 _skip(125);
 HEAP32[$55 >> 2] = $c_2_lcssa - 1 + $maxalign_0_lcssa & -$maxalign_0_lcssa;
 HEAP32[$s_0 + 8 >> 2] = $maxalign_0_lcssa;
 STACKTOP = sp;
 return;
}
function _gv2($rc1, $rc2) {
 $rc1 = $rc1 | 0;
 $rc2 = $rc2 | 0;
 var $tmp_i15 = 0, $tmp_i12 = 0, $tmp_i9 = 0, $tmp_i6 = 0, $tmp_i = 0, $1 = 0, $4 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $24 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $39 = 0, $46 = 0, $51 = 0, $58 = 0, $59 = 0, $61 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $79 = 0, $80 = 0, $82 = 0, $85 = 0, $88 = 0, $89 = 0, $94 = 0, $101 = 0, $102 = 0, $104 = 0, $107 = 0, $109 = 0, $110 = 0, $115 = 0, $122 = 0, $123 = 0, $125 = 0, $128 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $tmp_i15 = sp | 0;
 $tmp_i12 = sp + 40 | 0;
 $tmp_i9 = sp + 80 | 0;
 $tmp_i6 = sp + 120 | 0;
 $tmp_i = sp + 200 | 0;
 $1 = HEAP32[5024] | 0;
 $4 = HEAPU16[$1 + 8 >> 1] | 0;
 if (($4 & 63 | 0) == 51 | ($4 & 62 | 0) == 52 | ($rc1 | 0) > ($rc2 | 0)) {
  _gv($rc2) | 0;
  $88 = sp + 160 | 0;
  $89 = HEAP32[5024] | 0;
  do {
   if ($89 >>> 0 < 56272 >>> 0) {
    $101 = $89;
   } else {
    $94 = HEAPU16[$89 + 8 >> 1] | 0;
    if (!(($94 & 63 | 0) == 51 | ($94 & 62 | 0) == 52)) {
     $101 = $89;
     break;
    }
    _gv(1) | 0;
    $101 = HEAP32[5024] | 0;
   }
  } while (0);
  $102 = $101;
  HEAP32[$88 >> 2] = HEAP32[$102 >> 2];
  HEAP32[$88 + 4 >> 2] = HEAP32[$102 + 4 >> 2];
  HEAP32[$88 + 8 >> 2] = HEAP32[$102 + 8 >> 2];
  HEAP32[$88 + 12 >> 2] = HEAP32[$102 + 12 >> 2];
  HEAP32[$88 + 16 >> 2] = HEAP32[$102 + 16 >> 2];
  HEAP32[$88 + 20 >> 2] = HEAP32[$102 + 20 >> 2];
  HEAP32[$88 + 24 >> 2] = HEAP32[$102 + 24 >> 2];
  HEAP32[$88 + 28 >> 2] = HEAP32[$102 + 28 >> 2];
  HEAP32[$88 + 32 >> 2] = HEAP32[$102 + 32 >> 2];
  HEAP32[$88 + 36 >> 2] = HEAP32[$102 + 36 >> 2];
  $104 = $101 - 40 | 0;
  HEAP32[$102 >> 2] = HEAP32[$104 >> 2];
  HEAP32[$102 + 4 >> 2] = HEAP32[$104 + 4 >> 2];
  HEAP32[$102 + 8 >> 2] = HEAP32[$104 + 8 >> 2];
  HEAP32[$102 + 12 >> 2] = HEAP32[$104 + 12 >> 2];
  HEAP32[$102 + 16 >> 2] = HEAP32[$104 + 16 >> 2];
  HEAP32[$102 + 20 >> 2] = HEAP32[$104 + 20 >> 2];
  HEAP32[$102 + 24 >> 2] = HEAP32[$104 + 24 >> 2];
  HEAP32[$102 + 28 >> 2] = HEAP32[$104 + 28 >> 2];
  HEAP32[$102 + 32 >> 2] = HEAP32[$104 + 32 >> 2];
  HEAP32[$102 + 36 >> 2] = HEAP32[$104 + 36 >> 2];
  $107 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$107 >> 2] = HEAP32[$88 >> 2];
  HEAP32[$107 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
  HEAP32[$107 + 8 >> 2] = HEAP32[$88 + 8 >> 2];
  HEAP32[$107 + 12 >> 2] = HEAP32[$88 + 12 >> 2];
  HEAP32[$107 + 16 >> 2] = HEAP32[$88 + 16 >> 2];
  HEAP32[$107 + 20 >> 2] = HEAP32[$88 + 20 >> 2];
  HEAP32[$107 + 24 >> 2] = HEAP32[$88 + 24 >> 2];
  HEAP32[$107 + 28 >> 2] = HEAP32[$88 + 28 >> 2];
  HEAP32[$107 + 32 >> 2] = HEAP32[$88 + 32 >> 2];
  HEAP32[$107 + 36 >> 2] = HEAP32[$88 + 36 >> 2];
  _gv($rc1) | 0;
  $109 = $tmp_i;
  $110 = HEAP32[5024] | 0;
  do {
   if ($110 >>> 0 < 56272 >>> 0) {
    $122 = $110;
   } else {
    $115 = HEAPU16[$110 + 8 >> 1] | 0;
    if (!(($115 & 63 | 0) == 51 | ($115 & 62 | 0) == 52)) {
     $122 = $110;
     break;
    }
    _gv(1) | 0;
    $122 = HEAP32[5024] | 0;
   }
  } while (0);
  $123 = $122;
  HEAP32[$109 >> 2] = HEAP32[$123 >> 2];
  HEAP32[$109 + 4 >> 2] = HEAP32[$123 + 4 >> 2];
  HEAP32[$109 + 8 >> 2] = HEAP32[$123 + 8 >> 2];
  HEAP32[$109 + 12 >> 2] = HEAP32[$123 + 12 >> 2];
  HEAP32[$109 + 16 >> 2] = HEAP32[$123 + 16 >> 2];
  HEAP32[$109 + 20 >> 2] = HEAP32[$123 + 20 >> 2];
  HEAP32[$109 + 24 >> 2] = HEAP32[$123 + 24 >> 2];
  HEAP32[$109 + 28 >> 2] = HEAP32[$123 + 28 >> 2];
  HEAP32[$109 + 32 >> 2] = HEAP32[$123 + 32 >> 2];
  HEAP32[$109 + 36 >> 2] = HEAP32[$123 + 36 >> 2];
  $125 = $122 - 40 | 0;
  HEAP32[$123 >> 2] = HEAP32[$125 >> 2];
  HEAP32[$123 + 4 >> 2] = HEAP32[$125 + 4 >> 2];
  HEAP32[$123 + 8 >> 2] = HEAP32[$125 + 8 >> 2];
  HEAP32[$123 + 12 >> 2] = HEAP32[$125 + 12 >> 2];
  HEAP32[$123 + 16 >> 2] = HEAP32[$125 + 16 >> 2];
  HEAP32[$123 + 20 >> 2] = HEAP32[$125 + 20 >> 2];
  HEAP32[$123 + 24 >> 2] = HEAP32[$125 + 24 >> 2];
  HEAP32[$123 + 28 >> 2] = HEAP32[$125 + 28 >> 2];
  HEAP32[$123 + 32 >> 2] = HEAP32[$125 + 32 >> 2];
  HEAP32[$123 + 36 >> 2] = HEAP32[$125 + 36 >> 2];
  $128 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$128 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$128 + 4 >> 2] = HEAP32[$109 + 4 >> 2];
  HEAP32[$128 + 8 >> 2] = HEAP32[$109 + 8 >> 2];
  HEAP32[$128 + 12 >> 2] = HEAP32[$109 + 12 >> 2];
  HEAP32[$128 + 16 >> 2] = HEAP32[$109 + 16 >> 2];
  HEAP32[$128 + 20 >> 2] = HEAP32[$109 + 20 >> 2];
  HEAP32[$128 + 24 >> 2] = HEAP32[$109 + 24 >> 2];
  HEAP32[$128 + 28 >> 2] = HEAP32[$109 + 28 >> 2];
  HEAP32[$128 + 32 >> 2] = HEAP32[$109 + 32 >> 2];
  HEAP32[$128 + 36 >> 2] = HEAP32[$109 + 36 >> 2];
  if ((HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 48) >>> 0 <= 47 >>> 0) {
   STACKTOP = sp;
   return;
  }
  _gv($rc2) | 0;
  STACKTOP = sp;
  return;
 }
 $10 = $tmp_i15;
 $11 = $1;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 HEAP32[$10 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
 HEAP32[$10 + 12 >> 2] = HEAP32[$11 + 12 >> 2];
 HEAP32[$10 + 16 >> 2] = HEAP32[$11 + 16 >> 2];
 HEAP32[$10 + 20 >> 2] = HEAP32[$11 + 20 >> 2];
 HEAP32[$10 + 24 >> 2] = HEAP32[$11 + 24 >> 2];
 HEAP32[$10 + 28 >> 2] = HEAP32[$11 + 28 >> 2];
 HEAP32[$10 + 32 >> 2] = HEAP32[$11 + 32 >> 2];
 HEAP32[$10 + 36 >> 2] = HEAP32[$11 + 36 >> 2];
 $13 = $1 - 40 | 0;
 HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$11 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[$11 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
 HEAP32[$11 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
 HEAP32[$11 + 16 >> 2] = HEAP32[$13 + 16 >> 2];
 HEAP32[$11 + 20 >> 2] = HEAP32[$13 + 20 >> 2];
 HEAP32[$11 + 24 >> 2] = HEAP32[$13 + 24 >> 2];
 HEAP32[$11 + 28 >> 2] = HEAP32[$13 + 28 >> 2];
 HEAP32[$11 + 32 >> 2] = HEAP32[$13 + 32 >> 2];
 HEAP32[$11 + 36 >> 2] = HEAP32[$13 + 36 >> 2];
 $16 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
 HEAP32[$16 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
 HEAP32[$16 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
 HEAP32[$16 + 16 >> 2] = HEAP32[$10 + 16 >> 2];
 HEAP32[$16 + 20 >> 2] = HEAP32[$10 + 20 >> 2];
 HEAP32[$16 + 24 >> 2] = HEAP32[$10 + 24 >> 2];
 HEAP32[$16 + 28 >> 2] = HEAP32[$10 + 28 >> 2];
 HEAP32[$16 + 32 >> 2] = HEAP32[$10 + 32 >> 2];
 HEAP32[$16 + 36 >> 2] = HEAP32[$10 + 36 >> 2];
 _gv($rc1) | 0;
 $18 = $tmp_i12;
 $19 = HEAP32[5024] | 0;
 do {
  if ($19 >>> 0 < 56272 >>> 0) {
   $31 = $19;
  } else {
   $24 = HEAPU16[$19 + 8 >> 1] | 0;
   if (!(($24 & 63 | 0) == 51 | ($24 & 62 | 0) == 52)) {
    $31 = $19;
    break;
   }
   _gv(1) | 0;
   $31 = HEAP32[5024] | 0;
  }
 } while (0);
 $32 = $31;
 HEAP32[$18 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$18 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
 HEAP32[$18 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
 HEAP32[$18 + 12 >> 2] = HEAP32[$32 + 12 >> 2];
 HEAP32[$18 + 16 >> 2] = HEAP32[$32 + 16 >> 2];
 HEAP32[$18 + 20 >> 2] = HEAP32[$32 + 20 >> 2];
 HEAP32[$18 + 24 >> 2] = HEAP32[$32 + 24 >> 2];
 HEAP32[$18 + 28 >> 2] = HEAP32[$32 + 28 >> 2];
 HEAP32[$18 + 32 >> 2] = HEAP32[$32 + 32 >> 2];
 HEAP32[$18 + 36 >> 2] = HEAP32[$32 + 36 >> 2];
 $34 = $31 - 40 | 0;
 HEAP32[$32 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$32 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
 HEAP32[$32 + 8 >> 2] = HEAP32[$34 + 8 >> 2];
 HEAP32[$32 + 12 >> 2] = HEAP32[$34 + 12 >> 2];
 HEAP32[$32 + 16 >> 2] = HEAP32[$34 + 16 >> 2];
 HEAP32[$32 + 20 >> 2] = HEAP32[$34 + 20 >> 2];
 HEAP32[$32 + 24 >> 2] = HEAP32[$34 + 24 >> 2];
 HEAP32[$32 + 28 >> 2] = HEAP32[$34 + 28 >> 2];
 HEAP32[$32 + 32 >> 2] = HEAP32[$34 + 32 >> 2];
 HEAP32[$32 + 36 >> 2] = HEAP32[$34 + 36 >> 2];
 $37 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$37 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$37 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
 HEAP32[$37 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
 HEAP32[$37 + 12 >> 2] = HEAP32[$18 + 12 >> 2];
 HEAP32[$37 + 16 >> 2] = HEAP32[$18 + 16 >> 2];
 HEAP32[$37 + 20 >> 2] = HEAP32[$18 + 20 >> 2];
 HEAP32[$37 + 24 >> 2] = HEAP32[$18 + 24 >> 2];
 HEAP32[$37 + 28 >> 2] = HEAP32[$18 + 28 >> 2];
 HEAP32[$37 + 32 >> 2] = HEAP32[$18 + 32 >> 2];
 HEAP32[$37 + 36 >> 2] = HEAP32[$18 + 36 >> 2];
 _gv($rc2) | 0;
 $39 = HEAP32[5024] | 0;
 if ((HEAP16[$39 - 40 + 8 >> 1] & 48) >>> 0 <= 47 >>> 0) {
  STACKTOP = sp;
  return;
 }
 $46 = $tmp_i9;
 do {
  if ($39 >>> 0 < 56272 >>> 0) {
   $58 = $39;
  } else {
   $51 = HEAPU16[$39 + 8 >> 1] | 0;
   if (!(($51 & 63 | 0) == 51 | ($51 & 62 | 0) == 52)) {
    $58 = $39;
    break;
   }
   _gv(1) | 0;
   $58 = HEAP32[5024] | 0;
  }
 } while (0);
 $59 = $58;
 HEAP32[$46 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$46 + 4 >> 2] = HEAP32[$59 + 4 >> 2];
 HEAP32[$46 + 8 >> 2] = HEAP32[$59 + 8 >> 2];
 HEAP32[$46 + 12 >> 2] = HEAP32[$59 + 12 >> 2];
 HEAP32[$46 + 16 >> 2] = HEAP32[$59 + 16 >> 2];
 HEAP32[$46 + 20 >> 2] = HEAP32[$59 + 20 >> 2];
 HEAP32[$46 + 24 >> 2] = HEAP32[$59 + 24 >> 2];
 HEAP32[$46 + 28 >> 2] = HEAP32[$59 + 28 >> 2];
 HEAP32[$46 + 32 >> 2] = HEAP32[$59 + 32 >> 2];
 HEAP32[$46 + 36 >> 2] = HEAP32[$59 + 36 >> 2];
 $61 = $58 - 40 | 0;
 HEAP32[$59 >> 2] = HEAP32[$61 >> 2];
 HEAP32[$59 + 4 >> 2] = HEAP32[$61 + 4 >> 2];
 HEAP32[$59 + 8 >> 2] = HEAP32[$61 + 8 >> 2];
 HEAP32[$59 + 12 >> 2] = HEAP32[$61 + 12 >> 2];
 HEAP32[$59 + 16 >> 2] = HEAP32[$61 + 16 >> 2];
 HEAP32[$59 + 20 >> 2] = HEAP32[$61 + 20 >> 2];
 HEAP32[$59 + 24 >> 2] = HEAP32[$61 + 24 >> 2];
 HEAP32[$59 + 28 >> 2] = HEAP32[$61 + 28 >> 2];
 HEAP32[$59 + 32 >> 2] = HEAP32[$61 + 32 >> 2];
 HEAP32[$59 + 36 >> 2] = HEAP32[$61 + 36 >> 2];
 $64 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$64 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$64 + 4 >> 2] = HEAP32[$46 + 4 >> 2];
 HEAP32[$64 + 8 >> 2] = HEAP32[$46 + 8 >> 2];
 HEAP32[$64 + 12 >> 2] = HEAP32[$46 + 12 >> 2];
 HEAP32[$64 + 16 >> 2] = HEAP32[$46 + 16 >> 2];
 HEAP32[$64 + 20 >> 2] = HEAP32[$46 + 20 >> 2];
 HEAP32[$64 + 24 >> 2] = HEAP32[$46 + 24 >> 2];
 HEAP32[$64 + 28 >> 2] = HEAP32[$46 + 28 >> 2];
 HEAP32[$64 + 32 >> 2] = HEAP32[$46 + 32 >> 2];
 HEAP32[$64 + 36 >> 2] = HEAP32[$46 + 36 >> 2];
 _gv($rc1) | 0;
 $66 = $tmp_i6;
 $67 = HEAP32[5024] | 0;
 do {
  if ($67 >>> 0 < 56272 >>> 0) {
   $79 = $67;
  } else {
   $72 = HEAPU16[$67 + 8 >> 1] | 0;
   if (!(($72 & 63 | 0) == 51 | ($72 & 62 | 0) == 52)) {
    $79 = $67;
    break;
   }
   _gv(1) | 0;
   $79 = HEAP32[5024] | 0;
  }
 } while (0);
 $80 = $79;
 HEAP32[$66 >> 2] = HEAP32[$80 >> 2];
 HEAP32[$66 + 4 >> 2] = HEAP32[$80 + 4 >> 2];
 HEAP32[$66 + 8 >> 2] = HEAP32[$80 + 8 >> 2];
 HEAP32[$66 + 12 >> 2] = HEAP32[$80 + 12 >> 2];
 HEAP32[$66 + 16 >> 2] = HEAP32[$80 + 16 >> 2];
 HEAP32[$66 + 20 >> 2] = HEAP32[$80 + 20 >> 2];
 HEAP32[$66 + 24 >> 2] = HEAP32[$80 + 24 >> 2];
 HEAP32[$66 + 28 >> 2] = HEAP32[$80 + 28 >> 2];
 HEAP32[$66 + 32 >> 2] = HEAP32[$80 + 32 >> 2];
 HEAP32[$66 + 36 >> 2] = HEAP32[$80 + 36 >> 2];
 $82 = $79 - 40 | 0;
 HEAP32[$80 >> 2] = HEAP32[$82 >> 2];
 HEAP32[$80 + 4 >> 2] = HEAP32[$82 + 4 >> 2];
 HEAP32[$80 + 8 >> 2] = HEAP32[$82 + 8 >> 2];
 HEAP32[$80 + 12 >> 2] = HEAP32[$82 + 12 >> 2];
 HEAP32[$80 + 16 >> 2] = HEAP32[$82 + 16 >> 2];
 HEAP32[$80 + 20 >> 2] = HEAP32[$82 + 20 >> 2];
 HEAP32[$80 + 24 >> 2] = HEAP32[$82 + 24 >> 2];
 HEAP32[$80 + 28 >> 2] = HEAP32[$82 + 28 >> 2];
 HEAP32[$80 + 32 >> 2] = HEAP32[$82 + 32 >> 2];
 HEAP32[$80 + 36 >> 2] = HEAP32[$82 + 36 >> 2];
 $85 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$85 >> 2] = HEAP32[$66 >> 2];
 HEAP32[$85 + 4 >> 2] = HEAP32[$66 + 4 >> 2];
 HEAP32[$85 + 8 >> 2] = HEAP32[$66 + 8 >> 2];
 HEAP32[$85 + 12 >> 2] = HEAP32[$66 + 12 >> 2];
 HEAP32[$85 + 16 >> 2] = HEAP32[$66 + 16 >> 2];
 HEAP32[$85 + 20 >> 2] = HEAP32[$66 + 20 >> 2];
 HEAP32[$85 + 24 >> 2] = HEAP32[$66 + 24 >> 2];
 HEAP32[$85 + 28 >> 2] = HEAP32[$66 + 28 >> 2];
 HEAP32[$85 + 32 >> 2] = HEAP32[$66 + 32 >> 2];
 HEAP32[$85 + 36 >> 2] = HEAP32[$66 + 36 >> 2];
 STACKTOP = sp;
 return;
}
function _parse_pp_string($p, $sep, $str) {
 $p = $p | 0;
 $sep = $sep | 0;
 $str = $str | 0;
 var $1 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $_phi_trans_insert_i40 = 0, $8 = 0, $10 = 0, $_048 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $22 = 0, $_pre2_i_i = 0, $25 = 0, $len_0_i_i = 0, $29 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $40 = 0, $_1 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $_pre2_i_i1 = 0, $59 = 0, $len_0_i_i3 = 0, $63 = 0, $65 = 0, $66 = 0, $_0_i_i7 = 0, $72 = 0, $76 = 0, $_2 = 0, $c_0 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $_pre2_i_i9 = 0, $100 = 0, $len_0_i_i11 = 0, $104 = 0, $106 = 0, $107 = 0, $_0_i_i15 = 0, $113 = 0, $117 = 0, $_3 = 0, $c_1 = 0, $121 = 0, $122 = 0, $_0_be = 0, $126 = 0, $131 = 0, $132 = 0, $133 = 0, $size_0_i_i = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $size_0_i_i22 = 0, $153 = 0, $154 = 0, $161 = 0, $165 = 0, $166 = 0, $167 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $180 = 0, $_pre2_i_i25 = 0, $183 = 0, $len_0_i_i27 = 0, $187 = 0, $189 = 0, $190 = 0, $_0_i_i31 = 0, $_4 = 0, $c_2 = 0, $203 = 0, $204 = 0, $205 = 0, $size_0_i_i37 = 0, $213 = 0, $214 = 0, $218 = 0, $_5 = 0, $c_3_off0 = 0, $223 = 0, $224 = 0, $225 = 0, $size_0_i_i44 = 0, $233 = 0, $234 = 0, $_0_lcssa = 0, $238 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = $p + 1 | 0;
 $2 = HEAP8[$1] | 0;
 if (($2 & 255 | 0) == ($sep | 0)) {
  $_0_lcssa = $1;
  $238 = $_0_lcssa + 1 | 0;
  STACKTOP = sp;
  return $238 | 0;
 }
 $5 = ($str | 0) == 0;
 $6 = $str | 0;
 $7 = $str + 8 | 0;
 $_phi_trans_insert_i40 = $str + 4 | 0;
 $8 = $str + 12 | 0;
 $_048 = $1;
 $10 = $2;
 while (1) {
  L6 : do {
   if (($10 << 24 >> 24 | 0) == 92) {
    HEAP32[HEAP32[13912] >> 2] = $_048;
    $14 = HEAP32[13912] | 0;
    $15 = $14 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $14 + 4 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    if ($16 >>> 0 < $18 >>> 0) {
     $32 = $16;
     $31 = $18;
    } else {
     $22 = HEAP32[$14 + 8 >> 2] | 0;
     $_pre2_i_i = $14 + 1056 | 0;
     if (($22 | 0) == -1) {
      $len_0_i_i = 0;
     } else {
      $25 = _read($22 | 0, $_pre2_i_i | 0, 8192) | 0;
      $len_0_i_i = ($25 | 0) < 0 ? 0 : $25;
     }
     HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i;
     HEAP32[$15 >> 2] = $_pre2_i_i;
     $29 = $14 + 1056 + $len_0_i_i | 0;
     HEAP32[$17 >> 2] = $29;
     HEAP8[$29] = 92;
     $32 = HEAP32[$15 >> 2] | 0;
     $31 = HEAP32[$17 >> 2] | 0;
    }
    do {
     if ($32 >>> 0 < $31 >>> 0) {
      $38 = HEAP32[13912] | 0;
      $39 = $38 | 0;
      $40 = HEAP32[$39 >> 2] | 0;
      if ((HEAP8[$32] | 0) != 92) {
       $_0_be = $40;
       break L6;
      }
      $43 = $40 + 1 | 0;
      $44 = HEAP8[$43] | 0;
      $45 = $44 & 255;
      if ($44 << 24 >> 24 == 92) {
       HEAP32[$39 >> 2] = $43;
       $48 = HEAP32[13912] | 0;
       $49 = $48 | 0;
       $50 = HEAP32[$49 >> 2] | 0;
       $51 = $48 + 4 | 0;
       $52 = HEAP32[$51 >> 2] | 0;
       if ($50 >>> 0 < $52 >>> 0) {
        $66 = $50;
        $65 = $52;
       } else {
        $56 = HEAP32[$48 + 8 >> 2] | 0;
        $_pre2_i_i1 = $48 + 1056 | 0;
        if (($56 | 0) == -1) {
         $len_0_i_i3 = 0;
        } else {
         $59 = _read($56 | 0, $_pre2_i_i1 | 0, 8192) | 0;
         $len_0_i_i3 = ($59 | 0) < 0 ? 0 : $59;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i3;
        HEAP32[$49 >> 2] = $_pre2_i_i1;
        $63 = $48 + 1056 + $len_0_i_i3 | 0;
        HEAP32[$51 >> 2] = $63;
        HEAP8[$63] = 92;
        $66 = HEAP32[$49 >> 2] | 0;
        $65 = HEAP32[$51 >> 2] | 0;
       }
       if ($66 >>> 0 < $65 >>> 0) {
        $_0_i_i7 = HEAPU8[$66] | 0;
       } else {
        HEAP32[$49 >> 2] = $65;
        $_0_i_i7 = -1;
       }
       $72 = HEAP32[13912] | 0;
       $c_0 = $_0_i_i7;
       $_2 = HEAP32[$72 >> 2] | 0;
       $76 = $72;
      } else {
       $c_0 = $45;
       $_2 = $43;
       $76 = $38;
      }
      if (($c_0 | 0) == (-1 | 0)) {
       $_1 = $_2;
       break;
      } else if (($c_0 | 0) == 10) {
       $78 = $76 + 16 | 0;
       HEAP32[$78 >> 2] = (HEAP32[$78 >> 2] | 0) + 1;
       $_0_be = $_2 + 1 | 0;
       break L6;
      } else if (($c_0 | 0) == 13) {
       $83 = $_2 + 1 | 0;
       $84 = HEAP8[$83] | 0;
       $85 = $84 & 255;
       if ($84 << 24 >> 24 == 92) {
        HEAP32[$76 >> 2] = $83;
        $89 = HEAP32[13912] | 0;
        $90 = $89 | 0;
        $91 = HEAP32[$90 >> 2] | 0;
        $92 = $89 + 4 | 0;
        $93 = HEAP32[$92 >> 2] | 0;
        if ($91 >>> 0 < $93 >>> 0) {
         $107 = $91;
         $106 = $93;
        } else {
         $97 = HEAP32[$89 + 8 >> 2] | 0;
         $_pre2_i_i9 = $89 + 1056 | 0;
         if (($97 | 0) == -1) {
          $len_0_i_i11 = 0;
         } else {
          $100 = _read($97 | 0, $_pre2_i_i9 | 0, 8192) | 0;
          $len_0_i_i11 = ($100 | 0) < 0 ? 0 : $100;
         }
         HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i11;
         HEAP32[$90 >> 2] = $_pre2_i_i9;
         $104 = $89 + 1056 + $len_0_i_i11 | 0;
         HEAP32[$92 >> 2] = $104;
         HEAP8[$104] = 92;
         $107 = HEAP32[$90 >> 2] | 0;
         $106 = HEAP32[$92 >> 2] | 0;
        }
        if ($107 >>> 0 < $106 >>> 0) {
         $_0_i_i15 = HEAPU8[$107] | 0;
        } else {
         HEAP32[$90 >> 2] = $106;
         $_0_i_i15 = -1;
        }
        $113 = HEAP32[13912] | 0;
        $c_1 = $_0_i_i15;
        $_3 = HEAP32[$113 >> 2] | 0;
        $117 = $113;
       } else {
        $c_1 = $85;
        $_3 = $83;
        $117 = $76;
       }
       if (($c_1 | 0) == 10) {
        $121 = $117;
       } else {
        _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 12712, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $121 = HEAP32[13912] | 0;
       }
       $122 = $121 + 16 | 0;
       HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + 1;
       $_0_be = $_3 + 1 | 0;
       break L6;
      } else {
       if (!$5) {
        $131 = HEAP32[$6 >> 2] | 0;
        $132 = $131 + 1 | 0;
        $133 = HEAP32[$7 >> 2] | 0;
        if (($131 | 0) < ($133 | 0)) {
         $142 = HEAP32[$_phi_trans_insert_i40 >> 2] | 0;
        } else {
         $size_0_i_i = ($133 | 0) == 0 ? 8 : $133;
         while (1) {
          if (($size_0_i_i | 0) < ($132 | 0)) {
           $size_0_i_i = $size_0_i_i << 1;
          } else {
           break;
          }
         }
         $141 = _tcc_realloc(HEAP32[$8 >> 2] | 0, $size_0_i_i) | 0;
         HEAP32[$8 >> 2] = $141;
         HEAP32[$7 >> 2] = $size_0_i_i;
         HEAP32[$_phi_trans_insert_i40 >> 2] = $141;
         $142 = $141;
        }
        HEAP8[$142 + $131 | 0] = 92;
        HEAP32[$6 >> 2] = $132;
        $144 = $131 + 2 | 0;
        $145 = HEAP32[$7 >> 2] | 0;
        if (($132 | 0) < ($145 | 0)) {
         $154 = HEAP32[$_phi_trans_insert_i40 >> 2] | 0;
        } else {
         $size_0_i_i22 = ($145 | 0) == 0 ? 8 : $145;
         while (1) {
          if (($size_0_i_i22 | 0) < ($144 | 0)) {
           $size_0_i_i22 = $size_0_i_i22 << 1;
          } else {
           break;
          }
         }
         $153 = _tcc_realloc(HEAP32[$8 >> 2] | 0, $size_0_i_i22) | 0;
         HEAP32[$8 >> 2] = $153;
         HEAP32[$7 >> 2] = $size_0_i_i22;
         HEAP32[$_phi_trans_insert_i40 >> 2] = $153;
         $154 = $153;
        }
        HEAP8[$154 + $132 | 0] = $c_0;
        HEAP32[$6 >> 2] = $144;
       }
       $_0_be = $_2 + 1 | 0;
       break L6;
      }
     } else {
      HEAP32[$15 >> 2] = $31;
      $_1 = HEAP32[HEAP32[13912] >> 2] | 0;
     }
    } while (0);
    _tcc_error(12776, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $sep, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $_0_be = $_1;
   } else if (($10 << 24 >> 24 | 0) == 10) {
    $161 = (HEAP32[13912] | 0) + 16 | 0;
    HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) + 1;
    $c_3_off0 = 10;
    $_5 = $_048;
    label = 68;
   } else if (($10 << 24 >> 24 | 0) == 13) {
    $165 = $_048 + 1 | 0;
    $166 = HEAP8[$165] | 0;
    $167 = $166 & 255;
    if ($166 << 24 >> 24 == 92) {
     HEAP32[HEAP32[13912] >> 2] = $165;
     $172 = HEAP32[13912] | 0;
     $173 = $172 | 0;
     $174 = HEAP32[$173 >> 2] | 0;
     $175 = $172 + 4 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if ($174 >>> 0 < $176 >>> 0) {
      $190 = $174;
      $189 = $176;
     } else {
      $180 = HEAP32[$172 + 8 >> 2] | 0;
      $_pre2_i_i25 = $172 + 1056 | 0;
      if (($180 | 0) == -1) {
       $len_0_i_i27 = 0;
      } else {
       $183 = _read($180 | 0, $_pre2_i_i25 | 0, 8192) | 0;
       $len_0_i_i27 = ($183 | 0) < 0 ? 0 : $183;
      }
      HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i27;
      HEAP32[$173 >> 2] = $_pre2_i_i25;
      $187 = $172 + 1056 + $len_0_i_i27 | 0;
      HEAP32[$175 >> 2] = $187;
      HEAP8[$187] = 92;
      $190 = HEAP32[$173 >> 2] | 0;
      $189 = HEAP32[$175 >> 2] | 0;
     }
     if ($190 >>> 0 < $189 >>> 0) {
      $_0_i_i31 = HEAPU8[$190] | 0;
     } else {
      HEAP32[$173 >> 2] = $189;
      $_0_i_i31 = -1;
     }
     $c_2 = $_0_i_i31;
     $_4 = HEAP32[HEAP32[13912] >> 2] | 0;
    } else {
     $c_2 = $167;
     $_4 = $165;
    }
    if (($c_2 | 0) == 10) {
     $218 = (HEAP32[13912] | 0) + 16 | 0;
     HEAP32[$218 >> 2] = (HEAP32[$218 >> 2] | 0) + 1;
     $c_3_off0 = 10;
     $_5 = $_4;
     label = 68;
     break;
    }
    if ($5) {
     $_0_be = $_4;
     break;
    }
    $203 = HEAP32[$6 >> 2] | 0;
    $204 = $203 + 1 | 0;
    $205 = HEAP32[$7 >> 2] | 0;
    if (($203 | 0) < ($205 | 0)) {
     $214 = HEAP32[$_phi_trans_insert_i40 >> 2] | 0;
    } else {
     $size_0_i_i37 = ($205 | 0) == 0 ? 8 : $205;
     while (1) {
      if (($size_0_i_i37 | 0) < ($204 | 0)) {
       $size_0_i_i37 = $size_0_i_i37 << 1;
      } else {
       break;
      }
     }
     $213 = _tcc_realloc(HEAP32[$8 >> 2] | 0, $size_0_i_i37) | 0;
     HEAP32[$8 >> 2] = $213;
     HEAP32[$7 >> 2] = $size_0_i_i37;
     HEAP32[$_phi_trans_insert_i40 >> 2] = $213;
     $214 = $213;
    }
    HEAP8[$214 + $203 | 0] = 13;
    HEAP32[$6 >> 2] = $204;
    $_0_be = $_4;
   } else {
    $c_3_off0 = $10;
    $_5 = $_048;
    label = 68;
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0;
   if (!$5) {
    $223 = HEAP32[$6 >> 2] | 0;
    $224 = $223 + 1 | 0;
    $225 = HEAP32[$7 >> 2] | 0;
    if (($223 | 0) < ($225 | 0)) {
     $234 = HEAP32[$_phi_trans_insert_i40 >> 2] | 0;
    } else {
     $size_0_i_i44 = ($225 | 0) == 0 ? 8 : $225;
     while (1) {
      if (($size_0_i_i44 | 0) < ($224 | 0)) {
       $size_0_i_i44 = $size_0_i_i44 << 1;
      } else {
       break;
      }
     }
     $233 = _tcc_realloc(HEAP32[$8 >> 2] | 0, $size_0_i_i44) | 0;
     HEAP32[$8 >> 2] = $233;
     HEAP32[$7 >> 2] = $size_0_i_i44;
     HEAP32[$_phi_trans_insert_i40 >> 2] = $233;
     $234 = $233;
    }
    HEAP8[$234 + $223 | 0] = $c_3_off0;
    HEAP32[$6 >> 2] = $224;
   }
   $_0_be = $_5 + 1 | 0;
  }
  $126 = HEAP8[$_0_be] | 0;
  if (($126 & 255 | 0) == ($sep | 0)) {
   $_0_lcssa = $_0_be;
   break;
  } else {
   $_048 = $_0_be;
   $10 = $126;
  }
 }
 $238 = $_0_lcssa + 1 | 0;
 STACKTOP = sp;
 return $238 | 0;
}
function _parse_define() {
 var $first = 0, $str = 0, $1 = 0, $4 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $n_0_ph_i_i18 = 0, $p_0_i_i20 = 0, $n_0_i_i21 = 0, $tab_0_i_i22 = 0, $31 = 0, $p_1_i_i25_ph = 0, $_pr = 0, $39 = 0, $40 = 0, $43 = 0, $46 = 0, $48 = 0, $ps_046 = 0, $is_vaargs_0 = 0, $is_vaargs_030 = 0, $varg_029 = 0, $60 = 0, $61 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $n_0_ph_i_i6 = 0, $p_0_i_i8 = 0, $n_0_i_i9 = 0, $tab_0_i_i10 = 0, $91 = 0, $p_1_i_i13_ph = 0, $_pr32 = 0, $99 = 0, $100 = 0, $t_0 = 0, $103 = 0, $104 = 0, $105 = 0, $_ph = 0, $107 = 0, $108 = 0, $116 = 0, $117 = 0, $118 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $n_0_ph_i_i = 0, $p_0_i_i = 0, $n_0_i_i = 0, $tab_0_i_i = 0, $143 = 0, $p_1_i_i_ph = 0, $_pr34 = 0, $151 = 0, $152 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $len_0_i_i = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24 | 0;
 $first = sp | 0;
 $str = sp + 8 | 0;
 $1 = HEAP32[5310] | 0;
 if (($1 | 0) < 256) {
  $4 = _get_tok_str($1, 21208) | 0;
  _tcc_error(19096, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $4, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 HEAP32[$first >> 2] = 0;
 $6 = HEAP32[5350] | 0;
 L4 : do {
  if (($6 | 0) == 0) {
   _next_nomacro1();
   $43 = HEAP32[5310] | 0;
   label = 16;
  } else {
   $8 = HEAP32[$6 >> 2] | 0;
   HEAP32[5310] = $8;
   if (($8 | 0) == 0) {
    $t_0 = 0;
    break;
   } else {
    $10 = $6;
   }
   L7 : while (1) {
    $11 = $10 + 4 | 0;
    $12 = HEAP32[$10 >> 2] | 0;
    HEAP32[5310] = $12;
    switch ($12 | 0) {
    case 193:
     {
      $n_0_ph_i_i18 = 3;
      label = 10;
      break;
     }
    case 179:
    case 200:
    case 180:
    case 183:
    case 185:
    case 186:
     {
      HEAP32[5302] = HEAP32[$11 >> 2];
      $p_1_i_i25_ph = $10 + 8 | 0;
      break;
     }
    case 181:
    case 184:
    case 206:
     {
      HEAP32[5302] = $11;
      HEAP32[$10 + 8 >> 2] = $10 + 20;
      $p_1_i_i25_ph = $10 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
      break;
     }
    case 192:
    case 201:
    case 202:
     {
      $n_0_ph_i_i18 = 2;
      label = 10;
      break;
     }
    default:
     {
      break L7;
     }
    }
    if ((label | 0) == 10) {
     label = 0;
     $tab_0_i_i22 = 21208;
     $n_0_i_i21 = $n_0_ph_i_i18;
     $p_0_i_i20 = $11;
     while (1) {
      HEAP32[$tab_0_i_i22 >> 2] = HEAP32[$p_0_i_i20 >> 2];
      $31 = $n_0_i_i21 - 1 | 0;
      if (($31 | 0) == 0) {
       break;
      } else {
       $tab_0_i_i22 = $tab_0_i_i22 + 4 | 0;
       $n_0_i_i21 = $31;
       $p_0_i_i20 = $p_0_i_i20 + 4 | 0;
      }
     }
     $p_1_i_i25_ph = $10 + ($n_0_ph_i_i18 + 1 << 2) | 0;
    }
    $_pr = HEAP32[5310] | 0;
    HEAP32[5350] = $p_1_i_i25_ph;
    if (($_pr | 0) != 186) {
     $43 = $_pr;
     label = 16;
     break L4;
    }
    HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
    $39 = HEAP32[5350] | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    HEAP32[5310] = $40;
    if (($40 | 0) == 0) {
     $t_0 = 0;
     break L4;
    } else {
     $10 = $39;
    }
   }
   HEAP32[5350] = $11;
   $43 = $12;
   label = 16;
  }
 } while (0);
 L21 : do {
  if ((label | 0) == 16) {
   if (($43 | 0) != 40) {
    $t_0 = 0;
    break;
   }
   _next_nomacro();
   $46 = HEAP32[5310] | 0;
   L24 : do {
    if (($46 | 0) != 41) {
     $ps_046 = $first;
     $48 = $46;
     while (1) {
      _next_nomacro();
      do {
       if (($48 | 0) == 204) {
        $varg_029 = 331;
        $is_vaargs_030 = 1;
       } else {
        if ((HEAP32[5310] | 0) == 204 & (HEAP32[1888] | 0) != 0) {
         _next_nomacro();
         $is_vaargs_0 = 1;
        } else {
         $is_vaargs_0 = 0;
        }
        if (($48 | 0) >= 256) {
         $varg_029 = $48;
         $is_vaargs_030 = $is_vaargs_0;
         break;
        }
        _tcc_error(18800, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $varg_029 = $48;
        $is_vaargs_030 = $is_vaargs_0;
       }
      } while (0);
      $60 = _sym_push2(55656, $varg_029 | 536870912, $is_vaargs_030, 0) | 0;
      HEAP32[$ps_046 >> 2] = $60;
      $61 = HEAP32[5310] | 0;
      if (($61 | 0) == 41) {
       break L24;
      } else if (($61 | 0) != 44) {
       $t_0 = 1;
       break L21;
      }
      _next_nomacro();
      $64 = HEAP32[5310] | 0;
      if (($64 | 0) == 41) {
       break;
      } else {
       $ps_046 = $60 + 24 | 0;
       $48 = $64;
      }
     }
    }
   } while (0);
   $66 = HEAP32[5350] | 0;
   if (($66 | 0) == 0) {
    _next_nomacro1();
    $t_0 = 1;
    break;
   }
   $68 = HEAP32[$66 >> 2] | 0;
   HEAP32[5310] = $68;
   if (($68 | 0) == 0) {
    $t_0 = 1;
    break;
   } else {
    $70 = $66;
   }
   L39 : while (1) {
    $71 = $70 + 4 | 0;
    $72 = HEAP32[$70 >> 2] | 0;
    HEAP32[5310] = $72;
    switch ($72 | 0) {
    case 179:
    case 200:
    case 180:
    case 183:
    case 185:
    case 186:
     {
      HEAP32[5302] = HEAP32[$71 >> 2];
      $p_1_i_i13_ph = $70 + 8 | 0;
      break;
     }
    case 181:
    case 184:
    case 206:
     {
      HEAP32[5302] = $71;
      HEAP32[$70 + 8 >> 2] = $70 + 20;
      $p_1_i_i13_ph = $70 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
      break;
     }
    case 193:
     {
      $n_0_ph_i_i6 = 3;
      label = 32;
      break;
     }
    case 192:
    case 201:
    case 202:
     {
      $n_0_ph_i_i6 = 2;
      label = 32;
      break;
     }
    default:
     {
      break L39;
     }
    }
    if ((label | 0) == 32) {
     label = 0;
     $tab_0_i_i10 = 21208;
     $n_0_i_i9 = $n_0_ph_i_i6;
     $p_0_i_i8 = $71;
     while (1) {
      HEAP32[$tab_0_i_i10 >> 2] = HEAP32[$p_0_i_i8 >> 2];
      $91 = $n_0_i_i9 - 1 | 0;
      if (($91 | 0) == 0) {
       break;
      } else {
       $tab_0_i_i10 = $tab_0_i_i10 + 4 | 0;
       $n_0_i_i9 = $91;
       $p_0_i_i8 = $p_0_i_i8 + 4 | 0;
      }
     }
     $p_1_i_i13_ph = $70 + ($n_0_ph_i_i6 + 1 << 2) | 0;
    }
    $_pr32 = HEAP32[5310] | 0;
    HEAP32[5350] = $p_1_i_i13_ph;
    if (($_pr32 | 0) != 186) {
     $t_0 = 1;
     break L21;
    }
    HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
    $99 = HEAP32[5350] | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    HEAP32[5310] = $100;
    if (($100 | 0) == 0) {
     $t_0 = 1;
     break L21;
    } else {
     $70 = $99;
    }
   }
   HEAP32[5350] = $71;
   $t_0 = 1;
  }
 } while (0);
 $103 = $str | 0;
 HEAP32[$103 >> 2] = 0;
 $104 = $str + 4 | 0;
 HEAP32[$104 >> 2] = 0;
 $105 = $str + 8 | 0;
 HEAP32[$105 >> 2] = 0;
 HEAP32[$str + 12 >> 2] = -1;
 $_ph = 2;
 L54 : while (1) {
  $108 = $_ph;
  $107 = HEAP32[5310] | 0;
  L56 : while (1) {
   L58 : do {
    if (($107 | 0) == (-1 | 0) | ($107 | 0) == 10) {
     break L54;
    } else if (($107 | 0) == 35) {
     $116 = 2;
     label = 45;
    } else if (($107 | 0) == 182) {
     if (($108 | 0) != 1) {
      $116 = 2;
      label = 45;
      break;
     }
     HEAP32[$104 >> 2] = (HEAP32[$104 >> 2] | 0) - 1;
     $116 = 2;
     label = 45;
    } else {
     switch ($107 | 0) {
     case 32:
     case 12:
     case 11:
     case 9:
     case 13:
      {
       break;
      }
     default:
      {
       $116 = 0;
       label = 45;
       break L58;
      }
     }
     if (($108 | 0) == 0) {
      $116 = 1;
      label = 45;
     } else {
      $117 = $108;
     }
    }
   } while (0);
   if ((label | 0) == 45) {
    label = 0;
    _tok_str_add2($str, $107, 21208);
    $117 = $116;
   }
   $118 = HEAP32[5350] | 0;
   if (($118 | 0) == 0) {
    label = 58;
    break;
   }
   $120 = HEAP32[$118 >> 2] | 0;
   HEAP32[5310] = $120;
   if (($120 | 0) == 0) {
    $108 = $117;
    $107 = 0;
    continue;
   } else {
    $122 = $118;
   }
   while (1) {
    $123 = $122 + 4 | 0;
    $124 = HEAP32[$122 >> 2] | 0;
    HEAP32[5310] = $124;
    switch ($124 | 0) {
    case 179:
    case 200:
    case 180:
    case 183:
    case 185:
    case 186:
     {
      HEAP32[5302] = HEAP32[$123 >> 2];
      $p_1_i_i_ph = $122 + 8 | 0;
      break;
     }
    case 181:
    case 184:
    case 206:
     {
      HEAP32[5302] = $123;
      HEAP32[$122 + 8 >> 2] = $122 + 20;
      $p_1_i_i_ph = $122 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
      break;
     }
    case 193:
     {
      $n_0_ph_i_i = 3;
      label = 53;
      break;
     }
    case 192:
    case 201:
    case 202:
     {
      $n_0_ph_i_i = 2;
      label = 53;
      break;
     }
    default:
     {
      label = 49;
      break L56;
     }
    }
    if ((label | 0) == 53) {
     label = 0;
     $tab_0_i_i = 21208;
     $n_0_i_i = $n_0_ph_i_i;
     $p_0_i_i = $123;
     while (1) {
      HEAP32[$tab_0_i_i >> 2] = HEAP32[$p_0_i_i >> 2];
      $143 = $n_0_i_i - 1 | 0;
      if (($143 | 0) == 0) {
       break;
      } else {
       $tab_0_i_i = $tab_0_i_i + 4 | 0;
       $n_0_i_i = $143;
       $p_0_i_i = $p_0_i_i + 4 | 0;
      }
     }
     $p_1_i_i_ph = $122 + ($n_0_ph_i_i + 1 << 2) | 0;
    }
    $_pr34 = HEAP32[5310] | 0;
    HEAP32[5350] = $p_1_i_i_ph;
    if (($_pr34 | 0) != 186) {
     $108 = $117;
     $107 = $_pr34;
     continue L56;
    }
    HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
    $151 = HEAP32[5350] | 0;
    $152 = HEAP32[$151 >> 2] | 0;
    HEAP32[5310] = $152;
    if (($152 | 0) == 0) {
     $108 = $117;
     $107 = 0;
     continue L56;
    } else {
     $122 = $151;
    }
   }
  }
  if ((label | 0) == 49) {
   label = 0;
   HEAP32[5350] = $123;
   $_ph = $117;
   continue;
  } else if ((label | 0) == 58) {
   label = 0;
   _next_nomacro1();
   $_ph = $117;
   continue;
  }
 }
 $156 = HEAP32[$104 >> 2] | 0;
 if (($108 | 0) == 1) {
  $158 = $156 - 1 | 0;
  HEAP32[$104 >> 2] = $158;
  $159 = $158;
 } else {
  $159 = $156;
 }
 $160 = HEAP32[$103 >> 2] | 0;
 $161 = HEAP32[$105 >> 2] | 0;
 if (($159 | 0) < ($161 | 0)) {
  $170 = $160;
  $171 = $170 + ($159 << 2) | 0;
  HEAP32[$171 >> 2] = 0;
  $172 = HEAP32[$first >> 2] | 0;
  _define_push($1, $t_0, $170, $172);
  STACKTOP = sp;
  return;
 }
 $len_0_i_i = ($161 | 0) == 0 ? 8 : $161 << 1;
 $169 = _tcc_realloc($160, $len_0_i_i << 2) | 0;
 HEAP32[$105 >> 2] = $len_0_i_i;
 HEAP32[$103 >> 2] = $169;
 $170 = $169;
 $171 = $170 + ($159 << 2) | 0;
 HEAP32[$171 >> 2] = 0;
 $172 = HEAP32[$first >> 2] | 0;
 _define_push($1, $t_0, $170, $172);
 STACKTOP = sp;
 return;
}
function _parse_comment($p) {
 $p = $p | 0;
 var $_0 = 0, $2 = 0, $4 = 0, $5 = 0, $_1 = 0, $c_0_in = 0, $11 = 0, $_2 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $31 = 0, $_pre2_i_i = 0, $34 = 0, $len_0_i_i = 0, $38 = 0, $40 = 0, $41 = 0, $49 = 0, $_3 = 0, $c_1 = 0, $_4 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $67 = 0, $_pre2_i_i10 = 0, $70 = 0, $len_0_i_i12 = 0, $74 = 0, $76 = 0, $77 = 0, $_0_i_i16 = 0, $_5 = 0, $c_2 = 0, $89 = 0, $92 = 0, $93 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $_pre2_i_i18 = 0, $110 = 0, $len_0_i_i20 = 0, $114 = 0, $116 = 0, $117 = 0, $_0_i_i24 = 0, $127 = 0, $128 = 0, $129 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $142 = 0, $_pre2_i_i26 = 0, $145 = 0, $len_0_i_i28 = 0, $149 = 0, $151 = 0, $152 = 0, $_0_i_i32 = 0, $_6 = 0, $c_3 = 0, $165 = 0, $168 = 0, $169 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $183 = 0, $_pre2_i_i34 = 0, $186 = 0, $len_0_i_i36 = 0, $190 = 0, $192 = 0, $193 = 0, $_0_i_i40 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $213 = 0, $_pre2_i_i42 = 0, $216 = 0, $len_0_i_i44 = 0, $220 = 0, $222 = 0, $223 = 0, $227 = 0, $231 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $_0 = $p + 1 | 0;
 L1 : while (1) {
  $2 = HEAP8[$_0] | 0;
  do {
   if (($2 << 24 >> 24 | 0) == 92 | ($2 << 24 >> 24 | 0) == 42 | ($2 << 24 >> 24 | 0) == 10) {
    $c_0_in = $2;
    $_1 = $_0;
   } else {
    $4 = $_0 + 1 | 0;
    $5 = HEAP8[$4] | 0;
    if (($5 << 24 >> 24 | 0) == 92 | ($5 << 24 >> 24 | 0) == 42 | ($5 << 24 >> 24 | 0) == 10) {
     $c_0_in = $5;
     $_1 = $4;
     break;
    }
    $_0 = $_0 + 2 | 0;
    continue L1;
   }
  } while (0);
  if (($c_0_in << 24 >> 24 | 0) == 10) {
   $11 = (HEAP32[13912] | 0) + 16 | 0;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
   $_0 = $_1 + 1 | 0;
   continue;
  } else if (($c_0_in << 24 >> 24 | 0) == 42) {
   $_2 = $_1 + 1 | 0;
   L20 : while (1) {
    $17 = HEAP8[$_2] | 0;
    if (($17 << 24 >> 24 | 0) == 42) {
     $_2 = $_2 + 1 | 0;
     continue;
    } else if (($17 << 24 >> 24 | 0) == 47) {
     break L1;
    } else if (($17 << 24 >> 24 | 0) != 92) {
     $_0 = $_2;
     continue L1;
    }
    HEAP32[HEAP32[13912] >> 2] = $_2;
    $23 = HEAP32[13912] | 0;
    $24 = $23 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $23 + 4 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    if ($25 >>> 0 < $27 >>> 0) {
     $41 = $25;
     $40 = $27;
    } else {
     $31 = HEAP32[$23 + 8 >> 2] | 0;
     $_pre2_i_i = $23 + 1056 | 0;
     if (($31 | 0) == -1) {
      $len_0_i_i = 0;
     } else {
      $34 = _read($31 | 0, $_pre2_i_i | 0, 8192) | 0;
      $len_0_i_i = ($34 | 0) < 0 ? 0 : $34;
     }
     HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i;
     HEAP32[$24 >> 2] = $_pre2_i_i;
     $38 = $23 + 1056 + $len_0_i_i | 0;
     HEAP32[$26 >> 2] = $38;
     HEAP8[$38] = 92;
     $41 = HEAP32[$24 >> 2] | 0;
     $40 = HEAP32[$26 >> 2] | 0;
    }
    if ($41 >>> 0 >= $40 >>> 0) {
     HEAP32[$24 >> 2] = $40;
     $_2 = HEAP32[HEAP32[13912] >> 2] | 0;
     continue;
    }
    $49 = HEAP32[HEAP32[13912] >> 2] | 0;
    if ((HEAP8[$41] | 0) == 92) {
     $_4 = $49;
    } else {
     $_2 = $49;
     continue;
    }
    while (1) {
     $52 = $_4 + 1 | 0;
     $53 = HEAP8[$52] | 0;
     $54 = $53 & 255;
     if ($53 << 24 >> 24 == 92) {
      HEAP32[HEAP32[13912] >> 2] = $52;
      $59 = HEAP32[13912] | 0;
      $60 = $59 | 0;
      $61 = HEAP32[$60 >> 2] | 0;
      $62 = $59 + 4 | 0;
      $63 = HEAP32[$62 >> 2] | 0;
      if ($61 >>> 0 < $63 >>> 0) {
       $77 = $61;
       $76 = $63;
      } else {
       $67 = HEAP32[$59 + 8 >> 2] | 0;
       $_pre2_i_i10 = $59 + 1056 | 0;
       if (($67 | 0) == -1) {
        $len_0_i_i12 = 0;
       } else {
        $70 = _read($67 | 0, $_pre2_i_i10 | 0, 8192) | 0;
        $len_0_i_i12 = ($70 | 0) < 0 ? 0 : $70;
       }
       HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i12;
       HEAP32[$60 >> 2] = $_pre2_i_i10;
       $74 = $59 + 1056 + $len_0_i_i12 | 0;
       HEAP32[$62 >> 2] = $74;
       HEAP8[$74] = 92;
       $77 = HEAP32[$60 >> 2] | 0;
       $76 = HEAP32[$62 >> 2] | 0;
      }
      if ($77 >>> 0 < $76 >>> 0) {
       $_0_i_i16 = HEAPU8[$77] | 0;
      } else {
       HEAP32[$60 >> 2] = $76;
       $_0_i_i16 = -1;
      }
      $c_2 = $_0_i_i16;
      $_5 = HEAP32[HEAP32[13912] >> 2] | 0;
     } else {
      $c_2 = $54;
      $_5 = $52;
     }
     do {
      if (($c_2 | 0) == 10) {
       $89 = (HEAP32[13912] | 0) + 16 | 0;
       HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + 1;
       $92 = $_5 + 1 | 0;
       $93 = HEAP8[$92] | 0;
       if ($93 << 24 >> 24 != 92) {
        $c_1 = $93 & 255;
        $_3 = $92;
        break;
       }
       HEAP32[HEAP32[13912] >> 2] = $92;
       $99 = HEAP32[13912] | 0;
       $100 = $99 | 0;
       $101 = HEAP32[$100 >> 2] | 0;
       $102 = $99 + 4 | 0;
       $103 = HEAP32[$102 >> 2] | 0;
       if ($101 >>> 0 < $103 >>> 0) {
        $117 = $101;
        $116 = $103;
       } else {
        $107 = HEAP32[$99 + 8 >> 2] | 0;
        $_pre2_i_i18 = $99 + 1056 | 0;
        if (($107 | 0) == -1) {
         $len_0_i_i20 = 0;
        } else {
         $110 = _read($107 | 0, $_pre2_i_i18 | 0, 8192) | 0;
         $len_0_i_i20 = ($110 | 0) < 0 ? 0 : $110;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i20;
        HEAP32[$100 >> 2] = $_pre2_i_i18;
        $114 = $99 + 1056 + $len_0_i_i20 | 0;
        HEAP32[$102 >> 2] = $114;
        HEAP8[$114] = 92;
        $117 = HEAP32[$100 >> 2] | 0;
        $116 = HEAP32[$102 >> 2] | 0;
       }
       if ($117 >>> 0 < $116 >>> 0) {
        $_0_i_i24 = HEAPU8[$117] | 0;
       } else {
        HEAP32[$100 >> 2] = $116;
        $_0_i_i24 = -1;
       }
       $c_1 = $_0_i_i24;
       $_3 = HEAP32[HEAP32[13912] >> 2] | 0;
      } else if (($c_2 | 0) == 13) {
       $127 = $_5 + 1 | 0;
       $128 = HEAP8[$127] | 0;
       $129 = $128 & 255;
       if ($128 << 24 >> 24 == 92) {
        HEAP32[HEAP32[13912] >> 2] = $127;
        $134 = HEAP32[13912] | 0;
        $135 = $134 | 0;
        $136 = HEAP32[$135 >> 2] | 0;
        $137 = $134 + 4 | 0;
        $138 = HEAP32[$137 >> 2] | 0;
        if ($136 >>> 0 < $138 >>> 0) {
         $152 = $136;
         $151 = $138;
        } else {
         $142 = HEAP32[$134 + 8 >> 2] | 0;
         $_pre2_i_i26 = $134 + 1056 | 0;
         if (($142 | 0) == -1) {
          $len_0_i_i28 = 0;
         } else {
          $145 = _read($142 | 0, $_pre2_i_i26 | 0, 8192) | 0;
          $len_0_i_i28 = ($145 | 0) < 0 ? 0 : $145;
         }
         HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i28;
         HEAP32[$135 >> 2] = $_pre2_i_i26;
         $149 = $134 + 1056 + $len_0_i_i28 | 0;
         HEAP32[$137 >> 2] = $149;
         HEAP8[$149] = 92;
         $152 = HEAP32[$135 >> 2] | 0;
         $151 = HEAP32[$137 >> 2] | 0;
        }
        if ($152 >>> 0 < $151 >>> 0) {
         $_0_i_i32 = HEAPU8[$152] | 0;
        } else {
         HEAP32[$135 >> 2] = $151;
         $_0_i_i32 = -1;
        }
        $c_3 = $_0_i_i32;
        $_6 = HEAP32[HEAP32[13912] >> 2] | 0;
       } else {
        $c_3 = $129;
        $_6 = $127;
       }
       if (($c_3 | 0) != 10) {
        $c_1 = $c_3;
        $_3 = $_6;
        break;
       }
       $165 = (HEAP32[13912] | 0) + 16 | 0;
       HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
       $168 = $_6 + 1 | 0;
       $169 = HEAP8[$168] | 0;
       if ($169 << 24 >> 24 != 92) {
        $c_1 = $169 & 255;
        $_3 = $168;
        break;
       }
       HEAP32[HEAP32[13912] >> 2] = $168;
       $175 = HEAP32[13912] | 0;
       $176 = $175 | 0;
       $177 = HEAP32[$176 >> 2] | 0;
       $178 = $175 + 4 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if ($177 >>> 0 < $179 >>> 0) {
        $193 = $177;
        $192 = $179;
       } else {
        $183 = HEAP32[$175 + 8 >> 2] | 0;
        $_pre2_i_i34 = $175 + 1056 | 0;
        if (($183 | 0) == -1) {
         $len_0_i_i36 = 0;
        } else {
         $186 = _read($183 | 0, $_pre2_i_i34 | 0, 8192) | 0;
         $len_0_i_i36 = ($186 | 0) < 0 ? 0 : $186;
        }
        HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i36;
        HEAP32[$176 >> 2] = $_pre2_i_i34;
        $190 = $175 + 1056 + $len_0_i_i36 | 0;
        HEAP32[$178 >> 2] = $190;
        HEAP8[$190] = 92;
        $193 = HEAP32[$176 >> 2] | 0;
        $192 = HEAP32[$178 >> 2] | 0;
       }
       if ($193 >>> 0 < $192 >>> 0) {
        $_0_i_i40 = HEAPU8[$193] | 0;
       } else {
        HEAP32[$176 >> 2] = $192;
        $_0_i_i40 = -1;
       }
       $c_1 = $_0_i_i40;
       $_3 = HEAP32[HEAP32[13912] >> 2] | 0;
      } else {
       $_0 = $_5;
       continue L1;
      }
     } while (0);
     if (($c_1 | 0) == 92) {
      $_4 = $_3;
     } else {
      $_2 = $_3;
      continue L20;
     }
    }
   }
  } else {
   HEAP32[HEAP32[13912] >> 2] = $_1;
   $205 = HEAP32[13912] | 0;
   $206 = $205 | 0;
   $207 = HEAP32[$206 >> 2] | 0;
   $208 = $205 + 4 | 0;
   $209 = HEAP32[$208 >> 2] | 0;
   if ($207 >>> 0 < $209 >>> 0) {
    $223 = $207;
    $222 = $209;
   } else {
    $213 = HEAP32[$205 + 8 >> 2] | 0;
    $_pre2_i_i42 = $205 + 1056 | 0;
    if (($213 | 0) == -1) {
     $len_0_i_i44 = 0;
    } else {
     $216 = _read($213 | 0, $_pre2_i_i42 | 0, 8192) | 0;
     $len_0_i_i44 = ($216 | 0) < 0 ? 0 : $216;
    }
    HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i44;
    HEAP32[$206 >> 2] = $_pre2_i_i42;
    $220 = $205 + 1056 + $len_0_i_i44 | 0;
    HEAP32[$208 >> 2] = $220;
    HEAP8[$220] = 92;
    $223 = HEAP32[$206 >> 2] | 0;
    $222 = HEAP32[$208 >> 2] | 0;
   }
   if ($223 >>> 0 < $222 >>> 0) {
    $231 = HEAP32[HEAP32[13912] >> 2] | 0;
    $_0 = (HEAP8[$223] | 0) == 92 ? $231 + 1 | 0 : $231;
    continue;
   } else {
    HEAP32[$206 >> 2] = $222;
    $227 = HEAP32[HEAP32[13912] >> 2] | 0;
    _tcc_error(11120, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $_0 = $227;
    continue;
   }
  }
 }
 STACKTOP = sp;
 return $_2 + 1 | 0;
}
function _init_putv($type, $sec, $c, $v, $expr_type) {
 $type = $type | 0;
 $sec = $sec | 0;
 $c = $c | 0;
 $v = $v | 0;
 $expr_type = $expr_type | 0;
 var $cval_sroa_2_i = 0, $tmp_i = 0, $dtype = 0, $tmpcast = 0, $2 = 0, $3 = 0, $7 = 0, $12 = 0, $19 = 0, $20 = 0, $21 = 0, $$etemp$1 = 0, $22$1 = 0, $27 = 0, $31 = 0, $33 = 0, $34 = 0, $43 = 0, $44$0 = 0, $44$1 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $61 = 0, $_pre16 = 0, $66 = 0, $70 = 0, $bit_size_0 = 0, $bit_pos_0$0 = 0, $bit_pos_0$1 = 0, $bit_mask_0$0 = 0, $bit_mask_0$1 = 0, $87 = 0, $95 = 0, $107 = 0, $111 = 0, $129 = 0, $133 = 0, $135$1 = 0, $137 = 0, $146 = 0, $149 = 0, $153 = 0, $159 = 0, $160 = 0, $164 = 0, $169 = 0, $176 = 0, $177 = 0, $178 = 0, $179$1 = 0, $184 = 0, $188 = 0, $189 = 0, $190 = 0, $195 = 0, $202 = 0, $203 = 0, $205 = 0, $208 = 0, $209 = 0, $212 = 0, $_pn = 0, $storemerge = 0, $72$0 = 0, $73$0 = 0, $98$0 = 0, $132$0 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $cval_sroa_2_i = sp | 0;
 $tmp_i = sp + 16 | 0;
 $dtype = sp + 56 | 0;
 $tmpcast = $dtype;
 do {
  if (($expr_type | 0) == 2) {
   _expr_eq();
  } else if (($expr_type | 0) == 0) {
   $2 = $cval_sroa_2_i | 0;
   $3 = HEAP32[5024] | 0;
   if ($3 >>> 0 < 66472 >>> 0) {
    $7 = $3;
   } else {
    _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    $7 = HEAP32[5024] | 0;
   }
   do {
    if ($7 >>> 0 < 56272 >>> 0) {
     $19 = $7;
    } else {
     $12 = HEAPU16[$7 + 8 >> 1] | 0;
     if (!(($12 & 63 | 0) == 51 | ($12 & 62 | 0) == 52)) {
      $19 = $7;
      break;
     }
     _gv(1) | 0;
     $19 = HEAP32[5024] | 0;
    }
   } while (0);
   $20 = $19 + 40 | 0;
   HEAP32[5024] = $20;
   $21 = $20;
   $$etemp$1 = 21728;
   $22$1 = HEAP32[$$etemp$1 + 4 >> 2] | 0;
   HEAP32[$21 >> 2] = HEAP32[$$etemp$1 >> 2];
   HEAP32[$21 + 4 >> 2] = $22$1;
   HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
   HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
   $27 = HEAP32[5024] | 0;
   HEAP32[$27 + 16 >> 2] = $v;
   $31 = $27 + 20 | 0;
   HEAP32[$31 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$31 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$31 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  } else if (($expr_type | 0) == 1) {
   $33 = HEAP32[13632] | 0;
   HEAP32[13632] = 1;
   $34 = HEAP32[13920] | 0;
   HEAP32[13920] = 1;
   _expr_cond();
   HEAP32[13920] = $34;
   HEAP32[13632] = $33;
   if ((HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 319) == 48) {
    break;
   }
   _tcc_error(13744, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
 } while (0);
 $43 = $type;
 $44$0 = HEAP32[$43 >> 2] | 0;
 $44$1 = HEAP32[$43 + 4 >> 2] | 0;
 HEAP32[$dtype >> 2] = $44$0;
 HEAP32[$dtype + 4 >> 2] = $44$1;
 HEAP32[$dtype >> 2] = $44$0 & -2049;
 if (($sec | 0) == 0) {
  $159 = $cval_sroa_2_i | 0;
  $160 = HEAP32[5024] | 0;
  if ($160 >>> 0 < 66472 >>> 0) {
   $164 = $160;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $164 = HEAP32[5024] | 0;
  }
  do {
   if ($164 >>> 0 < 56272 >>> 0) {
    $176 = $164;
   } else {
    $169 = HEAPU16[$164 + 8 >> 1] | 0;
    if (!(($169 & 63 | 0) == 51 | ($169 & 62 | 0) == 52)) {
     $176 = $164;
     break;
    }
    _gv(1) | 0;
    $176 = HEAP32[5024] | 0;
   }
  } while (0);
  $177 = $176 + 40 | 0;
  HEAP32[5024] = $177;
  $178 = $177;
  $179$1 = HEAP32[$dtype + 4 >> 2] | 0;
  HEAP32[$178 >> 2] = HEAP32[$dtype >> 2];
  HEAP32[$178 + 4 >> 2] = $179$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 306;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $184 = HEAP32[5024] | 0;
  HEAP32[$184 + 16 >> 2] = $c;
  $188 = $184 + 20 | 0;
  HEAP32[$188 >> 2] = HEAP32[$159 >> 2];
  HEAP32[$188 + 4 >> 2] = HEAP32[$159 + 4 >> 2];
  HEAP32[$188 + 8 >> 2] = HEAP32[$159 + 8 >> 2];
  $189 = $tmp_i;
  $190 = HEAP32[5024] | 0;
  do {
   if ($190 >>> 0 < 56272 >>> 0) {
    $202 = $190;
   } else {
    $195 = HEAPU16[$190 + 8 >> 1] | 0;
    if (!(($195 & 63 | 0) == 51 | ($195 & 62 | 0) == 52)) {
     $202 = $190;
     break;
    }
    _gv(1) | 0;
    $202 = HEAP32[5024] | 0;
   }
  } while (0);
  $203 = $202;
  HEAP32[$189 >> 2] = HEAP32[$203 >> 2];
  HEAP32[$189 + 4 >> 2] = HEAP32[$203 + 4 >> 2];
  HEAP32[$189 + 8 >> 2] = HEAP32[$203 + 8 >> 2];
  HEAP32[$189 + 12 >> 2] = HEAP32[$203 + 12 >> 2];
  HEAP32[$189 + 16 >> 2] = HEAP32[$203 + 16 >> 2];
  HEAP32[$189 + 20 >> 2] = HEAP32[$203 + 20 >> 2];
  HEAP32[$189 + 24 >> 2] = HEAP32[$203 + 24 >> 2];
  HEAP32[$189 + 28 >> 2] = HEAP32[$203 + 28 >> 2];
  HEAP32[$189 + 32 >> 2] = HEAP32[$203 + 32 >> 2];
  HEAP32[$189 + 36 >> 2] = HEAP32[$203 + 36 >> 2];
  $205 = $202 - 40 | 0;
  HEAP32[$203 >> 2] = HEAP32[$205 >> 2];
  HEAP32[$203 + 4 >> 2] = HEAP32[$205 + 4 >> 2];
  HEAP32[$203 + 8 >> 2] = HEAP32[$205 + 8 >> 2];
  HEAP32[$203 + 12 >> 2] = HEAP32[$205 + 12 >> 2];
  HEAP32[$203 + 16 >> 2] = HEAP32[$205 + 16 >> 2];
  HEAP32[$203 + 20 >> 2] = HEAP32[$205 + 20 >> 2];
  HEAP32[$203 + 24 >> 2] = HEAP32[$205 + 24 >> 2];
  HEAP32[$203 + 28 >> 2] = HEAP32[$205 + 28 >> 2];
  HEAP32[$203 + 32 >> 2] = HEAP32[$205 + 32 >> 2];
  HEAP32[$203 + 36 >> 2] = HEAP32[$205 + 36 >> 2];
  $208 = (HEAP32[5024] | 0) - 40 | 0;
  HEAP32[$208 >> 2] = HEAP32[$189 >> 2];
  HEAP32[$208 + 4 >> 2] = HEAP32[$189 + 4 >> 2];
  HEAP32[$208 + 8 >> 2] = HEAP32[$189 + 8 >> 2];
  HEAP32[$208 + 12 >> 2] = HEAP32[$189 + 12 >> 2];
  HEAP32[$208 + 16 >> 2] = HEAP32[$189 + 16 >> 2];
  HEAP32[$208 + 20 >> 2] = HEAP32[$189 + 20 >> 2];
  HEAP32[$208 + 24 >> 2] = HEAP32[$189 + 24 >> 2];
  HEAP32[$208 + 28 >> 2] = HEAP32[$189 + 28 >> 2];
  HEAP32[$208 + 32 >> 2] = HEAP32[$189 + 32 >> 2];
  HEAP32[$208 + 36 >> 2] = HEAP32[$189 + 36 >> 2];
  _vstore();
  $209 = HEAP32[5024] | 0;
  $212 = HEAPU16[$209 + 8 >> 1] | 0;
  if (!(($212 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0)) {
   _o(55517);
   $_pn = HEAP32[5024] | 0;
   $storemerge = $_pn - 40 | 0;
   HEAP32[5024] = $storemerge;
   STACKTOP = sp;
   return;
  }
  if (($212 & 62 | 0) != 52) {
   $_pn = HEAP32[5024] | 0;
   $storemerge = $_pn - 40 | 0;
   HEAP32[5024] = $storemerge;
   STACKTOP = sp;
   return;
  }
  _gsym(HEAP32[$209 + 16 >> 2] | 0);
  $_pn = HEAP32[5024] | 0;
  $storemerge = $_pn - 40 | 0;
  HEAP32[5024] = $storemerge;
  STACKTOP = sp;
  return;
 }
 _gen_assign_cast($tmpcast);
 $49 = $type | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 $51 = $50 & 15;
 $52 = $c + 12 | 0;
 if ($52 >>> 0 > (HEAP32[$sec + 8 >> 2] | 0) >>> 0) {
  _section_realloc($sec, $52);
  $58 = HEAP32[$49 >> 2] | 0;
 } else {
  $58 = $50;
 }
 $61 = (HEAP32[$sec + 4 >> 2] | 0) + $c | 0;
 $_pre16 = HEAP32[5024] | 0;
 if (($58 & 64 | 0) == 0) {
  $bit_mask_0$1 = -1;
  $bit_mask_0$0 = -1;
  $bit_pos_0$1 = 0;
  $bit_pos_0$0 = 0;
  $bit_size_0 = 32;
 } else {
  $66 = HEAP32[$_pre16 >> 2] | 0;
  $70 = $66 >>> 24 & 63;
  $72$0 = _bitshift64Shl(1, 0, $70 | 0) | 0;
  $73$0 = _i64Add($72$0, tempRet0, -1, -1) | 0;
  $bit_mask_0$1 = tempRet0;
  $bit_mask_0$0 = $73$0;
  $bit_pos_0$1 = 0;
  $bit_pos_0$0 = $66 >>> 18 & 63;
  $bit_size_0 = $70;
 }
 L42 : do {
  if ((HEAP16[$_pre16 + 8 >> 1] & 512) != 0) {
   switch ($51 | 0) {
   case 12:
   case 10:
   case 9:
   case 2:
   case 1:
    {
     break;
    }
   default:
    {
     if (!(($51 | 0) == 0 & ($bit_size_0 | 0) != 32)) {
      break L42;
     }
    }
   }
   _tcc_error(13600, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
 } while (0);
 switch ($51 | 0) {
 case 11:
  {
   $87 = (HEAP32[5024] | 0) + 16 | 0;
   HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) != 0;
   break;
  }
 case 1:
  {
   break;
  }
 case 2:
  {
   $107 = HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0;
   $111 = $61;
   HEAP16[$111 >> 1] = _bitshift64Shl($107 & $bit_mask_0$0 | 0, (($107 | 0) < 0 | 0 ? -1 : 0) & $bit_mask_0$1 | 0, $bit_pos_0$0 | 0) | 0 | (HEAPU16[$111 >> 1] | 0);
   $_pn = HEAP32[5024] | 0;
   $storemerge = $_pn - 40 | 0;
   HEAP32[5024] = $storemerge;
   STACKTOP = sp;
   return;
  }
 case 9:
  {
   HEAPF64[$61 >> 3] = +HEAPF64[(HEAP32[5024] | 0) + 16 >> 3];
   $_pn = HEAP32[5024] | 0;
   $storemerge = $_pn - 40 | 0;
   HEAP32[5024] = $storemerge;
   STACKTOP = sp;
   return;
  }
 case 10:
  {
   HEAPF64[$61 >> 3] = +HEAPF64[(HEAP32[5024] | 0) + 16 >> 3];
   $_pn = HEAP32[5024] | 0;
   $storemerge = $_pn - 40 | 0;
   HEAP32[5024] = $storemerge;
   STACKTOP = sp;
   return;
  }
 case 12:
  {
   $129 = (HEAP32[5024] | 0) + 16 | 0;
   $132$0 = _bitshift64Shl(HEAP32[$129 >> 2] & $bit_mask_0$0 | 0, HEAP32[$129 + 4 >> 2] & $bit_mask_0$1 | 0, $bit_pos_0$0 | 0) | 0;
   $133 = $61;
   $135$1 = tempRet0 | HEAP32[$133 + 4 >> 2];
   HEAP32[$133 >> 2] = $132$0 | HEAP32[$133 >> 2];
   HEAP32[$133 + 4 >> 2] = $135$1;
   $_pn = HEAP32[5024] | 0;
   $storemerge = $_pn - 40 | 0;
   HEAP32[5024] = $storemerge;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $137 = HEAP32[5024] | 0;
   if ((HEAP16[$137 + 8 >> 1] & 512) == 0) {
    $146 = $137;
   } else {
    _greloc($sec, HEAP32[$137 + 32 >> 2] | 0, $c, 1);
    $146 = HEAP32[5024] | 0;
   }
   $149 = HEAP32[$146 + 16 >> 2] | 0;
   $153 = $61;
   HEAP32[$153 >> 2] = _bitshift64Shl($149 & $bit_mask_0$0 | 0, (($149 | 0) < 0 | 0 ? -1 : 0) & $bit_mask_0$1 | 0, $bit_pos_0$0 | 0) | 0 | HEAP32[$153 >> 2];
   $_pn = HEAP32[5024] | 0;
   $storemerge = $_pn - 40 | 0;
   HEAP32[5024] = $storemerge;
   STACKTOP = sp;
   return;
  }
 }
 $95 = HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0;
 $98$0 = _bitshift64Shl($95 & $bit_mask_0$0 | 0, (($95 | 0) < 0 | 0 ? -1 : 0) & $bit_mask_0$1 | 0, $bit_pos_0$0 | 0) | 0;
 HEAP8[$61] = $98$0 | (HEAPU8[$61] | 0);
 $_pn = HEAP32[5024] | 0;
 $storemerge = $_pn - 40 | 0;
 HEAP32[5024] = $storemerge;
 STACKTOP = sp;
 return;
}
function _gen_opf($op) {
 $op = $op | 0;
 var $v1 = 0, $1 = 0, $9 = 0, $17 = 0, $19 = 0, $_pre96 = 0, $30 = 0, $31 = 0, $36 = 0, $swapped_0 = 0, $swapped_1 = 0, $50 = 0, $_01_i = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $63 = 0, $_pre_i10 = 0, $66 = 0, $_01_i11 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $79 = 0, $82 = 0, $_01_i17 = 0, $83 = 0, $84 = 0, $89 = 0, $90 = 0, $95 = 0, $97 = 0, $98 = 0, $_01_i23 = 0, $99 = 0, $100 = 0, $105 = 0, $106 = 0, $111 = 0, $114 = 0, $_01_i29 = 0, $115 = 0, $116 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $_01_i35 = 0, $130 = 0, $131 = 0, $136 = 0, $137 = 0, $142 = 0, $145 = 0, $_01_i41 = 0, $146 = 0, $147 = 0, $152 = 0, $153 = 0, $158 = 0, $162 = 0, $_01_i47 = 0, $163 = 0, $164 = 0, $169 = 0, $170 = 0, $175 = 0, $177 = 0, $_01_i53 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $190 = 0, $_0 = 0, $192 = 0, $swapped_2 = 0, $a_0 = 0, $212 = 0, $217 = 0, $218 = 0, $_pre_i58 = 0, $221 = 0, $222 = 0, $227 = 0, $228 = 0, $236 = 0, $_01_i65 = 0, $237 = 0, $238 = 0, $243 = 0, $244 = 0, $249 = 0, $254 = 0, $258 = 0, $fc_0 = 0, $r_0 = 0, $_pre_i70 = 0, $265 = 0, $266 = 0, $269 = 0, $272 = 0, $273 = 0, $277 = 0, $278 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $v1 = sp | 0;
 $1 = HEAP32[5024] | 0;
 if ((HEAP16[$1 - 40 + 8 >> 1] & 319) == 48) {
  _vswap();
  _gv(2) | 0;
  _vswap();
  $9 = HEAP32[5024] | 0;
 } else {
  $9 = $1;
 }
 if ((HEAP16[$9 + 8 >> 1] & 319) == 48) {
  _gv(2) | 0;
  $17 = HEAP32[5024] | 0;
 } else {
  $17 = $9;
 }
 $19 = HEAP16[$17 - 40 + 8 >> 1] | 0;
 do {
  if (($19 & 256) == 0) {
   $31 = $17;
   $30 = $19;
  } else {
   if ((HEAP16[$17 + 8 >> 1] & 256) == 0) {
    $31 = $17;
    $30 = $19;
    break;
   }
   _vswap();
   _gv(2) | 0;
   _vswap();
   $_pre96 = HEAP32[5024] | 0;
   $31 = $_pre96;
   $30 = HEAP16[$_pre96 - 40 + 8 >> 1] | 0;
  }
 } while (0);
 if (($30 & 256) == 0) {
  $swapped_0 = 0;
  $36 = $31;
 } else {
  _vswap();
  $swapped_0 = 1;
  $36 = HEAP32[5024] | 0;
 }
 if (($op - 146 | 0) >>> 0 >= 14 >>> 0) {
  if ((HEAP32[$36 >> 2] & 15 | 0) == 10) {
   _load(3, $36);
   $swapped_2 = $swapped_0 ^ 1;
  } else {
   $swapped_2 = $swapped_0;
  }
  if (($op | 0) == 47) {
   $a_0 = ($swapped_2 | 0) == 0 ? 6 : 7;
  } else if (($op | 0) == 45) {
   $a_0 = ($swapped_2 | 0) == 0 ? 4 : 5;
  } else if (($op | 0) == 42) {
   $a_0 = 1;
  } else {
   $a_0 = 0;
  }
  $212 = HEAP32[5024] | 0;
  $217 = HEAP32[$212 + 16 >> 2] | 0;
  $218 = HEAP32[$212 >> 2] & 15;
  if (($218 | 0) == 10) {
   $_pre_i58 = HEAP32[5434] | 0;
   $221 = $_pre_i58 + 1 | 0;
   $222 = HEAP32[13918] | 0;
   if ($221 >>> 0 > (HEAP32[$222 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($222, $221);
    $228 = HEAP32[5434] | 0;
    $227 = HEAP32[13918] | 0;
   } else {
    $228 = $_pre_i58;
    $227 = $222;
   }
   HEAP8[(HEAP32[$227 + 4 >> 2] | 0) + $228 | 0] = -34;
   HEAP32[5434] = $221;
   $_01_i65 = $a_0 << 3 | 193;
   $236 = $_pre_i58 + 1 | 0;
   while (1) {
    $237 = $236 + 1 | 0;
    $238 = HEAP32[13918] | 0;
    if ($237 >>> 0 > (HEAP32[$238 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($238, $237);
     $244 = HEAP32[5434] | 0;
     $243 = HEAP32[13918] | 0;
    } else {
     $244 = $236;
     $243 = $238;
    }
    HEAP8[(HEAP32[$243 + 4 >> 2] | 0) + $244 | 0] = $_01_i65;
    HEAP32[5434] = $237;
    $249 = $_01_i65 >>> 8;
    if (($249 | 0) == 0) {
     break;
    } else {
     $_01_i65 = $249;
     $236 = $237;
    }
   }
  } else {
   $254 = HEAPU16[$212 + 8 >> 1] | 0;
   if (($254 & 63 | 0) == 49) {
    $258 = _get_reg(1) | 0;
    HEAP32[$v1 >> 2] = 0;
    HEAP16[$v1 + 8 >> 1] = 306;
    HEAP32[$v1 + 16 >> 2] = $217;
    _load($258, $v1);
    $r_0 = $258;
    $fc_0 = 0;
   } else {
    $r_0 = $254;
    $fc_0 = $217;
   }
   $_pre_i70 = HEAP32[5434] | 0;
   $265 = $_pre_i70 + 1 | 0;
   $266 = HEAP32[13918] | 0;
   $269 = $265 >>> 0 > (HEAP32[$266 + 8 >> 2] | 0) >>> 0;
   if (($218 | 0) == 9) {
    if ($269) {
     _section_realloc($266, $265);
     $273 = HEAP32[5434] | 0;
     $272 = HEAP32[13918] | 0;
    } else {
     $273 = $_pre_i70;
     $272 = $266;
    }
    HEAP8[(HEAP32[$272 + 4 >> 2] | 0) + $273 | 0] = -36;
   } else {
    if ($269) {
     _section_realloc($266, $265);
     $278 = HEAP32[5434] | 0;
     $277 = HEAP32[13918] | 0;
    } else {
     $278 = $_pre_i70;
     $277 = $266;
    }
    HEAP8[(HEAP32[$277 + 4 >> 2] | 0) + $278 | 0] = -40;
   }
   HEAP32[5434] = $265;
   _gen_modrm($a_0, $r_0, HEAP32[(HEAP32[5024] | 0) + 32 >> 2] | 0, $fc_0);
  }
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  STACKTOP = sp;
  return;
 }
 _load(3, $36);
 _save_reg(0);
 if (($op & -3 | 0) == 157) {
  $swapped_1 = $swapped_0 ^ 1;
  label = 14;
 } else {
  if (($op & -2 | 0) != 148) {
   $swapped_1 = $swapped_0;
   label = 14;
  }
 }
 do {
  if ((label | 0) == 14) {
   if (($swapped_1 | 0) == 0) {
    break;
   }
   $_01_i = 51673;
   $50 = HEAP32[5434] | 0;
   while (1) {
    $51 = $50 + 1 | 0;
    $52 = HEAP32[13918] | 0;
    if ($51 >>> 0 > (HEAP32[$52 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($52, $51);
     $58 = HEAP32[5434] | 0;
     $57 = HEAP32[13918] | 0;
    } else {
     $58 = $50;
     $57 = $52;
    }
    HEAP8[(HEAP32[$57 + 4 >> 2] | 0) + $58 | 0] = $_01_i;
    HEAP32[5434] = $51;
    $63 = $_01_i >>> 8;
    if (($63 | 0) == 0) {
     break;
    } else {
     $_01_i = $63;
     $50 = $51;
    }
   }
  }
 } while (0);
 $_pre_i10 = HEAP32[5434] | 0;
 $_01_i11 = 59866;
 $66 = $_pre_i10;
 while (1) {
  $67 = $66 + 1 | 0;
  $68 = HEAP32[13918] | 0;
  if ($67 >>> 0 > (HEAP32[$68 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($68, $67);
   $74 = HEAP32[5434] | 0;
   $73 = HEAP32[13918] | 0;
  } else {
   $74 = $66;
   $73 = $68;
  }
  HEAP8[(HEAP32[$73 + 4 >> 2] | 0) + $74 | 0] = $_01_i11;
  HEAP32[5434] = $67;
  $79 = $_01_i11 >>> 8;
  if (($79 | 0) == 0) {
   break;
  } else {
   $_01_i11 = $79;
   $66 = $67;
  }
 }
 $_01_i17 = 57567;
 $82 = $_pre_i10 + 2 | 0;
 while (1) {
  $83 = $82 + 1 | 0;
  $84 = HEAP32[13918] | 0;
  if ($83 >>> 0 > (HEAP32[$84 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($84, $83);
   $90 = HEAP32[5434] | 0;
   $89 = HEAP32[13918] | 0;
  } else {
   $90 = $82;
   $89 = $84;
  }
  HEAP8[(HEAP32[$89 + 4 >> 2] | 0) + $90 | 0] = $_01_i17;
  HEAP32[5434] = $83;
  $95 = $_01_i17 >>> 8;
  if (($95 | 0) == 0) {
   break;
  } else {
   $_01_i17 = $95;
   $82 = $83;
  }
 }
 $97 = $_pre_i10 + 4 | 0;
 if (($op | 0) == 148) {
  $_01_i23 = 4580480;
  $98 = $97;
  while (1) {
   $99 = $98 + 1 | 0;
   $100 = HEAP32[13918] | 0;
   if ($99 >>> 0 > (HEAP32[$100 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($100, $99);
    $106 = HEAP32[5434] | 0;
    $105 = HEAP32[13918] | 0;
   } else {
    $106 = $98;
    $105 = $100;
   }
   HEAP8[(HEAP32[$105 + 4 >> 2] | 0) + $106 | 0] = $_01_i23;
   HEAP32[5434] = $99;
   $111 = $_01_i23 >>> 8;
   if (($111 | 0) == 0) {
    break;
   } else {
    $_01_i23 = $111;
    $98 = $99;
   }
  }
  $_01_i29 = 4258944;
  $114 = $_pre_i10 + 7 | 0;
  while (1) {
   $115 = $114 + 1 | 0;
   $116 = HEAP32[13918] | 0;
   if ($115 >>> 0 > (HEAP32[$116 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($116, $115);
    $122 = HEAP32[5434] | 0;
    $121 = HEAP32[13918] | 0;
   } else {
    $122 = $114;
    $121 = $116;
   }
   HEAP8[(HEAP32[$121 + 4 >> 2] | 0) + $122 | 0] = $_01_i29;
   HEAP32[5434] = $115;
   $127 = $_01_i29 >>> 8;
   if (($127 | 0) == 0) {
    $_0 = 148;
    break;
   } else {
    $_01_i29 = $127;
    $114 = $115;
   }
  }
 } else if (($op | 0) == 149) {
  $_01_i35 = 4580480;
  $129 = $97;
  while (1) {
   $130 = $129 + 1 | 0;
   $131 = HEAP32[13918] | 0;
   if ($130 >>> 0 > (HEAP32[$131 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($131, $130);
    $137 = HEAP32[5434] | 0;
    $136 = HEAP32[13918] | 0;
   } else {
    $137 = $129;
    $136 = $131;
   }
   HEAP8[(HEAP32[$136 + 4 >> 2] | 0) + $137 | 0] = $_01_i35;
   HEAP32[5434] = $130;
   $142 = $_01_i35 >>> 8;
   if (($142 | 0) == 0) {
    break;
   } else {
    $_01_i35 = $142;
    $129 = $130;
   }
  }
  $_01_i41 = 4256896;
  $145 = $_pre_i10 + 7 | 0;
  while (1) {
   $146 = $145 + 1 | 0;
   $147 = HEAP32[13918] | 0;
   if ($146 >>> 0 > (HEAP32[$147 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($147, $146);
    $153 = HEAP32[5434] | 0;
    $152 = HEAP32[13918] | 0;
   } else {
    $153 = $145;
    $152 = $147;
   }
   HEAP8[(HEAP32[$152 + 4 >> 2] | 0) + $153 | 0] = $_01_i41;
   HEAP32[5434] = $146;
   $158 = $_01_i41 >>> 8;
   if (($158 | 0) == 0) {
    $_0 = 149;
    break;
   } else {
    $_01_i41 = $158;
    $145 = $146;
   }
  }
 } else {
  if (($op - 157 | 0) >>> 0 < 2 >>> 0) {
   $_01_i47 = 378102;
   $162 = $97;
   while (1) {
    $163 = $162 + 1 | 0;
    $164 = HEAP32[13918] | 0;
    if ($163 >>> 0 > (HEAP32[$164 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($164, $163);
     $170 = HEAP32[5434] | 0;
     $169 = HEAP32[13918] | 0;
    } else {
     $170 = $162;
     $169 = $164;
    }
    HEAP8[(HEAP32[$169 + 4 >> 2] | 0) + $170 | 0] = $_01_i47;
    HEAP32[5434] = $163;
    $175 = $_01_i47 >>> 8;
    if (($175 | 0) == 0) {
     $_0 = 148;
     break;
    } else {
     $_01_i47 = $175;
     $162 = $163;
    }
   }
  } else {
   $_01_i53 = 4572406;
   $177 = $97;
   while (1) {
    $178 = $177 + 1 | 0;
    $179 = HEAP32[13918] | 0;
    if ($178 >>> 0 > (HEAP32[$179 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($179, $178);
     $185 = HEAP32[5434] | 0;
     $184 = HEAP32[13918] | 0;
    } else {
     $185 = $177;
     $184 = $179;
    }
    HEAP8[(HEAP32[$184 + 4 >> 2] | 0) + $185 | 0] = $_01_i53;
    HEAP32[5434] = $178;
    $190 = $_01_i53 >>> 8;
    if (($190 | 0) == 0) {
     $_0 = 148;
     break;
    } else {
     $_01_i53 = $190;
     $177 = $178;
    }
   }
  }
 }
 $192 = HEAP32[5024] | 0;
 HEAP32[5024] = $192 - 40;
 HEAP16[$192 - 40 + 8 >> 1] = 51;
 HEAP32[(HEAP32[5024] | 0) + 16 >> 2] = $_0;
 STACKTOP = sp;
 return;
}
function _parse_btype($type, $ad) {
 $type = $type | 0;
 $ad = $ad | 0;
 var $n_i = 0, $ad_i = 0, $type1 = 0, $tmpcast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $type_found_0 = 0, $typespec_found_0 = 0, $typedef_found_0 = 0, $t_0 = 0, $8 = 0, $u_0 = 0, $u_1 = 0, $21 = 0, $38 = 0, $61 = 0, $72 = 0, $75 = 0, $76 = 0, $79 = 0, $96 = 0, $97 = 0, $98 = 0, $99$1 = 0, $102 = 0, $123 = 0, $131 = 0, $135 = 0, $140 = 0, $143 = 0, $144 = 0, $147 = 0, $153 = 0, $155 = 0, $162 = 0, $164 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $or_cond = 0, $179 = 0, $t_2 = 0, $180 = 0, $181 = 0, $__v = 0, $_ = 0, $182 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $n_i = sp | 0;
 $ad_i = sp + 8 | 0;
 $type1 = sp + 24 | 0;
 $tmpcast = $type1;
 _memset($ad | 0, 0, 12) | 0;
 $2 = $type + 4 | 0;
 $3 = $ad;
 $4 = $type1;
 $5 = $tmpcast + 4 | 0;
 $t_0 = 0;
 $typedef_found_0 = 0;
 $typespec_found_0 = 0;
 $type_found_0 = 0;
 L1 : while (1) {
  $8 = HEAP32[5310] | 0;
  L3 : do {
   switch ($8 | 0) {
   case 257:
    {
     $u_0 = 3;
     label = 4;
     break;
    }
   case 279:
    {
     _next();
     $21 = $t_0 & 15;
     if (($21 | 0) == 9) {
      $t_0 = $t_0 & -16 | 10;
      $typedef_found_0 = $typedef_found_0;
      $typespec_found_0 = $typespec_found_0;
      $type_found_0 = 1;
      continue L1;
     } else if (($21 | 0) == 13) {
      $t_0 = $t_0 & -16 | 12;
      $typedef_found_0 = $typedef_found_0;
      $typespec_found_0 = $typespec_found_0;
      $type_found_0 = 1;
      continue L1;
     } else {
      $u_1 = 13;
      break L3;
     }
     break;
    }
   case 258:
    {
     $u_0 = 1;
     label = 4;
     break;
    }
   case 291:
    {
     _next();
     $t_0 = $t_0;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = $type_found_0;
     continue L1;
     break;
    }
   case 295:
    {
     $u_0 = 2;
     label = 4;
     break;
    }
   case 256:
    {
     _next();
     $t_0 = $t_0;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = 1;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 294:
    {
     $u_0 = 11;
     label = 4;
     break;
    }
   case 292:
    {
     $u_0 = 8;
     label = 4;
     break;
    }
   case 293:
    {
     _next();
     if (($t_0 & 15 | 0) != 13) {
      $u_1 = 9;
      break L3;
     }
     $t_0 = $t_0 & -16 | 10;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 300:
    {
     _struct_decl($tmpcast, 5);
     label = 19;
     break;
    }
   case 296:
   case 297:
    {
     _struct_decl($tmpcast, 7);
     label = 19;
     break;
    }
   case 273:
   case 274:
   case 275:
    {
     _next();
     $t_0 = $t_0 | 2048;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 276:
   case 277:
   case 278:
    {
     _next();
     $t_0 = $t_0 | 4096;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 281:
   case 282:
   case 283:
    {
     _next();
     $t_0 = $t_0 | 8192;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = 1;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 280:
   case 284:
   case 288:
   case 289:
   case 290:
    {
     _next();
     $t_0 = $t_0;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 267:
    {
     _next();
     $t_0 = $t_0 | 16;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = 1;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 265:
    {
     _next();
     $t_0 = $t_0 | 128;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 266:
    {
     _next();
     $t_0 = $t_0 | 256;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 298:
    {
     _next();
     $t_0 = $t_0 | 512;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 285:
   case 286:
   case 287:
    {
     _next();
     $t_0 = $t_0 | 1024;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 302:
   case 303:
    {
     _parse_attribute($ad);
     $61 = (HEAP32[$3 >> 2] | 0) >>> 16 & 15;
     if (($61 | 0) == 0) {
      $t_0 = $t_0;
      $typedef_found_0 = $typedef_found_0;
      $typespec_found_0 = $typespec_found_0;
      $type_found_0 = 1;
      continue L1;
     }
     $t_0 = $61 - 1 | $t_0 & -16;
     $typedef_found_0 = $typedef_found_0;
     $typespec_found_0 = $typespec_found_0;
     $type_found_0 = 1;
     continue L1;
     break;
    }
   case 306:
   case 307:
   case 308:
    {
     _next();
     _skip(40);
     if ((_parse_btype($tmpcast, $ad_i) | 0) == 0) {
      $72 = HEAP32[5338] | 0;
      HEAP32[5338] = 1;
      _expr_eq();
      $75 = HEAP32[5024] | 0;
      if ((HEAP32[5310] | 0) == 44) {
       $76 = $75;
       while (1) {
        $79 = HEAPU16[$76 + 8 >> 1] | 0;
        do {
         if (($79 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
          if (($79 & 62 | 0) != 52) {
           break;
          }
          _gsym(HEAP32[$76 + 16 >> 2] | 0);
         } else {
          _o(55517);
         }
        } while (0);
        HEAP32[5024] = (HEAP32[5024] | 0) - 40;
        _next();
        _expr_eq();
        $96 = HEAP32[5024] | 0;
        if ((HEAP32[5310] | 0) == 44) {
         $76 = $96;
        } else {
         $97 = $96;
         break;
        }
       }
      } else {
       $97 = $75;
      }
      $98 = $97;
      $99$1 = HEAP32[$98 + 4 >> 2] | 0;
      HEAP32[$type1 >> 2] = HEAP32[$98 >> 2];
      HEAP32[$type1 + 4 >> 2] = $99$1;
      $102 = HEAPU16[$97 + 8 >> 1] | 0;
      do {
       if (($102 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
        if (($102 & 62 | 0) != 52) {
         break;
        }
        _gsym(HEAP32[$97 + 16 >> 2] | 0);
       } else {
        _o(55517);
       }
      } while (0);
      HEAP32[5024] = (HEAP32[5024] | 0) - 40;
      HEAP32[5338] = $72;
     } else {
      _type_decl($tmpcast, $ad_i, $n_i, 1);
     }
     _skip(41);
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & -116097;
     label = 19;
     break;
    }
   default:
    {
     if (($typedef_found_0 | $typespec_found_0 | 0) != 0) {
      break L1;
     }
     $123 = $8 - 256 | 0;
     if ($123 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
      break L1;
     }
     $131 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($123 << 2) >> 2] | 0) + 16 >> 2] | 0;
     if (($131 | 0) == 0) {
      break L1;
     }
     $135 = HEAP32[$131 + 16 >> 2] | 0;
     if (($135 & 512 | 0) == 0) {
      break L1;
     }
     $140 = $135 & -513 | $t_0;
     HEAP32[$2 >> 2] = HEAP32[$131 + 20 >> 2];
     $143 = $131 + 8 | 0;
     $144 = HEAP32[$143 >> 2] | 0;
     if (($144 | 0) != 0) {
      $147 = HEAP32[$3 >> 2] | 0;
      if (($147 & 248 | 0) == 0) {
       $153 = $147 & -249 | $144 & 248;
       HEAP32[$3 >> 2] = $153;
       $155 = $153;
      } else {
       $155 = $147;
      }
      if (($155 & 7 | 0) == 0) {
       $162 = HEAP32[$143 >> 2] & 7 | $155 & -8;
       HEAP32[$3 >> 2] = $162;
       $164 = $162;
      } else {
       $164 = $155;
      }
      HEAP32[$3 >> 2] = HEAP32[$143 >> 2] & 256 | $164;
     }
     _next();
     $t_0 = $140;
     $typedef_found_0 = 1;
     $typespec_found_0 = 1;
     $type_found_0 = 1;
     continue L1;
    }
   }
  } while (0);
  if ((label | 0) == 4) {
   label = 0;
   _next();
   $u_1 = $u_0;
  } else if ((label | 0) == 19) {
   label = 0;
   $38 = HEAP32[$4 >> 2] | 0;
   HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
   $u_1 = $38;
  }
  if (($t_0 & 15 | 0) != 0) {
   _tcc_error(12064, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  $t_0 = $u_1 | $t_0;
  $typedef_found_0 = $typedef_found_0;
  $typespec_found_0 = 1;
  $type_found_0 = 1;
 }
 if (($t_0 & 8208 | 0) != 8208) {
  $173 = HEAP32[5314] | 0;
  $174 = $173 + 52 | 0;
  $175 = HEAP32[$174 >> 2] | 0;
  $176 = ($175 | 0) != 0;
  $177 = $t_0 & 8223;
  $178 = ($177 | 0) == 1;
  $or_cond = $176 & $178;
  $179 = $t_0 | 16;
  $t_2 = $or_cond ? $179 : $t_0;
  $180 = $t_2 & 15;
  $181 = ($180 | 0) == 13;
  $__v = $181 ? -8208 : -8193;
  $_ = $__v & $t_2;
  $182 = $type | 0;
  HEAP32[$182 >> 2] = $_;
  STACKTOP = sp;
  return $type_found_0 | 0;
 }
 _tcc_error(12032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 $173 = HEAP32[5314] | 0;
 $174 = $173 + 52 | 0;
 $175 = HEAP32[$174 >> 2] | 0;
 $176 = ($175 | 0) != 0;
 $177 = $t_0 & 8223;
 $178 = ($177 | 0) == 1;
 $or_cond = $176 & $178;
 $179 = $t_0 | 16;
 $t_2 = $or_cond ? $179 : $t_0;
 $180 = $t_2 & 15;
 $181 = ($180 | 0) == 13;
 $__v = $181 ? -8208 : -8193;
 $_ = $__v & $t_2;
 $182 = $type | 0;
 HEAP32[$182 >> 2] = $_;
 STACKTOP = sp;
 return $type_found_0 | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = $a$0 | 0;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $51 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $119 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $88 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = $a$0 | 0 | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $r_sroa_0_0_extract_trunc = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function _gfunc_epilog() {
 var $7 = 0, $13 = 0, $15 = 0, $19 = 0, $_pre_i = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $41 = 0, $42 = 0, $47 = 0, $_pre_i1 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $63 = 0, $64 = 0, $69 = 0, $70 = 0, $76 = 0, $_01_i = 0, $77 = 0, $78 = 0, $83 = 0, $84 = 0, $89 = 0, $_pre_i12 = 0, $93 = 0, $94 = 0, $99 = 0, $100 = 0, $105 = 0, $106 = 0, $111 = 0, $112 = 0, $117 = 0, $_pre_i22 = 0, $121 = 0, $122 = 0, $127 = 0, $128 = 0, $133 = 0, $134 = 0, $139 = 0, $140 = 0, $146 = 0, $_01_i33 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $159 = 0, $_pre_i38 = 0, $162 = 0, $163 = 0, $168 = 0, $169 = 0, $173 = 0, $176 = 0, $177 = 0, $184 = 0, $185 = 0, $190 = 0, $191 = 0, $195 = 0, $196 = 0, $197 = 0, $202 = 0, $203 = 0, $209 = 0, $210 = 0, $211 = 0, $216 = 0, $217 = 0, $222 = 0, $223 = 0, $storemerge = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $_01_i62 = 0, $234 = 0, $235 = 0, $240 = 0, $241 = 0, $246 = 0, $248 = 0, $250 = 0, $_01_i68 = 0, $251 = 0, $252 = 0, $257 = 0, $258 = 0, $263 = 0;
 do {
  if ((HEAP32[(HEAP32[5314] | 0) + 84 >> 2] | 0) != 0) {
   $7 = HEAP32[5358] | 0;
   if ((HEAP32[13910] | 0) == (HEAP32[$7 >> 2] | 0)) {
    break;
   }
   HEAP32[(_section_ptr_add($7, 4) | 0) >> 2] = 0;
   $13 = HEAP32[5434] | 0;
   HEAP32[5434] = HEAP32[13902];
   $15 = HEAP32[5358] | 0;
   $19 = _get_sym_ref(55688, $15, HEAP32[13910] | 0, HEAP32[$15 >> 2] | 0) | 0;
   _greloc(HEAP32[13918] | 0, $19, (HEAP32[5434] | 0) + 1 | 0, 1);
   $_pre_i = HEAP32[5434] | 0;
   $23 = $_pre_i + 1 | 0;
   $24 = HEAP32[13918] | 0;
   if ($23 >>> 0 > (HEAP32[$24 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($24, $23);
    $30 = HEAP32[5434] | 0;
    $29 = HEAP32[13918] | 0;
   } else {
    $30 = $_pre_i;
    $29 = $24;
   }
   HEAP8[(HEAP32[$29 + 4 >> 2] | 0) + $30 | 0] = -72;
   HEAP32[5434] = $23;
   $35 = $_pre_i + 5 | 0;
   $36 = HEAP32[13918] | 0;
   if ($35 >>> 0 > (HEAP32[$36 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($36, $35);
    $42 = HEAP32[13918] | 0;
    $41 = HEAP32[5434] | 0;
   } else {
    $42 = $36;
    $41 = $_pre_i + 1 | 0;
   }
   HEAP32[(HEAP32[$42 + 4 >> 2] | 0) + $41 >> 2] = 0;
   HEAP32[5434] = $35;
   $47 = _external_global_sym(395, 55624, 0) | 0;
   _greloc(HEAP32[13918] | 0, $47, (HEAP32[5434] | 0) + 1 | 0, 2);
   $_pre_i1 = HEAP32[5434] | 0;
   $51 = $_pre_i1 + 1 | 0;
   $52 = HEAP32[13918] | 0;
   if ($51 >>> 0 > (HEAP32[$52 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($52, $51);
    $58 = HEAP32[5434] | 0;
    $57 = HEAP32[13918] | 0;
   } else {
    $58 = $_pre_i1;
    $57 = $52;
   }
   HEAP8[(HEAP32[$57 + 4 >> 2] | 0) + $58 | 0] = -24;
   HEAP32[5434] = $51;
   $63 = $_pre_i1 + 5 | 0;
   $64 = HEAP32[13918] | 0;
   if ($63 >>> 0 > (HEAP32[$64 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($64, $63);
    $70 = HEAP32[13918] | 0;
    $69 = HEAP32[5434] | 0;
   } else {
    $70 = $64;
    $69 = $_pre_i1 + 1 | 0;
   }
   HEAP32[(HEAP32[$70 + 4 >> 2] | 0) + $69 >> 2] = -4;
   HEAP32[5434] = $13;
   $_01_i = 21072;
   $76 = $13;
   while (1) {
    $77 = $76 + 1 | 0;
    $78 = HEAP32[13918] | 0;
    if ($77 >>> 0 > (HEAP32[$78 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($78, $77);
     $84 = HEAP32[5434] | 0;
     $83 = HEAP32[13918] | 0;
    } else {
     $84 = $76;
     $83 = $78;
    }
    HEAP8[(HEAP32[$83 + 4 >> 2] | 0) + $84 | 0] = $_01_i;
    HEAP32[5434] = $77;
    $89 = $_01_i >>> 8;
    if (($89 | 0) == 0) {
     break;
    } else {
     $_01_i = $89;
     $76 = $77;
    }
   }
   _greloc(HEAP32[13918] | 0, $19, $13 + 3 | 0, 1);
   $_pre_i12 = HEAP32[5434] | 0;
   $93 = $_pre_i12 + 1 | 0;
   $94 = HEAP32[13918] | 0;
   if ($93 >>> 0 > (HEAP32[$94 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($94, $93);
    $100 = HEAP32[5434] | 0;
    $99 = HEAP32[13918] | 0;
   } else {
    $100 = $_pre_i12;
    $99 = $94;
   }
   HEAP8[(HEAP32[$99 + 4 >> 2] | 0) + $100 | 0] = -72;
   HEAP32[5434] = $93;
   $105 = $_pre_i12 + 5 | 0;
   $106 = HEAP32[13918] | 0;
   if ($105 >>> 0 > (HEAP32[$106 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($106, $105);
    $112 = HEAP32[13918] | 0;
    $111 = HEAP32[5434] | 0;
   } else {
    $112 = $106;
    $111 = $_pre_i12 + 1 | 0;
   }
   HEAP32[(HEAP32[$112 + 4 >> 2] | 0) + $111 >> 2] = 0;
   HEAP32[5434] = $105;
   $117 = _external_global_sym(396, 55624, 0) | 0;
   _greloc(HEAP32[13918] | 0, $117, (HEAP32[5434] | 0) + 1 | 0, 2);
   $_pre_i22 = HEAP32[5434] | 0;
   $121 = $_pre_i22 + 1 | 0;
   $122 = HEAP32[13918] | 0;
   if ($121 >>> 0 > (HEAP32[$122 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($122, $121);
    $128 = HEAP32[5434] | 0;
    $127 = HEAP32[13918] | 0;
   } else {
    $128 = $_pre_i22;
    $127 = $122;
   }
   HEAP8[(HEAP32[$127 + 4 >> 2] | 0) + $128 | 0] = -24;
   HEAP32[5434] = $121;
   $133 = $_pre_i22 + 5 | 0;
   $134 = HEAP32[13918] | 0;
   if ($133 >>> 0 > (HEAP32[$134 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($134, $133);
    $140 = HEAP32[13918] | 0;
    $139 = HEAP32[5434] | 0;
   } else {
    $140 = $134;
    $139 = $_pre_i22 + 1 | 0;
   }
   HEAP32[(HEAP32[$140 + 4 >> 2] | 0) + $139 >> 2] = -4;
   HEAP32[5434] = $133;
   $_01_i33 = 22618;
   $146 = $133;
   while (1) {
    $147 = $146 + 1 | 0;
    $148 = HEAP32[13918] | 0;
    if ($147 >>> 0 > (HEAP32[$148 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($148, $147);
     $154 = HEAP32[5434] | 0;
     $153 = HEAP32[13918] | 0;
    } else {
     $154 = $146;
     $153 = $148;
    }
    HEAP8[(HEAP32[$153 + 4 >> 2] | 0) + $154 | 0] = $_01_i33;
    HEAP32[5434] = $147;
    $159 = $_01_i33 >>> 8;
    if (($159 | 0) == 0) {
     break;
    } else {
     $_01_i33 = $159;
     $146 = $147;
    }
   }
  }
 } while (0);
 $_pre_i38 = HEAP32[5434] | 0;
 $162 = $_pre_i38 + 1 | 0;
 $163 = HEAP32[13918] | 0;
 if ($162 >>> 0 > (HEAP32[$163 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($163, $162);
  $169 = HEAP32[5434] | 0;
  $168 = HEAP32[13918] | 0;
 } else {
  $169 = $_pre_i38;
  $168 = $163;
 }
 HEAP8[(HEAP32[$168 + 4 >> 2] | 0) + $169 | 0] = -55;
 HEAP32[5434] = $162;
 $173 = $_pre_i38 + 1 | 0;
 if ((HEAP32[13904] | 0) == 0) {
  $176 = $_pre_i38 + 2 | 0;
  $177 = HEAP32[13918] | 0;
  if ($176 >>> 0 > (HEAP32[$177 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($177, $176);
   $223 = HEAP32[5434] | 0;
   $222 = HEAP32[13918] | 0;
  } else {
   $223 = $173;
   $222 = $177;
  }
  HEAP8[(HEAP32[$222 + 4 >> 2] | 0) + $223 | 0] = -61;
  $227 = $176;
  $storemerge = $176;
 } else {
  $184 = $_pre_i38 + 2 | 0;
  $185 = HEAP32[13918] | 0;
  if ($184 >>> 0 > (HEAP32[$185 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($185, $184);
   $191 = HEAP32[5434] | 0;
   $190 = HEAP32[13918] | 0;
  } else {
   $191 = $173;
   $190 = $185;
  }
  HEAP8[(HEAP32[$190 + 4 >> 2] | 0) + $191 | 0] = -62;
  HEAP32[5434] = $184;
  $195 = HEAP32[13904] | 0;
  $196 = $_pre_i38 + 3 | 0;
  $197 = HEAP32[13918] | 0;
  if ($196 >>> 0 > (HEAP32[$197 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($197, $196);
   $203 = HEAP32[5434] | 0;
   $202 = HEAP32[13918] | 0;
  } else {
   $203 = $_pre_i38 + 2 | 0;
   $202 = $197;
  }
  HEAP8[(HEAP32[$202 + 4 >> 2] | 0) + $203 | 0] = $195;
  HEAP32[5434] = $196;
  $209 = (HEAP32[13904] | 0) >>> 8;
  $210 = $_pre_i38 + 4 | 0;
  $211 = HEAP32[13918] | 0;
  if ($210 >>> 0 > (HEAP32[$211 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($211, $210);
   $217 = HEAP32[5434] | 0;
   $216 = HEAP32[13918] | 0;
  } else {
   $217 = $196;
   $216 = $211;
  }
  HEAP8[(HEAP32[$216 + 4 >> 2] | 0) + $217 | 0] = $209;
  $227 = $210;
  $storemerge = $210;
 }
 HEAP32[5434] = $storemerge;
 $229 = 3 - (HEAP32[5356] | 0) | 0;
 $230 = HEAP32[13902] | 0;
 $231 = $230 - 9 | 0;
 HEAP32[5434] = $231;
 $_01_i62 = 15042901;
 $233 = $231;
 while (1) {
  $234 = $233 + 1 | 0;
  $235 = HEAP32[13918] | 0;
  if ($234 >>> 0 > (HEAP32[$235 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($235, $234);
   $241 = HEAP32[5434] | 0;
   $240 = HEAP32[13918] | 0;
  } else {
   $241 = $233;
   $240 = $235;
  }
  HEAP8[(HEAP32[$240 + 4 >> 2] | 0) + $241 | 0] = $_01_i62;
  HEAP32[5434] = $234;
  $246 = $_01_i62 >>> 8;
  if (($246 | 0) == 0) {
   break;
  } else {
   $_01_i62 = $246;
   $233 = $234;
  }
 }
 $248 = $229 & -4;
 $_01_i68 = 60545;
 $250 = $230 - 6 | 0;
 while (1) {
  $251 = $250 + 1 | 0;
  $252 = HEAP32[13918] | 0;
  if ($251 >>> 0 > (HEAP32[$252 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($252, $251);
   $258 = HEAP32[5434] | 0;
   $257 = HEAP32[13918] | 0;
  } else {
   $258 = $250;
   $257 = $252;
  }
  HEAP8[(HEAP32[$257 + 4 >> 2] | 0) + $258 | 0] = $_01_i68;
  HEAP32[5434] = $251;
  $263 = $_01_i68 >>> 8;
  if (($263 | 0) == 0) {
   break;
  } else {
   $_01_i68 = $263;
   $250 = $251;
  }
 }
 _gen_le32($248);
 HEAP32[5434] = $227;
 return;
}
function _tcc_compile($s1) {
 $s1 = $s1 | 0;
 var $buf = 0, $section_sym = 0, $1 = 0, $9 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $_02_i_i = 0, $q_01_i_i = 0, $21 = 0, $25 = 0, $q_0_lcssa_i_i = 0, $27 = 0, $33 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $55 = 0, $60 = 0, $71 = 0, $_pre_phi2 = 0, $_pre_phi = 0, label = 0, setjmpLabel = 0, setjmpTable = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 label = 1;
 setjmpLabel = 0;
 setjmpTable = STACKTOP;
 STACKTOP = STACKTOP + 168 | 0;
 HEAP32[setjmpTable >> 2] = 0;
 while (1) switch (label | 0) {
 case 1:
  $buf = sp | 0;
  invoke_vi(2, $s1 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[13918] = 0;
  HEAP32[13896] = 55728;
  HEAP32[13930] = 268435456;
  $section_sym = 0;
  $1 = $s1 + 80 | 0;
  if ((HEAP32[$1 >> 2] | 0) == 0) {
   label = 9;
   break;
  } else {
   label = 2;
   break;
  }
 case 2:
  $9 = invoke_iiiiiiii(2, HEAP32[5318] | 0, 0, 0, 3, 0, HEAP32[(HEAP32[5312] | 0) + 16 >> 2] | 0, 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $section_sym = $9;
  $10 = $buf | 0;
  invoke_iii(2, $10 | 0, 512) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $12 = invoke_ii(2, $10 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if (($12 | 0) < 512) {
   label = 3;
   break;
  } else {
   label = 8;
   break;
  }
 case 3:
  $15 = $buf + $12 | 0;
  $16 = 512 - $12 | 0;
  if (($16 | 0) > 0) {
   label = 4;
   break;
  } else {
   label = 8;
   break;
  }
 case 4:
  $19 = $buf + 511 | 0;
  if (($16 - 1 | 0) > 0) {
   $q_01_i_i = $15;
   $_02_i_i = 18728;
   label = 5;
   break;
  } else {
   $q_0_lcssa_i_i = $15;
   label = 7;
   break;
  }
 case 5:
  $21 = HEAP8[$_02_i_i] | 0;
  if ($21 << 24 >> 24 == 0) {
   $q_0_lcssa_i_i = $q_01_i_i;
   label = 7;
   break;
  } else {
   label = 6;
   break;
  }
 case 6:
  $25 = $q_01_i_i + 1 | 0;
  HEAP8[$q_01_i_i] = $21;
  if ($25 >>> 0 < $19 >>> 0) {
   $q_01_i_i = $25;
   $_02_i_i = $_02_i_i + 1 | 0;
   label = 5;
   break;
  } else {
   $q_0_lcssa_i_i = $25;
   label = 7;
   break;
  }
 case 7:
  HEAP8[$q_0_lcssa_i_i] = 0;
  label = 8;
  break;
 case 8:
  $27 = HEAP32[5312] | 0;
  invoke_viiiiiii(2, $10 | 0, 100, 0, 0, HEAP32[$27 >> 2] | 0, $27 | 0, $section_sym | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $33 = HEAP32[5312] | 0;
  invoke_viiiiiii(2, (HEAP32[13912] | 0) + 32 | 0, 100, 0, 0, HEAP32[$33 >> 2] | 0, $33 | 0, $section_sym | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 9;
  break;
 case 9:
  invoke_iiiiiiii(2, HEAP32[5318] | 0, 0, 0, 4, 0, 65521, (HEAP32[13912] | 0) + 32 | 0) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[5432] = 0;
  HEAP32[13922] = 1;
  invoke_vi(4, 55688);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[5330] = 0;
  HEAP32[13906] = 6;
  $42 = invoke_iiiii(2, 536870912, 21728, 0, 2) | 0;
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  HEAP32[13907] = $42;
  $43 = HEAP32[13914] | 0;
  HEAP32[5338] = 1;
  $45 = _saveSetjmp($s1 + 164 | 0, label, setjmpTable) | 0;
  label = 18;
  break;
 case 18:
  if (($45 | 0) == 0) {
   label = 11;
   break;
  } else {
   label = 10;
   break;
  }
 case 10:
  $_pre_phi = $s1 + 160 | 0;
  $_pre_phi2 = $s1 + 320 | 0;
  label = 17;
  break;
 case 11:
  $48 = $s1 + 320 | 0;
  HEAP32[$48 >> 2] = 0;
  $49 = $s1 + 160 | 0;
  HEAP32[$49 >> 2] = 1;
  HEAP32[13924] = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
  HEAP32[5308] = 3;
  HEAP32[5336] = 3;
  $55 = HEAP32[5024] | 0;
  invoke_v(2);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vi(8, 48);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  if ((HEAP32[5310] | 0) == -1) {
   label = 13;
   break;
  } else {
   label = 12;
   break;
  }
 case 12:
  invoke_vi(10, 18704);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  label = 13;
  break;
 case 13:
  $60 = HEAP32[5024] | 0;
  if (($55 | 0) == ($60 | 0)) {
   label = 15;
   break;
  } else {
   label = 14;
   break;
  }
 case 14:
  invoke_vii(4, 18624, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = ($60 - $55 | 0) / 40 | 0, tempVarArgs) | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  STACKTOP = tempVarArgs;
  label = 15;
  break;
 case 15:
  if ((HEAP32[$1 >> 2] | 0) == 0) {
   $_pre_phi = $49;
   $_pre_phi2 = $48;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 case 16:
  $71 = HEAP32[5312] | 0;
  invoke_viiiiiii(2, 0, 100, 0, 0, HEAP32[$71 >> 2] | 0, $71 | 0, $section_sym | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  $_pre_phi = $49;
  $_pre_phi2 = $48;
  label = 17;
  break;
 case 17:
  HEAP32[$_pre_phi >> 2] = 0;
  invoke_vi(6, $43 | 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_v(4);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vii(2, 54512, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  invoke_vii(2, 21408, 0);
  if ((__THREW__ | 0) != 0 & (threwValue | 0) != 0) {
   setjmpLabel = _testSetjmp(HEAP32[__THREW__ >> 2] | 0, setjmpTable) | 0;
   if ((setjmpLabel | 0) > 0) {
    label = -1;
    break;
   } else return 0;
  }
  __THREW__ = threwValue = 0;
  STACKTOP = sp;
  return ((HEAP32[$_pre_phi2 >> 2] | 0) != 0) << 31 >> 31 | 0;
 case -1:
  if ((setjmpLabel | 0) == 9) {
   $45 = threwValue;
   label = 18;
  }
  __THREW__ = threwValue = 0;
  break;
 }
 return 0;
}
function _gtst($inv, $t) {
 $inv = $inv | 0;
 $t = $t | 0;
 var $1 = 0, $4 = 0, $8 = 0, $9 = 0, $10 = 0, $15 = 0, $16 = 0, $24 = 0, $27 = 0, $_01_i_i = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $49 = 0, $50 = 0, $55 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $73 = 0, $74 = 0, $p_0_lcssa = 0, $_pre_i_i = 0, $81 = 0, $82 = 0, $87 = 0, $88 = 0, $92 = 0, $93 = 0, $98 = 0, $99 = 0, $104 = 0, $108 = 0, $_01_i_i5 = 0, $114 = 0, $115 = 0, $124 = 0, $131 = 0, $_pre_i_i6 = 0, $144 = 0, $145 = 0, $150 = 0, $151 = 0, $155 = 0, $156 = 0, $161 = 0, $162 = 0, $167 = 0, $169 = 0, $_pre_i13 = 0, $170 = 0, $171 = 0, $176 = 0, $177 = 0, $182 = 0, $185 = 0, $_01_i17 = 0, $186 = 0, $187 = 0, $192 = 0, $193 = 0, $198 = 0, $200 = 0, $201 = 0, $202 = 0, $207 = 0, $208 = 0, $214 = 0, $_01_i_i26 = 0, $215 = 0, $216 = 0, $221 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $236 = 0, $237 = 0, $242 = 0, $_0 = 0, $243 = 0, $244 = 0, label = 0;
 $1 = HEAP32[5024] | 0;
 $4 = HEAPU16[$1 + 8 >> 1] | 0;
 if (($4 & 63 | 0) == 51) {
  $8 = HEAP32[5434] | 0;
  $9 = $8 + 1 | 0;
  $10 = HEAP32[13918] | 0;
  if ($9 >>> 0 > (HEAP32[$10 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($10, $9);
   $16 = HEAP32[5434] | 0;
   $15 = HEAP32[13918] | 0;
  } else {
   $16 = $8;
   $15 = $10;
  }
  HEAP8[(HEAP32[$15 + 4 >> 2] | 0) + $16 | 0] = 15;
  HEAP32[5434] = $9;
  $24 = (HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0) - 16 | 0;
  if (($24 | 0) == ($inv | 0)) {
   $42 = $9;
  } else {
   $_01_i_i = $24 ^ $inv;
   $27 = $9;
   while (1) {
    $28 = $27 + 1 | 0;
    $29 = HEAP32[13918] | 0;
    if ($28 >>> 0 > (HEAP32[$29 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($29, $28);
     $35 = HEAP32[5434] | 0;
     $34 = HEAP32[13918] | 0;
    } else {
     $35 = $27;
     $34 = $29;
    }
    HEAP8[(HEAP32[$34 + 4 >> 2] | 0) + $35 | 0] = $_01_i_i;
    HEAP32[5434] = $28;
    $40 = $_01_i_i >>> 8;
    if (($40 | 0) == 0) {
     $42 = $28;
     break;
    } else {
     $_01_i_i = $40;
     $27 = $28;
    }
   }
  }
  $43 = $42 + 4 | 0;
  $44 = HEAP32[13918] | 0;
  if ($43 >>> 0 > (HEAP32[$44 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($44, $43);
   $50 = HEAP32[13918] | 0;
   $49 = HEAP32[5434] | 0;
  } else {
   $50 = $44;
   $49 = $42;
  }
  HEAP32[(HEAP32[$50 + 4 >> 2] | 0) + $49 >> 2] = $t;
  $55 = HEAP32[5434] | 0;
  HEAP32[5434] = $43;
  $_0 = $55;
  $243 = HEAP32[5024] | 0;
  $244 = $243 - 40 | 0;
  HEAP32[5024] = $244;
  return $_0 | 0;
 }
 if (($4 & 62 | 0) == 52) {
  if (($4 & 1 | 0) == ($inv | 0)) {
   $64 = $1 + 16 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if (($65 | 0) == 0) {
    $p_0_lcssa = $64;
   } else {
    $69 = HEAP32[(HEAP32[13918] | 0) + 4 >> 2] | 0;
    $71 = $65;
    while (1) {
     $73 = $69 + $71 | 0;
     $74 = HEAP32[$73 >> 2] | 0;
     if (($74 | 0) == 0) {
      $p_0_lcssa = $73;
      break;
     } else {
      $71 = $74;
     }
    }
   }
   HEAP32[$p_0_lcssa >> 2] = $t;
   $_0 = HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0;
   $243 = HEAP32[5024] | 0;
   $244 = $243 - 40 | 0;
   HEAP32[5024] = $244;
   return $_0 | 0;
  }
  $_pre_i_i = HEAP32[5434] | 0;
  $81 = $_pre_i_i + 1 | 0;
  $82 = HEAP32[13918] | 0;
  if ($81 >>> 0 > (HEAP32[$82 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($82, $81);
   $88 = HEAP32[5434] | 0;
   $87 = HEAP32[13918] | 0;
  } else {
   $88 = $_pre_i_i;
   $87 = $82;
  }
  HEAP8[(HEAP32[$87 + 4 >> 2] | 0) + $88 | 0] = -23;
  HEAP32[5434] = $81;
  $92 = $_pre_i_i + 5 | 0;
  $93 = HEAP32[13918] | 0;
  if ($92 >>> 0 > (HEAP32[$93 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($93, $92);
   $99 = HEAP32[13918] | 0;
   $98 = HEAP32[5434] | 0;
  } else {
   $99 = $93;
   $98 = $81;
  }
  HEAP32[(HEAP32[$99 + 4 >> 2] | 0) + $98 >> 2] = $t;
  $104 = HEAP32[5434] | 0;
  HEAP32[5434] = $92;
  $108 = HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0;
  if (($108 | 0) == 0) {
   $_0 = $104;
   $243 = HEAP32[5024] | 0;
   $244 = $243 - 40 | 0;
   HEAP32[5024] = $244;
   return $_0 | 0;
  } else {
   $_01_i_i5 = $108;
  }
  while (1) {
   $114 = (HEAP32[(HEAP32[13918] | 0) + 4 >> 2] | 0) + $_01_i_i5 | 0;
   $115 = HEAP32[$114 >> 2] | 0;
   HEAP32[$114 >> 2] = $81 - $_01_i_i5;
   if (($115 | 0) == 0) {
    $_0 = $104;
    break;
   } else {
    $_01_i_i5 = $115;
   }
  }
  $243 = HEAP32[5024] | 0;
  $244 = $243 - 40 | 0;
  HEAP32[5024] = $244;
  return $_0 | 0;
 }
 if ((_is_float(HEAP32[$1 >> 2] | 0) | 0) == 0) {
  $124 = HEAP32[5024] | 0;
  if ((HEAP32[$124 >> 2] & 15 | 0) == 12) {
   label = 26;
  } else {
   $131 = $124;
  }
 } else {
  label = 26;
 }
 if ((label | 0) == 26) {
  _vpushi(0);
  _gen_op(149);
  $131 = HEAP32[5024] | 0;
 }
 if ((HEAP16[$131 + 8 >> 1] & 831) == 48) {
  if (((HEAP32[$131 + 16 >> 2] | 0) != 0 | 0) == ($inv | 0)) {
   $_0 = $t;
   $243 = HEAP32[5024] | 0;
   $244 = $243 - 40 | 0;
   HEAP32[5024] = $244;
   return $_0 | 0;
  }
  $_pre_i_i6 = HEAP32[5434] | 0;
  $144 = $_pre_i_i6 + 1 | 0;
  $145 = HEAP32[13918] | 0;
  if ($144 >>> 0 > (HEAP32[$145 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($145, $144);
   $151 = HEAP32[5434] | 0;
   $150 = HEAP32[13918] | 0;
  } else {
   $151 = $_pre_i_i6;
   $150 = $145;
  }
  HEAP8[(HEAP32[$150 + 4 >> 2] | 0) + $151 | 0] = -23;
  HEAP32[5434] = $144;
  $155 = $_pre_i_i6 + 5 | 0;
  $156 = HEAP32[13918] | 0;
  if ($155 >>> 0 > (HEAP32[$156 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($156, $155);
   $162 = HEAP32[13918] | 0;
   $161 = HEAP32[5434] | 0;
  } else {
   $162 = $156;
   $161 = $144;
  }
  HEAP32[(HEAP32[$162 + 4 >> 2] | 0) + $161 >> 2] = $t;
  $167 = HEAP32[5434] | 0;
  HEAP32[5434] = $155;
  $_0 = $167;
  $243 = HEAP32[5024] | 0;
  $244 = $243 - 40 | 0;
  HEAP32[5024] = $244;
  return $_0 | 0;
 }
 $169 = _gv(1) | 0;
 $_pre_i13 = HEAP32[5434] | 0;
 $170 = $_pre_i13 + 1 | 0;
 $171 = HEAP32[13918] | 0;
 if ($170 >>> 0 > (HEAP32[$171 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($171, $170);
  $177 = HEAP32[5434] | 0;
  $176 = HEAP32[13918] | 0;
 } else {
  $177 = $_pre_i13;
  $176 = $171;
 }
 HEAP8[(HEAP32[$176 + 4 >> 2] | 0) + $177 | 0] = -123;
 HEAP32[5434] = $170;
 $182 = ($169 * 9 | 0) + 192 | 0;
 if (($182 | 0) == 0) {
  $200 = $170;
 } else {
  $_01_i17 = $182;
  $185 = $_pre_i13 + 1 | 0;
  while (1) {
   $186 = $185 + 1 | 0;
   $187 = HEAP32[13918] | 0;
   if ($186 >>> 0 > (HEAP32[$187 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($187, $186);
    $193 = HEAP32[5434] | 0;
    $192 = HEAP32[13918] | 0;
   } else {
    $193 = $185;
    $192 = $187;
   }
   HEAP8[(HEAP32[$192 + 4 >> 2] | 0) + $193 | 0] = $_01_i17;
   HEAP32[5434] = $186;
   $198 = $_01_i17 >>> 8;
   if (($198 | 0) == 0) {
    $200 = $186;
    break;
   } else {
    $_01_i17 = $198;
    $185 = $186;
   }
  }
 }
 $201 = $200 + 1 | 0;
 $202 = HEAP32[13918] | 0;
 if ($201 >>> 0 > (HEAP32[$202 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($202, $201);
  $208 = HEAP32[5434] | 0;
  $207 = HEAP32[13918] | 0;
 } else {
  $208 = $200;
  $207 = $202;
 }
 HEAP8[(HEAP32[$207 + 4 >> 2] | 0) + $208 | 0] = 15;
 HEAP32[5434] = $201;
 if (($inv | 0) == 133) {
  $229 = $201;
 } else {
  $_01_i_i26 = $inv ^ 133;
  $214 = $201;
  while (1) {
   $215 = $214 + 1 | 0;
   $216 = HEAP32[13918] | 0;
   if ($215 >>> 0 > (HEAP32[$216 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($216, $215);
    $222 = HEAP32[5434] | 0;
    $221 = HEAP32[13918] | 0;
   } else {
    $222 = $214;
    $221 = $216;
   }
   HEAP8[(HEAP32[$221 + 4 >> 2] | 0) + $222 | 0] = $_01_i_i26;
   HEAP32[5434] = $215;
   $227 = $_01_i_i26 >>> 8;
   if (($227 | 0) == 0) {
    $229 = $215;
    break;
   } else {
    $_01_i_i26 = $227;
    $214 = $215;
   }
  }
 }
 $230 = $229 + 4 | 0;
 $231 = HEAP32[13918] | 0;
 if ($230 >>> 0 > (HEAP32[$231 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($231, $230);
  $237 = HEAP32[13918] | 0;
  $236 = HEAP32[5434] | 0;
 } else {
  $237 = $231;
  $236 = $229;
 }
 HEAP32[(HEAP32[$237 + 4 >> 2] | 0) + $236 >> 2] = $t;
 $242 = HEAP32[5434] | 0;
 HEAP32[5434] = $230;
 $_0 = $242;
 $243 = HEAP32[5024] | 0;
 $244 = $243 - 40 | 0;
 HEAP32[5024] = $244;
 return $_0 | 0;
}
function _tcc_load_dll($s1, $fd, $filename, $level) {
 $s1 = $s1 | 0;
 $fd = $fd | 0;
 $filename = $filename | 0;
 $level = $level | 0;
 var $ehdr = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $dynstr_035 = 0, $dynamic_034 = 0, $dynsym_033 = 0, $nb_dts_032 = 0, $nb_syms_031 = 0, $i_030 = 0, $sh_029 = 0, $25 = 0, $28 = 0, $31 = 0, $32 = 0, $38 = 0, $41 = 0, $42 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $nb_syms_1 = 0, $nb_dts_1 = 0, $dynsym_1 = 0, $dynamic_1 = 0, $dynstr_1 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $nb_syms_0_lcssa53 = 0, $nb_dts_0_lcssa52 = 0, $dynsym_0_lcssa51 = 0, $dynamic_0_lcssa49 = 0, $dynstr_0_lcssa46 = 0, $soname_0_lcssa = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $soname_021 = 0, $dt_020 = 0, $i_119 = 0, $soname_1 = 0, $75 = 0, $i_216 = 0, $82 = 0, $86 = 0, $88 = 0, $94 = 0, $100 = 0, $dynsym_0_lcssa_pn = 0, $i_37 = 0, $sym_09 = 0, $104 = 0, $123 = 0, $dt_14 = 0, $i_43 = 0, $130 = 0, $131 = 0, $133 = 0, $j_01 = 0, $142 = 0, $146 = 0, $ret_0 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56 | 0;
 $ehdr = sp | 0;
 _read($fd | 0, $ehdr | 0, 52) | 0;
 do {
  if ((HEAP8[$ehdr + 5 | 0] | 0) == 1) {
   if ((HEAP16[$ehdr + 18 >> 1] | 0) != 3) {
    break;
   }
   $13 = HEAP32[$ehdr + 32 >> 2] | 0;
   $15 = HEAP16[$ehdr + 48 >> 1] | 0;
   $16 = $15 & 65535;
   $17 = $16 * 40 | 0;
   $18 = _tcc_malloc($17) | 0;
   _lseek($fd | 0, $13 | 0, 0) | 0;
   _read($fd | 0, $18 | 0, $17 | 0) | 0;
   $21 = $18;
   do {
    if ($15 << 16 >> 16 == 0) {
     $soname_0_lcssa = _tcc_basename($filename) | 0;
     $dynstr_0_lcssa46 = 0;
     $dynamic_0_lcssa49 = 0;
     $dynsym_0_lcssa51 = 0;
     $nb_dts_0_lcssa52 = 0;
     $nb_syms_0_lcssa53 = 0;
     $61 = 0;
    } else {
     $sh_029 = $21;
     $i_030 = 0;
     $nb_syms_031 = 0;
     $nb_dts_032 = 0;
     $dynsym_033 = 0;
     $dynamic_034 = 0;
     $dynstr_035 = 0;
     while (1) {
      $25 = HEAP32[$sh_029 + 4 >> 2] | 0;
      if (($25 | 0) == 6) {
       $28 = HEAP32[$sh_029 + 20 >> 2] | 0;
       $31 = HEAP32[$sh_029 + 16 >> 2] | 0;
       $32 = _tcc_malloc($28) | 0;
       _lseek($fd | 0, $31 | 0, 0) | 0;
       _read($fd | 0, $32 | 0, $28 | 0) | 0;
       $dynstr_1 = $dynstr_035;
       $dynamic_1 = $32;
       $dynsym_1 = $dynsym_033;
       $nb_dts_1 = $28 >>> 3;
       $nb_syms_1 = $nb_syms_031;
      } else if (($25 | 0) == 11) {
       $38 = HEAP32[$sh_029 + 20 >> 2] | 0;
       $41 = HEAP32[$sh_029 + 16 >> 2] | 0;
       $42 = _tcc_malloc($38) | 0;
       _lseek($fd | 0, $41 | 0, 0) | 0;
       _read($fd | 0, $42 | 0, $38 | 0) | 0;
       $47 = HEAP32[$sh_029 + 24 >> 2] | 0;
       $49 = HEAP32[$21 + ($47 * 40 | 0) + 16 >> 2] | 0;
       $51 = HEAP32[$21 + ($47 * 40 | 0) + 20 >> 2] | 0;
       $52 = _tcc_malloc($51) | 0;
       _lseek($fd | 0, $49 | 0, 0) | 0;
       _read($fd | 0, $52 | 0, $51 | 0) | 0;
       $dynstr_1 = $52;
       $dynamic_1 = $dynamic_034;
       $dynsym_1 = $42;
       $nb_dts_1 = $nb_dts_032;
       $nb_syms_1 = $38 >>> 4;
      } else {
       $dynstr_1 = $dynstr_035;
       $dynamic_1 = $dynamic_034;
       $dynsym_1 = $dynsym_033;
       $nb_dts_1 = $nb_dts_032;
       $nb_syms_1 = $nb_syms_031;
      }
      $56 = $i_030 + 1 | 0;
      if (($56 | 0) < ($16 | 0)) {
       $sh_029 = $sh_029 + 40 | 0;
       $i_030 = $56;
       $nb_syms_031 = $nb_syms_1;
       $nb_dts_032 = $nb_dts_1;
       $dynsym_033 = $dynsym_1;
       $dynamic_034 = $dynamic_1;
       $dynstr_035 = $dynstr_1;
      } else {
       break;
      }
     }
     $59 = _tcc_basename($filename) | 0;
     $60 = ($nb_dts_1 | 0) > 0;
     if ($60) {
      $i_119 = 0;
      $dt_020 = $dynamic_1;
      $soname_021 = $59;
     } else {
      $soname_0_lcssa = $59;
      $dynstr_0_lcssa46 = $dynstr_1;
      $dynamic_0_lcssa49 = $dynamic_1;
      $dynsym_0_lcssa51 = $dynsym_1;
      $nb_dts_0_lcssa52 = $nb_dts_1;
      $nb_syms_0_lcssa53 = $nb_syms_1;
      $61 = 0;
      break;
     }
     while (1) {
      if ((HEAP32[$dt_020 >> 2] | 0) == 14) {
       $soname_1 = $dynstr_1 + (HEAP32[$dt_020 + 4 >> 2] | 0) | 0;
      } else {
       $soname_1 = $soname_021;
      }
      $75 = $i_119 + 1 | 0;
      if (($75 | 0) < ($nb_dts_1 | 0)) {
       $i_119 = $75;
       $dt_020 = $dt_020 + 8 | 0;
       $soname_021 = $soname_1;
      } else {
       $soname_0_lcssa = $soname_1;
       $dynstr_0_lcssa46 = $dynstr_1;
       $dynamic_0_lcssa49 = $dynamic_1;
       $dynsym_0_lcssa51 = $dynsym_1;
       $nb_dts_0_lcssa52 = $nb_dts_1;
       $nb_syms_0_lcssa53 = $nb_syms_1;
       $61 = $60;
       break;
      }
     }
    }
   } while (0);
   $62 = $s1 + 116 | 0;
   $63 = HEAP32[$62 >> 2] | 0;
   $65 = $s1 + 112 | 0;
   L19 : do {
    if (($63 | 0) > 0) {
     $66 = HEAP32[$65 >> 2] | 0;
     $i_216 = 0;
     while (1) {
      $82 = HEAP32[$66 + ($i_216 << 2) >> 2] | 0;
      $86 = $i_216 + 1 | 0;
      if ((_strcmp($soname_0_lcssa | 0, $82 + 8 | 0) | 0) == 0) {
       break;
      }
      if (($86 | 0) < ($63 | 0)) {
       $i_216 = $86;
      } else {
       label = 20;
       break L19;
      }
     }
     $88 = $82 | 0;
     if ((HEAP32[$88 >> 2] | 0) <= ($level | 0)) {
      $ret_0 = 0;
      break;
     }
     HEAP32[$88 >> 2] = $level;
     $ret_0 = 0;
    } else {
     label = 20;
    }
   } while (0);
   L26 : do {
    if ((label | 0) == 20) {
     $94 = _tcc_mallocz((_strlen($soname_0_lcssa | 0) | 0) + 12 | 0) | 0;
     HEAP32[$94 >> 2] = $level;
     _strcpy($94 + 8 | 0, $soname_0_lcssa | 0) | 0;
     _dynarray_add($65, $62, $94);
     if (($nb_syms_0_lcssa53 | 0) > 1) {
      $100 = $s1 + 2864 | 0;
      $i_37 = 1;
      $dynsym_0_lcssa_pn = $dynsym_0_lcssa51;
      while (1) {
       $sym_09 = $dynsym_0_lcssa_pn + 16 | 0;
       $104 = HEAPU8[$dynsym_0_lcssa_pn + 28 | 0] | 0;
       if (($104 & 240 | 0) != 0) {
        _add_elf_sym(HEAP32[$100 >> 2] | 0, HEAP32[$dynsym_0_lcssa_pn + 20 >> 2] | 0, HEAP32[$dynsym_0_lcssa_pn + 24 >> 2] | 0, $104, HEAPU8[$dynsym_0_lcssa_pn + 29 | 0] | 0, HEAPU16[$dynsym_0_lcssa_pn + 30 >> 1] | 0, $dynstr_0_lcssa46 + (HEAP32[$sym_09 >> 2] | 0) | 0) | 0;
       }
       $123 = $i_37 + 1 | 0;
       if (($123 | 0) < ($nb_syms_0_lcssa53 | 0)) {
        $i_37 = $123;
        $dynsym_0_lcssa_pn = $sym_09;
       } else {
        break;
       }
      }
     }
     if ($61) {
      $i_43 = 0;
      $dt_14 = $dynamic_0_lcssa49;
     } else {
      $ret_0 = 0;
      break;
     }
     L36 : while (1) {
      L38 : do {
       if ((HEAP32[$dt_14 >> 2] | 0) == 1) {
        $130 = $dynstr_0_lcssa46 + (HEAP32[$dt_14 + 4 >> 2] | 0) | 0;
        $131 = HEAP32[$62 >> 2] | 0;
        if (($131 | 0) > 0) {
         $133 = HEAP32[$65 >> 2] | 0;
         $j_01 = 0;
         while (1) {
          $142 = $j_01 + 1 | 0;
          if ((_strcmp($130 | 0, (HEAP32[$133 + ($j_01 << 2) >> 2] | 0) + 8 | 0) | 0) == 0) {
           break L38;
          }
          if (($142 | 0) < ($131 | 0)) {
           $j_01 = $142;
          } else {
           break;
          }
         }
        }
        if ((_tcc_add_dll($s1, $130, 2) | 0) < 0) {
         break L36;
        }
       }
      } while (0);
      $146 = $i_43 + 1 | 0;
      if (($146 | 0) < ($nb_dts_0_lcssa52 | 0)) {
       $i_43 = $146;
       $dt_14 = $dt_14 + 8 | 0;
      } else {
       $ret_0 = 0;
       break L26;
      }
     }
     _tcc_error_noabort(15344, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $130, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $ret_0 = -1;
    }
   } while (0);
   _tcc_free($dynstr_0_lcssa46);
   _tcc_free($dynsym_0_lcssa51);
   _tcc_free($dynamic_0_lcssa49);
   _tcc_free($18);
   $_0 = $ret_0;
   STACKTOP = sp;
   return $_0 | 0;
  }
 } while (0);
 _tcc_error_noabort(15488, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 $_0 = -1;
 STACKTOP = sp;
 return $_0 | 0;
}
function _tcc_delete($s1) {
 $s1 = $s1 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $i_063 = 0, $10 = 0, $11 = 0, $_lcssa61 = 0, $17 = 0, $p_01_i = 0, $18 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $i_154 = 0, $37 = 0, $38 = 0, $_lcssa52 = 0, $44 = 0, $p_01_i3 = 0, $45 = 0, $49 = 0, $51 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $i_248 = 0, $64 = 0, $69 = 0, $70 = 0, $_lcssa46 = 0, $76 = 0, $p_01_i8 = 0, $77 = 0, $81 = 0, $83 = 0, $87 = 0, $88 = 0, $_pr_i11 = 0, $92 = 0, $p_01_i13 = 0, $93 = 0, $97 = 0, $99 = 0, $103 = 0, $104 = 0, $_pr_i16 = 0, $108 = 0, $p_01_i18 = 0, $109 = 0, $113 = 0, $115 = 0, $119 = 0, $120 = 0, $_pr_i21 = 0, $125 = 0, $p_01_i23 = 0, $126 = 0, $130 = 0, $132 = 0, $136 = 0, $137 = 0, $_pr_i26 = 0, $141 = 0, $p_01_i28 = 0, $142 = 0, $146 = 0, $148 = 0, $152 = 0, $153 = 0, $_pr_i31 = 0, $157 = 0, $p_01_i33 = 0, $158 = 0, $162 = 0, $164 = 0, $182 = 0, $183 = 0, $_pr_i36 = 0, $187 = 0, $p_01_i38 = 0, $188 = 0, $192 = 0, $194 = 0, $198 = 0, $199 = 0, $_pr_i41 = 0, $203 = 0, $p_01_i43 = 0, $204 = 0, $208 = 0, $210 = 0, $212 = 0, $213 = 0, $214 = 0;
 _tcc_cleanup();
 $1 = $s1 + 2832 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $4 = $s1 + 2828 | 0;
 if (($2 | 0) > 1) {
  $i_063 = 1;
  while (1) {
   _free(HEAP32[(HEAP32[(HEAP32[$4 >> 2] | 0) + ($i_063 << 2) >> 2] | 0) + 4 >> 2] | 0);
   $10 = $i_063 + 1 | 0;
   $11 = HEAP32[$1 >> 2] | 0;
   if (($10 | 0) < ($11 | 0)) {
    $i_063 = $10;
   } else {
    $_lcssa61 = $11;
    break;
   }
  }
 } else {
  $_lcssa61 = $2;
 }
 if (($_lcssa61 | 0) != 0) {
  $p_01_i = HEAP32[$4 >> 2] | 0;
  $17 = $_lcssa61;
  while (1) {
   $18 = HEAP32[$p_01_i >> 2] | 0;
   if (($18 | 0) == 0) {
    $22 = $17;
   } else {
    _free($18);
    $22 = HEAP32[$1 >> 2] | 0;
   }
   $24 = $22 - 1 | 0;
   HEAP32[$1 >> 2] = $24;
   if (($24 | 0) == 0) {
    break;
   } else {
    $p_01_i = $p_01_i + 4 | 0;
    $17 = $24;
   }
  }
 }
 _free(HEAP32[$4 >> 2] | 0);
 HEAP32[$4 >> 2] = 0;
 $28 = $s1 + 2840 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 $31 = $s1 + 2836 | 0;
 if (($29 | 0) > 0) {
  $i_154 = 0;
  while (1) {
   _free(HEAP32[(HEAP32[(HEAP32[$31 >> 2] | 0) + ($i_154 << 2) >> 2] | 0) + 4 >> 2] | 0);
   $37 = $i_154 + 1 | 0;
   $38 = HEAP32[$28 >> 2] | 0;
   if (($37 | 0) < ($38 | 0)) {
    $i_154 = $37;
   } else {
    $_lcssa52 = $38;
    break;
   }
  }
 } else {
  $_lcssa52 = $29;
 }
 if (($_lcssa52 | 0) != 0) {
  $p_01_i3 = HEAP32[$31 >> 2] | 0;
  $44 = $_lcssa52;
  while (1) {
   $45 = HEAP32[$p_01_i3 >> 2] | 0;
   if (($45 | 0) == 0) {
    $49 = $44;
   } else {
    _free($45);
    $49 = HEAP32[$28 >> 2] | 0;
   }
   $51 = $49 - 1 | 0;
   HEAP32[$28 >> 2] = $51;
   if (($51 | 0) == 0) {
    break;
   } else {
    $p_01_i3 = $p_01_i3 + 4 | 0;
    $44 = $51;
   }
  }
 }
 _free(HEAP32[$31 >> 2] | 0);
 HEAP32[$31 >> 2] = 0;
 $55 = $s1 + 116 | 0;
 $56 = HEAP32[$55 >> 2] | 0;
 $58 = $s1 + 112 | 0;
 if (($56 | 0) > 0) {
  $i_248 = 0;
  $59 = $56;
  while (1) {
   $64 = HEAP32[(HEAP32[(HEAP32[$58 >> 2] | 0) + ($i_248 << 2) >> 2] | 0) + 4 >> 2] | 0;
   if (($64 | 0) == 0) {
    $69 = $59;
   } else {
    _dlclose($64 | 0) | 0;
    $69 = HEAP32[$55 >> 2] | 0;
   }
   $70 = $i_248 + 1 | 0;
   if (($70 | 0) < ($69 | 0)) {
    $i_248 = $70;
    $59 = $69;
   } else {
    $_lcssa46 = $69;
    break;
   }
  }
 } else {
  $_lcssa46 = $56;
 }
 if (($_lcssa46 | 0) != 0) {
  $p_01_i8 = HEAP32[$58 >> 2] | 0;
  $76 = $_lcssa46;
  while (1) {
   $77 = HEAP32[$p_01_i8 >> 2] | 0;
   if (($77 | 0) == 0) {
    $81 = $76;
   } else {
    _free($77);
    $81 = HEAP32[$55 >> 2] | 0;
   }
   $83 = $81 - 1 | 0;
   HEAP32[$55 >> 2] = $83;
   if (($83 | 0) == 0) {
    break;
   } else {
    $p_01_i8 = $p_01_i8 + 4 | 0;
    $76 = $83;
   }
  }
 }
 _free(HEAP32[$58 >> 2] | 0);
 HEAP32[$58 >> 2] = 0;
 $87 = $s1 + 136 | 0;
 $88 = $s1 + 140 | 0;
 $_pr_i11 = HEAP32[$88 >> 2] | 0;
 if (($_pr_i11 | 0) != 0) {
  $p_01_i13 = HEAP32[$87 >> 2] | 0;
  $92 = $_pr_i11;
  while (1) {
   $93 = HEAP32[$p_01_i13 >> 2] | 0;
   if (($93 | 0) == 0) {
    $97 = $92;
   } else {
    _free($93);
    $97 = HEAP32[$88 >> 2] | 0;
   }
   $99 = $97 - 1 | 0;
   HEAP32[$88 >> 2] = $99;
   if (($99 | 0) == 0) {
    break;
   } else {
    $p_01_i13 = $p_01_i13 + 4 | 0;
    $92 = $99;
   }
  }
 }
 _free(HEAP32[$87 >> 2] | 0);
 HEAP32[$87 >> 2] = 0;
 $103 = $s1 + 144 | 0;
 $104 = $s1 + 148 | 0;
 $_pr_i16 = HEAP32[$104 >> 2] | 0;
 if (($_pr_i16 | 0) != 0) {
  $p_01_i18 = HEAP32[$103 >> 2] | 0;
  $108 = $_pr_i16;
  while (1) {
   $109 = HEAP32[$p_01_i18 >> 2] | 0;
   if (($109 | 0) == 0) {
    $113 = $108;
   } else {
    _free($109);
    $113 = HEAP32[$104 >> 2] | 0;
   }
   $115 = $113 - 1 | 0;
   HEAP32[$104 >> 2] = $115;
   if (($115 | 0) == 0) {
    break;
   } else {
    $p_01_i18 = $p_01_i18 + 4 | 0;
    $108 = $115;
   }
  }
 }
 _free(HEAP32[$103 >> 2] | 0);
 HEAP32[$103 >> 2] = 0;
 $119 = $s1 + 2776 | 0;
 $120 = $s1 + 2780 | 0;
 $_pr_i21 = HEAP32[$120 >> 2] | 0;
 if (($_pr_i21 | 0) != 0) {
  $p_01_i23 = HEAP32[$119 >> 2] | 0;
  $125 = $_pr_i21;
  while (1) {
   $126 = HEAP32[$p_01_i23 >> 2] | 0;
   if (($126 | 0) == 0) {
    $130 = $125;
   } else {
    _free($126);
    $130 = HEAP32[$120 >> 2] | 0;
   }
   $132 = $130 - 1 | 0;
   HEAP32[$120 >> 2] = $132;
   if (($132 | 0) == 0) {
    break;
   } else {
    $p_01_i23 = $p_01_i23 + 4 | 0;
    $125 = $132;
   }
  }
 }
 _free(HEAP32[$119 >> 2] | 0);
 HEAP32[$119 >> 2] = 0;
 $136 = $s1 + 120 | 0;
 $137 = $s1 + 124 | 0;
 $_pr_i26 = HEAP32[$137 >> 2] | 0;
 if (($_pr_i26 | 0) != 0) {
  $p_01_i28 = HEAP32[$136 >> 2] | 0;
  $141 = $_pr_i26;
  while (1) {
   $142 = HEAP32[$p_01_i28 >> 2] | 0;
   if (($142 | 0) == 0) {
    $146 = $141;
   } else {
    _free($142);
    $146 = HEAP32[$137 >> 2] | 0;
   }
   $148 = $146 - 1 | 0;
   HEAP32[$137 >> 2] = $148;
   if (($148 | 0) == 0) {
    break;
   } else {
    $p_01_i28 = $p_01_i28 + 4 | 0;
    $141 = $148;
   }
  }
 }
 _free(HEAP32[$136 >> 2] | 0);
 HEAP32[$136 >> 2] = 0;
 $152 = $s1 + 128 | 0;
 $153 = $s1 + 132 | 0;
 $_pr_i31 = HEAP32[$153 >> 2] | 0;
 if (($_pr_i31 | 0) != 0) {
  $p_01_i33 = HEAP32[$152 >> 2] | 0;
  $157 = $_pr_i31;
  while (1) {
   $158 = HEAP32[$p_01_i33 >> 2] | 0;
   if (($158 | 0) == 0) {
    $162 = $157;
   } else {
    _free($158);
    $162 = HEAP32[$153 >> 2] | 0;
   }
   $164 = $162 - 1 | 0;
   HEAP32[$153 >> 2] = $164;
   if (($164 | 0) == 0) {
    break;
   } else {
    $p_01_i33 = $p_01_i33 + 4 | 0;
    $157 = $164;
   }
  }
 }
 _free(HEAP32[$152 >> 2] | 0);
 HEAP32[$152 >> 2] = 0;
 _free(HEAP32[$s1 + 32 >> 2] | 0);
 _free(HEAP32[$s1 + 36 >> 2] | 0);
 _free(HEAP32[$s1 + 40 >> 2] | 0);
 _free(HEAP32[$s1 + 100 >> 2] | 0);
 _free(HEAP32[$s1 + 104 >> 2] | 0);
 _free(HEAP32[$s1 + 2892 >> 2] | 0);
 _free(HEAP32[$s1 + 2916 >> 2] | 0);
 $182 = $s1 + 2880 | 0;
 $183 = $s1 + 2884 | 0;
 $_pr_i36 = HEAP32[$183 >> 2] | 0;
 if (($_pr_i36 | 0) != 0) {
  $p_01_i38 = HEAP32[$182 >> 2] | 0;
  $187 = $_pr_i36;
  while (1) {
   $188 = HEAP32[$p_01_i38 >> 2] | 0;
   if (($188 | 0) == 0) {
    $192 = $187;
   } else {
    _free($188);
    $192 = HEAP32[$183 >> 2] | 0;
   }
   $194 = $192 - 1 | 0;
   HEAP32[$183 >> 2] = $194;
   if (($194 | 0) == 0) {
    break;
   } else {
    $p_01_i38 = $p_01_i38 + 4 | 0;
    $187 = $194;
   }
  }
 }
 _free(HEAP32[$182 >> 2] | 0);
 HEAP32[$182 >> 2] = 0;
 $198 = $s1 + 328 | 0;
 $199 = $s1 + 332 | 0;
 $_pr_i41 = HEAP32[$199 >> 2] | 0;
 if (($_pr_i41 | 0) == 0) {
  $212 = HEAP32[$198 >> 2] | 0;
  $213 = $212;
  _free($213);
  $214 = $s1;
  _free($214);
  return;
 }
 $p_01_i43 = HEAP32[$198 >> 2] | 0;
 $203 = $_pr_i41;
 while (1) {
  $204 = HEAP32[$p_01_i43 >> 2] | 0;
  if (($204 | 0) == 0) {
   $208 = $203;
  } else {
   _free($204);
   $208 = HEAP32[$199 >> 2] | 0;
  }
  $210 = $208 - 1 | 0;
  HEAP32[$199 >> 2] = $210;
  if (($210 | 0) == 0) {
   break;
  } else {
   $p_01_i43 = $p_01_i43 + 4 | 0;
   $203 = $210;
  }
 }
 $212 = HEAP32[$198 >> 2] | 0;
 $213 = $212;
 _free($213);
 $214 = $s1;
 _free($214);
 return;
}
function _inc($post, $c) {
 $post = $post | 0;
 $c = $c | 0;
 var $cval_sroa_2_i = 0, $tmp_i1 = 0, $tmp_i = 0, $1 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $i_01_i = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $i_01_i2 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $53 = 0, $60 = 0, $61 = 0, $62 = 0, $$etemp$5 = 0, $63$1 = 0, $68 = 0, $72 = 0, $73 = 0, $76 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $102 = 0, $109 = 0, $110 = 0, $111 = 0, $$etemp$12 = 0, $112$1 = 0, $117 = 0, $121 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $cval_sroa_2_i = sp | 0;
 $tmp_i1 = sp + 16 | 0;
 $tmp_i = sp + 56 | 0;
 $1 = HEAP32[5024] | 0;
 if ((HEAP16[$1 + 8 >> 1] & 256) == 0) {
  _expect(16680);
  $7 = HEAP32[5024] | 0;
 } else {
  $7 = $1;
 }
 if ($7 >>> 0 < 66472 >>> 0) {
  $10 = $7;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $10 = HEAP32[5024] | 0;
 }
 $11 = $10 + 40 | 0;
 HEAP32[5024] = $11;
 $12 = $11;
 $13 = $7;
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$12 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[$12 + 8 >> 2] = HEAP32[$13 + 8 >> 2];
 HEAP32[$12 + 12 >> 2] = HEAP32[$13 + 12 >> 2];
 HEAP32[$12 + 16 >> 2] = HEAP32[$13 + 16 >> 2];
 HEAP32[$12 + 20 >> 2] = HEAP32[$13 + 20 >> 2];
 HEAP32[$12 + 24 >> 2] = HEAP32[$13 + 24 >> 2];
 HEAP32[$12 + 28 >> 2] = HEAP32[$13 + 28 >> 2];
 HEAP32[$12 + 32 >> 2] = HEAP32[$13 + 32 >> 2];
 HEAP32[$12 + 36 >> 2] = HEAP32[$13 + 36 >> 2];
 if (($post | 0) == 0) {
  $91 = $c - 163 | 0;
  $92 = $cval_sroa_2_i | 0;
  $93 = HEAP32[5024] | 0;
  if ($93 >>> 0 < 66472 >>> 0) {
   $97 = $93;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $97 = HEAP32[5024] | 0;
  }
  do {
   if ($97 >>> 0 < 56272 >>> 0) {
    $109 = $97;
   } else {
    $102 = HEAPU16[$97 + 8 >> 1] | 0;
    if (!(($102 & 63 | 0) == 51 | ($102 & 62 | 0) == 52)) {
     $109 = $97;
     break;
    }
    _gv(1) | 0;
    $109 = HEAP32[5024] | 0;
   }
  } while (0);
  $110 = $109 + 40 | 0;
  HEAP32[5024] = $110;
  $111 = $110;
  $$etemp$12 = 21728;
  $112$1 = HEAP32[$$etemp$12 + 4 >> 2] | 0;
  HEAP32[$111 >> 2] = HEAP32[$$etemp$12 >> 2];
  HEAP32[$111 + 4 >> 2] = $112$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $117 = HEAP32[5024] | 0;
  HEAP32[$117 + 16 >> 2] = $91;
  $121 = $117 + 20 | 0;
  HEAP32[$121 >> 2] = HEAP32[$92 >> 2];
  HEAP32[$121 + 4 >> 2] = HEAP32[$92 + 4 >> 2];
  HEAP32[$121 + 8 >> 2] = HEAP32[$92 + 8 >> 2];
  _gen_op(43);
  _vstore();
  STACKTOP = sp;
  return;
 }
 _gv_dup();
 $16 = $tmp_i;
 $17 = HEAP32[5024] | 0;
 $19 = $17 - 80 | 0;
 HEAP32[$16 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$16 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
 HEAP32[$16 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
 HEAP32[$16 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
 HEAP32[$16 + 16 >> 2] = HEAP32[$19 + 16 >> 2];
 HEAP32[$16 + 20 >> 2] = HEAP32[$19 + 20 >> 2];
 HEAP32[$16 + 24 >> 2] = HEAP32[$19 + 24 >> 2];
 HEAP32[$16 + 28 >> 2] = HEAP32[$19 + 28 >> 2];
 HEAP32[$16 + 32 >> 2] = HEAP32[$19 + 32 >> 2];
 HEAP32[$16 + 36 >> 2] = HEAP32[$19 + 36 >> 2];
 $i_01_i = -2;
 $20 = $17;
 while (1) {
  $22 = $i_01_i + 1 | 0;
  $24 = $20 + ($i_01_i * 40 | 0) | 0;
  $25 = $20 + ($22 * 40 | 0) | 0;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$24 + 4 >> 2] = HEAP32[$25 + 4 >> 2];
  HEAP32[$24 + 8 >> 2] = HEAP32[$25 + 8 >> 2];
  HEAP32[$24 + 12 >> 2] = HEAP32[$25 + 12 >> 2];
  HEAP32[$24 + 16 >> 2] = HEAP32[$25 + 16 >> 2];
  HEAP32[$24 + 20 >> 2] = HEAP32[$25 + 20 >> 2];
  HEAP32[$24 + 24 >> 2] = HEAP32[$25 + 24 >> 2];
  HEAP32[$24 + 28 >> 2] = HEAP32[$25 + 28 >> 2];
  HEAP32[$24 + 32 >> 2] = HEAP32[$25 + 32 >> 2];
  HEAP32[$24 + 36 >> 2] = HEAP32[$25 + 36 >> 2];
  $27 = HEAP32[5024] | 0;
  if (($22 | 0) == 0) {
   break;
  } else {
   $i_01_i = $22;
   $20 = $27;
  }
 }
 $28 = $27;
 HEAP32[$28 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$28 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
 HEAP32[$28 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
 HEAP32[$28 + 12 >> 2] = HEAP32[$16 + 12 >> 2];
 HEAP32[$28 + 16 >> 2] = HEAP32[$16 + 16 >> 2];
 HEAP32[$28 + 20 >> 2] = HEAP32[$16 + 20 >> 2];
 HEAP32[$28 + 24 >> 2] = HEAP32[$16 + 24 >> 2];
 HEAP32[$28 + 28 >> 2] = HEAP32[$16 + 28 >> 2];
 HEAP32[$28 + 32 >> 2] = HEAP32[$16 + 32 >> 2];
 HEAP32[$28 + 36 >> 2] = HEAP32[$16 + 36 >> 2];
 $29 = $tmp_i1;
 $30 = HEAP32[5024] | 0;
 $32 = $30 - 80 | 0;
 HEAP32[$29 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$29 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
 HEAP32[$29 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
 HEAP32[$29 + 12 >> 2] = HEAP32[$32 + 12 >> 2];
 HEAP32[$29 + 16 >> 2] = HEAP32[$32 + 16 >> 2];
 HEAP32[$29 + 20 >> 2] = HEAP32[$32 + 20 >> 2];
 HEAP32[$29 + 24 >> 2] = HEAP32[$32 + 24 >> 2];
 HEAP32[$29 + 28 >> 2] = HEAP32[$32 + 28 >> 2];
 HEAP32[$29 + 32 >> 2] = HEAP32[$32 + 32 >> 2];
 HEAP32[$29 + 36 >> 2] = HEAP32[$32 + 36 >> 2];
 $i_01_i2 = -2;
 $33 = $30;
 while (1) {
  $35 = $i_01_i2 + 1 | 0;
  $37 = $33 + ($i_01_i2 * 40 | 0) | 0;
  $38 = $33 + ($35 * 40 | 0) | 0;
  HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$37 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
  HEAP32[$37 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
  HEAP32[$37 + 12 >> 2] = HEAP32[$38 + 12 >> 2];
  HEAP32[$37 + 16 >> 2] = HEAP32[$38 + 16 >> 2];
  HEAP32[$37 + 20 >> 2] = HEAP32[$38 + 20 >> 2];
  HEAP32[$37 + 24 >> 2] = HEAP32[$38 + 24 >> 2];
  HEAP32[$37 + 28 >> 2] = HEAP32[$38 + 28 >> 2];
  HEAP32[$37 + 32 >> 2] = HEAP32[$38 + 32 >> 2];
  HEAP32[$37 + 36 >> 2] = HEAP32[$38 + 36 >> 2];
  $40 = HEAP32[5024] | 0;
  if (($35 | 0) == 0) {
   break;
  } else {
   $i_01_i2 = $35;
   $33 = $40;
  }
 }
 $41 = $40;
 HEAP32[$41 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$41 + 4 >> 2] = HEAP32[$29 + 4 >> 2];
 HEAP32[$41 + 8 >> 2] = HEAP32[$29 + 8 >> 2];
 HEAP32[$41 + 12 >> 2] = HEAP32[$29 + 12 >> 2];
 HEAP32[$41 + 16 >> 2] = HEAP32[$29 + 16 >> 2];
 HEAP32[$41 + 20 >> 2] = HEAP32[$29 + 20 >> 2];
 HEAP32[$41 + 24 >> 2] = HEAP32[$29 + 24 >> 2];
 HEAP32[$41 + 28 >> 2] = HEAP32[$29 + 28 >> 2];
 HEAP32[$41 + 32 >> 2] = HEAP32[$29 + 32 >> 2];
 HEAP32[$41 + 36 >> 2] = HEAP32[$29 + 36 >> 2];
 $42 = $c - 163 | 0;
 $43 = $cval_sroa_2_i | 0;
 $44 = HEAP32[5024] | 0;
 if ($44 >>> 0 < 66472 >>> 0) {
  $48 = $44;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $48 = HEAP32[5024] | 0;
 }
 do {
  if ($48 >>> 0 < 56272 >>> 0) {
   $60 = $48;
  } else {
   $53 = HEAPU16[$48 + 8 >> 1] | 0;
   if (!(($53 & 63 | 0) == 51 | ($53 & 62 | 0) == 52)) {
    $60 = $48;
    break;
   }
   _gv(1) | 0;
   $60 = HEAP32[5024] | 0;
  }
 } while (0);
 $61 = $60 + 40 | 0;
 HEAP32[5024] = $61;
 $62 = $61;
 $$etemp$5 = 21728;
 $63$1 = HEAP32[$$etemp$5 + 4 >> 2] | 0;
 HEAP32[$62 >> 2] = HEAP32[$$etemp$5 >> 2];
 HEAP32[$62 + 4 >> 2] = $63$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $68 = HEAP32[5024] | 0;
 HEAP32[$68 + 16 >> 2] = $42;
 $72 = $68 + 20 | 0;
 HEAP32[$72 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$72 + 4 >> 2] = HEAP32[$43 + 4 >> 2];
 HEAP32[$72 + 8 >> 2] = HEAP32[$43 + 8 >> 2];
 _gen_op(43);
 _vstore();
 $73 = HEAP32[5024] | 0;
 $76 = HEAPU16[$73 + 8 >> 1] | 0;
 do {
  if (($76 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
   if (($76 & 62 | 0) != 52) {
    break;
   }
   _gsym(HEAP32[$73 + 16 >> 2] | 0);
  } else {
   _o(55517);
  }
 } while (0);
 HEAP32[5024] = (HEAP32[5024] | 0) - 40;
 STACKTOP = sp;
 return;
}
function _minp() {
 var $2 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $_pre2_i_i_i = 0, $20 = 0, $len_0_i_i_i = 0, $24 = 0, $26 = 0, $27 = 0, $_0_i_i_i = 0, $33 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $_pre2_i_i_i10 = 0, $54 = 0, $len_0_i_i_i12 = 0, $58 = 0, $60 = 0, $61 = 0, $_0_i_i_i16 = 0, $67 = 0, $70 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $89 = 0, $_pre2_i_i_i19 = 0, $92 = 0, $len_0_i_i_i21 = 0, $96 = 0, $98 = 0, $99 = 0, $_0_i_i_i25 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $122 = 0, $_pre2_i_i_i28 = 0, $125 = 0, $len_0_i_i_i30 = 0, $129 = 0, $131 = 0, $132 = 0, $_0_i_i_i34 = 0, $138 = 0, $142 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $161 = 0, $_pre2_i_i_i1 = 0, $164 = 0, $len_0_i_i_i3 = 0, $168 = 0, $170 = 0, $171 = 0, $_0_i_i_i7 = 0, $177 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[13912] | 0;
 $4 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = HEAP8[$4] | 0;
 $6 = $5 & 255;
 HEAP32[13924] = $6;
 if ($5 << 24 >> 24 == 92) {
  $9 = HEAP32[13912] | 0;
  $10 = $9 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $9 + 4 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($11 >>> 0 < $13 >>> 0) {
   $27 = $11;
   $26 = $13;
  } else {
   $17 = HEAP32[$9 + 8 >> 2] | 0;
   $_pre2_i_i_i = $9 + 1056 | 0;
   if (($17 | 0) == -1) {
    $len_0_i_i_i = 0;
   } else {
    $20 = _read($17 | 0, $_pre2_i_i_i | 0, 8192) | 0;
    $len_0_i_i_i = ($20 | 0) < 0 ? 0 : $20;
   }
   HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i;
   HEAP32[$10 >> 2] = $_pre2_i_i_i;
   $24 = $9 + 1056 + $len_0_i_i_i | 0;
   HEAP32[$12 >> 2] = $24;
   HEAP8[$24] = 92;
   $27 = HEAP32[$10 >> 2] | 0;
   $26 = HEAP32[$12 >> 2] | 0;
  }
  if ($27 >>> 0 < $26 >>> 0) {
   $_0_i_i_i = HEAPU8[$27] | 0;
  } else {
   HEAP32[$10 >> 2] = $26;
   $_0_i_i_i = -1;
  }
  HEAP32[13924] = $_0_i_i_i;
  $33 = $_0_i_i_i;
 } else {
  $33 = $6;
 }
 if (($33 | 0) != 92) {
  STACKTOP = sp;
  return;
 }
 L16 : while (1) {
  $36 = HEAP32[13912] | 0;
  $38 = (HEAP32[$36 >> 2] | 0) + 1 | 0;
  HEAP32[$36 >> 2] = $38;
  $39 = HEAP8[$38] | 0;
  $40 = $39 & 255;
  HEAP32[13924] = $40;
  if ($39 << 24 >> 24 == 92) {
   $43 = HEAP32[13912] | 0;
   $44 = $43 | 0;
   $45 = HEAP32[$44 >> 2] | 0;
   $46 = $43 + 4 | 0;
   $47 = HEAP32[$46 >> 2] | 0;
   if ($45 >>> 0 < $47 >>> 0) {
    $61 = $45;
    $60 = $47;
   } else {
    $51 = HEAP32[$43 + 8 >> 2] | 0;
    $_pre2_i_i_i10 = $43 + 1056 | 0;
    if (($51 | 0) == -1) {
     $len_0_i_i_i12 = 0;
    } else {
     $54 = _read($51 | 0, $_pre2_i_i_i10 | 0, 8192) | 0;
     $len_0_i_i_i12 = ($54 | 0) < 0 ? 0 : $54;
    }
    HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i12;
    HEAP32[$44 >> 2] = $_pre2_i_i_i10;
    $58 = $43 + 1056 + $len_0_i_i_i12 | 0;
    HEAP32[$46 >> 2] = $58;
    HEAP8[$58] = 92;
    $61 = HEAP32[$44 >> 2] | 0;
    $60 = HEAP32[$46 >> 2] | 0;
   }
   if ($61 >>> 0 < $60 >>> 0) {
    $_0_i_i_i16 = HEAPU8[$61] | 0;
   } else {
    HEAP32[$44 >> 2] = $60;
    $_0_i_i_i16 = -1;
   }
   HEAP32[13924] = $_0_i_i_i16;
   $67 = $_0_i_i_i16;
  } else {
   $67 = $40;
  }
  do {
   if (($67 | 0) == 10) {
    $70 = (HEAP32[13912] | 0) + 16 | 0;
    HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + 1;
    $74 = HEAP32[13912] | 0;
    $76 = (HEAP32[$74 >> 2] | 0) + 1 | 0;
    HEAP32[$74 >> 2] = $76;
    $77 = HEAP8[$76] | 0;
    $78 = $77 & 255;
    HEAP32[13924] = $78;
    if ($77 << 24 >> 24 != 92) {
     $177 = $78;
     break;
    }
    $81 = HEAP32[13912] | 0;
    $82 = $81 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = $81 + 4 | 0;
    $85 = HEAP32[$84 >> 2] | 0;
    if ($83 >>> 0 < $85 >>> 0) {
     $99 = $83;
     $98 = $85;
    } else {
     $89 = HEAP32[$81 + 8 >> 2] | 0;
     $_pre2_i_i_i19 = $81 + 1056 | 0;
     if (($89 | 0) == -1) {
      $len_0_i_i_i21 = 0;
     } else {
      $92 = _read($89 | 0, $_pre2_i_i_i19 | 0, 8192) | 0;
      $len_0_i_i_i21 = ($92 | 0) < 0 ? 0 : $92;
     }
     HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i21;
     HEAP32[$82 >> 2] = $_pre2_i_i_i19;
     $96 = $81 + 1056 + $len_0_i_i_i21 | 0;
     HEAP32[$84 >> 2] = $96;
     HEAP8[$96] = 92;
     $99 = HEAP32[$82 >> 2] | 0;
     $98 = HEAP32[$84 >> 2] | 0;
    }
    if ($99 >>> 0 < $98 >>> 0) {
     $_0_i_i_i25 = HEAPU8[$99] | 0;
    } else {
     HEAP32[$82 >> 2] = $98;
     $_0_i_i_i25 = -1;
    }
    HEAP32[13924] = $_0_i_i_i25;
    $177 = $_0_i_i_i25;
   } else if (($67 | 0) == 13) {
    $107 = HEAP32[13912] | 0;
    $109 = (HEAP32[$107 >> 2] | 0) + 1 | 0;
    HEAP32[$107 >> 2] = $109;
    $110 = HEAP8[$109] | 0;
    $111 = $110 & 255;
    HEAP32[13924] = $111;
    if ($110 << 24 >> 24 == 92) {
     $114 = HEAP32[13912] | 0;
     $115 = $114 | 0;
     $116 = HEAP32[$115 >> 2] | 0;
     $117 = $114 + 4 | 0;
     $118 = HEAP32[$117 >> 2] | 0;
     if ($116 >>> 0 < $118 >>> 0) {
      $132 = $116;
      $131 = $118;
     } else {
      $122 = HEAP32[$114 + 8 >> 2] | 0;
      $_pre2_i_i_i28 = $114 + 1056 | 0;
      if (($122 | 0) == -1) {
       $len_0_i_i_i30 = 0;
      } else {
       $125 = _read($122 | 0, $_pre2_i_i_i28 | 0, 8192) | 0;
       $len_0_i_i_i30 = ($125 | 0) < 0 ? 0 : $125;
      }
      HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i30;
      HEAP32[$115 >> 2] = $_pre2_i_i_i28;
      $129 = $114 + 1056 + $len_0_i_i_i30 | 0;
      HEAP32[$117 >> 2] = $129;
      HEAP8[$129] = 92;
      $132 = HEAP32[$115 >> 2] | 0;
      $131 = HEAP32[$117 >> 2] | 0;
     }
     if ($132 >>> 0 < $131 >>> 0) {
      $_0_i_i_i34 = HEAPU8[$132] | 0;
     } else {
      HEAP32[$115 >> 2] = $131;
      $_0_i_i_i34 = -1;
     }
     HEAP32[13924] = $_0_i_i_i34;
     $138 = $_0_i_i_i34;
    } else {
     $138 = $111;
    }
    if (($138 | 0) != 10) {
     break L16;
    }
    $142 = (HEAP32[13912] | 0) + 16 | 0;
    HEAP32[$142 >> 2] = (HEAP32[$142 >> 2] | 0) + 1;
    $146 = HEAP32[13912] | 0;
    $148 = (HEAP32[$146 >> 2] | 0) + 1 | 0;
    HEAP32[$146 >> 2] = $148;
    $149 = HEAP8[$148] | 0;
    $150 = $149 & 255;
    HEAP32[13924] = $150;
    if ($149 << 24 >> 24 != 92) {
     $177 = $150;
     break;
    }
    $153 = HEAP32[13912] | 0;
    $154 = $153 | 0;
    $155 = HEAP32[$154 >> 2] | 0;
    $156 = $153 + 4 | 0;
    $157 = HEAP32[$156 >> 2] | 0;
    if ($155 >>> 0 < $157 >>> 0) {
     $171 = $155;
     $170 = $157;
    } else {
     $161 = HEAP32[$153 + 8 >> 2] | 0;
     $_pre2_i_i_i1 = $153 + 1056 | 0;
     if (($161 | 0) == -1) {
      $len_0_i_i_i3 = 0;
     } else {
      $164 = _read($161 | 0, $_pre2_i_i_i1 | 0, 8192) | 0;
      $len_0_i_i_i3 = ($164 | 0) < 0 ? 0 : $164;
     }
     HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i_i3;
     HEAP32[$154 >> 2] = $_pre2_i_i_i1;
     $168 = $153 + 1056 + $len_0_i_i_i3 | 0;
     HEAP32[$156 >> 2] = $168;
     HEAP8[$168] = 92;
     $171 = HEAP32[$154 >> 2] | 0;
     $170 = HEAP32[$156 >> 2] | 0;
    }
    if ($171 >>> 0 < $170 >>> 0) {
     $_0_i_i_i7 = HEAPU8[$171] | 0;
    } else {
     HEAP32[$154 >> 2] = $170;
     $_0_i_i_i7 = -1;
    }
    HEAP32[13924] = $_0_i_i_i7;
    $177 = $_0_i_i_i7;
   } else {
    break L16;
   }
  } while (0);
  if (($177 | 0) != 92) {
   label = 51;
   break;
  }
 }
 if ((label | 0) == 51) {
  STACKTOP = sp;
  return;
 }
 _tcc_error(12352, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 STACKTOP = sp;
 return;
}
function _gen_cvt_itof($t) {
 $t = $t | 0;
 var $2 = 0, $4 = 0, $_pre_i = 0, $indvars_iv = 0, $14 = 0, $_01_i = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $27 = 0, $indvars_iv72 = 0, $36 = 0, $_01_i2 = 0, $37 = 0, $38 = 0, $43 = 0, $44 = 0, $49 = 0, $51 = 0, $_01_i8 = 0, $52 = 0, $53 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $_01_i14 = 0, $67 = 0, $68 = 0, $73 = 0, $74 = 0, $79 = 0, $_pre_i19 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $97 = 0, $98 = 0, $103 = 0, $104 = 0, $indvars_iv76 = 0, $116 = 0, $_01_i27 = 0, $117 = 0, $118 = 0, $123 = 0, $124 = 0, $129 = 0, $131 = 0, $_01_i33 = 0, $132 = 0, $133 = 0, $138 = 0, $139 = 0, $144 = 0, $146 = 0, $_01_i39 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $159 = 0, $_pre_i44 = 0, $indvars_iv82 = 0, $169 = 0, $_01_i45 = 0, $170 = 0, $171 = 0, $176 = 0, $177 = 0, $182 = 0, $184 = 0, $_01_i51 = 0, $185 = 0, $186 = 0, $191 = 0, $192 = 0, $197 = 0, $199 = 0, $_01_i57 = 0, $200 = 0, $201 = 0, $206 = 0, $207 = 0, $212 = 0, $214 = 0, $215 = 0;
 _save_reg(3);
 _gv(1) | 0;
 $2 = HEAP32[5024] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 if (($4 & 15 | 0) == 12) {
  $_pre_i = HEAP32[5434] | 0;
  $_01_i = (HEAPU16[$2 + 10 >> 1] | 0) + 80 | 0;
  $14 = $_pre_i;
  $indvars_iv = $_pre_i + 5 | 0;
  while (1) {
   $15 = $14 + 1 | 0;
   $16 = HEAP32[13918] | 0;
   if ($15 >>> 0 > (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($16, $15);
    $22 = HEAP32[5434] | 0;
    $21 = HEAP32[13918] | 0;
   } else {
    $22 = $14;
    $21 = $16;
   }
   HEAP8[(HEAP32[$21 + 4 >> 2] | 0) + $22 | 0] = $_01_i;
   HEAP32[5434] = $15;
   $27 = $_01_i >>> 8;
   if (($27 | 0) == 0) {
    break;
   } else {
    $_01_i = $27;
    $14 = $15;
    $indvars_iv = $indvars_iv + 1 | 0;
   }
  }
  $_01_i2 = (HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 63) + 80 | 0;
  $36 = $15;
  $indvars_iv72 = $indvars_iv;
  while (1) {
   $37 = $36 + 1 | 0;
   $38 = HEAP32[13918] | 0;
   if ($37 >>> 0 > (HEAP32[$38 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($38, $37);
    $44 = HEAP32[5434] | 0;
    $43 = HEAP32[13918] | 0;
   } else {
    $44 = $36;
    $43 = $38;
   }
   HEAP8[(HEAP32[$43 + 4 >> 2] | 0) + $44 | 0] = $_01_i2;
   HEAP32[5434] = $37;
   $49 = $_01_i2 >>> 8;
   if (($49 | 0) == 0) {
    $_01_i8 = 2370783;
    $51 = $37;
    break;
   } else {
    $_01_i2 = $49;
    $36 = $37;
    $indvars_iv72 = $indvars_iv72 + 1 | 0;
   }
  }
  while (1) {
   $52 = $51 + 1 | 0;
   $53 = HEAP32[13918] | 0;
   if ($52 >>> 0 > (HEAP32[$53 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($53, $52);
    $59 = HEAP32[5434] | 0;
    $58 = HEAP32[13918] | 0;
   } else {
    $59 = $51;
    $58 = $53;
   }
   HEAP8[(HEAP32[$58 + 4 >> 2] | 0) + $59 | 0] = $_01_i8;
   HEAP32[5434] = $52;
   $64 = $_01_i8 >>> 8;
   if (($64 | 0) == 0) {
    $_01_i14 = 574595;
    $66 = $indvars_iv72;
    break;
   } else {
    $_01_i8 = $64;
    $51 = $52;
   }
  }
  while (1) {
   $67 = $66 + 1 | 0;
   $68 = HEAP32[13918] | 0;
   if ($67 >>> 0 > (HEAP32[$68 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($68, $67);
    $74 = HEAP32[5434] | 0;
    $73 = HEAP32[13918] | 0;
   } else {
    $74 = $66;
    $73 = $68;
   }
   HEAP8[(HEAP32[$73 + 4 >> 2] | 0) + $74 | 0] = $_01_i14;
   HEAP32[5434] = $67;
   $79 = $_01_i14 >>> 8;
   if (($79 | 0) == 0) {
    break;
   } else {
    $_01_i14 = $79;
    $66 = $67;
   }
  }
  $214 = HEAP32[5024] | 0;
  $215 = $214 + 8 | 0;
  HEAP16[$215 >> 1] = 3;
  return;
 }
 if (($4 & 31 | 0) != 16) {
  $_pre_i44 = HEAP32[5434] | 0;
  $_01_i45 = (HEAP16[$2 + 8 >> 1] & 63) + 80 | 0;
  $169 = $_pre_i44;
  $indvars_iv82 = $_pre_i44 + 4 | 0;
  while (1) {
   $170 = $169 + 1 | 0;
   $171 = HEAP32[13918] | 0;
   if ($170 >>> 0 > (HEAP32[$171 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($171, $170);
    $177 = HEAP32[5434] | 0;
    $176 = HEAP32[13918] | 0;
   } else {
    $177 = $169;
    $176 = $171;
   }
   HEAP8[(HEAP32[$176 + 4 >> 2] | 0) + $177 | 0] = $_01_i45;
   HEAP32[5434] = $170;
   $182 = $_01_i45 >>> 8;
   if (($182 | 0) == 0) {
    $_01_i51 = 2360539;
    $184 = $170;
    break;
   } else {
    $_01_i45 = $182;
    $169 = $170;
    $indvars_iv82 = $indvars_iv82 + 1 | 0;
   }
  }
  while (1) {
   $185 = $184 + 1 | 0;
   $186 = HEAP32[13918] | 0;
   if ($185 >>> 0 > (HEAP32[$186 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($186, $185);
    $192 = HEAP32[5434] | 0;
    $191 = HEAP32[13918] | 0;
   } else {
    $192 = $184;
    $191 = $186;
   }
   HEAP8[(HEAP32[$191 + 4 >> 2] | 0) + $192 | 0] = $_01_i51;
   HEAP32[5434] = $185;
   $197 = $_01_i51 >>> 8;
   if (($197 | 0) == 0) {
    $_01_i57 = 312451;
    $199 = $indvars_iv82;
    break;
   } else {
    $_01_i51 = $197;
    $184 = $185;
   }
  }
  while (1) {
   $200 = $199 + 1 | 0;
   $201 = HEAP32[13918] | 0;
   if ($200 >>> 0 > (HEAP32[$201 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($201, $200);
    $207 = HEAP32[5434] | 0;
    $206 = HEAP32[13918] | 0;
   } else {
    $207 = $199;
    $206 = $201;
   }
   HEAP8[(HEAP32[$206 + 4 >> 2] | 0) + $207 | 0] = $_01_i57;
   HEAP32[5434] = $200;
   $212 = $_01_i57 >>> 8;
   if (($212 | 0) == 0) {
    break;
   } else {
    $_01_i57 = $212;
    $199 = $200;
   }
  }
  $214 = HEAP32[5024] | 0;
  $215 = $214 + 8 | 0;
  HEAP16[$215 >> 1] = 3;
  return;
 }
 $_pre_i19 = HEAP32[5434] | 0;
 $85 = $_pre_i19 + 1 | 0;
 $86 = HEAP32[13918] | 0;
 if ($85 >>> 0 > (HEAP32[$86 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($86, $85);
  $92 = HEAP32[5434] | 0;
  $91 = HEAP32[13918] | 0;
 } else {
  $92 = $_pre_i19;
  $91 = $86;
 }
 HEAP8[(HEAP32[$91 + 4 >> 2] | 0) + $92 | 0] = 106;
 HEAP32[5434] = $85;
 $97 = $_pre_i19 + 2 | 0;
 $98 = HEAP32[13918] | 0;
 if ($97 >>> 0 > (HEAP32[$98 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($98, $97);
  $104 = HEAP32[5434] | 0;
  $103 = HEAP32[13918] | 0;
 } else {
  $104 = $_pre_i19 + 1 | 0;
  $103 = $98;
 }
 HEAP8[(HEAP32[$103 + 4 >> 2] | 0) + $104 | 0] = 0;
 HEAP32[5434] = $97;
 $_01_i27 = (HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 63) + 80 | 0;
 $116 = $97;
 $indvars_iv76 = $_pre_i19 + 6 | 0;
 while (1) {
  $117 = $116 + 1 | 0;
  $118 = HEAP32[13918] | 0;
  if ($117 >>> 0 > (HEAP32[$118 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($118, $117);
   $124 = HEAP32[5434] | 0;
   $123 = HEAP32[13918] | 0;
  } else {
   $124 = $116;
   $123 = $118;
  }
  HEAP8[(HEAP32[$123 + 4 >> 2] | 0) + $124 | 0] = $_01_i27;
  HEAP32[5434] = $117;
  $129 = $_01_i27 >>> 8;
  if (($129 | 0) == 0) {
   $_01_i33 = 2370783;
   $131 = $117;
   break;
  } else {
   $_01_i27 = $129;
   $116 = $117;
   $indvars_iv76 = $indvars_iv76 + 1 | 0;
  }
 }
 while (1) {
  $132 = $131 + 1 | 0;
  $133 = HEAP32[13918] | 0;
  if ($132 >>> 0 > (HEAP32[$133 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($133, $132);
   $139 = HEAP32[5434] | 0;
   $138 = HEAP32[13918] | 0;
  } else {
   $139 = $131;
   $138 = $133;
  }
  HEAP8[(HEAP32[$138 + 4 >> 2] | 0) + $139 | 0] = $_01_i33;
  HEAP32[5434] = $132;
  $144 = $_01_i33 >>> 8;
  if (($144 | 0) == 0) {
   $_01_i39 = 574595;
   $146 = $indvars_iv76;
   break;
  } else {
   $_01_i33 = $144;
   $131 = $132;
  }
 }
 while (1) {
  $147 = $146 + 1 | 0;
  $148 = HEAP32[13918] | 0;
  if ($147 >>> 0 > (HEAP32[$148 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($148, $147);
   $154 = HEAP32[5434] | 0;
   $153 = HEAP32[13918] | 0;
  } else {
   $154 = $146;
   $153 = $148;
  }
  HEAP8[(HEAP32[$153 + 4 >> 2] | 0) + $154 | 0] = $_01_i39;
  HEAP32[5434] = $147;
  $159 = $_01_i39 >>> 8;
  if (($159 | 0) == 0) {
   break;
  } else {
   $_01_i39 = $159;
   $146 = $147;
  }
 }
 $214 = HEAP32[5024] | 0;
 $215 = $214 + 8 | 0;
 HEAP16[$215 >> 1] = 3;
 return;
}
function _get_tok_str($v, $cv) {
 $v = $v | 0;
 $cv = $cv | 0;
 var $6 = 0, $7$1 = 0, $9 = 0, $14 = 0, $15 = 0, $16 = 0, $size_0_i_i17 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $size_0_i_i23 = 0, $36 = 0, $37 = 0, $41 = 0, $44 = 0, $46 = 0, $i_055 = 0, $_pre = 0, $_pre69 = 0, $55 = 0, $57 = 0, $58 = 0, $size_0_i_i29 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $77 = 0, $79 = 0, $81 = 0, $i_157 = 0, $91 = 0, $93 = 0, $i_261 = 0, $101 = 0, $102 = 0, $103 = 0, $size_0_i_i47 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $size_0_i_i = 0, $123 = 0, $124 = 0, $extract_t = 0, $133 = 0, $136 = 0, $q_053 = 0, $141 = 0, $_01_off0 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[13634] = 0;
 HEAP32[13635] = 54552;
 HEAP32[13636] = 1025;
 L1 : do {
  switch ($v | 0) {
  case 156:
   {
    $_01_off0 = 60;
    label = 53;
    break;
   }
  case 184:
   {
    HEAP8[54552] = 76;
    HEAP32[13634] = 1;
    $70 = 1;
    label = 26;
    break;
   }
  case 181:
   {
    $70 = 0;
    label = 26;
    break;
   }
  case 159:
   {
    $_01_off0 = 62;
    label = 53;
    break;
   }
  case 204:
   {
    HEAP32[13638] = 3026478;
    $_0 = 54552;
    STACKTOP = sp;
    return $_0 | 0;
   }
  case 129:
   {
    HEAP32[13638] = 4013116;
    $_0 = 54552;
    STACKTOP = sp;
    return $_0 | 0;
   }
  case 130:
   {
    HEAP32[13638] = 4013630;
    $_0 = 54552;
    STACKTOP = sp;
    return $_0 | 0;
   }
  case 179:
  case 200:
   {
    _sprintf(54552, 17456, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$cv >> 2], tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    break;
   }
  case 201:
  case 202:
   {
    $6 = $cv;
    $7$1 = HEAP32[$6 + 4 >> 2] | 0;
    _sprintf(54552, 15960, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$6 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $7$1, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    break;
   }
  case 183:
   {
    HEAP8[54552] = 76;
    HEAP32[13634] = 1;
    $9 = 1;
    label = 5;
    break;
   }
  case 180:
   {
    $9 = 0;
    label = 5;
    break;
   }
  case 206:
   {
    $41 = HEAP32[$cv >> 2] | 0;
    $44 = (HEAP32[$41 >> 2] | 0) - 1 | 0;
    do {
     if (($44 | 0) > 0) {
      $46 = $41 + 4 | 0;
      $i_055 = 0;
      do {
       _add_char(HEAPU8[(HEAP32[$46 >> 2] | 0) + $i_055 | 0] | 0);
       $i_055 = $i_055 + 1 | 0;
      } while (($i_055 | 0) < ($44 | 0));
      $_pre = HEAP32[13634] | 0;
      $_pre69 = HEAP32[13636] | 0;
      $55 = $_pre + 1 | 0;
      if (($_pre | 0) < ($_pre69 | 0)) {
       $58 = $_pre;
       $57 = $55;
       label = 20;
       break;
      }
      $size_0_i_i29 = ($_pre69 | 0) == 0 ? 8 : $_pre69;
      while (1) {
       if (($size_0_i_i29 | 0) < ($55 | 0)) {
        $size_0_i_i29 = $size_0_i_i29 << 1;
       } else {
        break;
       }
      }
      $65 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i29) | 0;
      HEAP32[13637] = $65;
      HEAP32[13636] = $size_0_i_i29;
      HEAP32[13635] = $65;
      $68 = $65;
      $67 = $_pre;
      $66 = $55;
     } else {
      $58 = 0;
      $57 = 1;
      label = 20;
     }
    } while (0);
    if ((label | 0) == 20) {
     $68 = HEAP32[13635] | 0;
     $67 = $58;
     $66 = $57;
    }
    HEAP8[$68 + $67 | 0] = 0;
    HEAP32[13634] = $66;
    break;
   }
  default:
   {
    if (($v | 0) < 256) {
     $extract_t = $v & 255;
     $q_053 = 48;
     $136 = 60;
     while (1) {
      $141 = $q_053 + 3 | 0;
      if ((HEAPU8[$q_053 + 2 | 0] | 0 | 0) == ($v | 0)) {
       break;
      }
      $133 = HEAP8[$141] | 0;
      if ($133 << 24 >> 24 == 0) {
       $_01_off0 = $extract_t;
       label = 53;
       break L1;
      } else {
       $q_053 = $141;
       $136 = $133;
      }
     }
     HEAP8[54552] = $136;
     HEAP8[54553] = HEAP8[$q_053 + 1 | 0] | 0;
     HEAP8[54554] = 0;
     $_0 = 54552;
     STACKTOP = sp;
     return $_0 | 0;
    }
    if ((HEAP32[5306] | 0) > ($v | 0)) {
     $_0 = (HEAP32[(HEAP32[5316] | 0) + ($v - 256 << 2) >> 2] | 0) + 28 | 0;
     STACKTOP = sp;
     return $_0 | 0;
    }
    if (($v | 0) > 268435455) {
     _sprintf(54552, 11888, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $v - 268435456, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     break L1;
    } else {
     $_0 = 0;
     STACKTOP = sp;
     return $_0 | 0;
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP8[54552 + $9 | 0] = 39;
  HEAP32[13634] = $9 + 1;
  _add_char(HEAP32[$cv >> 2] | 0);
  $14 = HEAP32[13634] | 0;
  $15 = $14 + 1 | 0;
  $16 = HEAP32[13636] | 0;
  if (($14 | 0) < ($16 | 0)) {
   $25 = HEAP32[13635] | 0;
  } else {
   $size_0_i_i17 = ($16 | 0) == 0 ? 8 : $16;
   while (1) {
    if (($size_0_i_i17 | 0) < ($15 | 0)) {
     $size_0_i_i17 = $size_0_i_i17 << 1;
    } else {
     break;
    }
   }
   $24 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i17) | 0;
   HEAP32[13637] = $24;
   HEAP32[13636] = $size_0_i_i17;
   HEAP32[13635] = $24;
   $25 = $24;
  }
  HEAP8[$25 + $14 | 0] = 39;
  HEAP32[13634] = $15;
  $27 = $14 + 2 | 0;
  $28 = HEAP32[13636] | 0;
  if (($15 | 0) < ($28 | 0)) {
   $37 = HEAP32[13635] | 0;
  } else {
   $size_0_i_i23 = ($28 | 0) == 0 ? 8 : $28;
   while (1) {
    if (($size_0_i_i23 | 0) < ($27 | 0)) {
     $size_0_i_i23 = $size_0_i_i23 << 1;
    } else {
     break;
    }
   }
   $36 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i23) | 0;
   HEAP32[13637] = $36;
   HEAP32[13636] = $size_0_i_i23;
   HEAP32[13635] = $36;
   $37 = $36;
  }
  HEAP8[$37 + $15 | 0] = 0;
  HEAP32[13634] = $27;
 } else if ((label | 0) == 26) {
  $72 = HEAP32[$cv >> 2] | 0;
  HEAP8[54552 + $70 | 0] = 34;
  HEAP32[13634] = $70 + 1;
  $77 = HEAP32[$72 >> 2] | 0;
  do {
   if (($v | 0) == 181) {
    $79 = $77 - 1 | 0;
    if (($79 | 0) <= 0) {
     break;
    }
    $81 = $72 + 4 | 0;
    $i_157 = 0;
    do {
     _add_char(HEAPU8[(HEAP32[$81 >> 2] | 0) + $i_157 | 0] | 0);
     $i_157 = $i_157 + 1 | 0;
    } while (($i_157 | 0) < ($79 | 0));
   } else {
    $91 = ($77 >>> 2) - 1 | 0;
    if (($91 | 0) <= 0) {
     break;
    }
    $93 = $72 + 4 | 0;
    $i_261 = 0;
    do {
     _add_char(HEAP32[(HEAP32[$93 >> 2] | 0) + ($i_261 << 2) >> 2] | 0);
     $i_261 = $i_261 + 1 | 0;
    } while (($i_261 | 0) < ($91 | 0));
   }
  } while (0);
  $101 = HEAP32[13634] | 0;
  $102 = $101 + 1 | 0;
  $103 = HEAP32[13636] | 0;
  if (($101 | 0) < ($103 | 0)) {
   $112 = HEAP32[13635] | 0;
  } else {
   $size_0_i_i47 = ($103 | 0) == 0 ? 8 : $103;
   while (1) {
    if (($size_0_i_i47 | 0) < ($102 | 0)) {
     $size_0_i_i47 = $size_0_i_i47 << 1;
    } else {
     break;
    }
   }
   $111 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i47) | 0;
   HEAP32[13637] = $111;
   HEAP32[13636] = $size_0_i_i47;
   HEAP32[13635] = $111;
   $112 = $111;
  }
  HEAP8[$112 + $101 | 0] = 34;
  HEAP32[13634] = $102;
  $114 = $101 + 2 | 0;
  $115 = HEAP32[13636] | 0;
  if (($102 | 0) < ($115 | 0)) {
   $124 = HEAP32[13635] | 0;
  } else {
   $size_0_i_i = ($115 | 0) == 0 ? 8 : $115;
   while (1) {
    if (($size_0_i_i | 0) < ($114 | 0)) {
     $size_0_i_i = $size_0_i_i << 1;
    } else {
     break;
    }
   }
   $123 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i) | 0;
   HEAP32[13637] = $123;
   HEAP32[13636] = $size_0_i_i;
   HEAP32[13635] = $123;
   $124 = $123;
  }
  HEAP8[$124 + $102 | 0] = 0;
  HEAP32[13634] = $114;
 } else if ((label | 0) == 53) {
  HEAP8[54552] = $_01_off0;
  HEAP8[54553] = 0;
 }
 $_0 = HEAP32[13635] | 0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _decl_designator($type, $sec, $c, $cur_index, $cur_field, $size_only) {
 $type = $type | 0;
 $sec = $sec | 0;
 $c = $c | 0;
 $cur_index = $cur_index | 0;
 $cur_field = $cur_field | 0;
 $size_only = $size_only | 0;
 var $align = 0, $type1 = 0, $tmpcast = 0, $4 = 0, $notfirst_0_ph = 0, $nb_elems_0_ph = 0, $elem_size_0_ph = 0, $_06_ph = 0, $_0_ph = 0, $10 = 0, $notfirst_0 = 0, $nb_elems_0 = 0, $elem_size_0 = 0, $_06 = 0, $_0 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $34 = 0, $38 = 0, $index_last_0 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $54 = 0, $notfirst_1 = 0, $l_0 = 0, $nb_elems_1 = 0, $elem_size_1 = 0, $_17 = 0, $_1 = 0, $56 = 0, $64 = 0, $_pn = 0, $f_0 = 0, $f_026 = 0, $75 = 0, $76$0 = 0, $76$1 = 0, $86 = 0, $_319 = 0, $_3918 = 0, $elem_size_317 = 0, $nb_elems_315 = 0, $94 = 0, $99 = 0, $102 = 0, $107 = 0, $112 = 0, $113$0 = 0, $113$1 = 0, $elem_size_316 = 0, $nb_elems_314 = 0, $_410 = 0, $_4 = 0, $129 = 0, $136 = 0, $i_021 = 0, $dst_020 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $align = sp | 0;
 $type1 = sp + 8 | 0;
 $tmpcast = $type1;
 do {
  if ((HEAP32[1888] | 0) == 0) {
   $_0_ph = $type;
   $_06_ph = $c;
   $elem_size_0_ph = 0;
   $nb_elems_0_ph = 1;
   $notfirst_0_ph = 0;
   label = 6;
  } else {
   $4 = HEAP32[5310] | 0;
   if (($4 | 0) < 313) {
    $_0 = $type;
    $_06 = $c;
    $elem_size_0 = 0;
    $nb_elems_0 = 1;
    $notfirst_0 = 0;
    $10 = $4;
    label = 7;
    break;
   }
   _next();
   if ((HEAP32[5310] | 0) == 58) {
    _next();
    $_1 = $type;
    $_17 = $c;
    $elem_size_1 = 0;
    $nb_elems_1 = 1;
    $l_0 = $4;
    $notfirst_1 = 0;
    label = 22;
    break;
   } else {
    _unget_tok($4);
    $_0_ph = $type;
    $_06_ph = $c;
    $elem_size_0_ph = 0;
    $nb_elems_0_ph = 1;
    $notfirst_0_ph = 0;
    label = 6;
    break;
   }
  }
 } while (0);
 while (1) {
  if ((label | 0) == 6) {
   label = 0;
   $_0 = $_0_ph;
   $_06 = $_06_ph;
   $elem_size_0 = $elem_size_0_ph;
   $nb_elems_0 = $nb_elems_0_ph;
   $notfirst_0 = $notfirst_0_ph;
   $10 = HEAP32[5310] | 0;
   label = 7;
   continue;
  } else if ((label | 0) == 7) {
   label = 0;
   if (($10 | 0) == 46) {
    _next();
    $54 = HEAP32[5310] | 0;
    _next();
    $_1 = $_0;
    $_17 = $_06;
    $elem_size_1 = $elem_size_0;
    $nb_elems_1 = $nb_elems_0;
    $l_0 = $54;
    $notfirst_1 = $notfirst_0;
    label = 22;
    continue;
   } else if (($10 | 0) != 91) {
    label = 31;
    break;
   }
   if ((HEAP32[$_0 >> 2] & 32 | 0) == 0) {
    _expect(14400);
   }
   $18 = $_0 + 4 | 0;
   $19 = HEAP32[$18 >> 2] | 0;
   _next();
   $20 = _expr_const() | 0;
   if (($20 | 0) < 0) {
    label = 12;
   } else {
    $24 = HEAP32[$19 + 12 >> 2] | 0;
    if (!(($24 | 0) < 0 | ($20 | 0) < ($24 | 0))) {
     label = 12;
    }
   }
   if ((label | 0) == 12) {
    label = 0;
    _expect(14304);
   }
   do {
    if ((HEAP32[5310] | 0) == 204 & (HEAP32[1888] | 0) != 0) {
     _next();
     $34 = _expr_const() | 0;
     if (($34 | 0) >= 0) {
      $38 = HEAP32[$19 + 12 >> 2] | 0;
      if (!(($34 | 0) >= ($38 | 0) & ($38 | 0) > -1 | ($34 | 0) < ($20 | 0))) {
       $index_last_0 = $34;
       break;
      }
     }
     _expect(14304);
     $index_last_0 = $34;
    } else {
     $index_last_0 = $20;
    }
   } while (0);
   _skip(93);
   if (($notfirst_0 | 0) == 0) {
    HEAP32[$cur_index >> 2] = $index_last_0;
   }
   $46 = (HEAP32[$18 >> 2] | 0) + 16 | 0;
   $47 = _type_size($46, $align) | 0;
   $49 = (Math_imul($47, $20) | 0) + $_06 | 0;
   $51 = $index_last_0 - $20 + 1 | 0;
   if (($index_last_0 | 0) == ($20 | 0)) {
    $_0_ph = $46;
    $_06_ph = $49;
    $elem_size_0_ph = $47;
    $nb_elems_0_ph = $51;
    $notfirst_0_ph = 1;
    label = 6;
    continue;
   } else {
    label = 20;
    break;
   }
  } else if ((label | 0) == 22) {
   label = 0;
   $56 = $_1 | 0;
   if ((HEAP32[$56 >> 2] & 15 | 0) != 7) {
    _expect(14232);
   }
   $64 = $l_0 | 536870912;
   $_pn = HEAP32[$_1 + 4 >> 2] | 0;
   while (1) {
    $f_0 = HEAP32[$_pn + 24 >> 2] | 0;
    if (($f_0 | 0) == 0) {
     label = 27;
     break;
    }
    if ((HEAP32[$f_0 >> 2] | 0) == ($64 | 0)) {
     $f_026 = $f_0;
     break;
    } else {
     $_pn = $f_0;
    }
   }
   if ((label | 0) == 27) {
    label = 0;
    _expect(14144);
    $f_026 = 0;
   }
   if (($notfirst_1 | 0) == 0) {
    HEAP32[$cur_field >> 2] = $f_026;
   }
   $75 = $f_026 + 16 | 0;
   $76$0 = HEAP32[$75 >> 2] | 0;
   $76$1 = HEAP32[$75 + 4 >> 2] | 0;
   HEAP32[$type1 >> 2] = $76$0;
   HEAP32[$type1 + 4 >> 2] = $76$1;
   HEAP32[$type1 >> 2] = $76$0 | HEAP32[$56 >> 2] & 116608;
   $_0_ph = $tmpcast;
   $_06_ph = (HEAP32[$f_026 + 12 >> 2] | 0) + $_17 | 0;
   $elem_size_0_ph = $elem_size_1;
   $nb_elems_0_ph = $nb_elems_1;
   $notfirst_0_ph = 1;
   label = 6;
   continue;
  }
 }
 do {
  if ((label | 0) == 20) {
   $nb_elems_315 = $51;
   $elem_size_317 = $47;
   $_3918 = $49;
   $_319 = $46;
   $86 = HEAP32[5310] | 0;
   label = 32;
  } else if ((label | 0) == 31) {
   if (($notfirst_0 | 0) != 0) {
    $nb_elems_315 = $nb_elems_0;
    $elem_size_317 = $elem_size_0;
    $_3918 = $_06;
    $_319 = $_0;
    $86 = $10;
    label = 32;
    break;
   }
   $94 = $_0 | 0;
   if ((HEAP32[$94 >> 2] & 32 | 0) != 0) {
    $99 = HEAP32[$cur_index >> 2] | 0;
    $102 = (HEAP32[$_0 + 4 >> 2] | 0) + 16 | 0;
    $_4 = $102;
    $_410 = (Math_imul(_type_size($102, $align) | 0, $99) | 0) + $_06 | 0;
    $nb_elems_314 = $nb_elems_0;
    $elem_size_316 = $elem_size_0;
    break;
   }
   $107 = HEAP32[$cur_field >> 2] | 0;
   if (($107 | 0) == 0) {
    _tcc_error(13992, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $112 = $107 + 16 | 0;
   $113$0 = HEAP32[$112 >> 2] | 0;
   $113$1 = HEAP32[$112 + 4 >> 2] | 0;
   HEAP32[$type1 >> 2] = $113$0;
   HEAP32[$type1 + 4 >> 2] = $113$1;
   HEAP32[$type1 >> 2] = $113$0 | HEAP32[$94 >> 2] & 116608;
   $_4 = $tmpcast;
   $_410 = (HEAP32[$107 + 12 >> 2] | 0) + $_06 | 0;
   $nb_elems_314 = $nb_elems_0;
   $elem_size_316 = $elem_size_0;
  }
 } while (0);
 do {
  if ((label | 0) == 32) {
   if (($86 | 0) == 61) {
    _next();
    $_4 = $_319;
    $_410 = $_3918;
    $nb_elems_314 = $nb_elems_315;
    $elem_size_316 = $elem_size_317;
    break;
   }
   if ((HEAP32[1888] | 0) != 0) {
    $_4 = $_319;
    $_410 = $_3918;
    $nb_elems_314 = $nb_elems_315;
    $elem_size_316 = $elem_size_317;
    break;
   }
   _expect(14112);
   $_4 = $_319;
   $_410 = $_3918;
   $nb_elems_314 = $nb_elems_315;
   $elem_size_316 = $elem_size_317;
  }
 } while (0);
 _decl_initializer($_4, $sec, $_410, 0, $size_only);
 if (!(($size_only | 0) == 0 & ($nb_elems_314 | 0) > 1)) {
  STACKTOP = sp;
  return;
 }
 if (($sec | 0) == 0) {
  _tcc_error(13896, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 $129 = $_410 + (Math_imul($nb_elems_314, $elem_size_316) | 0) | 0;
 if ($129 >>> 0 > (HEAP32[$sec + 8 >> 2] | 0) >>> 0) {
  _section_realloc($sec, $129);
 }
 $136 = (HEAP32[$sec + 4 >> 2] | 0) + $_410 | 0;
 $dst_020 = $136;
 $i_021 = 1;
 do {
  $dst_020 = $dst_020 + $elem_size_316 | 0;
  _memcpy($dst_020 | 0, $136 | 0, $elem_size_316) | 0;
  $i_021 = $i_021 + 1 | 0;
 } while (($i_021 | 0) < ($nb_elems_314 | 0));
 STACKTOP = sp;
 return;
}
function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $12 = 0, $13 = 0, $31 = 0, $49 = 0, $52 = 0, $66 = 0, $69 = 0, $83 = 0, $91 = 0, $storemerge27 = 0, $storemerge = 0, $100 = 0, $103 = 0, $104 = 0, $109 = 0, $112 = 0, $115 = 0, $136 = 0, $_pre_phi = 0, $141 = 0, $144 = 0, $147 = 0, $152 = 0, $156 = 0, $160 = 0, $166 = 0, $167 = 0, $171 = 0, $172 = 0, $RP_0 = 0, $R_0 = 0, $174 = 0, $175 = 0, $178 = 0, $179 = 0, $R_1 = 0, $190 = 0, $192 = 0, $206 = 0, $223 = 0, $236 = 0, $255 = 0, $269 = 0, $newp_0 = 0;
 $1 = $p + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 & -8;
 $4 = $p;
 $5 = $4 + $3 | 0;
 $6 = $5;
 $7 = HEAP32[13944] | 0;
 $8 = $2 & 3;
 if (!(($8 | 0) != 1 & $4 >>> 0 >= $7 >>> 0 & $4 >>> 0 < $5 >>> 0)) {
  _abort();
  return 0;
 }
 $12 = $4 + ($3 | 4) | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (($13 & 1 | 0) == 0) {
  _abort();
  return 0;
 }
 if (($8 | 0) == 0) {
  if ($nb >>> 0 < 256 >>> 0) {
   $newp_0 = 0;
   return $newp_0 | 0;
  }
  do {
   if ($3 >>> 0 >= ($nb + 4 | 0) >>> 0) {
    if (($3 - $nb | 0) >>> 0 > HEAP32[5344] << 1 >>> 0) {
     break;
    } else {
     $newp_0 = $p;
    }
    return $newp_0 | 0;
   }
  } while (0);
  $newp_0 = 0;
  return $newp_0 | 0;
 }
 if ($3 >>> 0 >= $nb >>> 0) {
  $31 = $3 - $nb | 0;
  if ($31 >>> 0 <= 15 >>> 0) {
   $newp_0 = $p;
   return $newp_0 | 0;
  }
  HEAP32[$1 >> 2] = $2 & 1 | $nb | 2;
  HEAP32[$4 + ($nb + 4) >> 2] = $31 | 3;
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 1;
  _dispose_chunk($4 + $nb | 0, $31);
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 if (($6 | 0) == (HEAP32[13946] | 0)) {
  $49 = (HEAP32[13943] | 0) + $3 | 0;
  if ($49 >>> 0 <= $nb >>> 0) {
   $newp_0 = 0;
   return $newp_0 | 0;
  }
  $52 = $49 - $nb | 0;
  HEAP32[$1 >> 2] = $2 & 1 | $nb | 2;
  HEAP32[$4 + ($nb + 4) >> 2] = $52 | 1;
  HEAP32[13946] = $4 + $nb;
  HEAP32[13943] = $52;
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 if (($6 | 0) == (HEAP32[13945] | 0)) {
  $66 = (HEAP32[13942] | 0) + $3 | 0;
  if ($66 >>> 0 < $nb >>> 0) {
   $newp_0 = 0;
   return $newp_0 | 0;
  }
  $69 = $66 - $nb | 0;
  if ($69 >>> 0 > 15 >>> 0) {
   HEAP32[$1 >> 2] = $2 & 1 | $nb | 2;
   HEAP32[$4 + ($nb + 4) >> 2] = $69 | 1;
   HEAP32[$4 + $66 >> 2] = $69;
   $83 = $4 + ($66 + 4) | 0;
   HEAP32[$83 >> 2] = HEAP32[$83 >> 2] & -2;
   $storemerge = $4 + $nb | 0;
   $storemerge27 = $69;
  } else {
   HEAP32[$1 >> 2] = $2 & 1 | $66 | 2;
   $91 = $4 + ($66 + 4) | 0;
   HEAP32[$91 >> 2] = HEAP32[$91 >> 2] | 1;
   $storemerge = 0;
   $storemerge27 = 0;
  }
  HEAP32[13942] = $storemerge27;
  HEAP32[13945] = $storemerge;
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 if (($13 & 2 | 0) != 0) {
  $newp_0 = 0;
  return $newp_0 | 0;
 }
 $100 = ($13 & -8) + $3 | 0;
 if ($100 >>> 0 < $nb >>> 0) {
  $newp_0 = 0;
  return $newp_0 | 0;
 }
 $103 = $100 - $nb | 0;
 $104 = $13 >>> 3;
 L49 : do {
  if ($13 >>> 0 < 256 >>> 0) {
   $109 = HEAP32[$4 + ($3 + 8) >> 2] | 0;
   $112 = HEAP32[$4 + ($3 + 12) >> 2] | 0;
   $115 = 55800 + ($104 << 1 << 2) | 0;
   do {
    if (($109 | 0) != ($115 | 0)) {
     if ($109 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     }
     if ((HEAP32[$109 + 12 >> 2] | 0) == ($6 | 0)) {
      break;
     }
     _abort();
     return 0;
    }
   } while (0);
   if (($112 | 0) == ($109 | 0)) {
    HEAP32[13940] = HEAP32[13940] & ~(1 << $104);
    break;
   }
   do {
    if (($112 | 0) == ($115 | 0)) {
     $_pre_phi = $112 + 8 | 0;
    } else {
     if ($112 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     }
     $136 = $112 + 8 | 0;
     if ((HEAP32[$136 >> 2] | 0) == ($6 | 0)) {
      $_pre_phi = $136;
      break;
     }
     _abort();
     return 0;
    }
   } while (0);
   HEAP32[$109 + 12 >> 2] = $112;
   HEAP32[$_pre_phi >> 2] = $109;
  } else {
   $141 = $5;
   $144 = HEAP32[$4 + ($3 + 24) >> 2] | 0;
   $147 = HEAP32[$4 + ($3 + 12) >> 2] | 0;
   do {
    if (($147 | 0) == ($141 | 0)) {
     $166 = $4 + ($3 + 20) | 0;
     $167 = HEAP32[$166 >> 2] | 0;
     if (($167 | 0) == 0) {
      $171 = $4 + ($3 + 16) | 0;
      $172 = HEAP32[$171 >> 2] | 0;
      if (($172 | 0) == 0) {
       $R_1 = 0;
       break;
      } else {
       $R_0 = $172;
       $RP_0 = $171;
      }
     } else {
      $R_0 = $167;
      $RP_0 = $166;
     }
     while (1) {
      $174 = $R_0 + 20 | 0;
      $175 = HEAP32[$174 >> 2] | 0;
      if (($175 | 0) != 0) {
       $R_0 = $175;
       $RP_0 = $174;
       continue;
      }
      $178 = $R_0 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (($179 | 0) == 0) {
       break;
      } else {
       $R_0 = $179;
       $RP_0 = $178;
      }
     }
     if ($RP_0 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$RP_0 >> 2] = 0;
      $R_1 = $R_0;
      break;
     }
    } else {
     $152 = HEAP32[$4 + ($3 + 8) >> 2] | 0;
     if ($152 >>> 0 < $7 >>> 0) {
      _abort();
      return 0;
     }
     $156 = $152 + 12 | 0;
     if ((HEAP32[$156 >> 2] | 0) != ($141 | 0)) {
      _abort();
      return 0;
     }
     $160 = $147 + 8 | 0;
     if ((HEAP32[$160 >> 2] | 0) == ($141 | 0)) {
      HEAP32[$156 >> 2] = $147;
      HEAP32[$160 >> 2] = $152;
      $R_1 = $147;
      break;
     } else {
      _abort();
      return 0;
     }
    }
   } while (0);
   if (($144 | 0) == 0) {
    break;
   }
   $190 = $4 + ($3 + 28) | 0;
   $192 = 56064 + (HEAP32[$190 >> 2] << 2) | 0;
   do {
    if (($141 | 0) == (HEAP32[$192 >> 2] | 0)) {
     HEAP32[$192 >> 2] = $R_1;
     if (($R_1 | 0) != 0) {
      break;
     }
     HEAP32[13941] = HEAP32[13941] & ~(1 << HEAP32[$190 >> 2]);
     break L49;
    } else {
     if ($144 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
      return 0;
     }
     $206 = $144 + 16 | 0;
     if ((HEAP32[$206 >> 2] | 0) == ($141 | 0)) {
      HEAP32[$206 >> 2] = $R_1;
     } else {
      HEAP32[$144 + 20 >> 2] = $R_1;
     }
     if (($R_1 | 0) == 0) {
      break L49;
     }
    }
   } while (0);
   if ($R_1 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
    _abort();
    return 0;
   }
   HEAP32[$R_1 + 24 >> 2] = $144;
   $223 = HEAP32[$4 + ($3 + 16) >> 2] | 0;
   do {
    if (($223 | 0) != 0) {
     if ($223 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
      _abort();
      return 0;
     } else {
      HEAP32[$R_1 + 16 >> 2] = $223;
      HEAP32[$223 + 24 >> 2] = $R_1;
      break;
     }
    }
   } while (0);
   $236 = HEAP32[$4 + ($3 + 20) >> 2] | 0;
   if (($236 | 0) == 0) {
    break;
   }
   if ($236 >>> 0 < (HEAP32[13944] | 0) >>> 0) {
    _abort();
    return 0;
   } else {
    HEAP32[$R_1 + 20 >> 2] = $236;
    HEAP32[$236 + 24 >> 2] = $R_1;
    break;
   }
  }
 } while (0);
 if ($103 >>> 0 < 16 >>> 0) {
  HEAP32[$1 >> 2] = $100 | HEAP32[$1 >> 2] & 1 | 2;
  $255 = $4 + ($100 | 4) | 0;
  HEAP32[$255 >> 2] = HEAP32[$255 >> 2] | 1;
  $newp_0 = $p;
  return $newp_0 | 0;
 } else {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & 1 | $nb | 2;
  HEAP32[$4 + ($nb + 4) >> 2] = $103 | 3;
  $269 = $4 + ($100 | 4) | 0;
  HEAP32[$269 >> 2] = HEAP32[$269 >> 2] | 1;
  _dispose_chunk($4 + $nb | 0, $103);
  $newp_0 = $p;
  return $newp_0 | 0;
 }
 return 0;
}
function _parse_line_comment($p) {
 $p = $p | 0;
 var $_0 = 0, $_1 = 0, $c_0 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $15 = 0, $_pre2_i_i = 0, $18 = 0, $len_0_i_i = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $_pre2_i_i2 = 0, $53 = 0, $len_0_i_i4 = 0, $57 = 0, $59 = 0, $60 = 0, $_0_i_i8 = 0, $66 = 0, $70 = 0, $_2 = 0, $c_1 = 0, $72 = 0, $75 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $89 = 0, $_pre2_i_i10 = 0, $92 = 0, $len_0_i_i12 = 0, $96 = 0, $98 = 0, $99 = 0, $106 = 0, $107 = 0, $108 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $120 = 0, $_pre2_i_i18 = 0, $123 = 0, $len_0_i_i20 = 0, $127 = 0, $129 = 0, $130 = 0, $_0_i_i24 = 0, $136 = 0, $140 = 0, $_3 = 0, $c_2 = 0, $143 = 0, $146 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $160 = 0, $_pre2_i_i26 = 0, $163 = 0, $len_0_i_i28 = 0, $167 = 0, $169 = 0, $170 = 0, label = 0;
 $_0 = $p + 1 | 0;
 L1 : while (1) {
  $c_0 = HEAPU8[$_0] | 0;
  $_1 = $_0;
  while (1) {
   if (($c_0 | 0) == (-1 | 0) | ($c_0 | 0) == 10) {
    break L1;
   } else if (($c_0 | 0) != 92) {
    label = 47;
    break;
   }
   HEAP32[HEAP32[13912] >> 2] = $_1;
   $7 = HEAP32[13912] | 0;
   $8 = $7 | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $10 = $7 + 4 | 0;
   $11 = HEAP32[$10 >> 2] | 0;
   if ($9 >>> 0 < $11 >>> 0) {
    $25 = $9;
    $24 = $11;
   } else {
    $15 = HEAP32[$7 + 8 >> 2] | 0;
    $_pre2_i_i = $7 + 1056 | 0;
    if (($15 | 0) == -1) {
     $len_0_i_i = 0;
    } else {
     $18 = _read($15 | 0, $_pre2_i_i | 0, 8192) | 0;
     $len_0_i_i = ($18 | 0) < 0 ? 0 : $18;
    }
    HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i;
    HEAP32[$8 >> 2] = $_pre2_i_i;
    $22 = $7 + 1056 + $len_0_i_i | 0;
    HEAP32[$10 >> 2] = $22;
    HEAP8[$22] = 92;
    $25 = HEAP32[$8 >> 2] | 0;
    $24 = HEAP32[$10 >> 2] | 0;
   }
   if ($25 >>> 0 < $24 >>> 0) {
    $30 = HEAP8[$25] | 0;
    $32 = HEAP32[13912] | 0;
    $33 = $32 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    if ($30 << 24 >> 24 == 92) {
     break;
    } else {
     $c_0 = $30 & 255;
     $_1 = $34;
     continue;
    }
   } else {
    HEAP32[$8 >> 2] = $24;
    $c_0 = -1;
    $_1 = HEAP32[HEAP32[13912] >> 2] | 0;
    continue;
   }
  }
  if ((label | 0) == 47) {
   label = 0;
   $_0 = $_1 + 1 | 0;
   continue;
  }
  $37 = $34 + 1 | 0;
  $38 = HEAP8[$37] | 0;
  $39 = $38 & 255;
  if ($38 << 24 >> 24 == 92) {
   HEAP32[$33 >> 2] = $37;
   $42 = HEAP32[13912] | 0;
   $43 = $42 | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   $45 = $42 + 4 | 0;
   $46 = HEAP32[$45 >> 2] | 0;
   if ($44 >>> 0 < $46 >>> 0) {
    $60 = $44;
    $59 = $46;
   } else {
    $50 = HEAP32[$42 + 8 >> 2] | 0;
    $_pre2_i_i2 = $42 + 1056 | 0;
    if (($50 | 0) == -1) {
     $len_0_i_i4 = 0;
    } else {
     $53 = _read($50 | 0, $_pre2_i_i2 | 0, 8192) | 0;
     $len_0_i_i4 = ($53 | 0) < 0 ? 0 : $53;
    }
    HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i4;
    HEAP32[$43 >> 2] = $_pre2_i_i2;
    $57 = $42 + 1056 + $len_0_i_i4 | 0;
    HEAP32[$45 >> 2] = $57;
    HEAP8[$57] = 92;
    $60 = HEAP32[$43 >> 2] | 0;
    $59 = HEAP32[$45 >> 2] | 0;
   }
   if ($60 >>> 0 < $59 >>> 0) {
    $_0_i_i8 = HEAPU8[$60] | 0;
   } else {
    HEAP32[$43 >> 2] = $59;
    $_0_i_i8 = -1;
   }
   $66 = HEAP32[13912] | 0;
   $c_1 = $_0_i_i8;
   $_2 = HEAP32[$66 >> 2] | 0;
   $70 = $66;
  } else {
   $c_1 = $39;
   $_2 = $37;
   $70 = $32;
  }
  if (($c_1 | 0) == 10) {
   $72 = $70 + 16 | 0;
   HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + 1;
   $75 = $_2 + 1 | 0;
   if ((HEAP8[$75] | 0) != 92) {
    $_0 = $75;
    continue;
   }
   HEAP32[HEAP32[13912] >> 2] = $75;
   $81 = HEAP32[13912] | 0;
   $82 = $81 | 0;
   $83 = HEAP32[$82 >> 2] | 0;
   $84 = $81 + 4 | 0;
   $85 = HEAP32[$84 >> 2] | 0;
   if ($83 >>> 0 < $85 >>> 0) {
    $99 = $83;
    $98 = $85;
   } else {
    $89 = HEAP32[$81 + 8 >> 2] | 0;
    $_pre2_i_i10 = $81 + 1056 | 0;
    if (($89 | 0) == -1) {
     $len_0_i_i12 = 0;
    } else {
     $92 = _read($89 | 0, $_pre2_i_i10 | 0, 8192) | 0;
     $len_0_i_i12 = ($92 | 0) < 0 ? 0 : $92;
    }
    HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i12;
    HEAP32[$82 >> 2] = $_pre2_i_i10;
    $96 = $81 + 1056 + $len_0_i_i12 | 0;
    HEAP32[$84 >> 2] = $96;
    HEAP8[$96] = 92;
    $99 = HEAP32[$82 >> 2] | 0;
    $98 = HEAP32[$84 >> 2] | 0;
   }
   if ($99 >>> 0 >= $98 >>> 0) {
    HEAP32[$82 >> 2] = $98;
   }
   $_0 = HEAP32[HEAP32[13912] >> 2] | 0;
   continue;
  } else if (($c_1 | 0) != 13) {
   $_0 = $_2;
   continue;
  }
  $106 = $_2 + 1 | 0;
  $107 = HEAP8[$106] | 0;
  $108 = $107 & 255;
  if ($107 << 24 >> 24 == 92) {
   HEAP32[$70 >> 2] = $106;
   $112 = HEAP32[13912] | 0;
   $113 = $112 | 0;
   $114 = HEAP32[$113 >> 2] | 0;
   $115 = $112 + 4 | 0;
   $116 = HEAP32[$115 >> 2] | 0;
   if ($114 >>> 0 < $116 >>> 0) {
    $130 = $114;
    $129 = $116;
   } else {
    $120 = HEAP32[$112 + 8 >> 2] | 0;
    $_pre2_i_i18 = $112 + 1056 | 0;
    if (($120 | 0) == -1) {
     $len_0_i_i20 = 0;
    } else {
     $123 = _read($120 | 0, $_pre2_i_i18 | 0, 8192) | 0;
     $len_0_i_i20 = ($123 | 0) < 0 ? 0 : $123;
    }
    HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i20;
    HEAP32[$113 >> 2] = $_pre2_i_i18;
    $127 = $112 + 1056 + $len_0_i_i20 | 0;
    HEAP32[$115 >> 2] = $127;
    HEAP8[$127] = 92;
    $130 = HEAP32[$113 >> 2] | 0;
    $129 = HEAP32[$115 >> 2] | 0;
   }
   if ($130 >>> 0 < $129 >>> 0) {
    $_0_i_i24 = HEAPU8[$130] | 0;
   } else {
    HEAP32[$113 >> 2] = $129;
    $_0_i_i24 = -1;
   }
   $136 = HEAP32[13912] | 0;
   $c_2 = $_0_i_i24;
   $_3 = HEAP32[$136 >> 2] | 0;
   $140 = $136;
  } else {
   $c_2 = $108;
   $_3 = $106;
   $140 = $70;
  }
  if (($c_2 | 0) != 10) {
   $_0 = $_3;
   continue;
  }
  $143 = $140 + 16 | 0;
  HEAP32[$143 >> 2] = (HEAP32[$143 >> 2] | 0) + 1;
  $146 = $_3 + 1 | 0;
  if ((HEAP8[$146] | 0) != 92) {
   $_0 = $146;
   continue;
  }
  HEAP32[HEAP32[13912] >> 2] = $146;
  $152 = HEAP32[13912] | 0;
  $153 = $152 | 0;
  $154 = HEAP32[$153 >> 2] | 0;
  $155 = $152 + 4 | 0;
  $156 = HEAP32[$155 >> 2] | 0;
  if ($154 >>> 0 < $156 >>> 0) {
   $170 = $154;
   $169 = $156;
  } else {
   $160 = HEAP32[$152 + 8 >> 2] | 0;
   $_pre2_i_i26 = $152 + 1056 | 0;
   if (($160 | 0) == -1) {
    $len_0_i_i28 = 0;
   } else {
    $163 = _read($160 | 0, $_pre2_i_i26 | 0, 8192) | 0;
    $len_0_i_i28 = ($163 | 0) < 0 ? 0 : $163;
   }
   HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i28;
   HEAP32[$153 >> 2] = $_pre2_i_i26;
   $167 = $152 + 1056 + $len_0_i_i28 | 0;
   HEAP32[$155 >> 2] = $167;
   HEAP8[$167] = 92;
   $170 = HEAP32[$153 >> 2] | 0;
   $169 = HEAP32[$155 >> 2] | 0;
  }
  if ($170 >>> 0 >= $169 >>> 0) {
   HEAP32[$153 >> 2] = $169;
  }
  $_0 = HEAP32[HEAP32[13912] >> 2] | 0;
 }
 return $_1 | 0;
}
function _gen_cvt_ftoi($t) {
 $t = $t | 0;
 var $ushort_type = 0, $4 = 0, $6 = 0, $_01_i = 0, $7 = 0, $8 = 0, $13 = 0, $14 = 0, $19 = 0, $_ = 0, $21 = 0, $_pre_i1 = 0, $24 = 0, $25 = 0, $_01_i_i = 0, $26 = 0, $27 = 0, $32 = 0, $33 = 0, $38 = 0, $40 = 0, $41 = 0, $46 = 0, $47 = 0, $52 = 0, $_01_i3 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $65 = 0, $67 = 0, $_01_i9 = 0, $68 = 0, $69 = 0, $74 = 0, $75 = 0, $80 = 0, $_pre_i14 = 0, $82 = 0, $83 = 0, $88 = 0, $89 = 0, $94 = 0, $_01_i21 = 0, $95 = 0, $96 = 0, $101 = 0, $102 = 0, $107 = 0, $109 = 0, $112 = 0, $113 = 0, $116 = 0, $_01_i27 = 0, $117 = 0, $118 = 0, $123 = 0, $124 = 0, $129 = 0, $137 = 0, $138 = 0, $141 = 0, $_01_i34 = 0, $142 = 0, $143 = 0, $148 = 0, $149 = 0, $154 = 0, $161 = 0, $_01_i41 = 0, $162 = 0, $163 = 0, $168 = 0, $169 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $ushort_type = sp | 0;
 HEAP32[$ushort_type >> 2] = 18;
 HEAP32[$ushort_type + 4 >> 2] = 0;
 _gv(2) | 0;
 $4 = ($t | 0) == 0;
 $_01_i = 11737;
 $6 = HEAP32[5434] | 0;
 while (1) {
  $7 = $6 + 1 | 0;
  $8 = HEAP32[13918] | 0;
  if ($7 >>> 0 > (HEAP32[$8 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($8, $7);
   $14 = HEAP32[5434] | 0;
   $13 = HEAP32[13918] | 0;
  } else {
   $14 = $6;
   $13 = $8;
  }
  HEAP8[(HEAP32[$13 + 4 >> 2] | 0) + $14 | 0] = $_01_i;
  HEAP32[5434] = $7;
  $19 = $_01_i >>> 8;
  if (($19 | 0) == 0) {
   break;
  } else {
   $_01_i = $19;
   $6 = $7;
  }
 }
 $_ = $4 ? 4 : 8;
 $21 = _external_global_sym(377, $ushort_type, 256) | 0;
 _greloc(HEAP32[13918] | 0, $21, HEAP32[5434] | 0, 1);
 _gen_le32(0);
 $_pre_i1 = HEAP32[5434] | 0;
 $24 = $_pre_i1 + 2 | 0;
 $_01_i_i = 60545;
 $25 = $_pre_i1;
 while (1) {
  $26 = $25 + 1 | 0;
  $27 = HEAP32[13918] | 0;
  if ($26 >>> 0 > (HEAP32[$27 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($27, $26);
   $33 = HEAP32[5434] | 0;
   $32 = HEAP32[13918] | 0;
  } else {
   $33 = $25;
   $32 = $27;
  }
  HEAP8[(HEAP32[$32 + 4 >> 2] | 0) + $33 | 0] = $_01_i_i;
  HEAP32[5434] = $26;
  $38 = $_01_i_i >>> 8;
  if (($38 | 0) == 0) {
   break;
  } else {
   $_01_i_i = $38;
   $25 = $26;
  }
 }
 $40 = $_pre_i1 + 6 | 0;
 $41 = HEAP32[13918] | 0;
 if ($40 >>> 0 > (HEAP32[$41 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($41, $40);
  $47 = HEAP32[13918] | 0;
  $46 = HEAP32[5434] | 0;
 } else {
  $47 = $41;
  $46 = $24;
 }
 HEAP32[(HEAP32[$47 + 4 >> 2] | 0) + $46 >> 2] = $_;
 HEAP32[5434] = $40;
 if ($4) {
  $_01_i3 = 7387;
  $52 = $40;
  while (1) {
   $53 = $52 + 1 | 0;
   $54 = HEAP32[13918] | 0;
   if ($53 >>> 0 > (HEAP32[$54 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($54, $53);
    $60 = HEAP32[5434] | 0;
    $59 = HEAP32[13918] | 0;
   } else {
    $60 = $52;
    $59 = $54;
   }
   HEAP8[(HEAP32[$59 + 4 >> 2] | 0) + $60 | 0] = $_01_i3;
   HEAP32[5434] = $53;
   $65 = $_01_i3 >>> 8;
   if (($65 | 0) == 0) {
    $_pre_i14 = $53;
    break;
   } else {
    $_01_i3 = $65;
    $52 = $53;
   }
  }
 } else {
  $_01_i9 = 15583;
  $67 = $40;
  while (1) {
   $68 = $67 + 1 | 0;
   $69 = HEAP32[13918] | 0;
   if ($68 >>> 0 > (HEAP32[$69 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($69, $68);
    $75 = HEAP32[5434] | 0;
    $74 = HEAP32[13918] | 0;
   } else {
    $75 = $67;
    $74 = $69;
   }
   HEAP8[(HEAP32[$74 + 4 >> 2] | 0) + $75 | 0] = $_01_i9;
   HEAP32[5434] = $68;
   $80 = $_01_i9 >>> 8;
   if (($80 | 0) == 0) {
    $_pre_i14 = $68;
    break;
   } else {
    $_01_i9 = $80;
    $67 = $68;
   }
  }
 }
 $82 = $_pre_i14 + 1 | 0;
 $83 = HEAP32[13918] | 0;
 if ($82 >>> 0 > (HEAP32[$83 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($83, $82);
  $89 = HEAP32[5434] | 0;
  $88 = HEAP32[13918] | 0;
 } else {
  $89 = $_pre_i14;
  $88 = $83;
 }
 HEAP8[(HEAP32[$88 + 4 >> 2] | 0) + $89 | 0] = 36;
 HEAP32[5434] = $82;
 $_01_i21 = 11737;
 $94 = $_pre_i14 + 1 | 0;
 while (1) {
  $95 = $94 + 1 | 0;
  $96 = HEAP32[13918] | 0;
  if ($95 >>> 0 > (HEAP32[$96 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($96, $95);
   $102 = HEAP32[5434] | 0;
   $101 = HEAP32[13918] | 0;
  } else {
   $102 = $94;
   $101 = $96;
  }
  HEAP8[(HEAP32[$101 + 4 >> 2] | 0) + $102 | 0] = $_01_i21;
  HEAP32[5434] = $95;
  $107 = $_01_i21 >>> 8;
  if (($107 | 0) == 0) {
   break;
  } else {
   $_01_i21 = $107;
   $94 = $95;
  }
 }
 $109 = _external_global_sym(378, $ushort_type, 256) | 0;
 _greloc(HEAP32[13918] | 0, $109, HEAP32[5434] | 0, 1);
 _gen_le32(0);
 $112 = _get_reg(1) | 0;
 $113 = $112 + 88 | 0;
 if (($113 | 0) != 0) {
  $_01_i27 = $113;
  $116 = HEAP32[5434] | 0;
  while (1) {
   $117 = $116 + 1 | 0;
   $118 = HEAP32[13918] | 0;
   if ($117 >>> 0 > (HEAP32[$118 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($118, $117);
    $124 = HEAP32[5434] | 0;
    $123 = HEAP32[13918] | 0;
   } else {
    $124 = $116;
    $123 = $118;
   }
   HEAP8[(HEAP32[$123 + 4 >> 2] | 0) + $124 | 0] = $_01_i27;
   HEAP32[5434] = $117;
   $129 = $_01_i27 >>> 8;
   if (($129 | 0) == 0) {
    break;
   } else {
    $_01_i27 = $129;
    $116 = $117;
   }
  }
 }
 if ($4) {
  $176 = $112 & 65535;
  $177 = HEAP32[5024] | 0;
  $178 = $177 + 8 | 0;
  HEAP16[$178 >> 1] = $176;
  STACKTOP = sp;
  return;
 }
 if (($t | 0) != 12) {
  $_01_i41 = 312451;
  $161 = HEAP32[5434] | 0;
  while (1) {
   $162 = $161 + 1 | 0;
   $163 = HEAP32[13918] | 0;
   if ($162 >>> 0 > (HEAP32[$163 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($163, $162);
    $169 = HEAP32[5434] | 0;
    $168 = HEAP32[13918] | 0;
   } else {
    $169 = $161;
    $168 = $163;
   }
   HEAP8[(HEAP32[$168 + 4 >> 2] | 0) + $169 | 0] = $_01_i41;
   HEAP32[5434] = $162;
   $174 = $_01_i41 >>> 8;
   if (($174 | 0) == 0) {
    break;
   } else {
    $_01_i41 = $174;
    $161 = $162;
   }
  }
  $176 = $112 & 65535;
  $177 = HEAP32[5024] | 0;
  $178 = $177 + 8 | 0;
  HEAP16[$178 >> 1] = $176;
  STACKTOP = sp;
  return;
 }
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $112;
 $137 = _get_reg(1) | 0;
 $138 = $137 + 88 | 0;
 if (($138 | 0) != 0) {
  $_01_i34 = $138;
  $141 = HEAP32[5434] | 0;
  while (1) {
   $142 = $141 + 1 | 0;
   $143 = HEAP32[13918] | 0;
   if ($142 >>> 0 > (HEAP32[$143 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($143, $142);
    $149 = HEAP32[5434] | 0;
    $148 = HEAP32[13918] | 0;
   } else {
    $149 = $141;
    $148 = $143;
   }
   HEAP8[(HEAP32[$148 + 4 >> 2] | 0) + $149 | 0] = $_01_i34;
   HEAP32[5434] = $142;
   $154 = $_01_i34 >>> 8;
   if (($154 | 0) == 0) {
    break;
   } else {
    $_01_i34 = $154;
    $141 = $142;
   }
  }
 }
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = $137;
 $176 = $112 & 65535;
 $177 = HEAP32[5024] | 0;
 $178 = $177 + 8 | 0;
 HEAP16[$178 >> 1] = $176;
 STACKTOP = sp;
 return;
}
function _parse_operand($s1, $op) {
 $s1 = $s1 | 0;
 $op = $op | 0;
 var $e = 0, $1 = 0, $5 = 0, $indir_0 = 0, $7 = 0, $_off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $32 = 0, $40 = 0, $47 = 0, $49 = 0, $58 = 0, $61 = 0, $_pre_pre_phi = 0, $77 = 0, $79 = 0, $82 = 0, $90 = 0, $94 = 0, $96 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $136 = 0, $138 = 0, $reg_0_i_off0 = 0, $146 = 0, $148 = 0, $reg_0_i8_off0 = 0, $156 = 0, $shift_0_i_off0 = 0, $_pre_phi = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $e = sp | 0;
 $1 = HEAP32[5310] | 0;
 if (($1 | 0) == 42) {
  _next();
  $indir_0 = 524288;
  $5 = HEAP32[5310] | 0;
 } else {
  $indir_0 = 0;
  $5 = $1;
 }
 L4 : do {
  if (($5 | 0) == 37) {
   _next();
   $7 = HEAP32[5310] | 0;
   $_off = $7 - 424 | 0;
   do {
    if ($_off >>> 0 < 64 >>> 0) {
     $10 = $_off >> 3;
     $11 = 1 << $10;
     $12 = $op | 0;
     HEAP32[$12 >> 2] = $11;
     $13 = $_off & 7;
     HEAP8[$op + 4 | 0] = $13;
     if (($11 & 7 | 0) != 0 & $13 << 24 >> 24 == 0) {
      HEAP32[$12 >> 2] = $11 | 16384;
      $_pre_pre_phi = $12;
      break;
     }
     if (($10 | 0) == 0 & $13 << 24 >> 24 == 1) {
      HEAP32[$12 >> 2] = 65537;
      $_pre_pre_phi = $12;
      break;
     }
     if (!(($10 | 0) == 1 & $13 << 24 >> 24 == 2)) {
      $_pre_pre_phi = $12;
      break;
     }
     HEAP32[$12 >> 2] = 131074;
     $_pre_pre_phi = $12;
    } else {
     if (($7 & -8 | 0) == 488) {
      $32 = $op | 0;
      HEAP32[$32 >> 2] = 128;
      HEAP8[$op + 4 | 0] = (HEAP32[5310] | 0) + 24;
      $_pre_pre_phi = $32;
      break;
     }
     if (($7 - 496 | 0) >>> 0 < 6 >>> 0) {
      $40 = $op | 0;
      HEAP32[$40 >> 2] = 256;
      HEAP8[$op + 4 | 0] = (HEAP32[5310] | 0) + 16;
      $_pre_pre_phi = $40;
      break;
     }
     $47 = $op | 0;
     do {
      if (($7 | 0) == 502) {
       HEAP32[$47 >> 2] = 512;
       $49 = $op + 4 | 0;
       HEAP8[$49] = 0;
       _next();
       if ((HEAP32[5310] | 0) == 40) {
        _next();
        if ((HEAP32[5310] | 0) != 206) {
         break;
        }
        $58 = HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0;
        $61 = (HEAP8[$58] | 0) - 48 | 0;
        if ($61 >>> 0 > 7 >>> 0) {
         break;
        }
        if ((HEAP8[$58 + 1 | 0] | 0) != 0) {
         break;
        }
        HEAP8[$49] = $61;
        _next();
        _skip(41);
       }
       if ((HEAP8[$49] | 0) != 0) {
        $_pre_phi = $47;
        break L4;
       }
       HEAP32[$47 >> 2] = HEAP32[$47 >> 2] | 32768;
       $_pre_phi = $47;
       break L4;
      }
     } while (0);
     _tcc_error(17184, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $_pre_pre_phi = $47;
    }
   } while (0);
   _next();
   $_pre_phi = $_pre_pre_phi;
  } else if (($5 | 0) == 36) {
   _next();
   _asm_expr($s1, $e);
   $77 = $op | 0;
   HEAP32[$77 >> 2] = 8192;
   $79 = HEAP32[$e >> 2] | 0;
   HEAP32[$op + 8 >> 2] = $79;
   $82 = HEAP32[$e + 4 >> 2] | 0;
   HEAP32[$op + 12 >> 2] = $82;
   if (($82 | 0) != 0) {
    $_pre_phi = $77;
    break;
   }
   if (($79 | 0) == ($79 & 255 | 0)) {
    HEAP32[$77 >> 2] = 9216;
    $90 = 9216;
   } else {
    $90 = 8192;
   }
   if (($79 | 0) == ($79 << 24 >> 24 | 0)) {
    $94 = $90 | 2048;
    HEAP32[$77 >> 2] = $94;
    $96 = $94;
   } else {
    $96 = $90;
   }
   if (($79 | 0) != ($79 & 65535 | 0)) {
    $_pre_phi = $77;
    break;
   }
   HEAP32[$77 >> 2] = $96 | 4096;
   $_pre_phi = $77;
  } else {
   $102 = $op | 0;
   HEAP32[$102 >> 2] = 1073741824;
   $103 = $op + 4 | 0;
   HEAP8[$103] = -1;
   $104 = $op + 5 | 0;
   HEAP8[$104] = -1;
   $105 = $op + 6 | 0;
   HEAP8[$105] = 0;
   do {
    if ((HEAP32[5310] | 0) == 40) {
     _next();
     if ((HEAP32[5310] | 0) == 37) {
      _unget_tok(40);
      HEAP32[$op + 8 >> 2] = 0;
      HEAP32[$op + 12 >> 2] = 0;
      break;
     }
     _asm_expr($s1, $e);
     if ((HEAP32[5310] | 0) != 41) {
      _expect(17056);
     }
     _next();
     HEAP32[$op + 8 >> 2] = HEAP32[$e >> 2];
     HEAP32[$op + 12 >> 2] = HEAP32[$e + 4 >> 2];
    } else {
     _asm_expr($s1, $e);
     HEAP32[$op + 8 >> 2] = HEAP32[$e >> 2];
     HEAP32[$op + 12 >> 2] = HEAP32[$e + 4 >> 2];
    }
   } while (0);
   if ((HEAP32[5310] | 0) == 40) {
    _next();
    $136 = HEAP32[5310] | 0;
    do {
     if (($136 | 0) == 37) {
      _next();
      $138 = HEAP32[5310] | 0;
      if (($138 & -8 | 0) != 440) {
       label = 43;
       break;
      }
      $reg_0_i_off0 = $138 + 72 & 255;
      label = 44;
     } else if (($136 | 0) == 44) {
      label = 45;
     } else {
      label = 43;
     }
    } while (0);
    if ((label | 0) == 43) {
     _expect(16696);
     $reg_0_i_off0 = 0;
     label = 44;
    }
    if ((label | 0) == 44) {
     _next();
     HEAP8[$103] = $reg_0_i_off0;
     if ((HEAP32[5310] | 0) == 44) {
      label = 45;
     }
    }
    do {
     if ((label | 0) == 45) {
      _next();
      $146 = HEAP32[5310] | 0;
      do {
       if (($146 | 0) == 37) {
        _next();
        $148 = HEAP32[5310] | 0;
        if (($148 & -8 | 0) != 440) {
         label = 48;
         break;
        }
        $reg_0_i8_off0 = $148 + 72 & 255;
        label = 49;
       } else if (($146 | 0) != 44) {
        label = 48;
       }
      } while (0);
      if ((label | 0) == 48) {
       _expect(16696);
       $reg_0_i8_off0 = 0;
       label = 49;
      }
      if ((label | 0) == 49) {
       _next();
       HEAP8[$104] = $reg_0_i8_off0;
       if ((HEAP32[5310] | 0) != 44) {
        break;
       }
      }
      _next();
      $156 = _asm_int_expr($s1) | 0;
      if (($156 | 0) == 1) {
       $shift_0_i_off0 = 0;
      } else if (($156 | 0) == 2) {
       $shift_0_i_off0 = 1;
      } else if (($156 | 0) == 4) {
       $shift_0_i_off0 = 2;
      } else if (($156 | 0) == 8) {
       $shift_0_i_off0 = 3;
      } else {
       _expect(16872);
       $shift_0_i_off0 = 0;
      }
      HEAP8[$105] = $shift_0_i_off0;
     }
    } while (0);
    _skip(41);
   }
   if ((HEAP8[$103] | 0) != -1) {
    $_pre_phi = $102;
    break;
   }
   if ((HEAP8[$104] | 0) != -1) {
    $_pre_phi = $102;
    break;
   }
   HEAP32[$102 >> 2] = HEAP32[$102 >> 2] | 262144;
   $_pre_phi = $102;
  }
 } while (0);
 HEAP32[$_pre_phi >> 2] = HEAP32[$_pre_phi >> 2] | $indir_0;
 STACKTOP = sp;
 return;
}
function _asm_gen_code($operands, $nb_operands, $nb_outputs, $is_output, $clobber_regs, $out_reg) {
 $operands = $operands | 0;
 $nb_operands = $nb_operands | 0;
 $nb_outputs = $nb_outputs | 0;
 $is_output = $is_output | 0;
 $clobber_regs = $clobber_regs | 0;
 $out_reg = $out_reg | 0;
 var $regs_allocated = 0, $tmpcast = 0, $sv = 0, $sv1 = 0, $sv2 = 0, $sv3 = 0, $1 = 0, $ld$0$0 = 0, $ld$1$1 = 0, $2$1 = 0, $3 = 0, $i_011 = 0, $5 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $i_14 = 0, $26 = 0, $i_21 = 0, $37 = 0, $40 = 0, $41 = 0, $51 = 0, $67 = 0, $i_39 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $89 = 0, $105 = 0, $109 = 0, $i_47 = 0, $113 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $regs_allocated = sp | 0;
 $tmpcast = $regs_allocated;
 $sv = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $sv1 = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $sv2 = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $sv3 = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $1 = $clobber_regs;
 $ld$0$0 = $1 | 0;
 $ld$1$1 = $1 + 4 | 0;
 $2$1 = HEAPU8[$ld$1$1] | HEAPU8[$ld$1$1 + 1 | 0] << 8 | HEAPU8[$ld$1$1 + 2 | 0] << 16 | HEAPU8[$ld$1$1 + 3 | 0] << 24 | 0;
 HEAP32[$regs_allocated >> 2] = HEAPU8[$ld$0$0] | HEAPU8[$ld$0$0 + 1 | 0] << 8 | HEAPU8[$ld$0$0 + 2 | 0] << 16 | HEAPU8[$ld$0$0 + 3 | 0] << 24;
 HEAP32[$regs_allocated + 4 >> 2] = $2$1;
 $3 = ($nb_operands | 0) > 0;
 if ($3) {
  $i_011 = 0;
  do {
   $5 = HEAP32[$operands + ($i_011 * 56 | 0) + 40 >> 2] | 0;
   if (($5 | 0) > -1) {
    HEAP8[$tmpcast + $5 | 0] = 1;
   }
   $i_011 = $i_011 + 1 | 0;
  } while (($i_011 | 0) < ($nb_operands | 0));
 }
 if (($is_output | 0) == 0) {
  $i_14 = 0;
 } else {
  if (($nb_outputs | 0) > 0) {
   $14 = $sv2;
   $15 = $sv2 + 8 | 0;
   $16 = $sv3;
   $18 = $sv3 + 16 | 0;
   $i_39 = 0;
   while (1) {
    $74 = $operands + ($i_39 * 56 | 0) + 40 | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    do {
     if (($75 | 0) > -1) {
      $78 = $operands + ($i_39 * 56 | 0) + 24 | 0;
      $79 = HEAP32[$78 >> 2] | 0;
      if ((HEAP16[$79 + 8 >> 1] & 63) == 49) {
       if ((HEAP32[$operands + ($i_39 * 56 | 0) + 48 >> 2] | 0) != 0) {
        break;
       }
       $89 = $79;
       HEAP32[$14 >> 2] = HEAP32[$89 >> 2];
       HEAP32[$14 + 4 >> 2] = HEAP32[$89 + 4 >> 2];
       HEAP32[$14 + 8 >> 2] = HEAP32[$89 + 8 >> 2];
       HEAP32[$14 + 12 >> 2] = HEAP32[$89 + 12 >> 2];
       HEAP32[$14 + 16 >> 2] = HEAP32[$89 + 16 >> 2];
       HEAP32[$14 + 20 >> 2] = HEAP32[$89 + 20 >> 2];
       HEAP32[$14 + 24 >> 2] = HEAP32[$89 + 24 >> 2];
       HEAP32[$14 + 28 >> 2] = HEAP32[$89 + 28 >> 2];
       HEAP32[$14 + 32 >> 2] = HEAP32[$89 + 32 >> 2];
       HEAP32[$14 + 36 >> 2] = HEAP32[$89 + 36 >> 2];
       HEAP16[$15 >> 1] = HEAP16[$15 >> 1] & -64 | 50;
       _load($out_reg, $sv2);
       HEAP16[$15 >> 1] = HEAP16[$15 >> 1] & 65472 | $out_reg;
       _store(HEAP32[$74 >> 2] | 0, $sv2);
       break;
      } else {
       _store($75, $79);
       if ((HEAP32[$operands + ($i_39 * 56 | 0) + 44 >> 2] | 0) == 0) {
        break;
       }
       $105 = HEAP32[$78 >> 2] | 0;
       HEAP32[$16 >> 2] = HEAP32[$105 >> 2];
       HEAP32[$16 + 4 >> 2] = HEAP32[$105 + 4 >> 2];
       HEAP32[$16 + 8 >> 2] = HEAP32[$105 + 8 >> 2];
       HEAP32[$16 + 12 >> 2] = HEAP32[$105 + 12 >> 2];
       HEAP32[$16 + 16 >> 2] = HEAP32[$105 + 16 >> 2];
       HEAP32[$16 + 20 >> 2] = HEAP32[$105 + 20 >> 2];
       HEAP32[$16 + 24 >> 2] = HEAP32[$105 + 24 >> 2];
       HEAP32[$16 + 28 >> 2] = HEAP32[$105 + 28 >> 2];
       HEAP32[$16 + 32 >> 2] = HEAP32[$105 + 32 >> 2];
       HEAP32[$16 + 36 >> 2] = HEAP32[$105 + 36 >> 2];
       HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 4;
       _store(2, $sv3);
       break;
      }
     }
    } while (0);
    $109 = $i_39 + 1 | 0;
    if (($109 | 0) < ($nb_outputs | 0)) {
     $i_39 = $109;
    } else {
     $i_47 = 2;
     break;
    }
   }
  } else {
   $i_47 = 2;
  }
  while (1) {
   $113 = HEAPU8[10408 + $i_47 | 0] | 0;
   if ((HEAP8[$tmpcast + $113 | 0] | 0) != 0) {
    _g($113 + 88 | 0);
   }
   if (($i_47 | 0) > 0) {
    $i_47 = $i_47 - 1 | 0;
   } else {
    break;
   }
  }
  STACKTOP = sp;
  return;
 }
 do {
  $26 = HEAPU8[10408 + $i_14 | 0] | 0;
  if ((HEAP8[$tmpcast + $26 | 0] | 0) != 0) {
   _g($26 + 80 | 0);
  }
  $i_14 = $i_14 + 1 | 0;
 } while (($i_14 | 0) < 3);
 if (!$3) {
  STACKTOP = sp;
  return;
 }
 $19 = $sv;
 $20 = $sv + 8 | 0;
 $21 = $sv1;
 $23 = $sv1 + 16 | 0;
 $i_21 = 0;
 do {
  $37 = HEAP32[$operands + ($i_21 * 56 | 0) + 40 >> 2] | 0;
  L39 : do {
   if (($37 | 0) > -1) {
    $40 = $operands + ($i_21 * 56 | 0) + 24 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    do {
     if ((HEAP16[$41 + 8 >> 1] & 63) == 49) {
      if ((HEAP32[$operands + ($i_21 * 56 | 0) + 48 >> 2] | 0) == 0) {
       break;
      }
      $51 = $41;
      HEAP32[$19 >> 2] = HEAP32[$51 >> 2];
      HEAP32[$19 + 4 >> 2] = HEAP32[$51 + 4 >> 2];
      HEAP32[$19 + 8 >> 2] = HEAP32[$51 + 8 >> 2];
      HEAP32[$19 + 12 >> 2] = HEAP32[$51 + 12 >> 2];
      HEAP32[$19 + 16 >> 2] = HEAP32[$51 + 16 >> 2];
      HEAP32[$19 + 20 >> 2] = HEAP32[$51 + 20 >> 2];
      HEAP32[$19 + 24 >> 2] = HEAP32[$51 + 24 >> 2];
      HEAP32[$19 + 28 >> 2] = HEAP32[$51 + 28 >> 2];
      HEAP32[$19 + 32 >> 2] = HEAP32[$51 + 32 >> 2];
      HEAP32[$19 + 36 >> 2] = HEAP32[$51 + 36 >> 2];
      HEAP16[$20 >> 1] = HEAP16[$20 >> 1] & -64 | 50;
      _load($37, $sv);
      break L39;
     }
    } while (0);
    if (($i_21 | 0) < ($nb_outputs | 0)) {
     if ((HEAP32[$operands + ($i_21 * 56 | 0) + 52 >> 2] | 0) == 0) {
      break;
     }
    }
    _load($37, $41);
    if ((HEAP32[$operands + ($i_21 * 56 | 0) + 44 >> 2] | 0) == 0) {
     break;
    }
    $67 = HEAP32[$40 >> 2] | 0;
    HEAP32[$21 >> 2] = HEAP32[$67 >> 2];
    HEAP32[$21 + 4 >> 2] = HEAP32[$67 + 4 >> 2];
    HEAP32[$21 + 8 >> 2] = HEAP32[$67 + 8 >> 2];
    HEAP32[$21 + 12 >> 2] = HEAP32[$67 + 12 >> 2];
    HEAP32[$21 + 16 >> 2] = HEAP32[$67 + 16 >> 2];
    HEAP32[$21 + 20 >> 2] = HEAP32[$67 + 20 >> 2];
    HEAP32[$21 + 24 >> 2] = HEAP32[$67 + 24 >> 2];
    HEAP32[$21 + 28 >> 2] = HEAP32[$67 + 28 >> 2];
    HEAP32[$21 + 32 >> 2] = HEAP32[$67 + 32 >> 2];
    HEAP32[$21 + 36 >> 2] = HEAP32[$67 + 36 >> 2];
    HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + 4;
    _load(2, $sv1);
   }
  } while (0);
  $i_21 = $i_21 + 1 | 0;
 } while (($i_21 | 0) < ($nb_operands | 0));
 STACKTOP = sp;
 return;
}
function _gen_assign_cast($dt) {
 $dt = $dt | 0;
 var $tmp_type1 = 0, $tmpcast = 0, $tmp_type2 = 0, $tmpcast2 = 0, $buf1 = 0, $buf2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $12 = 0, $18 = 0, $26 = 0, $34 = 0, $44 = 0, $57 = 0, $58 = 0, $59 = 0, $68 = 0, $69$0 = 0, $69$1 = 0, $70 = 0, $71$0 = 0, $71$1 = 0, $trunc = 0, $80 = 0, $102 = 0, $103$0 = 0, $103$1 = 0, $104 = 0, $105$0 = 0, $105$1 = 0, $113 = 0, $114 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tmp_type1 = sp | 0;
 $tmpcast = $tmp_type1;
 $tmp_type2 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tmpcast2 = $tmp_type2;
 $buf1 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $buf2 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $1 = HEAP32[5024] | 0;
 $2 = $1 | 0;
 $3 = $dt | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 $8 = $7 & 15;
 if (($8 | 0) == 3) {
  _tcc_error(11432, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $12 = HEAP32[$3 >> 2] | 0;
 } else {
  $12 = $4;
 }
 if (($12 & 2048 | 0) != 0) {
  _tcc_warning(11800, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 L7 : do {
  switch ($4 & 15 | 0) {
  case 4:
   {
    $18 = HEAP32[5024] | 0;
    do {
     if ((HEAP16[$18 + 8 >> 1] & 831) == 48) {
      $26 = HEAP32[$18 >> 2] & 15;
      if (($26 | 0) == 4) {
       if ((HEAP32[$18 + 16 >> 2] | 0) != 0) {
        break;
       }
       _gen_cast($dt);
       STACKTOP = sp;
       return;
      } else if (($26 | 0) == 12) {
       $34 = $18 + 16 | 0;
       if (!((HEAP32[$34 >> 2] | 0) == 0 & (HEAP32[$34 + 4 >> 2] | 0) == 0)) {
        break;
       }
       _gen_cast($dt);
       STACKTOP = sp;
       return;
      } else if (($26 | 0) == 0) {
       if ((HEAP32[$18 + 16 >> 2] | 0) != 0) {
        break;
       }
       _gen_cast($dt);
       STACKTOP = sp;
       return;
      } else {
       break;
      }
     }
    } while (0);
    if (($8 | 0) == 12 | ($8 | 0) == 2 | ($8 | 0) == 1 | ($8 | 0) == 0) {
     _tcc_warning(11360, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     _gen_cast($dt);
     STACKTOP = sp;
     return;
    }
    $44 = (HEAP32[$dt + 4 >> 2] | 0) + 16 | 0;
    if (($8 | 0) == 6) {
     if ((HEAP32[$44 >> 2] & 15 | 0) == 3) {
      _gen_cast($dt);
      STACKTOP = sp;
      return;
     }
     if ((_compare_types($44, $2, 0) | 0) != 0) {
      _gen_cast($dt);
      STACKTOP = sp;
      return;
     }
     _tcc_warning(11304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     _gen_cast($dt);
     STACKTOP = sp;
     return;
    } else if (($8 | 0) != 4) {
     break L7;
    }
    $57 = (HEAP32[$1 + 4 >> 2] | 0) + 16 | 0;
    $58 = $44 | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    do {
     if (($59 & 15 | 0) == 3) {
      $80 = $59;
     } else {
      if ((HEAP32[$57 >> 2] & 15 | 0) == 3) {
       $80 = $59;
       break;
      }
      $68 = $44;
      $69$0 = HEAP32[$68 >> 2] | 0;
      $69$1 = HEAP32[$68 + 4 >> 2] | 0;
      HEAP32[$tmp_type1 >> 2] = $69$0;
      HEAP32[$tmp_type1 + 4 >> 2] = $69$1;
      $70 = $57;
      $71$0 = HEAP32[$70 >> 2] | 0;
      $71$1 = HEAP32[$70 + 4 >> 2] | 0;
      HEAP32[$tmp_type2 >> 2] = $71$0;
      HEAP32[$tmp_type2 + 4 >> 2] = $71$1;
      $trunc = $69$0;
      HEAP32[$tmp_type1 >> 2] = $trunc & -6161;
      HEAP32[$tmp_type2 >> 2] = $71$0 & -6161;
      if ((_compare_types($tmpcast, $tmpcast2, 0) | 0) != 0) {
       $80 = $trunc;
       break;
      }
      _tcc_warning(11304, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $80 = HEAP32[$58 >> 2] | 0;
     }
    } while (0);
    if (($80 & 2048 | 0) == 0) {
     if ((HEAP32[$57 >> 2] & 2048 | 0) == 0) {
      label = 23;
     }
    } else {
     label = 23;
    }
    do {
     if ((label | 0) == 23) {
      if (($80 & 4096 | 0) != 0) {
       _gen_cast($dt);
       STACKTOP = sp;
       return;
      }
      if ((HEAP32[$57 >> 2] & 4096 | 0) != 0) {
       break;
      }
      _gen_cast($dt);
      STACKTOP = sp;
      return;
     }
    } while (0);
    _tcc_warning(11232, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    _gen_cast($dt);
    STACKTOP = sp;
    return;
   }
  case 1:
  case 2:
  case 0:
  case 12:
   {
    if (($7 & 13 | 0) != 4) {
     _gen_cast($dt);
     STACKTOP = sp;
     return;
    }
    _tcc_warning(11160, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    _gen_cast($dt);
    STACKTOP = sp;
    return;
   }
  case 7:
   {
    $102 = $dt;
    $103$0 = HEAP32[$102 >> 2] | 0;
    $103$1 = HEAP32[$102 + 4 >> 2] | 0;
    HEAP32[$tmp_type1 >> 2] = $103$0;
    HEAP32[$tmp_type1 + 4 >> 2] = $103$1;
    $104 = $1;
    $105$0 = HEAP32[$104 >> 2] | 0;
    $105$1 = HEAP32[$104 + 4 >> 2] | 0;
    HEAP32[$tmp_type2 >> 2] = $105$0;
    HEAP32[$tmp_type2 + 4 >> 2] = $105$1;
    HEAP32[$tmp_type1 >> 2] = $103$0 & -6145;
    HEAP32[$tmp_type2 >> 2] = $105$0 & -6145;
    if ((_compare_types($tmpcast, $tmpcast2, 0) | 0) == 0) {
     break L7;
    }
    _gen_cast($dt);
    STACKTOP = sp;
    return;
   }
  default:
   {
    _gen_cast($dt);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $113 = $buf1 | 0;
 _type_to_str($113, $2, 0);
 $114 = $buf2 | 0;
 _type_to_str($114, $dt, 0);
 _tcc_error(11080, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $113, HEAP32[tempVarArgs + 8 >> 2] = $114, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 _gen_cast($dt);
 STACKTOP = sp;
 return;
}
function _parse_attribute($ad) {
 $ad = $ad | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $13 = 0, $29 = 0, $42 = 0, $n_0 = 0, $68 = 0, $n_16 = 0, $82 = 0, $96 = 0, $110 = 0, $112 = 0, $114 = 0, $parenthesis_0 = 0, $parenthesis_1 = 0, $121 = 0, $123 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[5310] & -2 | 0) != 302) {
  STACKTOP = sp;
  return;
 }
 $4 = $ad + 4 | 0;
 $5 = $ad + 8 | 0;
 $6 = $ad;
 do {
  _next();
  _skip(40);
  _skip(40);
  $7 = HEAP32[5310] | 0;
  L6 : do {
   if (($7 | 0) != 41) {
    $9 = $7;
    while (1) {
     if (($9 | 0) < 256) {
      _expect(16216);
      $13 = HEAP32[5310] | 0;
     } else {
      $13 = $9;
     }
     _next();
     L12 : do {
      switch ($13 | 0) {
      case 336:
      case 337:
       {
        _skip(40);
        if ((HEAP32[5310] | 0) != 181) {
         _expect(16072);
        }
        HEAP32[$4 >> 2] = _find_section(HEAP32[5314] | 0, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0) | 0;
        _next();
        _skip(41);
        label = 43;
        break;
       }
      case 338:
      case 339:
       {
        if ((HEAP32[5310] | 0) == 40) {
         _next();
         $42 = _expr_const() | 0;
         if (($42 | 0) < 1) {
          label = 16;
         } else {
          if (($42 - 1 & $42 | 0) != 0) {
           label = 16;
          }
         }
         if ((label | 0) == 16) {
          label = 0;
          _tcc_error(15824, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
          STACKTOP = tempVarArgs;
         }
         _skip(41);
         $n_0 = $42 << 3 & 248;
        } else {
         $n_0 = 64;
        }
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -249 | $n_0;
        label = 43;
        break;
       }
      case 340:
      case 341:
       {
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 256;
        label = 43;
        break;
       }
      case 342:
      case 343:
       {
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1048576;
        label = 43;
        break;
       }
      case 348:
      case 349:
      case 350:
       {
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -8;
        label = 43;
        break;
       }
      case 351:
      case 352:
      case 353:
       {
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -8 | 1;
        label = 43;
        break;
       }
      case 368:
      case 369:
       {
        _skip(40);
        $68 = _expr_const() | 0;
        if (($68 | 0) > 3) {
         $n_16 = 3;
         label = 25;
        } else {
         if (($68 | 0) > 0) {
          $n_16 = $68;
          label = 25;
         }
        }
        if ((label | 0) == 25) {
         label = 0;
         HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -8 | $n_16 + 1 & 7;
        }
        _skip(41);
        label = 43;
        break;
       }
      case 354:
      case 355:
      case 356:
       {
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -8 | 5;
        label = 43;
        break;
       }
      case 357:
       {
        _skip(40);
        $82 = HEAP32[5310] | 0;
        if (($82 | 0) == 358) {
         HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -983041 | 851968;
        } else if (($82 | 0) == 359) {
         HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -983041 | 196608;
        } else if (($82 | 0) == 360) {
         HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -983041 | 65536;
        } else {
         $96 = _get_tok_str($82, 0) | 0;
         _tcc_warning(15688, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $96, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        _next();
        _skip(41);
        label = 43;
        break;
       }
      case 361:
       {
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 512;
        label = 43;
        break;
       }
      case 362:
       {
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1024;
        label = 43;
        break;
       }
      case 346:
      case 347:
      case 363:
      case 364:
       {
        label = 43;
        break;
       }
      case 344:
      case 345:
       {
        _skip(40);
        if ((HEAP32[5310] | 0) != 181) {
         _expect(16e3);
        }
        $29 = HEAP32[5302] | 0;
        HEAP32[$5 >> 2] = HEAP32[(_tok_alloc(HEAP32[$29 + 4 >> 2] | 0, (HEAP32[$29 >> 2] | 0) - 1 | 0) | 0) + 20 >> 2];
        _next();
        _skip(41);
        label = 43;
        break;
       }
      default:
       {
        if ((HEAP32[(HEAP32[5314] | 0) + 64 >> 2] | 0) != 0) {
         $110 = _get_tok_str($13, 0) | 0;
         _tcc_warning(15560, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $110, tempVarArgs) | 0);
         STACKTOP = tempVarArgs;
        }
        $112 = HEAP32[5310] | 0;
        if (($112 | 0) == 40) {
         $parenthesis_0 = 0;
         $114 = 40;
        } else {
         $123 = $112;
         break L12;
        }
        while (1) {
         if (($114 | 0) == 40) {
          $parenthesis_1 = $parenthesis_0 + 1 | 0;
         } else if (($114 | 0) == 41) {
          $parenthesis_1 = $parenthesis_0 - 1 | 0;
         } else {
          $parenthesis_1 = $parenthesis_0;
         }
         _next();
         $121 = HEAP32[5310] | 0;
         if (($parenthesis_1 | 0) != 0 & ($121 | 0) != -1) {
          $parenthesis_0 = $parenthesis_1;
          $114 = $121;
         } else {
          $123 = $121;
          break;
         }
        }
       }
      }
     } while (0);
     if ((label | 0) == 43) {
      label = 0;
      $123 = HEAP32[5310] | 0;
     }
     if (($123 | 0) != 44) {
      break L6;
     }
     _next();
     $9 = HEAP32[5310] | 0;
     if (($9 | 0) == 41) {
      break L6;
     }
    }
   }
  } while (0);
  _skip(41);
  _skip(41);
 } while ((HEAP32[5310] & -2 | 0) == 302);
 STACKTOP = sp;
 return;
}
function _asm_instr() {
 var $str_i = 0, $sv_i = 0, $astr = 0, $astr1 = 0, $operands = 0, $nb_operands = 0, $out_reg = 0, $clobber_regs = 0, $7 = 0, $8 = 0, $18 = 0, $must_subst_0 = 0, $nb_outputs_0 = 0, $34 = 0, $35 = 0, $36 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $55 = 0, $59 = 0, $modifier_0_i = 0, $60 = 0, $65 = 0, $66 = 0, $68 = 0, $87 = 0, $88 = 0, $91 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $i_04 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1784 | 0;
 $str_i = sp | 0;
 $sv_i = sp + 8 | 0;
 $astr = sp + 48 | 0;
 $astr1 = sp + 64 | 0;
 $operands = sp + 80 | 0;
 $nb_operands = sp + 1760 | 0;
 $out_reg = sp + 1768 | 0;
 $clobber_regs = sp + 1776 | 0;
 _next();
 if (((HEAP32[5310] | 0) - 276 | 0) >>> 0 < 3 >>> 0) {
  _next();
 }
 _parse_asm_str($astr);
 HEAP32[$nb_operands >> 2] = 0;
 HEAP32[$clobber_regs >> 2] = 0;
 HEAP32[$clobber_regs + 4 >> 2] = 0;
 L4 : do {
  if ((HEAP32[5310] | 0) == 58) {
   _next();
   $7 = $operands | 0;
   _parse_asm_operands($7, $nb_operands, 1);
   $8 = HEAP32[$nb_operands >> 2] | 0;
   if ((HEAP32[5310] | 0) != 58) {
    $nb_outputs_0 = $8;
    $must_subst_0 = 1;
    break;
   }
   _next();
   if ((HEAP32[5310] | 0) == 41) {
    $nb_outputs_0 = $8;
    $must_subst_0 = 1;
    break;
   }
   _parse_asm_operands($7, $nb_operands, 0);
   if ((HEAP32[5310] | 0) != 58) {
    $nb_outputs_0 = $8;
    $must_subst_0 = 1;
    break;
   }
   _next();
   $18 = $clobber_regs;
   while (1) {
    if ((HEAP32[5310] | 0) != 181) {
     _expect(16808);
    }
    _asm_clobber($18, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0);
    _next();
    if ((HEAP32[5310] | 0) != 44) {
     $nb_outputs_0 = $8;
     $must_subst_0 = 1;
     break L4;
    }
    _next();
   }
  } else {
   $nb_outputs_0 = 0;
   $must_subst_0 = 0;
  }
 } while (0);
 _skip(41);
 if ((HEAP32[5310] | 0) != 59) {
  _expect(15400);
 }
 _save_regs(0);
 $34 = $operands | 0;
 $35 = HEAP32[$nb_operands >> 2] | 0;
 $36 = $clobber_regs;
 _asm_compute_constraints($34, $35, $nb_outputs_0, $36, $out_reg);
 if (($must_subst_0 | 0) == 0) {
  $87 = $astr1;
  $88 = $astr;
  HEAP32[$87 >> 2] = HEAP32[$88 >> 2];
  HEAP32[$87 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
  HEAP32[$87 + 8 >> 2] = HEAP32[$88 + 8 >> 2];
  HEAP32[$87 + 12 >> 2] = HEAP32[$88 + 12 >> 2];
 } else {
  $40 = $sv_i;
  _cstr_new($astr1);
  $42 = HEAP32[$astr + 4 >> 2] | 0;
  HEAP32[$str_i >> 2] = $42;
  $43 = $sv_i + 8 | 0;
  $45 = $42;
  while (1) {
   $46 = $45 + 1 | 0;
   HEAP32[$str_i >> 2] = $46;
   $47 = HEAP8[$45] | 0;
   $48 = $47 << 24 >> 24;
   L23 : do {
    if ($47 << 24 >> 24 == 37) {
     switch (HEAP8[$46] | 0) {
     case 99:
     case 110:
     case 98:
     case 119:
     case 104:
      {
       $55 = $45 + 2 | 0;
       HEAP32[$str_i >> 2] = $55;
       $modifier_0_i = HEAP8[$46] | 0;
       $59 = $55;
       break;
      }
     case 37:
      {
       HEAP32[$str_i >> 2] = $45 + 2;
       label = 27;
       break L23;
       break;
      }
     default:
      {
       $modifier_0_i = 0;
       $59 = $46;
      }
     }
     $60 = _find_constraint($34, $35, $59, $str_i) | 0;
     if (($60 | 0) < 0) {
      _tcc_error(13392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
     }
     $65 = HEAP32[$operands + ($60 * 56 | 0) + 24 >> 2] | 0;
     $66 = $65;
     HEAP32[$40 >> 2] = HEAP32[$66 >> 2];
     HEAP32[$40 + 4 >> 2] = HEAP32[$66 + 4 >> 2];
     HEAP32[$40 + 8 >> 2] = HEAP32[$66 + 8 >> 2];
     HEAP32[$40 + 12 >> 2] = HEAP32[$66 + 12 >> 2];
     HEAP32[$40 + 16 >> 2] = HEAP32[$66 + 16 >> 2];
     HEAP32[$40 + 20 >> 2] = HEAP32[$66 + 20 >> 2];
     HEAP32[$40 + 24 >> 2] = HEAP32[$66 + 24 >> 2];
     HEAP32[$40 + 28 >> 2] = HEAP32[$66 + 28 >> 2];
     HEAP32[$40 + 32 >> 2] = HEAP32[$66 + 32 >> 2];
     HEAP32[$40 + 36 >> 2] = HEAP32[$66 + 36 >> 2];
     $68 = HEAP32[$operands + ($60 * 56 | 0) + 40 >> 2] | 0;
     do {
      if (($68 | 0) > -1) {
       HEAP16[$43 >> 1] = $68;
       if ((HEAP16[$65 + 8 >> 1] & 63) != 49) {
        break;
       }
       if ((HEAP32[$operands + ($60 * 56 | 0) + 48 >> 2] | 0) == 0) {
        break;
       }
       HEAP16[$43 >> 1] = $68 | 256;
      }
     } while (0);
     _subst_asm_operand($astr1, $sv_i, $modifier_0_i);
    } else {
     label = 27;
    }
   } while (0);
   if ((label | 0) == 27) {
    label = 0;
    _cstr_ccat($astr1, $48);
    if ($47 << 24 >> 24 == 0) {
     break;
    }
   }
   $45 = HEAP32[$str_i >> 2] | 0;
  }
  _cstr_free($astr);
 }
 _asm_gen_code($34, $35, $nb_outputs_0, 0, $36, HEAP32[$out_reg >> 2] | 0);
 $91 = HEAP32[5314] | 0;
 $93 = HEAP32[$astr1 + 4 >> 2] | 0;
 $96 = (HEAP32[$astr1 >> 2] | 0) - 1 | 0;
 $97 = HEAP32[5336] | 0;
 $98 = HEAP32[5350] | 0;
 _tcc_open_bf($91, 14416, $96);
 _memcpy((HEAP32[13912] | 0) + 1056 | 0, $93 | 0, $96) | 0;
 HEAP32[5350] = 0;
 _tcc_assemble_internal($91, 0);
 _tcc_close();
 HEAP32[5336] = $97;
 HEAP32[5350] = $98;
 _next();
 _asm_gen_code($34, $35, $nb_outputs_0, 1, $36, HEAP32[$out_reg >> 2] | 0);
 if (($35 | 0) > 0) {
  $i_04 = 0;
 } else {
  _cstr_free($astr1);
  STACKTOP = sp;
  return;
 }
 do {
  _tcc_free(HEAP32[$operands + ($i_04 * 56 | 0) + 4 >> 2] | 0);
  _vpop();
  $i_04 = $i_04 + 1 | 0;
 } while (($i_04 | 0) < ($35 | 0));
 _cstr_free($astr1);
 STACKTOP = sp;
 return;
}
function _tcc_add_file_internal($s1, $filename, $flags) {
 $s1 = $s1 | 0;
 $filename = $filename | 0;
 $flags = $flags | 0;
 var $ehdr = 0, $p_0_i_i = 0, $5 = 0, $8 = 0, $12 = 0, $_ = 0, $20 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $nb_alloc_0_i = 0, $44 = 0, $48 = 0, $pp_0_i = 0, $76 = 0, $77 = 0, $78 = 0, $102 = 0, $121 = 0, $ret_0 = 0, $125 = 0, $127 = 0, $_0 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56 | 0;
 $ehdr = sp | 0;
 $p_0_i_i = _strchr($filename | 0, 0) | 0;
 while (1) {
  if ($p_0_i_i >>> 0 <= $filename >>> 0) {
   break;
  }
  $5 = $p_0_i_i - 1 | 0;
  if ((HEAP8[$5] | 0) == 47) {
   break;
  } else {
   $p_0_i_i = $5;
  }
 }
 $8 = _strrchr($p_0_i_i | 0, 46) | 0;
 if (($8 | 0) == 0) {
  $12 = _strchr($p_0_i_i | 0, 0) | 0;
 } else {
  $12 = $8;
 }
 $_ = (HEAP8[$12] | 0) == 0 ? $12 : $12 + 1 | 0;
 if ((_strcmp($_ | 0, 14368) | 0) == 0) {
  _tcc_define_symbol($s1, 14272, 0);
 }
 $20 = _tcc_open($s1, $filename) | 0;
 if (($20 | 0) < 0) {
  if (($flags & 1 | 0) == 0) {
   $_0 = $20;
   STACKTOP = sp;
   return $_0 | 0;
  }
  _tcc_error_noabort(14192, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $filename, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $_0 = $20;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $27 = $s1 + 328 | 0;
 $28 = $s1 + 332 | 0;
 $30 = (_strlen($filename | 0) | 0) + 1 | 0;
 $31 = _malloc($30) | 0;
 if (($31 | 0) == 0 & ($30 | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 }
 _strcpy($31 | 0, $filename | 0) | 0;
 $36 = HEAP32[$28 >> 2] | 0;
 $37 = HEAP32[$27 >> 2] | 0;
 do {
  if (($36 - 1 & $36 | 0) == 0) {
   $nb_alloc_0_i = ($36 | 0) == 0 ? 4 : $36 << 3;
   $44 = _realloc($37, $nb_alloc_0_i) | 0;
   if (($44 | 0) == 0 & ($nb_alloc_0_i | 0) != 0) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else {
    $48 = $44;
    HEAP32[$27 >> 2] = $48;
    $pp_0_i = $48;
    break;
   }
  } else {
   $pp_0_i = $37;
  }
 } while (0);
 HEAP32[$pp_0_i + ($36 << 2) >> 2] = $31;
 HEAP32[$28 >> 2] = $36 + 1;
 L27 : do {
  if (($flags & 4 | 0) == 0) {
   do {
    if ((HEAP8[$_] | 0) != 0) {
     if ((_strcmp($_ | 0, 14128) | 0) == 0) {
      break;
     }
     if ((_strcmp($_ | 0, 14368) | 0) == 0) {
      $ret_0 = _tcc_assemble($s1, 1) | 0;
      break L27;
     }
     if ((_strcmp($_ | 0, 14056) | 0) == 0) {
      $ret_0 = _tcc_assemble($s1, 0) | 0;
      break L27;
     }
     $76 = HEAP32[(HEAP32[13912] | 0) + 8 >> 2] | 0;
     $77 = $ehdr | 0;
     $78 = _read($76 | 0, $77 | 0, 52) | 0;
     _lseek($76 | 0, 0, 0) | 0;
     if (($78 | 0) < 1) {
      _tcc_error_noabort(13960, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $ret_0 = $20;
      break L27;
     }
     do {
      if (($78 | 0) == 52 & (HEAP8[$77] | 0) == 127) {
       if ((HEAP8[$ehdr + 1 | 0] | 0) != 69) {
        break;
       }
       if ((HEAP8[$ehdr + 2 | 0] | 0) != 76) {
        break;
       }
       if ((HEAP8[$ehdr + 3 | 0] | 0) != 70) {
        break;
       }
       HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = 0;
       $102 = HEAP16[$ehdr + 16 >> 1] | 0;
       if (($102 << 16 >> 16 | 0) == 1) {
        $ret_0 = _tcc_load_object_file($s1, $76, 0) | 0;
        break L27;
       } else if (($102 << 16 >> 16 | 0) == 3) {
        if ((HEAP32[$s1 + 44 >> 2] | 0) == 0) {
         $ret_0 = 0;
         break L27;
        }
        $ret_0 = _tcc_load_dll($s1, $76, $filename, $flags >>> 1 & 1) | 0;
        break L27;
       } else {
        _tcc_error_noabort(13856, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
        STACKTOP = tempVarArgs;
        $ret_0 = $20;
        break L27;
       }
      }
     } while (0);
     if ((_memcmp($77 | 0, 13680, 8) | 0) == 0) {
      HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = 0;
      $ret_0 = _tcc_load_archive($s1, $76) | 0;
      break L27;
     }
     $121 = _tcc_load_ldscript($s1) | 0;
     if (($121 | 0) >= 0) {
      $ret_0 = $121;
      break L27;
     }
     _tcc_error_noabort(13568, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $ret_0 = $121;
     break L27;
    }
   } while (0);
   $ret_0 = _tcc_compile($s1) | 0;
  } else {
   $ret_0 = _tcc_preprocess($s1) | 0;
  }
 } while (0);
 $125 = HEAP32[13912] | 0;
 $127 = HEAP32[$125 + 8 >> 2] | 0;
 if (($127 | 0) > 0) {
  _close($127 | 0) | 0;
  HEAP32[5036] = (HEAP32[5036] | 0) + (HEAP32[$125 + 16 >> 2] | 0);
 }
 HEAP32[13912] = HEAP32[$125 + 12 >> 2];
 _free($125);
 $_0 = $ret_0;
 STACKTOP = sp;
 return $_0 | 0;
}
function _put_got_entry($s1, $reloc_type, $size, $info, $sym_index) {
 $s1 = $s1 | 0;
 $reloc_type = $reloc_type | 0;
 $size = $size | 0;
 $info = $info | 0;
 $sym_index = $sym_index | 0;
 var $buf_i = 0, $1 = 0, $5 = 0, $15 = 0, $26 = 0, $n_0_i = 0, $33 = 0, $38 = 0, $39 = 0, $44 = 0, $_pre_phi_i = 0, $47 = 0, $51 = 0, $54 = 0, $61 = 0, $63 = 0, $66 = 0, $_ = 0, $70 = 0, $71 = 0, $75 = 0, $84 = 0, $_pre_phi = 0, $91 = 0, $96 = 0, $110 = 0, $125 = 0, $offset_0 = 0, $146 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $161 = 0, $sr_0_i = 0, $167 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $buf_i = sp | 0;
 $1 = $s1 + 2844 | 0;
 if ((HEAP32[$1 >> 2] | 0) == 0) {
  $5 = _new_section($s1, 12288, 1, 3) | 0;
  HEAP32[$1 >> 2] = $5;
  HEAP32[$5 + 36 >> 2] = 4;
  _add_elf_sym(HEAP32[5318] | 0, 0, 4, 17, 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0, 12216) | 0;
  _memset(_section_ptr_add(HEAP32[$1 >> 2] | 0, 12) | 0, 0, 12) | 0;
 }
 $15 = $s1 + 2856 | 0;
 do {
  if ((HEAP32[$15 >> 2] | 0) > ($sym_index | 0)) {
   if ((HEAP32[(HEAP32[$s1 + 2852 >> 2] | 0) + ($sym_index << 2) >> 2] | 0) == 0) {
    $_pre_phi_i = $s1 + 2852 | 0;
    $44 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
    break;
   } else {
    STACKTOP = sp;
    return;
   }
  } else {
   $26 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
   $n_0_i = 1;
   while (1) {
    if (($n_0_i | 0) > ($sym_index | 0)) {
     break;
    } else {
     $n_0_i = $n_0_i << 1;
    }
   }
   $33 = $s1 + 2852 | 0;
   $38 = _tcc_realloc(HEAP32[$33 >> 2] | 0, $n_0_i << 2) | 0;
   HEAP32[$33 >> 2] = $38;
   $39 = HEAP32[$15 >> 2] | 0;
   _memset($38 + ($39 << 2) | 0, 0, $n_0_i - $39 << 2 | 0) | 0;
   HEAP32[$15 >> 2] = $n_0_i;
   $_pre_phi_i = $33;
   $44 = $26;
  }
 } while (0);
 HEAP32[(HEAP32[$_pre_phi_i >> 2] | 0) + ($sym_index << 2) >> 2] = $44;
 $47 = $s1 + 2868 | 0;
 if ((HEAP32[$47 >> 2] | 0) != 0) {
  $51 = HEAP32[5318] | 0;
  $54 = HEAP32[$51 + 4 >> 2] | 0;
  $61 = (HEAP32[(HEAP32[$51 + 56 >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[$54 + ($sym_index << 4) >> 2] | 0) | 0;
  $63 = HEAP32[$54 + ($sym_index << 4) + 4 >> 2] | 0;
  do {
   if (($reloc_type | 0) == 7) {
    $66 = $s1 + 44 | 0;
    $_ = (HEAP32[$66 >> 2] | 0) == 2 ? 163 : 37;
    $70 = HEAP32[$s1 + 2848 >> 2] | 0;
    $71 = $70 | 0;
    if ((HEAP32[$71 >> 2] | 0) == 0) {
     $75 = _section_ptr_add($70, 16) | 0;
     HEAP8[$75] = -1;
     HEAP8[$75 + 1 | 0] = $_ | 16;
     HEAP8[$75 + 2 | 0] = 4;
     HEAP8[$75 + 3 | 0] = 0;
     HEAP8[$75 + 4 | 0] = 0;
     HEAP8[$75 + 5 | 0] = 0;
     HEAP8[$75 + 6 | 0] = -1;
     $84 = $_ & 255;
     HEAP8[$75 + 7 | 0] = $84;
     HEAP8[$75 + 8 | 0] = 8;
     HEAP8[$75 + 9 | 0] = 0;
     HEAP8[$75 + 10 | 0] = 0;
     HEAP8[$75 + 11 | 0] = 0;
     $_pre_phi = $84;
    } else {
     $_pre_phi = $_ & 255;
    }
    $91 = _section_ptr_add($70, 16) | 0;
    HEAP8[$91] = -1;
    HEAP8[$91 + 1 | 0] = $_pre_phi;
    $96 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
    HEAP8[$91 + 2 | 0] = $96;
    HEAP8[$91 + 3 | 0] = $96 >>> 8;
    HEAP8[$91 + 4 | 0] = $96 >>> 16;
    HEAP8[$91 + 5 | 0] = $96 >>> 24;
    HEAP8[$91 + 6 | 0] = 104;
    $110 = (HEAP32[$71 >> 2] | 0) - 32 | 0;
    HEAP8[$91 + 7 | 0] = $110 >>> 1;
    HEAP8[$91 + 8 | 0] = $110 >>> 9;
    HEAP8[$91 + 9 | 0] = $110 >>> 17;
    HEAP8[$91 + 10 | 0] = $110 >>> 25;
    HEAP8[$91 + 11 | 0] = -23;
    $125 = -(HEAP32[$71 >> 2] | 0) | 0;
    HEAP8[$91 + 12 | 0] = $125;
    HEAP8[$91 + 13 | 0] = $125 >>> 8;
    HEAP8[$91 + 14 | 0] = $125 >>> 16;
    HEAP8[$91 + 15 | 0] = $125 >>> 24;
    if ((HEAP32[$66 >> 2] | 0) != 1) {
     $offset_0 = $63;
     break;
    }
    $offset_0 = (HEAP32[$71 >> 2] | 0) - 16 | 0;
   } else {
    $offset_0 = $63;
   }
  } while (0);
  $146 = _put_elf_sym(HEAP32[$47 >> 2] | 0, $offset_0, $size, $info, 0, HEAPU16[$54 + ($sym_index << 4) + 14 >> 1] | 0, $61) | 0;
  $147 = HEAP32[$47 >> 2] | 0;
  $148 = HEAP32[$1 >> 2] | 0;
  $150 = HEAP32[$148 >> 2] | 0;
  $151 = $buf_i | 0;
  $152 = $148 + 60 | 0;
  $153 = HEAP32[$152 >> 2] | 0;
  if (($153 | 0) == 0) {
   _snprintf($151 | 0, 256, 16960, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $148 + 72, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $161 = _new_section(HEAP32[5314] | 0, $151, 9, HEAP32[$147 + 24 >> 2] | 0) | 0;
   HEAP32[$161 + 36 >> 2] = 8;
   HEAP32[$161 + 56 >> 2] = $147;
   HEAP32[$161 + 28 >> 2] = HEAP32[$148 + 16 >> 2];
   HEAP32[$152 >> 2] = $161;
   $sr_0_i = $161;
  } else {
   $sr_0_i = $153;
  }
  $167 = _section_ptr_add($sr_0_i, 8) | 0;
  HEAP32[$167 >> 2] = $150;
  HEAP32[$167 + 4 >> 2] = $146 << 8 | $reloc_type & 255;
 }
 HEAP32[(_section_ptr_add(HEAP32[$1 >> 2] | 0, 4) | 0) >> 2] = 0;
 STACKTOP = sp;
 return;
}
function _store($r, $v) {
 $r = $r | 0;
 $v = $v | 0;
 var $5 = 0, $6 = 0, $8 = 0, $9 = 0, $_pre_i = 0, $12 = 0, $13 = 0, $_pre_i4 = 0, $19 = 0, $20 = 0, $_pre_i10 = 0, $27 = 0, $_01_i11 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $44 = 0, $_pre_i22 = 0, $50 = 0, $51 = 0, $_pre_i28 = 0, $57 = 0, $58 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $80 = 0, $81 = 0, $85 = 0, $86 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $_pre_i40 = 0, $_0 = 0, $_pre = 0, $112 = 0, $114 = 0, $_01_i41 = 0, $115 = 0, $116 = 0, $121 = 0, $122 = 0, $127 = 0, label = 0;
 $5 = HEAP32[$v + 16 >> 2] | 0;
 $6 = $v + 8 | 0;
 $8 = HEAPU16[$6 >> 1] | 0;
 $9 = $8 & 63;
 switch (HEAP32[$v >> 2] & 15 | 0) {
 case 8:
  {
   $_pre_i = HEAP32[5434] | 0;
   $12 = $_pre_i + 1 | 0;
   $13 = HEAP32[13918] | 0;
   if ($12 >>> 0 > (HEAP32[$13 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($13, $12);
    $81 = HEAP32[5434] | 0;
    $80 = HEAP32[13918] | 0;
   } else {
    $81 = $_pre_i;
    $80 = $13;
   }
   HEAP8[(HEAP32[$80 + 4 >> 2] | 0) + $81 | 0] = -39;
   HEAP32[5434] = $12;
   $_0 = 2;
   $_pre_i40 = $12;
   break;
  }
 case 11:
 case 1:
  {
   $_pre_i28 = HEAP32[5434] | 0;
   $57 = $_pre_i28 + 1 | 0;
   $58 = HEAP32[13918] | 0;
   if ($57 >>> 0 > (HEAP32[$58 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($58, $57);
    $96 = HEAP32[5434] | 0;
    $95 = HEAP32[13918] | 0;
   } else {
    $96 = $_pre_i28;
    $95 = $58;
   }
   HEAP8[(HEAP32[$95 + 4 >> 2] | 0) + $96 | 0] = -120;
   HEAP32[5434] = $57;
   $_0 = $r;
   $_pre_i40 = $57;
   break;
  }
 case 10:
  {
   $_pre_i10 = HEAP32[5434] | 0;
   $_01_i11 = 49369;
   $27 = $_pre_i10;
   while (1) {
    $28 = $27 + 1 | 0;
    $29 = HEAP32[13918] | 0;
    if ($28 >>> 0 > (HEAP32[$29 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($29, $28);
     $35 = HEAP32[5434] | 0;
     $34 = HEAP32[13918] | 0;
    } else {
     $35 = $27;
     $34 = $29;
    }
    HEAP8[(HEAP32[$34 + 4 >> 2] | 0) + $35 | 0] = $_01_i11;
    HEAP32[5434] = $28;
    $40 = $_01_i11 >>> 8;
    if (($40 | 0) == 0) {
     break;
    } else {
     $_01_i11 = $40;
     $27 = $28;
    }
   }
   $43 = $_pre_i10 + 3 | 0;
   $44 = HEAP32[13918] | 0;
   if ($43 >>> 0 > (HEAP32[$44 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($44, $43);
    $91 = HEAP32[5434] | 0;
    $90 = HEAP32[13918] | 0;
   } else {
    $91 = $_pre_i10 + 2 | 0;
    $90 = $44;
   }
   HEAP8[(HEAP32[$90 + 4 >> 2] | 0) + $91 | 0] = -37;
   HEAP32[5434] = $43;
   $_0 = 7;
   $_pre_i40 = $43;
   break;
  }
 case 9:
  {
   $_pre_i4 = HEAP32[5434] | 0;
   $19 = $_pre_i4 + 1 | 0;
   $20 = HEAP32[13918] | 0;
   if ($19 >>> 0 > (HEAP32[$20 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($20, $19);
    $86 = HEAP32[5434] | 0;
    $85 = HEAP32[13918] | 0;
   } else {
    $86 = $_pre_i4;
    $85 = $20;
   }
   HEAP8[(HEAP32[$85 + 4 >> 2] | 0) + $86 | 0] = -35;
   HEAP32[5434] = $19;
   $_0 = 2;
   $_pre_i40 = $19;
   break;
  }
 case 2:
  {
   $_pre_i22 = HEAP32[5434] | 0;
   $50 = $_pre_i22 + 1 | 0;
   $51 = HEAP32[13918] | 0;
   if ($50 >>> 0 > (HEAP32[$51 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($51, $50);
    $64 = HEAP32[5434] | 0;
    $63 = HEAP32[13918] | 0;
   } else {
    $64 = $_pre_i22;
    $63 = $51;
   }
   HEAP8[(HEAP32[$63 + 4 >> 2] | 0) + $64 | 0] = 102;
   HEAP32[5434] = $50;
   $68 = $50;
   label = 18;
   break;
  }
 default:
  {
   $68 = HEAP32[5434] | 0;
   label = 18;
  }
 }
 if ((label | 0) == 18) {
  $69 = $68 + 1 | 0;
  $70 = HEAP32[13918] | 0;
  if ($69 >>> 0 > (HEAP32[$70 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($70, $69);
   $76 = HEAP32[5434] | 0;
   $75 = HEAP32[13918] | 0;
  } else {
   $76 = $68;
   $75 = $70;
  }
  HEAP8[(HEAP32[$75 + 4 >> 2] | 0) + $76 | 0] = -119;
  HEAP32[5434] = $69;
  $_0 = $r;
  $_pre_i40 = $69;
 }
 $_pre = HEAP16[$6 >> 1] | 0;
 if (!(($8 & 61 | 0) != 48 & ($_pre & 256) == 0)) {
  _gen_modrm($_0, $_pre & 65535, HEAP32[$v + 32 >> 2] | 0, $5);
  return;
 }
 if (($9 | 0) == ($_0 | 0)) {
  return;
 }
 $112 = ($_0 << 3) + ($9 | 192) | 0;
 if (($112 | 0) == 0) {
  return;
 } else {
  $_01_i41 = $112;
  $114 = $_pre_i40;
 }
 while (1) {
  $115 = $114 + 1 | 0;
  $116 = HEAP32[13918] | 0;
  if ($115 >>> 0 > (HEAP32[$116 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($116, $115);
   $122 = HEAP32[5434] | 0;
   $121 = HEAP32[13918] | 0;
  } else {
   $122 = $114;
   $121 = $116;
  }
  HEAP8[(HEAP32[$121 + 4 >> 2] | 0) + $122 | 0] = $_01_i41;
  HEAP32[5434] = $115;
  $127 = $_01_i41 >>> 8;
  if (($127 | 0) == 0) {
   break;
  } else {
   $_01_i41 = $127;
   $114 = $115;
  }
 }
 return;
}
function _relocate_section($s1, $s) {
 $s1 = $s1 | 0;
 $s = $s | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $rel_03 = 0, $qrel_02 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $31 = 0, $34 = 0, $41 = 0, $qrel_1 = 0, $53 = 0, $62 = 0, $72 = 0, $77 = 0, $87 = 0, $95 = 0, $102 = 0, $110 = 0, $120 = 0, $qrel_2 = 0, $126 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$s + 60 >> 2] | 0;
 $4 = HEAP32[$2 + 4 >> 2] | 0;
 $6 = HEAP32[$2 >> 2] | 0;
 $8 = $4 + $6 | 0;
 $9 = $4;
 L1 : do {
  if (($6 | 0) > 0) {
   $11 = $s + 4 | 0;
   $12 = $s + 44 | 0;
   $13 = $s1 + 44 | 0;
   $14 = $s1 + 2860 | 0;
   $15 = $s1 + 2844 | 0;
   $16 = $s1 + 2852 | 0;
   $17 = $s1 + 48 | 0;
   $qrel_02 = $9;
   $rel_03 = $9;
   while (1) {
    $21 = HEAP32[$rel_03 >> 2] | 0;
    $22 = (HEAP32[$11 >> 2] | 0) + $21 | 0;
    $24 = HEAP32[$rel_03 + 4 >> 2] | 0;
    $25 = $24 >>> 8;
    $31 = HEAP32[(HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) + ($25 << 4) + 4 >> 2] | 0;
    $34 = (HEAP32[$12 >> 2] | 0) + $21 | 0;
    L5 : do {
     switch ($24 & 255 | 0) {
     case 1:
      {
       do {
        if ((HEAP32[$13 >> 2] | 0) == 2) {
         $41 = HEAP32[(HEAP32[$14 >> 2] | 0) + ($25 << 2) >> 2] | 0;
         HEAP32[$qrel_02 >> 2] = $21;
         if (($41 | 0) == 0) {
          HEAP32[$qrel_02 + 4 >> 2] = 8;
          $qrel_1 = $qrel_02 + 8 | 0;
          break;
         } else {
          HEAP32[$qrel_02 + 4 >> 2] = $41 << 8 | 1;
          $qrel_2 = $qrel_02 + 8 | 0;
          break L5;
         }
        } else {
         $qrel_1 = $qrel_02;
        }
       } while (0);
       $53 = $22;
       HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $31;
       $qrel_2 = $qrel_1;
       break;
      }
     case 2:
      {
       do {
        if ((HEAP32[$13 >> 2] | 0) == 2) {
         $62 = HEAP32[(HEAP32[$14 >> 2] | 0) + ($25 << 2) >> 2] | 0;
         if (($62 | 0) == 0) {
          break;
         }
         HEAP32[$qrel_02 >> 2] = $21;
         HEAP32[$qrel_02 + 4 >> 2] = $62 << 8 | 2;
         $qrel_2 = $qrel_02 + 8 | 0;
         break L5;
        }
       } while (0);
       $72 = $22;
       HEAP32[$72 >> 2] = $31 - $34 + (HEAP32[$72 >> 2] | 0);
       $qrel_2 = $qrel_02;
       break;
      }
     case 4:
      {
       $77 = $22;
       HEAP32[$77 >> 2] = $31 - $34 + (HEAP32[$77 >> 2] | 0);
       $qrel_2 = $qrel_02;
       break;
      }
     case 6:
     case 7:
      {
       HEAP32[$22 >> 2] = $31;
       $qrel_2 = $qrel_02;
       break;
      }
     case 10:
      {
       $87 = $22;
       HEAP32[$87 >> 2] = (HEAP32[(HEAP32[$15 >> 2] | 0) + 44 >> 2] | 0) - $34 + (HEAP32[$87 >> 2] | 0);
       $qrel_2 = $qrel_02;
       break;
      }
     case 3:
      {
       $102 = $22;
       HEAP32[$102 >> 2] = (HEAP32[$102 >> 2] | 0) + (HEAP32[(HEAP32[$16 >> 2] | 0) + ($25 << 2) >> 2] | 0);
       $qrel_2 = $qrel_02;
       break;
      }
     case 12:
      {
       if ((HEAP32[$17 >> 2] | 0) == 1) {
        label = 20;
       } else {
        label = 19;
       }
       break;
      }
     case 13:
      {
       if ((HEAP32[$17 >> 2] | 0) != 1) {
        label = 19;
        break L5;
       }
       $120 = $22;
       HEAP16[$120 >> 1] = $31 - $34 + (HEAPU16[$120 >> 1] | 0);
       $qrel_2 = $qrel_02;
       break;
      }
     case 9:
      {
       $95 = $22;
       HEAP32[$95 >> 2] = $31 - (HEAP32[(HEAP32[$15 >> 2] | 0) + 44 >> 2] | 0) + (HEAP32[$95 >> 2] | 0);
       $qrel_2 = $qrel_02;
       break;
      }
     default:
      {
       $qrel_2 = $qrel_02;
      }
     }
    } while (0);
    if ((label | 0) == 19) {
     label = 0;
     _tcc_error(13488, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     label = 20;
    }
    if ((label | 0) == 20) {
     label = 0;
     $110 = $22;
     HEAP16[$110 >> 1] = (HEAPU16[$110 >> 1] | 0) + $31;
     $qrel_2 = $qrel_02;
    }
    $126 = $rel_03 + 8 | 0;
    if ($126 >>> 0 < $8 >>> 0) {
     $qrel_02 = $qrel_2;
     $rel_03 = $126;
    } else {
     break L1;
    }
   }
  }
 } while (0);
 if ((HEAP32[$2 + 24 >> 2] & 2 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$2 + 56 >> 2] = HEAP32[$s1 + 2868 >> 2];
 STACKTOP = sp;
 return;
}
function _tcc_preprocess($s1) {
 $s1 = $s1 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $9 = 0, $16 = 0, $iptr_0_ph = 0, $token_seen_0_ph = 0, $line_ref_0_ph = 0, $file_ref_0_ph = 0, $token_seen_0 = 0, $18 = 0, $21 = 0, $25 = 0, $32 = 0, $33 = 0, $36 = 0, $44 = 0, $d_04 = 0, $51 = 0, $iptr_1 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $iptr_2 = 0, $token_seen_1 = 0, $line_ref_1 = 0, $file_ref_1 = 0, $61 = 0, $65 = 0, $top_02_i = 0, $68 = 0, $71 = 0, $77 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = $s1 + 336 | 0;
 $2 = $s1 + 464 | 0;
 HEAP32[$2 >> 2] = $1;
 $3 = $s1 + 468 | 0;
 HEAP32[$s1 + 724 >> 2] = $3;
 HEAP32[(HEAP32[13912] | 0) + 28 >> 2] = $3;
 HEAP32[5024] = 56232;
 $7 = $s1 + 2784 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$s1 + 2816 >> 2] = $7;
 $9 = HEAP32[13914] | 0;
 HEAP32[13924] = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
 HEAP32[5308] = 3;
 HEAP32[5336] = 29;
 $16 = $s1 + 324 | 0;
 $file_ref_0_ph = 0;
 $line_ref_0_ph = 0;
 $token_seen_0_ph = 0;
 $iptr_0_ph = HEAP32[$2 >> 2] | 0;
 L1 : while (1) {
  $token_seen_0 = $token_seen_0_ph;
  while (1) {
   _next();
   $18 = HEAP32[5310] | 0;
   if (($18 | 0) == -1) {
    break L1;
   }
   $21 = HEAP32[13912] | 0;
   if (($21 | 0) != ($file_ref_0_ph | 0)) {
    label = 11;
    break;
   }
   $25 = ($token_seen_0 | 0) != 0;
   if (($18 | 0) != 10) {
    label = 8;
    break;
   }
   if ($25) {
    label = 7;
    break;
   } else {
    $token_seen_0 = 0;
   }
  }
  do {
   if ((label | 0) == 7) {
    label = 0;
    $file_ref_1 = $file_ref_0_ph;
    $line_ref_1 = $line_ref_0_ph + 1 | 0;
    $token_seen_1 = 0;
    $iptr_2 = $iptr_0_ph;
    $60 = 10;
   } else if ((label | 0) == 8) {
    label = 0;
    if ($25) {
     $file_ref_1 = $file_ref_0_ph;
     $line_ref_1 = $line_ref_0_ph;
     $token_seen_1 = $token_seen_0;
     $iptr_2 = $iptr_0_ph;
     $60 = $18;
     break;
    }
    $32 = HEAP32[$file_ref_0_ph + 16 >> 2] | 0;
    $33 = $32 - $line_ref_0_ph | 0;
    if ($33 >>> 0 > 7 >>> 0) {
     label = 11;
     break;
    }
    if (($32 | 0) == ($line_ref_0_ph | 0)) {
     $iptr_1 = $iptr_0_ph;
     label = 16;
     break;
    } else {
     $d_04 = $33;
    }
    while (1) {
     _fputc(10, HEAP32[$16 >> 2] | 0) | 0;
     $51 = $d_04 - 1 | 0;
     if (($51 | 0) == 0) {
      $iptr_1 = $iptr_0_ph;
      label = 16;
      break;
     } else {
      $d_04 = $51;
     }
    }
   }
  } while (0);
  if ((label | 0) == 11) {
   label = 0;
   $36 = HEAP32[$2 >> 2] | 0;
   do {
    if ($36 >>> 0 > $iptr_0_ph >>> 0) {
     $44 = 16016;
    } else {
     if ($36 >>> 0 < $iptr_0_ph >>> 0) {
      $44 = 15872;
      break;
     }
     $44 = $36 >>> 0 > $1 >>> 0 ? 15720 : 55752;
    }
   } while (0);
   _fprintf(HEAP32[$16 >> 2] | 0, 15584, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$21 + 16 >> 2], HEAP32[tempVarArgs + 8 >> 2] = $21 + 32, HEAP32[tempVarArgs + 16 >> 2] = $44, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   $iptr_1 = $36;
   label = 16;
  }
  if ((label | 0) == 16) {
   label = 0;
   $53 = HEAP32[13912] | 0;
   $55 = HEAP32[$53 + 16 >> 2] | 0;
   $56 = HEAP32[5310] | 0;
   $57 = ($56 | 0) != 10;
   $58 = $57 & 1;
   if ($57) {
    $file_ref_1 = $53;
    $line_ref_1 = $55;
    $token_seen_1 = $58;
    $iptr_2 = $iptr_1;
    $60 = $56;
   } else {
    $file_ref_0_ph = $53;
    $line_ref_0_ph = $55;
    $token_seen_0_ph = $58;
    $iptr_0_ph = $iptr_1;
    continue;
   }
  }
  $61 = _get_tok_str($60, 21208) | 0;
  _fputs($61 | 0, HEAP32[$16 >> 2] | 0) | 0;
  $file_ref_0_ph = $file_ref_1;
  $line_ref_0_ph = $line_ref_1;
  $token_seen_0_ph = $token_seen_1;
  $iptr_0_ph = $iptr_2;
 }
 $65 = HEAP32[13914] | 0;
 if (($65 | 0) == ($9 | 0)) {
  HEAP32[13914] = $9;
  STACKTOP = sp;
  return 0;
 } else {
  $top_02_i = $65;
 }
 while (1) {
  $68 = HEAP32[$top_02_i + 28 >> 2] | 0;
  $71 = HEAP32[$top_02_i + 12 >> 2] | 0;
  if (($71 | 0) != 0) {
   _tcc_free($71);
  }
  $77 = HEAP32[$top_02_i >> 2] | 0;
  if (($77 | 0) > 255 & ($77 | 0) < (HEAP32[5306] | 0)) {
   HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($77 - 256 << 2) >> 2] | 0) + 4 >> 2] = 0;
  }
  _sym_free($top_02_i);
  if (($68 | 0) == ($9 | 0)) {
   break;
  } else {
   $top_02_i = $68;
  }
 }
 HEAP32[13914] = $9;
 STACKTOP = sp;
 return 0;
}
function _define_push($v, $macro_type, $str, $first_arg) {
 $v = $v | 0;
 $macro_type = $macro_type | 0;
 $str = $str | 0;
 $first_arg = $first_arg | 0;
 var $buf_i = 0, $cv_i = 0, $2 = 0, $10 = 0, $16 = 0, $17 = 0, $18 = 0, $a14_i = 0, $b13_i = 0, $20 = 0, $phitmp27_i = 0, $24 = 0, $n_0_ph_i_i = 0, $p_0_i_i = 0, $n_0_i_i = 0, $tab_0_i_i = 0, $43 = 0, $p_1_i_i = 0, $48 = 0, $49 = 0, $n_0_ph_i4_i = 0, $p_0_i6_i = 0, $n_0_i7_i = 0, $tab_0_i8_i = 0, $68 = 0, $p_1_i11_i = 0, $74 = 0, $75 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1048 | 0;
 $buf_i = sp | 0;
 $cv_i = sp + 1032 | 0;
 $2 = $v - 256 | 0;
 do {
  if ($2 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
   $10 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($2 << 2) >> 2] | 0) + 4 >> 2] | 0;
   if (($10 | 0) == 0) {
    break;
   }
   $16 = $buf_i | 0;
   $17 = $cv_i;
   $18 = $cv_i;
   $b13_i = $str;
   $a14_i = HEAP32[$10 + 12 >> 2] | 0;
   while (1) {
    $20 = HEAP32[$a14_i >> 2] | 0;
    $phitmp27_i = (HEAP32[$b13_i >> 2] | 0) == 0;
    if (($20 | 0) == 0) {
     label = 21;
     break;
    }
    if ($phitmp27_i) {
     break;
    }
    $24 = $a14_i + 4 | 0;
    switch ($20 | 0) {
    case 192:
    case 201:
    case 202:
     {
      $n_0_ph_i_i = 2;
      label = 10;
      break;
     }
    case 193:
     {
      $n_0_ph_i_i = 3;
      label = 10;
      break;
     }
    case 181:
    case 184:
    case 206:
     {
      HEAP32[$18 >> 2] = $24;
      HEAP32[$a14_i + 8 >> 2] = $a14_i + 20;
      $p_1_i_i = $a14_i + ((((HEAP32[HEAP32[$18 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
      break;
     }
    case 179:
    case 200:
    case 180:
    case 183:
    case 185:
    case 186:
     {
      HEAP32[$17 >> 2] = HEAP32[$24 >> 2];
      $p_1_i_i = $a14_i + 8 | 0;
      break;
     }
    default:
     {
      $p_1_i_i = $24;
     }
    }
    if ((label | 0) == 10) {
     label = 0;
     $tab_0_i_i = $17;
     $n_0_i_i = $n_0_ph_i_i;
     $p_0_i_i = $24;
     while (1) {
      HEAP32[$tab_0_i_i >> 2] = HEAP32[$p_0_i_i >> 2];
      $43 = $n_0_i_i - 1 | 0;
      if (($43 | 0) == 0) {
       break;
      } else {
       $tab_0_i_i = $tab_0_i_i + 4 | 0;
       $n_0_i_i = $43;
       $p_0_i_i = $p_0_i_i + 4 | 0;
      }
     }
     $p_1_i_i = $a14_i + ($n_0_ph_i_i + 1 << 2) | 0;
    }
    _pstrcpy($16, 1025, _get_tok_str($20, $cv_i) | 0) | 0;
    $48 = $b13_i + 4 | 0;
    $49 = HEAP32[$b13_i >> 2] | 0;
    switch ($49 | 0) {
    case 192:
    case 201:
    case 202:
     {
      $n_0_ph_i4_i = 2;
      label = 17;
      break;
     }
    case 181:
    case 184:
    case 206:
     {
      HEAP32[$18 >> 2] = $48;
      HEAP32[$b13_i + 8 >> 2] = $b13_i + 20;
      $p_1_i11_i = $b13_i + ((((HEAP32[HEAP32[$18 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
      break;
     }
    case 193:
     {
      $n_0_ph_i4_i = 3;
      label = 17;
      break;
     }
    case 179:
    case 200:
    case 180:
    case 183:
    case 185:
    case 186:
     {
      HEAP32[$17 >> 2] = HEAP32[$48 >> 2];
      $p_1_i11_i = $b13_i + 8 | 0;
      break;
     }
    default:
     {
      $p_1_i11_i = $48;
     }
    }
    if ((label | 0) == 17) {
     label = 0;
     $tab_0_i8_i = $17;
     $n_0_i7_i = $n_0_ph_i4_i;
     $p_0_i6_i = $48;
     while (1) {
      HEAP32[$tab_0_i8_i >> 2] = HEAP32[$p_0_i6_i >> 2];
      $68 = $n_0_i7_i - 1 | 0;
      if (($68 | 0) == 0) {
       break;
      } else {
       $tab_0_i8_i = $tab_0_i8_i + 4 | 0;
       $n_0_i7_i = $68;
       $p_0_i6_i = $p_0_i6_i + 4 | 0;
      }
     }
     $p_1_i11_i = $b13_i + ($n_0_ph_i4_i + 1 << 2) | 0;
    }
    if ((_strcmp($16 | 0, _get_tok_str($49, $cv_i) | 0) | 0) == 0) {
     $b13_i = $p_1_i11_i;
     $a14_i = $p_1_i_i;
    } else {
     break;
    }
   }
   if ((label | 0) == 21) {
    if ($phitmp27_i) {
     break;
    }
   }
   $74 = _get_tok_str($v, 0) | 0;
   _tcc_warning(10768, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $74, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
 } while (0);
 $75 = _sym_push2(55656, $v, $macro_type, 0) | 0;
 HEAP32[$75 + 12 >> 2] = $str;
 HEAP32[$75 + 24 >> 2] = $first_arg;
 HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($2 << 2) >> 2] | 0) + 4 >> 2] = $75;
 STACKTOP = sp;
 return;
}
function _put_elf_sym($s, $value, $size, $info, $other, $shndx, $name) {
 $s = $s | 0;
 $value = $value | 0;
 $size = $size | 0;
 $info = $info | 0;
 $other = $other | 0;
 $shndx = $shndx | 0;
 $name = $name | 0;
 var $1 = 0, $5 = 0, $7 = 0, $9 = 0, $name_offset_0 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $38 = 0, $42 = 0, $43 = 0, $45 = 0, $_02_i = 0, $h_01_i = 0, $47 = 0, $49 = 0, $50 = 0, $h_1_i = 0, $57 = 0, $58 = 0, $h_0_lcssa_i = 0, $62 = 0, $65 = 0, $68 = 0, $69 = 0, $71 = 0, $77 = 0, $79 = 0, $80 = 0, $87 = 0, $91 = 0, $92 = 0, $93 = 0, $sym_03_i = 0, $ptr_02_i = 0, $sym_index_01_i = 0, $107 = 0, $108 = 0, $110 = 0, $_02_i_i = 0, $h_01_i_i = 0, $112 = 0, $114 = 0, $115 = 0, $h_1_i_i = 0, $122 = 0, $123 = 0, $h_0_lcssa_i_i = 0, $126 = 0, $132 = 0, $136 = 0;
 $1 = _section_ptr_add($s, 16) | 0;
 if (($name | 0) == 0) {
  $name_offset_0 = 0;
 } else {
  $5 = HEAP32[$s + 56 >> 2] | 0;
  $7 = (_strlen($name | 0) | 0) + 1 | 0;
  $9 = HEAP32[$5 >> 2] | 0;
  _memcpy(_section_ptr_add($5, $7) | 0, $name | 0, $7) | 0;
  $name_offset_0 = $9;
 }
 HEAP32[$1 >> 2] = $name_offset_0;
 HEAP32[$1 + 4 >> 2] = $value;
 HEAP32[$1 + 8 >> 2] = $size;
 HEAP8[$1 + 12 | 0] = $info;
 HEAP8[$1 + 13 | 0] = $other;
 HEAP16[$1 + 14 >> 1] = $shndx;
 $24 = $s + 4 | 0;
 $29 = $1 - (HEAP32[$24 >> 2] | 0) >> 4;
 $30 = $s + 64 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 if (($31 | 0) == 0) {
  return $29 | 0;
 }
 $35 = _section_ptr_add($31, 4) | 0;
 $37 = HEAP32[$31 + 4 >> 2] | 0;
 $38 = $37;
 if (($info & 240 | 0) == 0) {
  HEAP32[$35 >> 2] = 0;
  $136 = $37 + 4 | 0;
  HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1;
  return $29 | 0;
 }
 $42 = HEAP32[$38 >> 2] | 0;
 $43 = HEAP8[$name] | 0;
 if ($43 << 24 >> 24 == 0) {
  $h_0_lcssa_i = 0;
 } else {
  $h_01_i = 0;
  $_02_i = $name;
  $45 = $43;
  while (1) {
   $47 = $_02_i + 1 | 0;
   $49 = ($h_01_i << 4) + ($45 & 255) | 0;
   $50 = $49 & -268435456;
   if (($50 | 0) == 0) {
    $h_1_i = $49;
   } else {
    $h_1_i = $50 >>> 24 ^ $49;
   }
   $57 = $h_1_i & (($49 | 268435455) ^ -268435456);
   $58 = HEAP8[$47] | 0;
   if ($58 << 24 >> 24 == 0) {
    $h_0_lcssa_i = $57;
    break;
   } else {
    $h_01_i = $57;
    $_02_i = $47;
    $45 = $58;
   }
  }
 }
 $62 = $38 + ((($h_0_lcssa_i >>> 0) % ($42 >>> 0) | 0) + 2 << 2) | 0;
 HEAP32[$35 >> 2] = HEAP32[$62 >> 2];
 HEAP32[$62 >> 2] = $29;
 $65 = $37 + 4 | 0;
 HEAP32[$65 >> 2] = (HEAP32[$65 >> 2] | 0) + 1;
 $68 = $31 + 52 | 0;
 $69 = HEAP32[$68 >> 2] | 0;
 HEAP32[$68 >> 2] = $69 + 1;
 $71 = $42 << 1;
 if (($69 | 0) < ($71 | 0)) {
  return $29 | 0;
 }
 $77 = HEAP32[(HEAP32[$s + 56 >> 2] | 0) + 4 >> 2] | 0;
 $79 = HEAP32[$s >> 2] | 0;
 $80 = $79 >>> 4;
 HEAP32[HEAP32[$30 >> 2] >> 2] = 0;
 $87 = _section_ptr_add(HEAP32[$30 >> 2] | 0, $71 + 2 + $80 << 2) | 0;
 HEAP32[$87 >> 2] = $71;
 HEAP32[$87 + 4 >> 2] = $80;
 $91 = $87 + 8 | 0;
 $92 = $91;
 $93 = $71 | 1;
 _memset($91 | 0, 0, $93 << 2 | 0) | 0;
 if ($79 >>> 0 <= 31 >>> 0) {
  return $29 | 0;
 }
 $sym_index_01_i = 1;
 $ptr_02_i = $92 + ($93 << 2) | 0;
 $sym_03_i = (HEAP32[$24 >> 2] | 0) + 16 | 0;
 while (1) {
  if ((HEAPU8[$sym_03_i + 12 | 0] | 0) >>> 0 > 15 >>> 0) {
   $107 = $77 + (HEAP32[$sym_03_i >> 2] | 0) | 0;
   $108 = HEAP8[$107] | 0;
   if ($108 << 24 >> 24 == 0) {
    $h_0_lcssa_i_i = 0;
   } else {
    $h_01_i_i = 0;
    $_02_i_i = $107;
    $110 = $108;
    while (1) {
     $112 = $_02_i_i + 1 | 0;
     $114 = ($h_01_i_i << 4) + ($110 & 255) | 0;
     $115 = $114 & -268435456;
     if (($115 | 0) == 0) {
      $h_1_i_i = $114;
     } else {
      $h_1_i_i = $115 >>> 24 ^ $114;
     }
     $122 = $h_1_i_i & (($114 | 268435455) ^ -268435456);
     $123 = HEAP8[$112] | 0;
     if ($123 << 24 >> 24 == 0) {
      $h_0_lcssa_i_i = $122;
      break;
     } else {
      $h_01_i_i = $122;
      $_02_i_i = $112;
      $110 = $123;
     }
    }
   }
   $126 = $92 + ((($h_0_lcssa_i_i >>> 0) % ($71 >>> 0) | 0) << 2) | 0;
   HEAP32[$ptr_02_i >> 2] = HEAP32[$126 >> 2];
   HEAP32[$126 >> 2] = $sym_index_01_i;
  } else {
   HEAP32[$ptr_02_i >> 2] = 0;
  }
  $132 = $sym_index_01_i + 1 | 0;
  if (($132 | 0) < ($80 | 0)) {
   $sym_index_01_i = $132;
   $ptr_02_i = $ptr_02_i + 4 | 0;
   $sym_03_i = $sym_03_i + 16 | 0;
  } else {
   break;
  }
 }
 return $29 | 0;
}
function _gfunc_prolog($func_type) {
 $func_type = $func_type | 0;
 var $align = 0, $2 = 0, $5 = 0, $10 = 0, $fastcall_nb_regs_0 = 0, $fastcall_regs_ptr_0 = 0, $13 = 0, $15 = 0, $16$0 = 0, $16$1 = 0, $$etemp$2 = 0, $param_index_0_ph = 0, $addr_0_ph = 0, $21 = 0, $23 = 0, $addr_019 = 0, $param_index_018 = 0, $24 = 0, $25 = 0, $_pre_i = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $param_addr_0 = 0, $addr_1 = 0, $53 = 0, $61 = 0, $addr_0_lcssa = 0, $_pre_i4 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $81 = 0, $82 = 0, $87 = 0, $88 = 0, $94 = 0, $95 = 0, $100 = 0, $101 = 0, $105 = 0, $106 = 0, $111 = 0, $112 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $align = sp | 0;
 $2 = HEAP32[$func_type + 4 >> 2] | 0;
 $5 = HEAP32[$2 + 8 >> 2] & 7;
 HEAP32[5356] = 0;
 HEAP32[13900] = 0;
 if (($5 - 2 | 0) >>> 0 < 3 >>> 0) {
  $fastcall_regs_ptr_0 = 7600;
  $fastcall_nb_regs_0 = $5 - 1 | 0;
 } else {
  $10 = ($5 | 0) == 5;
  $fastcall_regs_ptr_0 = $10 ? 7592 : 0;
  $fastcall_nb_regs_0 = $10 ? 2 : 0;
 }
 $13 = (HEAP32[5434] | 0) + 9 | 0;
 HEAP32[5434] = $13;
 HEAP32[13902] = $13;
 $15 = $2 + 16 | 0;
 $16$0 = HEAP32[$15 >> 2] | 0;
 $16$1 = HEAP32[$15 + 4 >> 2] | 0;
 $$etemp$2 = 55592;
 HEAP32[$$etemp$2 >> 2] = $16$0;
 HEAP32[$$etemp$2 + 4 >> 2] = $16$1;
 if (($16$0 & 15 | 0) == 7 & ($16$1 & 0 | 0) == 0) {
  HEAP32[13900] = 8;
  $addr_0_ph = 12;
  $param_index_0_ph = 1;
 } else {
  $addr_0_ph = 8;
  $param_index_0_ph = 0;
 }
 $21 = HEAP32[$2 + 24 >> 2] | 0;
 if (($21 | 0) == 0) {
  $addr_0_lcssa = $addr_0_ph;
 } else {
  $param_index_018 = $param_index_0_ph;
  $addr_019 = $addr_0_ph;
  $23 = $21;
  while (1) {
   $24 = $23 + 16 | 0;
   $25 = _type_size($24, $align) | 0;
   if (($param_index_018 | 0) < ($fastcall_nb_regs_0 | 0)) {
    HEAP32[5356] = (HEAP32[5356] | 0) - 4;
    $_pre_i = HEAP32[5434] | 0;
    $30 = $_pre_i + 1 | 0;
    $31 = HEAP32[13918] | 0;
    if ($30 >>> 0 > (HEAP32[$31 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($31, $30);
     $37 = HEAP32[5434] | 0;
     $36 = HEAP32[13918] | 0;
    } else {
     $37 = $_pre_i;
     $36 = $31;
    }
    HEAP8[(HEAP32[$36 + 4 >> 2] | 0) + $37 | 0] = -119;
    HEAP32[5434] = $30;
    _gen_modrm(HEAPU8[$fastcall_regs_ptr_0 + $param_index_018 | 0] | 0, 50, 0, HEAP32[5356] | 0);
    $addr_1 = $addr_019;
    $param_addr_0 = HEAP32[5356] | 0;
   } else {
    $addr_1 = ($25 + 3 & -4) + $addr_019 | 0;
    $param_addr_0 = $addr_019;
   }
   $53 = HEAP32[$23 >> 2] & -536870913;
   _sym_push($53, $24, _lvalue_type(HEAP32[$24 >> 2] | 0) | 0 | 50, $param_addr_0) | 0;
   $61 = HEAP32[$23 + 24 >> 2] | 0;
   if (($61 | 0) == 0) {
    $addr_0_lcssa = $addr_1;
    break;
   } else {
    $param_index_018 = $param_index_018 + 1 | 0;
    $addr_019 = $addr_1;
    $23 = $61;
   }
  }
 }
 HEAP32[13904] = ($5 | 0) == 1 ? $addr_0_lcssa - 8 | 0 : 0;
 if ((HEAP32[(HEAP32[5314] | 0) + 84 >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $_pre_i4 = HEAP32[5434] | 0;
 $69 = $_pre_i4 + 1 | 0;
 $70 = HEAP32[13918] | 0;
 if ($69 >>> 0 > (HEAP32[$70 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($70, $69);
  $76 = HEAP32[5434] | 0;
  $75 = HEAP32[13918] | 0;
 } else {
  $76 = $_pre_i4;
  $75 = $70;
 }
 HEAP8[(HEAP32[$75 + 4 >> 2] | 0) + $76 | 0] = -72;
 HEAP32[5434] = $69;
 $81 = $_pre_i4 + 5 | 0;
 $82 = HEAP32[13918] | 0;
 if ($81 >>> 0 > (HEAP32[$82 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($82, $81);
  $88 = HEAP32[13918] | 0;
  $87 = HEAP32[5434] | 0;
 } else {
  $88 = $82;
  $87 = $_pre_i4 + 1 | 0;
 }
 HEAP32[(HEAP32[$88 + 4 >> 2] | 0) + $87 >> 2] = 0;
 HEAP32[5434] = $81;
 $94 = $_pre_i4 + 6 | 0;
 $95 = HEAP32[13918] | 0;
 if ($94 >>> 0 > (HEAP32[$95 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($95, $94);
  $101 = HEAP32[5434] | 0;
  $100 = HEAP32[13918] | 0;
 } else {
  $101 = $81;
  $100 = $95;
 }
 HEAP8[(HEAP32[$100 + 4 >> 2] | 0) + $101 | 0] = -72;
 HEAP32[5434] = $94;
 $105 = $_pre_i4 + 10 | 0;
 $106 = HEAP32[13918] | 0;
 if ($105 >>> 0 > (HEAP32[$106 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($106, $105);
  $112 = HEAP32[13918] | 0;
  $111 = HEAP32[5434] | 0;
 } else {
  $112 = $106;
  $111 = $_pre_i4 + 6 | 0;
 }
 HEAP32[(HEAP32[$112 + 4 >> 2] | 0) + $111 >> 2] = 0;
 HEAP32[5434] = $105;
 HEAP32[13910] = HEAP32[HEAP32[5358] >> 2];
 STACKTOP = sp;
 return;
}
function _check_comparison_pointer_types($p1, $p2, $op) {
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 $op = $op | 0;
 var $tmp_type1 = 0, $tmpcast = 0, $tmp_type2 = 0, $tmpcast5 = 0, $8 = 0, $16 = 0, $28 = 0, $30 = 0, $38 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $type1_0 = 0, $type2_0 = 0, $type1_1 = 0, $67 = 0, $type2_1 = 0, $type1_2 = 0, $79 = 0, $80$0 = 0, $80$1 = 0, $81 = 0, $82$0 = 0, $82$1 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tmp_type1 = sp | 0;
 $tmpcast = $tmp_type1;
 $tmp_type2 = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $tmpcast5 = $tmp_type2;
 do {
  if ((HEAP16[$p1 + 8 >> 1] & 831) == 48) {
   $8 = HEAP32[$p1 >> 2] & 15;
   if (($8 | 0) == 0) {
    if ((HEAP32[$p1 + 16 >> 2] | 0) != 0) {
     break;
    }
    STACKTOP = sp;
    return;
   } else if (($8 | 0) == 12) {
    $16 = $p1 + 16 | 0;
    if (!((HEAP32[$16 >> 2] | 0) == 0 & (HEAP32[$16 + 4 >> 2] | 0) == 0)) {
     break;
    }
    STACKTOP = sp;
    return;
   } else if (($8 | 0) == 4) {
    if ((HEAP32[$p1 + 16 >> 2] | 0) != 0) {
     break;
    }
    STACKTOP = sp;
    return;
   } else {
    break;
   }
  }
 } while (0);
 $28 = HEAP32[$p2 >> 2] | 0;
 do {
  if ((HEAP16[$p2 + 8 >> 1] & 831) == 48) {
   $30 = $28 & 15;
   if (($30 | 0) == 0) {
    if ((HEAP32[$p2 + 16 >> 2] | 0) != 0) {
     break;
    }
    STACKTOP = sp;
    return;
   } else if (($30 | 0) == 12) {
    $38 = $p2 + 16 | 0;
    if (!((HEAP32[$38 >> 2] | 0) == 0 & (HEAP32[$38 + 4 >> 2] | 0) == 0)) {
     break;
    }
    STACKTOP = sp;
    return;
   } else if (($30 | 0) == 4) {
    if ((HEAP32[$p2 + 16 >> 2] | 0) != 0) {
     break;
    }
    STACKTOP = sp;
    return;
   } else {
    break;
   }
  }
 } while (0);
 $45 = $p1 | 0;
 $46 = $p2 | 0;
 $49 = HEAP32[$p1 >> 2] & 15;
 $50 = $28 & 15;
 if (($49 | 0) == 12 | ($49 | 0) == 2 | ($49 | 0) == 1 | ($49 | 0) == 0) {
  if (($op | 0) != 45) {
   label = 14;
  }
 } else {
  if (($50 >>> 0 < 3 >>> 0 | ($50 | 0) == 12) & ($op | 0) != 45) {
   label = 14;
  }
 }
 if ((label | 0) == 14) {
  if (($op & -2 | 0) == 160) {
   STACKTOP = sp;
   return;
  }
  _tcc_warning(19608, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  STACKTOP = sp;
  return;
 }
 if (($49 | 0) == 4) {
  $type1_0 = (HEAP32[$p1 + 4 >> 2] | 0) + 16 | 0;
  label = 18;
 } else if (($49 | 0) == 6) {
  $type1_0 = $45;
  label = 18;
 } else {
  $type1_1 = $45;
  $type2_0 = $46;
  label = 20;
 }
 do {
  if ((label | 0) == 18) {
   if (($50 | 0) == 6) {
    $type1_2 = $type1_0;
    $type2_1 = $46;
    break;
   } else if (($50 | 0) != 4) {
    $type1_1 = $type1_0;
    $type2_0 = $46;
    label = 20;
    break;
   }
   $type1_2 = $type1_0;
   $type2_1 = (HEAP32[$p2 + 4 >> 2] | 0) + 16 | 0;
  }
 } while (0);
 while (1) {
  if ((label | 0) == 20) {
   label = 0;
   $67 = _get_tok_str($op, 0) | 0;
   _tcc_error(19568, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $67, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $type1_2 = $type1_1;
   $type2_1 = $type2_0;
  }
  if ((HEAP32[$type1_2 >> 2] & 15 | 0) == 3) {
   label = 26;
   break;
  }
  if ((HEAP32[$type2_1 >> 2] & 15 | 0) == 3) {
   label = 26;
   break;
  }
  $79 = $type1_2;
  $80$0 = HEAP32[$79 >> 2] | 0;
  $80$1 = HEAP32[$79 + 4 >> 2] | 0;
  HEAP32[$tmp_type1 >> 2] = $80$0;
  HEAP32[$tmp_type1 + 4 >> 2] = $80$1;
  $81 = $type2_1;
  $82$0 = HEAP32[$81 >> 2] | 0;
  $82$1 = HEAP32[$81 + 4 >> 2] | 0;
  HEAP32[$tmp_type2 >> 2] = $82$0;
  HEAP32[$tmp_type2 + 4 >> 2] = $82$1;
  HEAP32[$tmp_type1 >> 2] = $80$0 & -6161;
  HEAP32[$tmp_type2 >> 2] = $82$0 & -6161;
  if ((_compare_types($tmpcast, $tmpcast5, 0) | 0) != 0) {
   label = 26;
   break;
  }
  if (($op | 0) == 45) {
   $type1_1 = $type1_2;
   $type2_0 = $type2_1;
   label = 20;
  } else {
   label = 25;
   break;
  }
 }
 if ((label | 0) == 25) {
  _tcc_warning(19504, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 26) {
  STACKTOP = sp;
  return;
 }
}
function _add_char($c) {
 $c = $c | 0;
 var $2 = 0, $3 = 0, $4 = 0, $size_0_i_i = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $size_0_i_i4 = 0, $28 = 0, $29 = 0, $size_0_i_i10 = 0, $39 = 0, $40 = 0, $44 = 0, $45 = 0, $size_0_i_i16 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $size_0_i_i22 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $77 = 0, $size_0_i_i28 = 0, $85 = 0, $86 = 0, $90 = 0, $91 = 0, $92 = 0, $size_0_i_i34 = 0, $100 = 0, $101 = 0;
 if (($c | 0) == 92 | ($c | 0) == 39 | ($c | 0) == 34) {
  $2 = HEAP32[13634] | 0;
  $3 = $2 + 1 | 0;
  $4 = HEAP32[13636] | 0;
  if (($2 | 0) < ($4 | 0)) {
   $13 = HEAP32[13635] | 0;
  } else {
   $size_0_i_i = ($4 | 0) == 0 ? 8 : $4;
   while (1) {
    if (($size_0_i_i | 0) < ($3 | 0)) {
     $size_0_i_i = $size_0_i_i << 1;
    } else {
     break;
    }
   }
   $12 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i) | 0;
   HEAP32[13637] = $12;
   HEAP32[13636] = $size_0_i_i;
   HEAP32[13635] = $12;
   $13 = $12;
  }
  HEAP8[$13 + $2 | 0] = 92;
  HEAP32[13634] = $3;
  $16 = $3;
 } else {
  $16 = HEAP32[13634] | 0;
 }
 $18 = $16 + 1 | 0;
 $19 = HEAP32[13636] | 0;
 $20 = ($16 | 0) < ($19 | 0);
 if (($c - 32 | 0) >>> 0 < 95 >>> 0) {
  if ($20) {
   $29 = HEAP32[13635] | 0;
  } else {
   $size_0_i_i4 = ($19 | 0) == 0 ? 8 : $19;
   while (1) {
    if (($size_0_i_i4 | 0) < ($18 | 0)) {
     $size_0_i_i4 = $size_0_i_i4 << 1;
    } else {
     break;
    }
   }
   $28 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i4) | 0;
   HEAP32[13637] = $28;
   HEAP32[13636] = $size_0_i_i4;
   HEAP32[13635] = $28;
   $29 = $28;
  }
  HEAP8[$29 + $16 | 0] = $c;
  HEAP32[13634] = $18;
  return;
 }
 if ($20) {
  $40 = HEAP32[13635] | 0;
 } else {
  $size_0_i_i10 = ($19 | 0) == 0 ? 8 : $19;
  while (1) {
   if (($size_0_i_i10 | 0) < ($18 | 0)) {
    $size_0_i_i10 = $size_0_i_i10 << 1;
   } else {
    break;
   }
  }
  $39 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i10) | 0;
  HEAP32[13637] = $39;
  HEAP32[13636] = $size_0_i_i10;
  HEAP32[13635] = $39;
  $40 = $39;
 }
 HEAP8[$40 + $16 | 0] = 92;
 HEAP32[13634] = $18;
 if (($c | 0) == 10) {
  $44 = $16 + 2 | 0;
  $45 = HEAP32[13636] | 0;
  if (($18 | 0) < ($45 | 0)) {
   $54 = HEAP32[13635] | 0;
  } else {
   $size_0_i_i16 = ($45 | 0) == 0 ? 8 : $45;
   while (1) {
    if (($size_0_i_i16 | 0) < ($44 | 0)) {
     $size_0_i_i16 = $size_0_i_i16 << 1;
    } else {
     break;
    }
   }
   $53 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i16) | 0;
   HEAP32[13637] = $53;
   HEAP32[13636] = $size_0_i_i16;
   HEAP32[13635] = $53;
   $54 = $53;
  }
  HEAP8[$54 + $18 | 0] = 110;
  HEAP32[13634] = $44;
  return;
 }
 $59 = $c >>> 6 & 7 | 48;
 $60 = $16 + 2 | 0;
 $61 = HEAP32[13636] | 0;
 if (($18 | 0) < ($61 | 0)) {
  $70 = HEAP32[13635] | 0;
 } else {
  $size_0_i_i22 = ($61 | 0) == 0 ? 8 : $61;
  while (1) {
   if (($size_0_i_i22 | 0) < ($60 | 0)) {
    $size_0_i_i22 = $size_0_i_i22 << 1;
   } else {
    break;
   }
  }
  $69 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i22) | 0;
  HEAP32[13637] = $69;
  HEAP32[13636] = $size_0_i_i22;
  HEAP32[13635] = $69;
  $70 = $69;
 }
 HEAP8[$70 + $18 | 0] = $59;
 HEAP32[13634] = $60;
 $75 = $c >>> 3 & 7 | 48;
 $76 = $16 + 3 | 0;
 $77 = HEAP32[13636] | 0;
 if (($60 | 0) < ($77 | 0)) {
  $86 = HEAP32[13635] | 0;
 } else {
  $size_0_i_i28 = ($77 | 0) == 0 ? 8 : $77;
  while (1) {
   if (($size_0_i_i28 | 0) < ($76 | 0)) {
    $size_0_i_i28 = $size_0_i_i28 << 1;
   } else {
    break;
   }
  }
  $85 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i28) | 0;
  HEAP32[13637] = $85;
  HEAP32[13636] = $size_0_i_i28;
  HEAP32[13635] = $85;
  $86 = $85;
 }
 HEAP8[$86 + $60 | 0] = $75;
 HEAP32[13634] = $76;
 $90 = $c & 7 | 48;
 $91 = $16 + 4 | 0;
 $92 = HEAP32[13636] | 0;
 if (($76 | 0) < ($92 | 0)) {
  $101 = HEAP32[13635] | 0;
 } else {
  $size_0_i_i34 = ($92 | 0) == 0 ? 8 : $92;
  while (1) {
   if (($size_0_i_i34 | 0) < ($91 | 0)) {
    $size_0_i_i34 = $size_0_i_i34 << 1;
   } else {
    break;
   }
  }
  $100 = _tcc_realloc(HEAP32[13637] | 0, $size_0_i_i34) | 0;
  HEAP32[13637] = $100;
  HEAP32[13636] = $size_0_i_i34;
  HEAP32[13635] = $100;
  $101 = $100;
 }
 HEAP8[$101 + $76 | 0] = $90;
 HEAP32[13634] = $91;
 return;
}
function _gen_function($sym) {
 $sym = $sym | 0;
 var $1 = 0, $2 = 0, $4 = 0, $7 = 0, $14 = 0, $19 = 0, $s_04_i = 0, $32 = 0, $s_06_i = 0, $37 = 0, $40 = 0, $i_03_i_i_i = 0, $last_sym_02_i_i_i = 0, $sym_01_i_i_i = 0, $46 = 0, $scevgep4_i_i_i = 0, $sym_0_i_i = 0, $56 = 0, $61 = 0, $s_01_i = 0, $64 = 0, $66 = 0, $70 = 0, $76 = 0, $92 = 0, $100 = 0, $106 = 0, $113 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $1 = HEAP32[5338] | 0;
 HEAP32[5338] = 0;
 $2 = HEAP32[13918] | 0;
 $4 = HEAP32[$2 >> 2] | 0;
 HEAP32[5434] = $4;
 _put_extern_sym($sym, $2, $4, 0);
 $7 = _get_tok_str(HEAP32[$sym >> 2] | 0, 0) | 0;
 HEAP32[13896] = $7;
 HEAP32[13908] = HEAP32[5434];
 if ((HEAP32[(HEAP32[5314] | 0) + 80 >> 2] | 0) != 0) {
  $14 = sp | 0;
  $19 = (HEAP32[$sym + 16 >> 2] | 0) >>> 3 & 32 | 70;
  _snprintf($14 | 0, 512, 15096, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $7, HEAP32[tempVarArgs + 8 >> 2] = $19, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _put_stabs_r($14, 36, 0, HEAP32[(HEAP32[13912] | 0) + 16 >> 2] | 0, 0, HEAP32[13918] | 0, HEAP32[$sym + 12 >> 2] | 0);
  _put_stabn(68, 0, HEAP32[(HEAP32[13912] | 0) + 16 >> 2] | 0, 0);
  HEAP32[5364] = 0;
  HEAP32[5362] = 0;
 }
 $s_04_i = HEAP32[5352] | 0;
 $32 = HEAP32[5332] | 0;
 if (!(($s_04_i | 0) == 0 | ($s_04_i | 0) == ($32 | 0))) {
  $s_06_i = $s_04_i;
  do {
   $s_06_i = HEAP32[$s_06_i + 28 >> 2] | 0;
  } while (!(($s_06_i | 0) == 0 | ($s_06_i | 0) == ($32 | 0)));
 }
 $37 = HEAP32[5322] | 0;
 if (($37 | 0) == 0) {
  $40 = _tcc_malloc(8172) | 0;
  _dynarray_add(21280, 21360, $40);
  $sym_01_i_i_i = $40;
  $last_sym_02_i_i_i = HEAP32[5322] | 0;
  $i_03_i_i_i = 0;
  while (1) {
   HEAP32[$sym_01_i_i_i + 24 >> 2] = $last_sym_02_i_i_i;
   $46 = $i_03_i_i_i + 1 | 0;
   if ($46 >>> 0 < 227 >>> 0) {
    $last_sym_02_i_i_i = $sym_01_i_i_i;
    $sym_01_i_i_i = $sym_01_i_i_i + 36 | 0;
    $i_03_i_i_i = $46;
   } else {
    break;
   }
  }
  $scevgep4_i_i_i = $40 + 8136 | 0;
  HEAP32[5322] = $scevgep4_i_i_i;
  $sym_0_i_i = $scevgep4_i_i_i;
 } else {
  $sym_0_i_i = $37;
 }
 HEAP32[5322] = HEAP32[$sym_0_i_i + 24 >> 2];
 HEAP32[$sym_0_i_i + 4 >> 2] = 0;
 HEAP32[$sym_0_i_i >> 2] = 536870912;
 _memset($sym_0_i_i + 12 | 0, 0, 16) | 0;
 HEAP32[$sym_0_i_i + 28 >> 2] = HEAP32[5352];
 HEAP32[5352] = $sym_0_i_i;
 $56 = $sym + 16 | 0;
 _gfunc_prolog($56);
 HEAP32[5334] = 0;
 _block(0, 0, 0, 0, 0, 0);
 _gsym(HEAP32[5334] | 0);
 _gfunc_epilog();
 HEAP32[HEAP32[13918] >> 2] = HEAP32[5434];
 _label_pop(54520, 0);
 HEAP32[5332] = 0;
 $61 = HEAP32[5352] | 0;
 if (($61 | 0) != 0) {
  $s_01_i = $61;
  while (1) {
   $64 = HEAP32[$s_01_i + 28 >> 2] | 0;
   $66 = HEAP32[$s_01_i >> 2] | 0;
   do {
    if (($66 & 536870912 | 0) == 0) {
     $70 = $66 & -1073741825;
     if (($70 | 0) >= 268435456) {
      break;
     }
     $76 = HEAP32[(HEAP32[5316] | 0) + ($70 - 256 << 2) >> 2] | 0;
     HEAP32[(($66 & 1073741824 | 0) == 0 ? $76 + 16 | 0 : $76 + 12 | 0) >> 2] = HEAP32[$s_01_i + 32 >> 2];
    }
   } while (0);
   HEAP32[$s_01_i + 24 >> 2] = HEAP32[5322];
   _tcc_free(HEAP32[$s_01_i + 4 >> 2] | 0);
   HEAP32[5322] = $s_01_i;
   if (($64 | 0) == 0) {
    break;
   } else {
    $s_01_i = $64;
   }
  }
 }
 HEAP32[5352] = 0;
 $92 = $sym + 12 | 0;
 HEAP32[(HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) + (HEAP32[$92 >> 2] << 4) + 8 >> 2] = (HEAP32[5434] | 0) - (HEAP32[13908] | 0);
 $100 = HEAP32[$56 >> 2] | 0;
 do {
  if (($100 & 65536 | 0) != 0) {
   HEAP32[$sym + 16 >> 2] = $100 | 65536;
   $106 = HEAP32[$92 >> 2] | 0;
   if (($106 | 0) <= 0) {
    break;
   }
   $113 = (HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0) + ($106 << 4) + 12 | 0;
   HEAP8[$113] = HEAP8[$113] & 15 | 32;
  }
 } while (0);
 if ((HEAP32[(HEAP32[5314] | 0) + 80 >> 2] | 0) == 0) {
  HEAP32[13918] = 0;
  HEAP32[13896] = 55744;
  HEAP32[13898] = 3;
  HEAP32[5434] = 0;
  HEAP32[5338] = $1;
  STACKTOP = sp;
  return;
 }
 _put_stabn(36, 0, 0, (HEAP32[5434] | 0) - (HEAP32[13908] | 0) | 0);
 HEAP32[13918] = 0;
 HEAP32[13896] = 55744;
 HEAP32[13898] = 3;
 HEAP32[5434] = 0;
 HEAP32[5338] = $1;
 STACKTOP = sp;
 return;
}
function _force_charshort_cast($t) {
 $t = $t | 0;
 var $cval_i4_sroa_4 = 0, $cval_i1_sroa_4 = 0, $_ = 0, $7 = 0, $8 = 0, $9 = 0, $13 = 0, $18 = 0, $25 = 0, $26 = 0, $27 = 0, $$etemp$1 = 0, $28$1 = 0, $33 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $50 = 0, $57 = 0, $58 = 0, $59 = 0, $$etemp$8 = 0, $60$1 = 0, $65 = 0, $69 = 0, $71 = 0, $74 = 0, $75 = 0, $79 = 0, $84 = 0, $91 = 0, $92 = 0, $93 = 0, $$etemp$15 = 0, $94$1 = 0, $99 = 0, $103 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $cval_i4_sroa_4 = sp | 0;
 $cval_i1_sroa_4 = sp + 16 | 0;
 $_ = ($t & 15 | 0) == 1 ? 8 : 16;
 if (($t & 16 | 0) != 0) {
  $7 = (1 << $_) - 1 | 0;
  $8 = sp + 32 | 0;
  $9 = HEAP32[5024] | 0;
  if ($9 >>> 0 < 66472 >>> 0) {
   $13 = $9;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $13 = HEAP32[5024] | 0;
  }
  do {
   if ($13 >>> 0 < 56272 >>> 0) {
    $25 = $13;
   } else {
    $18 = HEAPU16[$13 + 8 >> 1] | 0;
    if (!(($18 & 63 | 0) == 51 | ($18 & 62 | 0) == 52)) {
     $25 = $13;
     break;
    }
    _gv(1) | 0;
    $25 = HEAP32[5024] | 0;
   }
  } while (0);
  $26 = $25 + 40 | 0;
  HEAP32[5024] = $26;
  $27 = $26;
  $$etemp$1 = 21728;
  $28$1 = HEAP32[$$etemp$1 + 4 >> 2] | 0;
  HEAP32[$27 >> 2] = HEAP32[$$etemp$1 >> 2];
  HEAP32[$27 + 4 >> 2] = $28$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $33 = HEAP32[5024] | 0;
  HEAP32[$33 + 16 >> 2] = $7;
  $37 = $33 + 20 | 0;
  HEAP32[$37 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$37 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$37 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  _gen_op(38);
  STACKTOP = sp;
  return;
 }
 $39 = 32 - $_ | 0;
 $40 = $cval_i1_sroa_4 | 0;
 $41 = HEAP32[5024] | 0;
 if ($41 >>> 0 < 66472 >>> 0) {
  $45 = $41;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $45 = HEAP32[5024] | 0;
 }
 do {
  if ($45 >>> 0 < 56272 >>> 0) {
   $57 = $45;
  } else {
   $50 = HEAPU16[$45 + 8 >> 1] | 0;
   if (!(($50 & 63 | 0) == 51 | ($50 & 62 | 0) == 52)) {
    $57 = $45;
    break;
   }
   _gv(1) | 0;
   $57 = HEAP32[5024] | 0;
  }
 } while (0);
 $58 = $57 + 40 | 0;
 HEAP32[5024] = $58;
 $59 = $58;
 $$etemp$8 = 21728;
 $60$1 = HEAP32[$$etemp$8 + 4 >> 2] | 0;
 HEAP32[$59 >> 2] = HEAP32[$$etemp$8 >> 2];
 HEAP32[$59 + 4 >> 2] = $60$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $65 = HEAP32[5024] | 0;
 HEAP32[$65 + 16 >> 2] = $39;
 $69 = $65 + 20 | 0;
 HEAP32[$69 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$69 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
 HEAP32[$69 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
 _gen_op(1);
 $71 = HEAP32[5024] | 0;
 HEAP32[$71 >> 2] = HEAP32[$71 >> 2] & -17;
 $74 = $cval_i4_sroa_4 | 0;
 $75 = HEAP32[5024] | 0;
 if ($75 >>> 0 < 66472 >>> 0) {
  $79 = $75;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $79 = HEAP32[5024] | 0;
 }
 do {
  if ($79 >>> 0 < 56272 >>> 0) {
   $91 = $79;
  } else {
   $84 = HEAPU16[$79 + 8 >> 1] | 0;
   if (!(($84 & 63 | 0) == 51 | ($84 & 62 | 0) == 52)) {
    $91 = $79;
    break;
   }
   _gv(1) | 0;
   $91 = HEAP32[5024] | 0;
  }
 } while (0);
 $92 = $91 + 40 | 0;
 HEAP32[5024] = $92;
 $93 = $92;
 $$etemp$15 = 21728;
 $94$1 = HEAP32[$$etemp$15 + 4 >> 2] | 0;
 HEAP32[$93 >> 2] = HEAP32[$$etemp$15 >> 2];
 HEAP32[$93 + 4 >> 2] = $94$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $99 = HEAP32[5024] | 0;
 HEAP32[$99 + 16 >> 2] = $39;
 $103 = $99 + 20 | 0;
 HEAP32[$103 >> 2] = HEAP32[$74 >> 2];
 HEAP32[$103 + 4 >> 2] = HEAP32[$74 + 4 >> 2];
 HEAP32[$103 + 8 >> 2] = HEAP32[$74 + 8 >> 2];
 _gen_op(2);
 STACKTOP = sp;
 return;
}
function _ld_add_file_list($s1, $cmd, $as_needed) {
 $s1 = $s1 | 0;
 $cmd = $cmd | 0;
 $as_needed = $as_needed | 0;
 var $filename = 0, $nblibs = 0, $libs = 0, $2 = 0, $3 = 0, $6 = 0, $12 = 0, $13 = 0, $14 = 0, $t_0 = 0, $18 = 0, $35 = 0, $41 = 0, $50 = 0, $_b_i611 = 0, $_b_i6_pre = 0, $56 = 0, $i_08 = 0, $60 = 0, $66 = 0, $ret_2 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $filename = sp | 0;
 $nblibs = sp + 2048 | 0;
 $libs = sp + 2056 | 0;
 HEAP32[$nblibs >> 2] = 0;
 HEAP32[$libs >> 2] = 0;
 $2 = (_strcmp($cmd | 0, 15128) | 0) == 0;
 $3 = ($as_needed | 0) != 0;
 if (!$3) {
  HEAP8[7544] = 0;
 }
 $6 = $filename | 0;
 if ((_ld_next($6, 1024) | 0) != 40) {
  _expect(14928);
 }
 $12 = sp + 1024 | 0;
 $13 = $filename + 1 | 0;
 $14 = $s1 + 16 | 0;
 $t_0 = _ld_next($6, 1024) | 0;
 L7 : while (1) {
  HEAP8[$12] = 0;
  do {
   if (($t_0 | 0) == 41) {
    label = 24;
    break L7;
   } else if (($t_0 | 0) == 45) {
    $18 = (_ld_next($6, 1024) | 0) == 256;
    if (!($18 & (HEAP8[$6] | 0) == 108)) {
     label = 9;
     break L7;
    }
    _pstrcpy($12, 1024, $13) | 0;
    if ((HEAP32[$14 >> 2] | 0) == 0) {
     _snprintf($6 | 0, 1024, 14448, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $12, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     break;
    } else {
     _snprintf($6 | 0, 1024, 14544, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $12, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     break;
    }
   } else if (($t_0 | 0) == (-1 | 0)) {
    label = 7;
    break L7;
   } else if (($t_0 | 0) != 256) {
    label = 13;
    break L7;
   }
  } while (0);
  do {
   if ((_strcmp($6 | 0, 14288) | 0) == 0) {
    $35 = _ld_add_file_list($s1, $cmd, 1) | 0;
    if (($35 | 0) != 0) {
     $ret_2 = $35;
     break L7;
    }
   } else {
    if ($3) {
     break;
    }
    if ((_tcc_add_file_internal($s1, $6, 0) | 0) != 0) {
     $41 = _tcc_add_dll($s1, $6, 0) | 0;
     if (($41 | 0) != 0) {
      $ret_2 = $41;
      break L7;
     }
    }
    if (!$2) {
     break;
    }
    _dynarray_add($libs, $nblibs, _tcc_strdup($6) | 0);
    if ((HEAP8[$12] | 0) == 0) {
     break;
    }
    _dynarray_add($libs, $nblibs, _tcc_strdup($12) | 0);
   }
  } while (0);
  $50 = _ld_next($6, 1024) | 0;
  if (($50 | 0) != 44) {
   $t_0 = $50;
   continue;
  }
  $t_0 = _ld_next($6, 1024) | 0;
 }
 L27 : do {
  if ((label | 0) == 7) {
   _tcc_error_noabort(14784, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $ret_2 = -1;
  } else if ((label | 0) == 9) {
   _tcc_error_noabort(14648, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $ret_2 = -1;
  } else if ((label | 0) == 13) {
   _tcc_error_noabort(14376, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $ret_2 = -1;
  } else if ((label | 0) == 24) {
   if ($3 | $2 ^ 1) {
    $ret_2 = 0;
    break;
   }
   $_b_i611 = HEAP8[7544] | 0;
   HEAP8[7544] = 0;
   if (!$_b_i611) {
    $ret_2 = 0;
    break;
   }
   $56 = HEAP32[$nblibs >> 2] | 0;
   while (1) {
    if (($56 | 0) > 0) {
     $i_08 = 0;
    } else {
     break;
    }
    do {
     $60 = HEAP32[(HEAP32[$libs >> 2] | 0) + ($i_08 << 2) >> 2] | 0;
     if ((_tcc_add_file_internal($s1, $60, 0) | 0) != 0) {
      _tcc_add_dll($s1, $60, 0) | 0;
     }
     $i_08 = $i_08 + 1 | 0;
     $66 = HEAP32[$nblibs >> 2] | 0;
    } while (($i_08 | 0) < ($66 | 0));
    $_b_i6_pre = HEAP8[7544] | 0;
    HEAP8[7544] = 0;
    if ($_b_i6_pre) {
     $56 = $66;
    } else {
     $ret_2 = 0;
     break L27;
    }
   }
   HEAP8[7544] = 0;
   $ret_2 = 0;
  }
 } while (0);
 _dynarray_reset($libs, $nblibs);
 STACKTOP = sp;
 return $ret_2 | 0;
}
function _tcc_load_archive($s1, $fd) {
 $s1 = $s1 | 0;
 $fd = $fd | 0;
 var $hdr = 0, $ar_size = 0, $ar_name = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $13 = 0, $i_01 = 0, $20 = 0, $i_0_lcssa = 0, $24 = 0, $26 = 0, $33 = 0, $53 = 0, $55 = 0, $p_0_i = 0, $bound_0_i = 0, $i_0_i = 0, $58 = 0, $59 = 0, $69 = 0, $88 = 0, $bound_1_i = 0, $ret_0_i = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $hdr = sp | 0;
 $ar_size = sp + 64 | 0;
 $ar_name = sp + 80 | 0;
 _read($fd | 0, sp + 104 | 0, 8) | 0;
 $3 = $hdr | 0;
 $4 = $ar_size | 0;
 $5 = $hdr + 48 | 0;
 $6 = $ar_size + 10 | 0;
 $7 = $ar_name | 0;
 $8 = $s1 + 28 | 0;
 L1 : while (1) {
  $10 = _read($fd | 0, $3 | 0, 60) | 0;
  if (($10 | 0) == 0) {
   $_0 = 0;
   label = 24;
   break;
  } else if (($10 | 0) != 60) {
   label = 3;
   break;
  }
  _memcpy($4 | 0, $5 | 0, 10) | 0;
  HEAP8[$6] = 0;
  $13 = _strtol($4 | 0, 0, 0) | 0;
  _memcpy($7 | 0, $3 | 0, 16) | 0;
  $i_01 = 15;
  while (1) {
   $20 = $i_01 - 1 | 0;
   if ((HEAP8[$ar_name + $i_01 | 0] | 0) != 32) {
    $i_0_lcssa = $i_01;
    break;
   }
   if (($i_01 | 0) > 0) {
    $i_01 = $20;
   } else {
    $i_0_lcssa = $20;
    break;
   }
  }
  HEAP8[$ar_name + ($i_0_lcssa + 1) | 0] = 0;
  $24 = _lseek($fd | 0, 0, 1) | 0;
  $26 = $13 + 1 & -2;
  do {
   if ((_strcmp($7 | 0, 16192) | 0) == 0) {
    if ((HEAP32[$8 >> 2] | 0) != 0) {
     label = 9;
     break L1;
    }
   } else {
    if ((_strcmp($7 | 0, 16056) | 0) == 0) {
     break;
    }
    if ((_strcmp($7 | 0, 15944) | 0) == 0) {
     break;
    }
    if ((_strcmp($7 | 0, 15776) | 0) == 0) {
     break;
    }
    if ((_strcmp($7 | 0, 15632) | 0) == 0) {
     break;
    }
    if ((_tcc_load_object_file($s1, $fd, $24) | 0) < 0) {
     $_0 = -1;
     label = 24;
     break L1;
    }
   }
  } while (0);
  _lseek($fd | 0, $24 + $26 | 0, 0) | 0;
 }
 if ((label | 0) == 3) {
  _tcc_error_noabort(16280, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $_0 = -1;
  STACKTOP = sp;
  return $_0 | 0;
 } else if ((label | 0) == 9) {
  $33 = _tcc_malloc($26) | 0;
  L19 : do {
   if ((_read($fd | 0, $33 | 0, $26 | 0) | 0) == ($26 | 0)) {
    $53 = HEAPU8[$33 + 2 | 0] << 8 | HEAPU8[$33 + 3 | 0] | HEAPU8[$33 + 1 | 0] << 16 | HEAPU8[$33] << 24;
    $55 = $33 + (($53 << 2) + 4) | 0;
    $i_0_i = 0;
    $bound_0_i = 0;
    $p_0_i = $55;
    while (1) {
     if (($i_0_i | 0) >= ($53 | 0)) {
      if (($bound_0_i | 0) == 0) {
       $ret_0_i = 0;
       break;
      } else {
       $i_0_i = 0;
       $bound_0_i = 0;
       $p_0_i = $55;
       continue;
      }
     }
     $58 = HEAP32[5318] | 0;
     $59 = _find_elf_sym($58, $p_0_i) | 0;
     do {
      if (($59 | 0) == 0) {
       $bound_1_i = $bound_0_i;
      } else {
       if ((HEAP16[(HEAP32[$58 + 4 >> 2] | 0) + ($59 << 4) + 14 >> 1] | 0) != 0) {
        $bound_1_i = $bound_0_i;
        break;
       }
       $69 = $i_0_i << 2;
       $88 = (HEAPU8[$33 + ($69 + 6) | 0] << 8 | HEAPU8[$33 + ($69 + 7) | 0] | HEAPU8[$33 + ($69 + 5) | 0] << 16 | HEAPU8[$33 + ($69 + 4) | 0] << 24) + 60 | 0;
       _lseek($fd | 0, $88 | 0, 0) | 0;
       if ((_tcc_load_object_file($s1, $fd, $88) | 0) < 0) {
        $ret_0_i = -1;
        break L19;
       } else {
        $bound_1_i = $bound_0_i + 1 | 0;
       }
      }
     } while (0);
     $i_0_i = $i_0_i + 1 | 0;
     $bound_0_i = $bound_1_i;
     $p_0_i = $p_0_i + ((_strlen($p_0_i | 0) | 0) + 1) | 0;
    }
   } else {
    $ret_0_i = -1;
   }
  } while (0);
  _tcc_free($33);
  $_0 = $ret_0_i;
  STACKTOP = sp;
  return $_0 | 0;
 } else if ((label | 0) == 24) {
  STACKTOP = sp;
  return $_0 | 0;
 }
 return 0;
}
function _subst_asm_operand($add_str, $sv, $modifier) {
 $add_str = $add_str | 0;
 $sv = $sv | 0;
 $modifier = $modifier | 0;
 var $buf = 0, $3 = 0, $4 = 0, $19 = 0, $_pre_phi10 = 0, $24 = 0, $28 = 0, $36 = 0, $40 = 0, $42 = 0, $49 = 0, $size_0 = 0, $53 = 0, $_size_0 = 0, $reg_0 = 0, $66 = 0, $67 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $buf = sp | 0;
 $3 = HEAPU16[$sv + 8 >> 1] | 0;
 $4 = $3 & 63;
 if (($4 | 0) == 48) {
  do {
   if (($3 & 256 | 0) == 0) {
    if (($modifier | 0) == 110 | ($modifier | 0) == 99) {
     break;
    }
    _cstr_ccat($add_str, 36);
   }
  } while (0);
  do {
   if (($3 & 512 | 0) == 0) {
    $_pre_phi10 = $sv + 16 | 0;
   } else {
    _cstr_cat($add_str, _get_tok_str(HEAP32[HEAP32[$sv + 32 >> 2] >> 2] | 0, 0) | 0);
    $19 = $sv + 16 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 0) {
     STACKTOP = sp;
     return;
    } else {
     _cstr_ccat($add_str, 43);
     $_pre_phi10 = $19;
     break;
    }
   }
  } while (0);
  $24 = $buf | 0;
  _snprintf($24 | 0, 64, 18936, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$_pre_phi10 >> 2], tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _cstr_cat($add_str, $24);
  STACKTOP = sp;
  return;
 } else if (($4 | 0) == 50) {
  $28 = $buf | 0;
  _snprintf($28 | 0, 64, 18608, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$sv + 16 >> 2], tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _cstr_cat($add_str, $28);
  STACKTOP = sp;
  return;
 } else {
  $36 = $4 >>> 0 > 47 >>> 0;
  if (($3 & 256 | 0) != 0) {
   if ($36) {
    _tcc_error(18336, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $40 = $buf | 0;
   $42 = _get_tok_str($4 + 440 | 0, 0) | 0;
   _snprintf($40 | 0, 64, 18200, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $42, tempVarArgs) | 0) | 0;
   STACKTOP = tempVarArgs;
   _cstr_cat($add_str, $40);
   STACKTOP = sp;
   return;
  }
  if ($36) {
   _tcc_error(18336, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  $49 = HEAP32[$sv >> 2] & 15;
  if (($49 | 0) == 2) {
   $size_0 = 2;
  } else if (($49 | 0) == 1) {
   $size_0 = 1;
  } else {
   $size_0 = 4;
  }
  $53 = $4 >>> 0 > 3 >>> 0;
  do {
   if (($modifier | 0) == 104) {
    if ($53) {
     _tcc_error(18048, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
    }
    $reg_0 = $4 + 428 | 0;
   } else if (($modifier | 0) == 119) {
    label = 28;
   } else if (($modifier | 0) == 98) {
    if (!$53) {
     label = 27;
     break;
    }
    _tcc_error(18048, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    label = 27;
   } else {
    $_size_0 = ($size_0 | 0) == 1 & $53 ? 4 : $size_0;
    if (($_size_0 | 0) == 1) {
     label = 27;
     break;
    } else if (($_size_0 | 0) == 2) {
     label = 28;
     break;
    }
    $reg_0 = $4 + 440 | 0;
   }
  } while (0);
  if ((label | 0) == 27) {
   $reg_0 = $4 + 424 | 0;
  } else if ((label | 0) == 28) {
   $reg_0 = $4 + 432 | 0;
  }
  $66 = $buf | 0;
  $67 = _get_tok_str($reg_0, 0) | 0;
  _snprintf($66 | 0, 64, 17936, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $67, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  _cstr_cat($add_str, $66);
  STACKTOP = sp;
  return;
 }
}
function _asm_expr_unary($s1, $pe) {
 $s1 = $s1 | 0;
 $pe = $pe | 0;
 var $buf_i = 0, $p = 0, $1 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $15 = 0, $16 = 0, $19 = 0, $27 = 0, $36 = 0, $sym_1 = 0, $53 = 0, $54 = 0, $67 = 0, $72 = 0, $sym_2 = 0, $89 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72 | 0;
 $buf_i = sp | 0;
 $p = sp + 64 | 0;
 $1 = HEAP32[5310] | 0;
 switch ($1 | 0) {
 case 45:
 case 126:
  {
   _next();
   _asm_expr_unary($s1, $pe);
   if ((HEAP32[$pe + 4 >> 2] | 0) != 0) {
    _tcc_error(16368, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   $53 = $pe | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if (($1 | 0) == 45) {
    HEAP32[$53 >> 2] = -$54;
    STACKTOP = sp;
    return;
   } else {
    HEAP32[$53 >> 2] = ~$54;
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 180:
 case 183:
  {
   HEAP32[$pe >> 2] = HEAP32[5302];
   HEAP32[$pe + 4 >> 2] = 0;
   _next();
   STACKTOP = sp;
   return;
  }
 case 40:
  {
   _next();
   _asm_expr_sum($s1, $pe);
   _skip(41);
   STACKTOP = sp;
   return;
  }
 case 43:
  {
   _next();
   _asm_expr_unary($s1, $pe);
   STACKTOP = sp;
   return;
  }
 case 206:
  {
   $5 = HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0;
   HEAP32[$p >> 2] = $5;
   $6 = _strtoul($5 | 0, $p | 0, 0) | 0;
   $7 = HEAP32[$p >> 2] | 0;
   $8 = HEAP8[$7] | 0;
   if (($8 << 24 >> 24 | 0) == 0) {
    HEAP32[$pe >> 2] = $6;
    HEAP32[$pe + 4 >> 2] = 0;
   } else if (($8 << 24 >> 24 | 0) == 98 | ($8 << 24 >> 24 | 0) == 102) {
    $10 = $buf_i | 0;
    _snprintf($10 | 0, 64, 13672, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $6, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    $15 = HEAP32[(_tok_alloc($10, _strlen($10 | 0) | 0) | 0) + 20 >> 2] | 0;
    $16 = _label_find($15) | 0;
    $19 = ($16 | 0) != 0;
    do {
     if ((HEAP8[$7] | 0) == 98) {
      if ($19) {
       if ((HEAP32[$16 + 8 >> 2] | 0) != 0) {
        $sym_1 = $16;
        break;
       }
       $27 = HEAP32[$16 + 32 >> 2] | 0;
       if (($27 | 0) != 0) {
        $sym_1 = $27;
        break;
       }
      }
      _tcc_error(16152, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $6, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $sym_1 = 0;
     } else {
      if ($19) {
       if ((HEAP32[$16 + 8 >> 2] | 0) == 0) {
        $sym_1 = $16;
        break;
       }
      }
      $36 = _label_push($s1 + 2876 | 0, $15, 0) | 0;
      HEAP32[$36 + 16 >> 2] = 259;
      $sym_1 = $36;
     }
    } while (0);
    HEAP32[$pe >> 2] = 0;
    HEAP32[$pe + 4 >> 2] = $sym_1;
   } else {
    _tcc_error(16032, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   }
   _next();
   STACKTOP = sp;
   return;
  }
 default:
  {
   if (($1 | 0) <= 255) {
    $89 = _get_tok_str($1, 21208) | 0;
    _tcc_error(15912, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $89, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    STACKTOP = sp;
    return;
   }
   $67 = _label_find($1) | 0;
   if (($67 | 0) == 0) {
    $72 = _label_push($s1 + 2876 | 0, HEAP32[5310] | 0, 0) | 0;
    HEAP32[$72 + 16 >> 2] = 3;
    $sym_2 = $72;
   } else {
    $sym_2 = $67;
   }
   if ((HEAP32[$sym_2 + 8 >> 2] | 0) == 65521) {
    HEAP32[$pe >> 2] = HEAP32[$sym_2 + 24 >> 2];
    HEAP32[$pe + 4 >> 2] = 0;
   } else {
    HEAP32[$pe >> 2] = 0;
    HEAP32[$pe + 4 >> 2] = $sym_2;
   }
   _next();
   STACKTOP = sp;
   return;
  }
 }
}
function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $1 = 0, $2 = 0, $3 = 0, $13 = 0, $15 = 0, $16 = 0, $26 = 0, $c_0 = 0, $neg_0 = 0, $x_012 = 0, $c_111 = 0, $47 = 0, $48 = 0, $c_1_be = 0, $phitmp$0 = 0, $phitmp$1 = 0, $y_0_lcssa$0 = 0, $y_0_lcssa$1 = 0, $c_2_lcssa = 0, $y_07$0 = 0, $y_07$1 = 0, $c_26 = 0, $69 = 0, $c_2_be = 0, $$etemp$2$1 = 0, $81 = 0, $c_3_be = 0, $98 = 0, $_0$0 = 0, $_0$1 = 0, $65$0 = 0, $65$1 = 0, $67$0 = 0, $68$0 = 0, $68$1 = 0, $99$0 = 0;
 $1 = $f + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $f + 100 | 0;
 if ($2 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
  HEAP32[$1 >> 2] = $2 + 1;
  $13 = HEAPU8[$2] | 0;
 } else {
  $13 = ___shgetc($f) | 0;
 }
 do {
  if (($13 | 0) == 45 | ($13 | 0) == 43) {
   $15 = HEAP32[$1 >> 2] | 0;
   $16 = ($13 | 0) == 45 | 0;
   if ($15 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $15 + 1;
    $26 = HEAPU8[$15] | 0;
   } else {
    $26 = ___shgetc($f) | 0;
   }
   if (!(($26 - 48 | 0) >>> 0 > 9 >>> 0 & ($pok | 0) != 0)) {
    $neg_0 = $16;
    $c_0 = $26;
    break;
   }
   if ((HEAP32[$3 >> 2] | 0) == 0) {
    $neg_0 = $16;
    $c_0 = $26;
    break;
   }
   HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
   $neg_0 = $16;
   $c_0 = $26;
  } else {
   $neg_0 = 0;
   $c_0 = $13;
  }
 } while (0);
 if (($c_0 - 48 | 0) >>> 0 > 9 >>> 0) {
  if ((HEAP32[$3 >> 2] | 0) == 0) {
   $_0$1 = -2147483648;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
  $_0$1 = -2147483648;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  $c_111 = $c_0;
  $x_012 = 0;
 }
 while (1) {
  $47 = $c_111 - 48 + ($x_012 * 10 | 0) | 0;
  $48 = HEAP32[$1 >> 2] | 0;
  if ($48 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $48 + 1;
   $c_1_be = HEAPU8[$48] | 0;
  } else {
   $c_1_be = ___shgetc($f) | 0;
  }
  if (($c_1_be - 48 | 0) >>> 0 < 10 >>> 0 & ($47 | 0) < 214748364) {
   $c_111 = $c_1_be;
   $x_012 = $47;
  } else {
   break;
  }
 }
 $phitmp$0 = $47;
 $phitmp$1 = ($47 | 0) < 0 | 0 ? -1 : 0;
 if (($c_1_be - 48 | 0) >>> 0 < 10 >>> 0) {
  $c_26 = $c_1_be;
  $y_07$1 = $phitmp$1;
  $y_07$0 = $phitmp$0;
  while (1) {
   $65$0 = ___muldi3($y_07$0, $y_07$1, 10, 0) | 0;
   $65$1 = tempRet0;
   $67$0 = _i64Add($c_26, ($c_26 | 0) < 0 | 0 ? -1 : 0, -48, -1) | 0;
   $68$0 = _i64Add($67$0, tempRet0, $65$0, $65$1) | 0;
   $68$1 = tempRet0;
   $69 = HEAP32[$1 >> 2] | 0;
   if ($69 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $69 + 1;
    $c_2_be = HEAPU8[$69] | 0;
   } else {
    $c_2_be = ___shgetc($f) | 0;
   }
   $$etemp$2$1 = 21474836;
   if (($c_2_be - 48 | 0) >>> 0 < 10 >>> 0 & (($68$1 | 0) < ($$etemp$2$1 | 0) | ($68$1 | 0) == ($$etemp$2$1 | 0) & $68$0 >>> 0 < 2061584302 >>> 0)) {
    $c_26 = $c_2_be;
    $y_07$1 = $68$1;
    $y_07$0 = $68$0;
   } else {
    $c_2_lcssa = $c_2_be;
    $y_0_lcssa$1 = $68$1;
    $y_0_lcssa$0 = $68$0;
    break;
   }
  }
 } else {
  $c_2_lcssa = $c_1_be;
  $y_0_lcssa$1 = $phitmp$1;
  $y_0_lcssa$0 = $phitmp$0;
 }
 if (($c_2_lcssa - 48 | 0) >>> 0 < 10 >>> 0) {
  do {
   $81 = HEAP32[$1 >> 2] | 0;
   if ($81 >>> 0 < (HEAP32[$3 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $81 + 1;
    $c_3_be = HEAPU8[$81] | 0;
   } else {
    $c_3_be = ___shgetc($f) | 0;
   }
  } while (($c_3_be - 48 | 0) >>> 0 < 10 >>> 0);
 }
 if ((HEAP32[$3 >> 2] | 0) != 0) {
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) - 1;
 }
 $98 = ($neg_0 | 0) != 0;
 $99$0 = _i64Subtract(0, 0, $y_0_lcssa$0, $y_0_lcssa$1) | 0;
 $_0$1 = $98 ? tempRet0 : $y_0_lcssa$1;
 $_0$0 = $98 ? $99$0 : $y_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}
function _expr_preprocess() {
 var $str = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $_0_i = 0, $32 = 0, $35 = 0, $39 = 0, $40 = 0, $42 = 0, $len_0_i_i_i = 0, $50 = 0, $str_0_i_i = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $len_0_i_i = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $len_0_i_i2 = 0, $78 = 0, $str_0_i3 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $str = sp | 0;
 $1 = $str | 0;
 HEAP32[$1 >> 2] = 0;
 $2 = $str + 4 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = $str + 8 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $str + 12 | 0;
 HEAP32[$4 >> 2] = -1;
 while (1) {
  $6 = HEAP32[5310] | 0;
  if (($6 | 0) == (-1 | 0)) {
   label = 4;
   break;
  } else if (($6 | 0) == 10) {
   label = 3;
   break;
  }
  _next();
  $8 = HEAP32[5310] | 0;
  do {
   if (($8 | 0) == 320) {
    _next_nomacro();
    $11 = HEAP32[5310] | 0;
    $12 = ($11 | 0) == 40;
    if ($12) {
     _next_nomacro();
     $15 = HEAP32[5310] | 0;
    } else {
     $15 = $11;
    }
    $16 = $15 - 256 | 0;
    if ($16 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
     $_0_i = (HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($16 << 2) >> 2] | 0) + 4 >> 2] | 0) != 0 | 0;
    } else {
     $_0_i = 0;
    }
    if ($12) {
     _next_nomacro();
    }
    HEAP32[5310] = 179;
    HEAP32[5302] = $_0_i;
    $32 = 179;
   } else {
    if (($8 | 0) <= 255) {
     $32 = $8;
     break;
    }
    HEAP32[5310] = 179;
    HEAP32[5302] = 0;
    $32 = 179;
   }
  } while (0);
  $35 = HEAP32[(HEAP32[13912] | 0) + 16 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$4 >> 2] | 0)) {
   $55 = $32;
  } else {
   HEAP32[$4 >> 2] = $35;
   $39 = HEAP32[$2 >> 2] | 0;
   $40 = HEAP32[$1 >> 2] | 0;
   $42 = HEAP32[$3 >> 2] | 0;
   if (($39 + 4 | 0) > ($42 | 0)) {
    $len_0_i_i_i = ($42 | 0) == 0 ? 8 : $42 << 1;
    $50 = _tcc_realloc($40, $len_0_i_i_i << 2) | 0;
    HEAP32[$3 >> 2] = $len_0_i_i_i;
    HEAP32[$1 >> 2] = $50;
    $str_0_i_i = $50;
   } else {
    $str_0_i_i = $40;
   }
   HEAP32[$str_0_i_i + ($39 << 2) >> 2] = 186;
   HEAP32[$str_0_i_i + ($39 + 1 << 2) >> 2] = $35;
   HEAP32[$2 >> 2] = $39 + 2;
   $55 = HEAP32[5310] | 0;
  }
  _tok_str_add2($str, $55, 21208);
 }
 if ((label | 0) == 3) {
  $56 = HEAP32[$2 >> 2] | 0;
 } else if ((label | 0) == 4) {
  $56 = HEAP32[$2 >> 2] | 0;
 }
 $57 = HEAP32[$1 >> 2] | 0;
 $58 = HEAP32[$3 >> 2] | 0;
 if (($56 | 0) < ($58 | 0)) {
  $68 = $57;
  $67 = $58;
 } else {
  $len_0_i_i = ($58 | 0) == 0 ? 8 : $58 << 1;
  $66 = _tcc_realloc($57, $len_0_i_i << 2) | 0;
  HEAP32[$3 >> 2] = $len_0_i_i;
  HEAP32[$1 >> 2] = $66;
  $68 = $66;
  $67 = $len_0_i_i;
 }
 $69 = $56 + 1 | 0;
 HEAP32[$68 + ($56 << 2) >> 2] = -1;
 HEAP32[$2 >> 2] = $69;
 if (($69 | 0) < ($67 | 0)) {
  $str_0_i3 = $68;
  $79 = $56 + 2 | 0;
  $80 = $str_0_i3 + ($69 << 2) | 0;
  HEAP32[$80 >> 2] = 0;
  HEAP32[$2 >> 2] = $79;
  $81 = HEAP32[$1 >> 2] | 0;
  HEAP32[5350] = $81;
  _next();
  $82 = _expr_const() | 0;
  HEAP32[5350] = 0;
  $83 = $81;
  _tcc_free($83);
  $84 = ($82 | 0) != 0;
  $85 = $84 & 1;
  STACKTOP = sp;
  return $85 | 0;
 }
 $len_0_i_i2 = ($67 | 0) == 0 ? 8 : $67 << 1;
 $78 = _tcc_realloc($68, $len_0_i_i2 << 2) | 0;
 HEAP32[$3 >> 2] = $len_0_i_i2;
 HEAP32[$1 >> 2] = $78;
 $str_0_i3 = $78;
 $79 = $56 + 2 | 0;
 $80 = $str_0_i3 + ($69 << 2) | 0;
 HEAP32[$80 >> 2] = 0;
 HEAP32[$2 >> 2] = $79;
 $81 = HEAP32[$1 >> 2] | 0;
 HEAP32[5350] = $81;
 _next();
 $82 = _expr_const() | 0;
 HEAP32[5350] = 0;
 $83 = $81;
 _tcc_free($83);
 $84 = ($82 | 0) != 0;
 $85 = $84 & 1;
 STACKTOP = sp;
 return $85 | 0;
}
function _tcc_new() {
 var $a = 0, $b = 0, $c = 0, $1 = 0, $5 = 0, $6 = 0, $18 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $nb_alloc_0_i = 0, $47 = 0, $51 = 0, $pp_0_i = 0, $58 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $a = sp + 104 | 0;
 $b = sp + 112 | 0;
 $c = sp + 120 | 0;
 _tcc_cleanup();
 $1 = _malloc(2920) | 0;
 if (($1 | 0) == 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 }
 _memset($1 | 0, 0, 2920) | 0;
 $5 = $1;
 HEAP32[5314] = $5;
 $6 = _malloc(19) | 0;
 if (($6 | 0) == 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 }
 _memcpy($6 | 0, 19408, 19) | 0;
 HEAP32[$1 + 32 >> 2] = $6;
 HEAP32[$1 + 44 >> 2] = 0;
 _preprocess_new();
 HEAP32[$1 + 464 >> 2] = $1 + 336;
 _define_push(326, 0, 0, 0);
 _define_push(327, 0, 0, 0);
 _define_push(328, 0, 0, 0);
 _define_push(329, 0, 0, 0);
 _sscanf(19080, 18776, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempVarArgs >> 2] = $a, HEAP32[tempVarArgs + 8 >> 2] = $b, HEAP32[tempVarArgs + 16 >> 2] = $c, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $18 = sp | 0;
 _sprintf($18 | 0, 18464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = ((HEAP32[$b >> 2] | 0) * 100 | 0) + ((HEAP32[$a >> 2] | 0) * 1e4 | 0) + (HEAP32[$c >> 2] | 0), tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 _tcc_define_symbol($5, 18280, $18);
 _tcc_define_symbol($5, 18144, 0);
 _tcc_define_symbol($5, 17984, 17840);
 _tcc_define_symbol($5, 17736, 0);
 _tcc_define_symbol($5, 17592, 0);
 _tcc_define_symbol($5, 17464, 0);
 _tcc_define_symbol($5, 17264, 0);
 _tcc_define_symbol($5, 17096, 0);
 _tcc_define_symbol($5, 16968, 0);
 _tcc_define_symbol($5, 16768, 16576);
 _tcc_define_symbol($5, 16448, 16296);
 _tcc_define_symbol($5, 16200, 16064);
 _tcc_define_symbol($5, 15968, 15792);
 _tcc_define_symbol($5, 15648, 15512);
 _tcc_split_path($5, $1 + 136 | 0, $1 + 140 | 0, 15408);
 _tcc_split_path($5, $1 + 144 | 0, $1 + 148 | 0, 15312);
 $36 = $1 + 2828 | 0;
 $38 = $1 + 2832 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 $40 = HEAP32[$36 >> 2] | 0;
 do {
  if (($39 - 1 & $39 | 0) == 0) {
   $nb_alloc_0_i = ($39 | 0) == 0 ? 4 : $39 << 3;
   $47 = _realloc($40, $nb_alloc_0_i) | 0;
   if (($47 | 0) == 0 & ($nb_alloc_0_i | 0) != 0) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    return 0;
   } else {
    $51 = $47;
    HEAP32[$36 >> 2] = $51;
    $pp_0_i = $51;
    break;
   }
  } else {
   $pp_0_i = $40;
  }
 } while (0);
 HEAP32[$pp_0_i + ($39 << 2) >> 2] = 0;
 HEAP32[$38 >> 2] = $39 + 1;
 HEAP32[5312] = _new_section($5, 15192, 1, 6) | 0;
 HEAP32[13916] = _new_section($5, 15120, 1, 3) | 0;
 HEAP32[13926] = _new_section($5, 15072, 8, 3) | 0;
 $58 = _new_symtab($5, 14992, 2, 0, 14920, 14752, -2147483648) | 0;
 HEAP32[5318] = $58;
 HEAP32[5324] = HEAP32[$58 + 56 >> 2];
 HEAP32[$1 + 2872 >> 2] = $58;
 HEAP32[$1 + 2864 >> 2] = _new_symtab($5, 14600, 2, -2147483648, 14512, 14432, -2147483648) | 0;
 HEAP32[$1 + 28 >> 2] = 1;
 HEAP32[$1 + 12 >> 2] = 1;
 HEAP32[$1 + 96 >> 2] = 4096;
 HEAP32[$1 + 108 >> 2] = 32;
 STACKTOP = sp;
 return $5 | 0;
}
function _gen_modrm($op_reg, $r, $sym, $c) {
 $op_reg = $op_reg | 0;
 $r = $r | 0;
 $sym = $sym | 0;
 $c = $c | 0;
 var $1 = 0, $2 = 0, $6 = 0, $_01_i = 0, $7 = 0, $8 = 0, $13 = 0, $14 = 0, $19 = 0, $31 = 0, $_01_i2 = 0, $32 = 0, $33 = 0, $38 = 0, $39 = 0, $44 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $60 = 0, $_01_i_i = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $73 = 0, $75 = 0, $76 = 0, $81 = 0, $82 = 0, $89 = 0, $90 = 0, $91 = 0, $96 = 0, $97 = 0;
 $1 = $op_reg << 3;
 $2 = $r & 63;
 if (($2 | 0) == 48) {
  $_01_i = $1 | 5;
  $6 = HEAP32[5434] | 0;
  while (1) {
   $7 = $6 + 1 | 0;
   $8 = HEAP32[13918] | 0;
   if ($7 >>> 0 > (HEAP32[$8 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($8, $7);
    $14 = HEAP32[5434] | 0;
    $13 = HEAP32[13918] | 0;
   } else {
    $14 = $6;
    $13 = $8;
   }
   HEAP8[(HEAP32[$13 + 4 >> 2] | 0) + $14 | 0] = $_01_i;
   HEAP32[5434] = $7;
   $19 = $_01_i >>> 8;
   if (($19 | 0) == 0) {
    break;
   } else {
    $_01_i = $19;
    $6 = $7;
   }
  }
  if (($r & 512 | 0) != 0) {
   _greloc(HEAP32[13918] | 0, $sym, $7, 1);
  }
  _gen_le32($c);
  return;
 } else if (($2 | 0) == 50) {
  if (($c << 24 >> 24 | 0) == ($c | 0)) {
   $_01_i2 = $1 | 69;
   $31 = HEAP32[5434] | 0;
   while (1) {
    $32 = $31 + 1 | 0;
    $33 = HEAP32[13918] | 0;
    if ($32 >>> 0 > (HEAP32[$33 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($33, $32);
     $39 = HEAP32[5434] | 0;
     $38 = HEAP32[13918] | 0;
    } else {
     $39 = $31;
     $38 = $33;
    }
    HEAP8[(HEAP32[$38 + 4 >> 2] | 0) + $39 | 0] = $_01_i2;
    HEAP32[5434] = $32;
    $44 = $_01_i2 >>> 8;
    if (($44 | 0) == 0) {
     break;
    } else {
     $_01_i2 = $44;
     $31 = $32;
    }
   }
   $46 = $31 + 2 | 0;
   $47 = HEAP32[13918] | 0;
   if ($46 >>> 0 > (HEAP32[$47 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($47, $46);
    $53 = HEAP32[5434] | 0;
    $52 = HEAP32[13918] | 0;
   } else {
    $53 = $32;
    $52 = $47;
   }
   HEAP8[(HEAP32[$52 + 4 >> 2] | 0) + $53 | 0] = $c;
   HEAP32[5434] = $46;
   return;
  } else {
   $_01_i_i = $1 | 133;
   $60 = HEAP32[5434] | 0;
   while (1) {
    $61 = $60 + 1 | 0;
    $62 = HEAP32[13918] | 0;
    if ($61 >>> 0 > (HEAP32[$62 + 8 >> 2] | 0) >>> 0) {
     _section_realloc($62, $61);
     $68 = HEAP32[5434] | 0;
     $67 = HEAP32[13918] | 0;
    } else {
     $68 = $60;
     $67 = $62;
    }
    HEAP8[(HEAP32[$67 + 4 >> 2] | 0) + $68 | 0] = $_01_i_i;
    HEAP32[5434] = $61;
    $73 = $_01_i_i >>> 8;
    if (($73 | 0) == 0) {
     break;
    } else {
     $_01_i_i = $73;
     $60 = $61;
    }
   }
   $75 = $60 + 5 | 0;
   $76 = HEAP32[13918] | 0;
   if ($75 >>> 0 > (HEAP32[$76 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($76, $75);
    $82 = HEAP32[13918] | 0;
    $81 = HEAP32[5434] | 0;
   } else {
    $82 = $76;
    $81 = $61;
   }
   HEAP32[(HEAP32[$82 + 4 >> 2] | 0) + $81 >> 2] = $c;
   HEAP32[5434] = $75;
   return;
  }
 } else {
  $89 = HEAP32[5434] | 0;
  $90 = $89 + 1 | 0;
  $91 = HEAP32[13918] | 0;
  if ($90 >>> 0 > (HEAP32[$91 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($91, $90);
   $97 = HEAP32[5434] | 0;
   $96 = HEAP32[13918] | 0;
  } else {
   $97 = $89;
   $96 = $91;
  }
  HEAP8[(HEAP32[$96 + 4 >> 2] | 0) + $97 | 0] = $2 | $1;
  HEAP32[5434] = $90;
  return;
 }
}
function _type_decl($type, $ad, $v, $td) {
 $type = $type | 0;
 $ad = $ad | 0;
 $v = $v | 0;
 $td = $td | 0;
 var $type1 = 0, $tmpcast = 0, $1 = 0, $3 = 0, $4 = 0, $qualifiers_0_ph = 0, $14 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $49 = 0, $50 = 0, $56 = 0, $type2_0 = 0, $75 = 0, $76 = 0, $77$1 = 0, $78$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $type1 = sp | 0;
 $tmpcast = $type1;
 $1 = HEAP32[5310] | 0;
 if (($1 | 0) == 42) {
  $3 = $type | 0;
  $4 = $type + 4 | 0;
  $qualifiers_0_ph = 0;
  while (1) {
   L5 : while (1) {
    _next();
    switch (HEAP32[5310] | 0) {
    case 276:
    case 277:
    case 278:
     {
      label = 6;
      break L5;
      break;
     }
    case 288:
    case 289:
    case 290:
     {
      break;
     }
    case 273:
    case 274:
    case 275:
     {
      label = 5;
      break L5;
      break;
     }
    default:
     {
      label = 7;
      break L5;
     }
    }
   }
   if ((label | 0) == 5) {
    label = 0;
    $qualifiers_0_ph = $qualifiers_0_ph | 2048;
    continue;
   } else if ((label | 0) == 6) {
    label = 0;
    $qualifiers_0_ph = $qualifiers_0_ph | 4096;
    continue;
   } else if ((label | 0) == 7) {
    label = 0;
    $14 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, HEAP32[$3 >> 2] | 0, -1) | 0;
    HEAP32[$14 + 20 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$14 + 8 >> 2] = 0;
    $19 = HEAP32[$3 >> 2] & 116608;
    HEAP32[$4 >> 2] = $14;
    HEAP32[$3 >> 2] = $19 | $qualifiers_0_ph | 4;
    $22 = HEAP32[5310] | 0;
    if (($22 | 0) == 42) {
     $qualifiers_0_ph = 0;
     continue;
    } else {
     $24 = $22;
     break;
    }
   }
  }
 } else {
  $24 = $1;
 }
 if (($24 & -2 | 0) == 302) {
  _parse_attribute($ad);
  $29 = HEAP32[5310] | 0;
 } else {
  $29 = $24;
 }
 $30 = $type1;
 HEAP32[$30 >> 2] = 0;
 do {
  if (($29 | 0) == 40) {
   _next();
   if ((HEAP32[5310] & -2 | 0) == 302) {
    _parse_attribute($ad);
   }
   _type_decl($tmpcast, $ad, $v, $td);
   _skip(41);
  } else {
   if (!(($29 | 0) < 256 | ($td & 2 | 0) == 0)) {
    HEAP32[$v >> 2] = $29;
    _next();
    break;
   }
   if (($td & 1 | 0) == 0) {
    _expect(18448);
   }
   HEAP32[$v >> 2] = 0;
  }
 } while (0);
 $49 = $type | 0;
 $50 = HEAP32[$49 >> 2] | 0;
 HEAP32[$49 >> 2] = $50 & -116609;
 if (($50 & 256 | 0) == 0) {
  _post_type($type, $ad);
 } else {
  $56 = HEAP32[5338] | 0;
  HEAP32[5338] = 1;
  _post_type($type, $ad);
  HEAP32[5338] = $56;
 }
 HEAP32[$49 >> 2] = HEAP32[$49 >> 2] | $50 & 116608;
 if ((HEAP32[5310] & -2 | 0) == 302) {
  _parse_attribute($ad);
 }
 if ((HEAP32[$30 >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 } else {
  $type2_0 = $tmpcast;
 }
 do {
  $type2_0 = (HEAP32[$type2_0 + 4 >> 2] | 0) + 16 | 0;
 } while ((HEAP32[$type2_0 >> 2] | 0) != 0);
 $75 = $type;
 $76 = $type2_0;
 $77$1 = HEAP32[$75 + 4 >> 2] | 0;
 HEAP32[$76 >> 2] = HEAP32[$75 >> 2];
 HEAP32[$76 + 4 >> 2] = $77$1;
 $78$1 = HEAP32[$type1 + 4 >> 2] | 0;
 HEAP32[$75 >> 2] = HEAP32[$type1 >> 2];
 HEAP32[$75 + 4 >> 2] = $78$1;
 STACKTOP = sp;
 return;
}
function _save_reg($r) {
 $r = $r | 0;
 var $align = 0, $sv = 0, $1 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $p_04 = 0, $_03 = 0, $saved_02 = 0, $l_01 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $28 = 0, $34 = 0, $type_0 = 0, $36 = 0, $41 = 0, $42 = 0, $59 = 0, $l_1 = 0, $saved_1 = 0, $_1 = 0, $67 = 0, $68 = 0, $r_0_i = 0, $storemerge = 0, $78 = 0, $l_2 = 0, $saved_2 = 0, $_2 = 0, $79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $align = sp | 0;
 $sv = sp + 8 | 0;
 $1 = HEAP32[5024] | 0;
 if ($1 >>> 0 < 56272 >>> 0) {
  STACKTOP = sp;
  return;
 }
 $3 = $sv | 0;
 $4 = $sv + 8 | 0;
 $6 = $sv + 16 | 0;
 $l_01 = 0;
 $saved_02 = 0;
 $_03 = $r;
 $p_04 = 56272;
 $8 = $1;
 while (1) {
  $9 = $p_04 + 8 | 0;
  $10 = HEAP16[$9 >> 1] | 0;
  $11 = $10 & 65535;
  $12 = $11 & 63;
  do {
   if (($12 | 0) == ($_03 | 0)) {
    label = 6;
   } else {
    if ((HEAP32[$p_04 >> 2] & 15 | 0) != 12) {
     $_2 = $_03;
     $saved_2 = $saved_02;
     $l_2 = $l_01;
     $78 = $8;
     break;
    }
    if ((HEAP16[$p_04 + 10 >> 1] & 63 | 0) == ($_03 | 0)) {
     label = 6;
    } else {
     $_2 = $_03;
     $saved_2 = $saved_02;
     $l_2 = $l_01;
     $78 = $8;
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   label = 0;
   if (($saved_02 | 0) == 0) {
    $28 = $p_04 | 0;
    if (($11 & 256 | 0) == 0) {
     $34 = HEAP32[$p_04 >> 2] & 15;
     if (($34 | 0) == 12 | ($34 | 0) == 10 | ($34 | 0) == 9 | ($34 | 0) == 8) {
      $type_0 = $28;
     } else {
      label = 9;
     }
    } else {
     label = 9;
    }
    if ((label | 0) == 9) {
     label = 0;
     $type_0 = 21728;
    }
    $36 = _type_size($type_0, $align) | 0;
    $41 = (HEAP32[5356] | 0) - $36 & -(HEAP32[$align >> 2] | 0);
    HEAP32[5356] = $41;
    $42 = $type_0 | 0;
    HEAP32[$3 >> 2] = HEAP32[$42 >> 2];
    HEAP16[$4 >> 1] = 306;
    HEAP32[$6 >> 2] = $41;
    _store($12, $sv);
    if (($12 | 0) == 3) {
     _o(55517);
    }
    if ((HEAP32[$42 >> 2] & 15 | 0) == 12) {
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
     _store(HEAPU16[$p_04 + 10 >> 1] | 0, $sv);
    }
    $_1 = $12;
    $saved_1 = 1;
    $l_1 = HEAP32[5356] | 0;
    $59 = HEAP16[$9 >> 1] | 0;
   } else {
    $_1 = $_03;
    $saved_1 = $saved_02;
    $l_1 = $l_01;
    $59 = $10;
   }
   do {
    if (($59 & 256) == 0) {
     $67 = HEAP32[$p_04 >> 2] | 0;
     $68 = $67 & 15;
     if (($68 | 0) == 2) {
      $r_0_i = 8448;
     } else if (($68 | 0) == 11 | ($68 | 0) == 1) {
      $r_0_i = 4352;
     } else {
      $storemerge = 306;
      break;
     }
     $storemerge = ($67 << 10 & 16384 | $r_0_i | 50) & 65535;
    } else {
     $storemerge = $59 & 32704 | 49;
    }
   } while (0);
   HEAP16[$9 >> 1] = $storemerge;
   HEAP16[$p_04 + 10 >> 1] = 48;
   HEAP32[$p_04 + 16 >> 2] = $l_1;
   $_2 = $_1;
   $saved_2 = $saved_1;
   $l_2 = $l_1;
   $78 = HEAP32[5024] | 0;
  }
  $79 = $p_04 + 40 | 0;
  if ($79 >>> 0 > $78 >>> 0) {
   break;
  } else {
   $l_01 = $l_2;
   $saved_02 = $saved_2;
   $_03 = $_2;
   $p_04 = $79;
   $8 = $78;
  }
 }
 STACKTOP = sp;
 return;
}
function _tcc_set_output_type($s, $output_type) {
 $s = $s | 0;
 $output_type = $output_type | 0;
 var $buf_i_i = 0, $25 = 0, $27 = 0, $_pre = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $i_01_i_i = 0, $_pre_phi10 = 0, $_pre_phi8 = 0, $54 = 0, $55 = 0, $i_01_i_i3 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 $buf_i_i = sp | 0;
 HEAP32[$s + 44 >> 2] = $output_type;
 if ((HEAP32[$s + 4 >> 2] | 0) == 0) {
  _tcc_split_path($s, $s + 128 | 0, $s + 132 | 0, 13e3);
 }
 if ((HEAP32[$s + 84 >> 2] | 0) != 0) {
  _tcc_define_symbol($s, 12912, 0);
  HEAP32[13928] = _new_section($s, 12816, 1, 2) | 0;
  HEAP32[5358] = _new_section($s, 12728, 1, 2) | 0;
 }
 if ((HEAP32[$s + 52 >> 2] | 0) != 0) {
  _tcc_define_symbol($s, 12584, 0);
 }
 if ((HEAP32[$s + 80 >> 2] | 0) != 0) {
  $25 = _new_section($s, 12480, 1, 0) | 0;
  HEAP32[5328] = $25;
  HEAP32[$25 + 36 >> 2] = 12;
  $27 = _new_section($s, 12416, 3, 0) | 0;
  HEAP32[5326] = $27;
  _put_elf_str($27, 55728) | 0;
  HEAP32[(HEAP32[5328] | 0) + 56 >> 2] = HEAP32[5326];
  _put_stabs(55728, 0, 0, 0, 0);
 }
 if (($output_type - 1 | 0) >>> 0 >= 2 >>> 0) {
  STACKTOP = sp;
  return 0;
 }
 if ((HEAP32[$s + 8 >> 2] | 0) != 0) {
  STACKTOP = sp;
  return 0;
 }
 $_pre = $s + 144 | 0;
 L19 : do {
  if (($output_type | 0) == 2) {
   $_pre_phi8 = $s + 148 | 0;
   $_pre_phi10 = $buf_i_i | 0;
  } else {
   $41 = HEAP32[$_pre >> 2] | 0;
   $42 = $s + 148 | 0;
   $43 = HEAP32[$42 >> 2] | 0;
   $44 = $buf_i_i | 0;
   if (($43 | 0) > 0) {
    $i_01_i_i = 0;
    do {
     _snprintf($44 | 0, 1024, 13464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$41 + ($i_01_i_i << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = 12376, tempVarArgs) | 0) | 0;
     STACKTOP = tempVarArgs;
     $i_01_i_i = $i_01_i_i + 1 | 0;
     if ((_tcc_add_file_internal($s, $44, 0) | 0) == 0) {
      $_pre_phi8 = $42;
      $_pre_phi10 = $44;
      break L19;
     }
    } while (($i_01_i_i | 0) < ($43 | 0));
   }
   _tcc_error_noabort(14192, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 12376, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $_pre_phi8 = $42;
   $_pre_phi10 = $44;
  }
 } while (0);
 $54 = HEAP32[$_pre >> 2] | 0;
 $55 = HEAP32[$_pre_phi8 >> 2] | 0;
 L28 : do {
  if (($55 | 0) > 0) {
   $i_01_i_i3 = 0;
   while (1) {
    _snprintf($_pre_phi10 | 0, 1024, 13464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$54 + ($i_01_i_i3 << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = 12280, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    $i_01_i_i3 = $i_01_i_i3 + 1 | 0;
    if ((_tcc_add_file_internal($s, $_pre_phi10, 0) | 0) == 0) {
     break;
    }
    if (($i_01_i_i3 | 0) >= ($55 | 0)) {
     break L28;
    }
   }
   STACKTOP = sp;
   return 0;
  }
 } while (0);
 _tcc_error_noabort(14192, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = 12280, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 STACKTOP = sp;
 return 0;
}
function _error1($s1, $is_warning, $fmt, $ap) {
 $s1 = $s1 | 0;
 $is_warning = $is_warning | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $buf = 0, $1 = 0, $f_04 = 0, $f_0 = 0, $f_05 = 0, $6 = 0, $9 = 0, $10 = 0, $pf_02 = 0, $13 = 0, $16 = 0, $21 = 0, $26 = 0, $30 = 0, $35 = 0, $49 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 $buf = sp | 0;
 $1 = $buf | 0;
 HEAP8[$1] = 0;
 $f_04 = HEAP32[13912] | 0;
 L1 : do {
  if (($f_04 | 0) == 0) {
   label = 9;
  } else {
   $f_05 = $f_04;
   while (1) {
    $6 = $f_05 + 32 | 0;
    if ((HEAP8[$6] | 0) != 58) {
     break;
    }
    $f_0 = HEAP32[$f_05 + 12 >> 2] | 0;
    if (($f_0 | 0) == 0) {
     label = 9;
     break L1;
    } else {
     $f_05 = $f_0;
    }
   }
   $9 = $s1 + 336 | 0;
   $10 = $s1 + 464 | 0;
   if ($9 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
    $pf_02 = $9;
    do {
     $13 = HEAP32[$pf_02 >> 2] | 0;
     $16 = HEAP32[$13 + 16 >> 2] | 0;
     _strcat_printf($1, 0, 18576, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $13 + 32, HEAP32[tempVarArgs + 8 >> 2] = $16, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $pf_02 = $pf_02 + 4 | 0;
    } while ($pf_02 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0);
   }
   $21 = HEAP32[$f_05 + 16 >> 2] | 0;
   if (($21 | 0) > 0) {
    _strcat_printf($1, 0, 18568, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $6, HEAP32[tempVarArgs + 8 >> 2] = $21, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    break;
   } else {
    _strcat_printf($1, 0, 18560, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $6, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
    break;
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  _strcat_printf($1, 0, 18544, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 $26 = ($is_warning | 0) != 0;
 if ($26) {
  _strcat_printf($1, 0, 18528, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 } else {
  _strcat_printf($1, 0, 18472, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 $30 = _strlen($1 | 0) | 0;
 _vsnprintf($buf + $30 | 0, 2048 - $30 | 0, $fmt | 0, $ap | 0) | 0;
 $35 = HEAP32[$s1 + 156 >> 2] | 0;
 if (($35 | 0) == 0) {
  _fprintf(HEAP32[_stderr >> 2] | 0, 11936, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $1, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 } else {
  FUNCTION_TABLE_vii[$35 & 7](HEAP32[$s1 + 152 >> 2] | 0, $1);
 }
 do {
  if ($26) {
   if ((HEAP32[$s1 + 68 >> 2] | 0) != 0) {
    break;
   }
   STACKTOP = sp;
   return;
  }
 } while (0);
 $49 = $s1 + 320 | 0;
 HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}
function _add_elf_sym($s, $value, $size, $info, $other, $sh_num, $name) {
 $s = $s | 0;
 $value = $value | 0;
 $size = $size | 0;
 $info = $info | 0;
 $other = $other | 0;
 $sh_num = $sh_num | 0;
 $name = $name | 0;
 var $2 = 0, $3 = 0, $other_tr = 0, $4 = 0, $7 = 0, $12 = 0, $13 = 0, $14 = 0, $_pre = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $new_vis_0 = 0, $30 = 0, $_pre_phi17 = 0, $_0_off0 = 0, $sym_index_0 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $2 = $info >>> 4 & 15;
 $3 = $info & 15;
 $other_tr = $other & 255;
 $4 = $other_tr & 3;
 do {
  if (($2 | 0) != 0) {
   $7 = _find_elf_sym($s, $name) | 0;
   if (($7 | 0) == 0) {
    break;
   }
   $12 = HEAP32[$s + 4 >> 2] | 0;
   $13 = $12 + ($7 << 4) + 14 | 0;
   $14 = HEAP16[$13 >> 1] | 0;
   $_pre = $12 + ($7 << 4) + 12 | 0;
   do {
    if ($14 << 16 >> 16 == 0) {
     $_0_off0 = $other_tr;
     $_pre_phi17 = $12 + ($7 << 4) + 13 | 0;
    } else {
     $19 = (HEAPU8[$_pre] | 0) >>> 4;
     $20 = $12 + ($7 << 4) + 13 | 0;
     $21 = HEAP8[$20] | 0;
     $22 = $21 & 3;
     do {
      if ($22 << 24 >> 24 == 0) {
       $new_vis_0 = $4;
      } else {
       if ($4 << 24 >> 24 == 0) {
        $new_vis_0 = $22;
        break;
       }
       $new_vis_0 = ($22 & 255) >>> 0 < ($4 & 255) >>> 0 ? $22 : $4;
      }
     } while (0);
     $30 = $21 & -4 | $new_vis_0;
     HEAP8[$20] = $30;
     if (($sh_num | 0) == 0) {
      $sym_index_0 = $7;
      STACKTOP = sp;
      return $sym_index_0 | 0;
     }
     if (($2 | 0) == 1 & ($19 | 0) == 2) {
      $_0_off0 = $30;
      $_pre_phi17 = $20;
      break;
     }
     if (($2 | 0) == 2 & ($19 - 1 | 0) >>> 0 < 2 >>> 0 | ($4 - 1 & 255) >>> 0 < 2 >>> 0) {
      $sym_index_0 = $7;
      STACKTOP = sp;
      return $sym_index_0 | 0;
     }
     if ($14 << 16 >> 16 == -14) {
      if (($sh_num | 0) < 65280 | ($sh_num | 0) == 65522) {
       $_0_off0 = $30;
       $_pre_phi17 = $20;
       break;
      }
     }
     if ((HEAP32[(HEAP32[5314] | 0) + 2864 >> 2] | 0) == ($s | 0)) {
      $sym_index_0 = $7;
      STACKTOP = sp;
      return $sym_index_0 | 0;
     }
     _tcc_error_noabort(18392, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $name, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $sym_index_0 = $7;
     STACKTOP = sp;
     return $sym_index_0 | 0;
    }
   } while (0);
   HEAP8[$_pre] = $2 << 4 | $3;
   HEAP16[$13 >> 1] = $sh_num;
   HEAP8[7544] = 1;
   HEAP32[$12 + ($7 << 4) + 4 >> 2] = $value;
   HEAP32[$12 + ($7 << 4) + 8 >> 2] = $size;
   HEAP8[$_pre_phi17] = $_0_off0;
   $sym_index_0 = $7;
   STACKTOP = sp;
   return $sym_index_0 | 0;
  }
 } while (0);
 $sym_index_0 = _put_elf_sym($s, $value, $size, $2 << 4 | $3, $other, $sh_num, $name) | 0;
 STACKTOP = sp;
 return $sym_index_0 | 0;
}
function _type_to_str($buf, $type, $varstr) {
 $buf = $buf | 0;
 $type = $type | 0;
 $varstr = $varstr | 0;
 var $buf1 = 0, $2 = 0, $tstr_0 = 0, $tstr_1 = 0, $37 = 0, $46 = 0, $50 = 0, $52 = 0, $sa_01 = 0, $57 = 0, $63 = 0, $64 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $buf1 = sp | 0;
 $2 = HEAP32[$type >> 2] | 0;
 HEAP8[$buf] = 0;
 if (($2 & 2048 | 0) != 0) {
  _pstrcat($buf, 256, 11048) | 0;
 }
 if (($2 & 4096 | 0) != 0) {
  _pstrcat($buf, 256, 11024) | 0;
 }
 if (($2 & 16 | 0) != 0) {
  _pstrcat($buf, 256, 10968) | 0;
 }
 switch ($2 & 15 | 0) {
 case 2:
  {
   $tstr_0 = 10832;
   label = 17;
   break;
  }
 case 0:
  {
   $tstr_0 = 10800;
   label = 17;
   break;
  }
 case 11:
  {
   $tstr_0 = 10872;
   label = 17;
   break;
  }
 case 13:
  {
   $tstr_0 = 10784;
   label = 17;
   break;
  }
 case 12:
  {
   $tstr_0 = 10712;
   label = 17;
   break;
  }
 case 8:
  {
   $tstr_0 = 10680;
   label = 17;
   break;
  }
 case 9:
  {
   $tstr_0 = 10656;
   label = 17;
   break;
  }
 case 10:
  {
   $tstr_0 = 10600;
   label = 17;
   break;
  }
 case 3:
  {
   $tstr_0 = 10912;
   label = 17;
   break;
  }
 case 5:
  {
   $tstr_1 = 10504;
   label = 19;
   break;
  }
 case 7:
  {
   $tstr_1 = 10520;
   label = 19;
   break;
  }
 case 6:
  {
   $46 = HEAP32[$type + 4 >> 2] | 0;
   _type_to_str($buf, $46 + 16 | 0, $varstr);
   _pstrcat($buf, 256, 10464) | 0;
   $50 = HEAP32[$46 + 24 >> 2] | 0;
   L21 : do {
    if (($50 | 0) != 0) {
     $52 = $buf1 | 0;
     $sa_01 = $50;
     while (1) {
      _type_to_str($52, $sa_01 + 16 | 0, 0);
      _pstrcat($buf, 256, $52) | 0;
      $57 = HEAP32[$sa_01 + 24 >> 2] | 0;
      if (($57 | 0) == 0) {
       break L21;
      }
      _pstrcat($buf, 256, 2e4) | 0;
      $sa_01 = $57;
     }
    }
   } while (0);
   _pstrcat($buf, 256, 19984) | 0;
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   $63 = HEAP32[$type + 4 >> 2] | 0;
   $64 = $buf1 | 0;
   _pstrcpy($64, 256, 19912) | 0;
   if (($varstr | 0) != 0) {
    _pstrcat($64, 256, $varstr) | 0;
   }
   _type_to_str($buf, $63 + 16 | 0, $64);
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   $tstr_0 = 10856;
   label = 17;
   break;
  }
 default:
  {}
 }
 do {
  if ((label | 0) == 17) {
   _pstrcat($buf, 256, $tstr_0) | 0;
  } else if ((label | 0) == 19) {
   _pstrcat($buf, 256, $tstr_1) | 0;
   $37 = HEAP32[HEAP32[$type + 4 >> 2] >> 2] & -1073741825;
   if (($37 | 0) > 268435455) {
    _pstrcat($buf, 256, 10480) | 0;
    break;
   } else {
    _pstrcat($buf, 256, _get_tok_str($37, 0) | 0) | 0;
    break;
   }
  }
 } while (0);
 if (($varstr | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _pstrcat($buf, 256, 19856) | 0;
 _pstrcat($buf, 256, $varstr) | 0;
 STACKTOP = sp;
 return;
}
function _tcc_set_options($s, $str) {
 $s = $s | 0;
 $str = $str | 0;
 var $_ph = 0, $_ph5 = 0, $_0_ph = 0, $_0 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $_14 = 0, $9 = 0, $11 = 0, $_1_lcssa = 0, $14 = 0, $15 = 0, $16 = 0, $nb_alloc_0_i = 0, $26 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $p_01_i = 0, $38 = 0, $43 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $_0_ph = $str;
 $_ph5 = 0;
 $_ph = 0;
 L1 : while (1) {
  $_0 = $_0_ph;
  while (1) {
   $2 = HEAP8[$_0] | 0;
   $3 = $2 << 24 >> 24;
   if (!(($3 | 0) == 32 | ($3 | 0) == 12 | ($3 | 0) == 11 | ($3 | 0) == 9)) {
    if (($2 << 24 >> 24 | 0) == 0) {
     label = 15;
     break L1;
    } else if (($2 << 24 >> 24 | 0) != 13) {
     $_14 = $_0;
     $8 = $2;
     break;
    }
   }
   $_0 = $_0 + 1 | 0;
  }
  while (1) {
   $9 = $8 << 24 >> 24;
   if (($9 | 0) == 32 | ($9 | 0) == 12 | ($9 | 0) == 11 | ($9 | 0) == 9) {
    $_1_lcssa = $_14;
    break;
   }
   $11 = $_14 + 1 | 0;
   if ($8 << 24 >> 24 == 13) {
    $_1_lcssa = $_14;
    break;
   }
   $6 = HEAP8[$11] | 0;
   if ($6 << 24 >> 24 == 0) {
    $_1_lcssa = $11;
    break;
   } else {
    $_14 = $11;
    $8 = $6;
   }
  }
  $14 = $_1_lcssa - $_0 | 0;
  $15 = $14 + 1 | 0;
  $16 = _malloc($15) | 0;
  if (($16 | 0) == 0 & ($15 | 0) != 0) {
   label = 10;
   break;
  }
  _memcpy($16 | 0, $_0 | 0, $14) | 0;
  HEAP8[$16 + $14 | 0] = 0;
  if (($_ph5 - 1 & $_ph5 | 0) == 0) {
   $nb_alloc_0_i = ($_ph5 | 0) == 0 ? 4 : $_ph5 << 3;
   $26 = _realloc($_ph, $nb_alloc_0_i) | 0;
   if (($26 | 0) == 0 & ($nb_alloc_0_i | 0) != 0) {
    label = 13;
    break;
   } else {
    $30 = $26;
   }
  } else {
   $30 = $_ph;
  }
  HEAP32[$30 + ($_ph5 << 2) >> 2] = $16;
  $_0_ph = $_1_lcssa;
  $_ph5 = $_ph5 + 1 | 0;
  $_ph = $30;
 }
 if ((label | 0) == 10) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 } else if ((label | 0) == 13) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 } else if ((label | 0) == 15) {
  $34 = $_ph;
  $35 = _tcc_parse_args($s, $_ph5, $34) | 0;
  if (($_ph5 | 0) == 0) {
   _free($_ph);
   STACKTOP = sp;
   return $35 | 0;
  } else {
   $p_01_i = $34;
   $37 = $_ph5;
  }
  while (1) {
   $38 = HEAP32[$p_01_i >> 2] | 0;
   if (($38 | 0) != 0) {
    _free($38);
   }
   $43 = $37 - 1 | 0;
   if (($43 | 0) == 0) {
    break;
   } else {
    $p_01_i = $p_01_i + 4 | 0;
    $37 = $43;
   }
  }
  _free($_ph);
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0;
}
function _put_extern_sym2($sym, $section, $value, $size, $can_add_underscore) {
 $sym = $sym | 0;
 $section = $section | 0;
 $value = $value | 0;
 $size = $size | 0;
 $can_add_underscore = $can_add_underscore | 0;
 var $buf1 = 0, $buf = 0, $magicptr = 0, $sh_num_0 = 0, $7 = 0, $8 = 0, $sym_type_0 = 0, $sym_bind_0 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $26 = 0, $33 = 0, $36 = 0, $name_0 = 0, $42 = 0, $44 = 0, $_02_i = 0, $q_01_i = 0, $45 = 0, $49 = 0, $q_0_lcssa_i = 0, $name_1 = 0, $53 = 0, $62 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $buf1 = sp | 0;
 $buf = sp + 256 | 0;
 $magicptr = $section;
 if (($magicptr | 0) == 1) {
  $sh_num_0 = 65521;
 } else if (($magicptr | 0) == 0) {
  $sh_num_0 = 0;
 } else {
  $sh_num_0 = HEAP32[$section + 16 >> 2] | 0;
 }
 $7 = HEAP32[$sym + 16 >> 2] | 0;
 $8 = $7 & 15;
 if (($8 | 0) == 3) {
  $sym_type_0 = 0;
 } else if (($8 | 0) == 6) {
  $sym_type_0 = 2;
 } else {
  $sym_type_0 = 1;
 }
 if (($7 & 256 | 0) == 0) {
  $sym_bind_0 = ($7 >>> 12 & 16) + 16 | 0;
 } else {
  $sym_bind_0 = 0;
 }
 $19 = $sym + 12 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 if (($20 | 0) != 0) {
  $62 = HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0;
  HEAP32[$62 + ($20 << 4) + 4 >> 2] = $value;
  HEAP32[$62 + ($20 << 4) + 8 >> 2] = $size;
  HEAP16[$62 + ($20 << 4) + 14 >> 1] = $sh_num_0;
  STACKTOP = sp;
  return;
 }
 $23 = $sym | 0;
 $25 = _get_tok_str(HEAP32[$23 >> 2] | 0, 0) | 0;
 $26 = HEAP32[5314] | 0;
 L16 : do {
  if ((HEAP32[$26 + 84 >> 2] | 0) == 0) {
   $name_0 = $25;
   $36 = $26;
  } else {
   switch (HEAP32[$23 >> 2] | 0) {
   case 371:
   case 397:
   case 372:
   case 398:
   case 399:
   case 400:
    {
     break;
    }
   default:
    {
     $name_0 = $25;
     $36 = $26;
     break L16;
    }
   }
   $33 = $buf | 0;
   _memcpy($33 | 0, 19336, 9) | 0;
   _strcat($33 | 0, $25 | 0) | 0;
   $name_0 = $33;
   $36 = HEAP32[5314] | 0;
  }
 } while (0);
 if ((HEAP32[$36 + 56 >> 2] | 0) != 0 & ($can_add_underscore | 0) != 0) {
  $42 = $buf1 | 0;
  HEAP8[$42] = 95;
  $44 = $buf1 + 255 | 0;
  $q_01_i = $buf1 + 1 | 0;
  $_02_i = $name_0;
  while (1) {
   $45 = HEAP8[$_02_i] | 0;
   if ($45 << 24 >> 24 == 0) {
    $q_0_lcssa_i = $q_01_i;
    break;
   }
   $49 = $q_01_i + 1 | 0;
   HEAP8[$q_01_i] = $45;
   if ($49 >>> 0 < $44 >>> 0) {
    $q_01_i = $49;
    $_02_i = $_02_i + 1 | 0;
   } else {
    $q_0_lcssa_i = $49;
    break;
   }
  }
  HEAP8[$q_0_lcssa_i] = 0;
  $name_1 = $42;
 } else {
  $name_1 = $name_0;
 }
 $53 = HEAP32[$sym + 4 >> 2] | 0;
 HEAP32[$19 >> 2] = _add_elf_sym(HEAP32[5318] | 0, $value, $size, $sym_bind_0 | $sym_type_0, 0, $sh_num_0, ($53 | 0) == 0 ? $name_1 : $53) | 0;
 STACKTOP = sp;
 return;
}
function _new_section($s1, $name, $sh_type, $sh_flags) {
 $s1 = $s1 | 0;
 $name = $name | 0;
 $sh_type = $sh_type | 0;
 $sh_flags = $sh_flags | 0;
 var $2 = 0, $3 = 0, $7 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $nb_alloc_0_i = 0, $37 = 0, $pp_0_i = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $nb_alloc_0_i3 = 0, $58 = 0, $pp_0_i6 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($name | 0) | 0) + 76 | 0;
 $3 = _malloc($2) | 0;
 if (($3 | 0) == 0 & ($2 | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 }
 _memset($3 | 0, 0, $2 | 0) | 0;
 $7 = $3;
 _strcpy($3 + 72 | 0, $name | 0) | 0;
 HEAP32[$3 + 20 >> 2] = $sh_type;
 HEAP32[$3 + 24 >> 2] = $sh_flags;
 switch ($sh_type | 0) {
 case 5:
 case 9:
 case 4:
 case 11:
 case 2:
 case 6:
  {
   HEAP32[$3 + 32 >> 2] = 4;
   break;
  }
 case 3:
  {
   HEAP32[$3 + 32 >> 2] = 1;
   break;
  }
 default:
  {
   HEAP32[$3 + 32 >> 2] = 32;
  }
 }
 if (($sh_flags | 0) < 0) {
  $26 = $s1 + 2836 | 0;
  $27 = $s1 + 2840 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  $29 = HEAP32[$26 >> 2] | 0;
  $30 = $29;
  do {
   if (($28 - 1 & $28 | 0) == 0) {
    $nb_alloc_0_i = ($28 | 0) == 0 ? 4 : $28 << 3;
    $37 = _realloc($29, $nb_alloc_0_i) | 0;
    if (($37 | 0) == 0 & ($nb_alloc_0_i | 0) != 0) {
     _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     return 0;
    } else {
     HEAP32[$26 >> 2] = $37;
     $pp_0_i = $37;
     break;
    }
   } else {
    $pp_0_i = $30;
   }
  } while (0);
  HEAP32[$pp_0_i + ($28 << 2) >> 2] = $3;
  HEAP32[$27 >> 2] = $28 + 1;
  STACKTOP = sp;
  return $7 | 0;
 } else {
  $45 = $s1 + 2832 | 0;
  $46 = HEAP32[$45 >> 2] | 0;
  HEAP32[$3 + 16 >> 2] = $46;
  $49 = $s1 + 2828 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  $51 = $50;
  do {
   if (($46 - 1 & $46 | 0) == 0) {
    $nb_alloc_0_i3 = ($46 | 0) == 0 ? 4 : $46 << 3;
    $58 = _realloc($50, $nb_alloc_0_i3) | 0;
    if (($58 | 0) == 0 & ($nb_alloc_0_i3 | 0) != 0) {
     _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     return 0;
    } else {
     HEAP32[$49 >> 2] = $58;
     $pp_0_i6 = $58;
     break;
    }
   } else {
    $pp_0_i6 = $51;
   }
  } while (0);
  HEAP32[$pp_0_i6 + ($46 << 2) >> 2] = $3;
  HEAP32[$45 >> 2] = $46 + 1;
  STACKTOP = sp;
  return $7 | 0;
 }
 return 0;
}
function _compare_types($type1, $type2, $unqualified) {
 $type1 = $type1 | 0;
 $type2 = $type2 | 0;
 $unqualified = $unqualified | 0;
 var $type1_tr = 0, $type2_tr = 0, $unqualified_tr = 0, $2 = 0, $5 = 0, $t1_0 = 0, $t2_0 = 0, $13 = 0, $30 = 0, $32 = 0, $47 = 0, $51 = 0, $56 = 0, $57 = 0, $s2_0_i3 = 0, $s1_0_i2 = 0, $65 = 0, $67 = 0, $69 = 0, $_lcssa = 0, $_0 = 0, label = 0;
 $unqualified_tr = ($unqualified | 0) == 0;
 $type2_tr = $type2;
 $type1_tr = $type1;
 while (1) {
  $2 = HEAP32[$type1_tr >> 2] | 0;
  $5 = HEAP32[$type2_tr >> 2] | 0;
  if ($unqualified_tr) {
   $t2_0 = $5 & -116609;
   $t1_0 = $2 & -116609;
  } else {
   $t2_0 = $5 & -122753;
   $t1_0 = $2 & -122753;
  }
  if (($t1_0 | 0) != ($t2_0 | 0)) {
   $_0 = 0;
   label = 18;
   break;
  }
  $13 = $t1_0 & 15;
  if (($13 | 0) == 7) {
   label = 7;
   break;
  } else if (($13 | 0) == 6) {
   label = 8;
   break;
  } else if (($13 | 0) != 4) {
   $_0 = 1;
   label = 18;
   break;
  }
  $unqualified_tr = 1;
  $type2_tr = (HEAP32[$type2_tr + 4 >> 2] | 0) + 16 | 0;
  $type1_tr = (HEAP32[$type1_tr + 4 >> 2] | 0) + 16 | 0;
 }
 if ((label | 0) == 7) {
  $_0 = (HEAP32[$type1_tr + 4 >> 2] | 0) == (HEAP32[$type2_tr + 4 >> 2] | 0) | 0;
  return $_0 | 0;
 } else if ((label | 0) == 8) {
  $30 = HEAP32[$type1_tr + 4 >> 2] | 0;
  $32 = HEAP32[$type2_tr + 4 >> 2] | 0;
  if ((_compare_types($30 + 16 | 0, $32 + 16 | 0, 0) | 0) == 0) {
   $_0 = 0;
   return $_0 | 0;
  }
  if (((HEAP32[$32 + 8 >> 2] ^ HEAP32[$30 + 8 >> 2]) & 7 | 0) != 0) {
   $_0 = 0;
   return $_0 | 0;
  }
  $47 = HEAP32[$30 + 12 >> 2] | 0;
  if (($47 | 0) == 2) {
   $_0 = 1;
   return $_0 | 0;
  }
  $51 = HEAP32[$32 + 12 >> 2] | 0;
  if (($51 | 0) == 2) {
   $_0 = 1;
   return $_0 | 0;
  }
  if (($47 | 0) != ($51 | 0)) {
   $_0 = 0;
   return $_0 | 0;
  }
  $56 = ($32 | 0) == 0;
  L28 : do {
   if (($30 | 0) == 0) {
    $_lcssa = $56;
   } else {
    $s1_0_i2 = $30;
    $s2_0_i3 = $32;
    $57 = $56;
    while (1) {
     if ($57) {
      $_0 = 0;
      label = 18;
      break;
     }
     if ((_compare_types($s1_0_i2 + 16 | 0, $s2_0_i3 + 16 | 0, 1) | 0) == 0) {
      $_0 = 0;
      label = 18;
      break;
     }
     $65 = HEAP32[$s1_0_i2 + 24 >> 2] | 0;
     $67 = HEAP32[$s2_0_i3 + 24 >> 2] | 0;
     $69 = ($67 | 0) == 0;
     if (($65 | 0) == 0) {
      $_lcssa = $69;
      break L28;
     } else {
      $s1_0_i2 = $65;
      $s2_0_i3 = $67;
      $57 = $69;
     }
    }
    if ((label | 0) == 18) {
     return $_0 | 0;
    }
   }
  } while (0);
  $_0 = $_lcssa & 1;
  return $_0 | 0;
 } else if ((label | 0) == 18) {
  return $_0 | 0;
 }
 return 0;
}
function _gcall_or_jmp($is_jmp) {
 $is_jmp = $is_jmp | 0;
 var $1 = 0, $4 = 0, $22 = 0, $27 = 0, $_pre_i = 0, $29 = 0, $_01_i_i = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $51 = 0, $52 = 0, $58 = 0, $_pre_i1 = 0, $59 = 0, $60 = 0, $65 = 0, $66 = 0, $72 = 0, $75 = 0, $_01_i3 = 0, $76 = 0, $77 = 0, $82 = 0, $83 = 0, $88 = 0;
 $1 = HEAP32[5024] | 0;
 $4 = HEAPU16[$1 + 8 >> 1] | 0;
 if (($4 & 319 | 0) != 48) {
  $58 = _gv(1) | 0;
  $_pre_i1 = HEAP32[5434] | 0;
  $59 = $_pre_i1 + 1 | 0;
  $60 = HEAP32[13918] | 0;
  if ($59 >>> 0 > (HEAP32[$60 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($60, $59);
   $66 = HEAP32[5434] | 0;
   $65 = HEAP32[13918] | 0;
  } else {
   $66 = $_pre_i1;
   $65 = $60;
  }
  HEAP8[(HEAP32[$65 + 4 >> 2] | 0) + $66 | 0] = -1;
  HEAP32[5434] = $59;
  $72 = ($is_jmp << 4) + 208 + $58 | 0;
  if (($72 | 0) == 0) {
   return;
  }
  $_01_i3 = $72;
  $75 = $_pre_i1 + 1 | 0;
  while (1) {
   $76 = $75 + 1 | 0;
   $77 = HEAP32[13918] | 0;
   if ($76 >>> 0 > (HEAP32[$77 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($77, $76);
    $83 = HEAP32[5434] | 0;
    $82 = HEAP32[13918] | 0;
   } else {
    $83 = $75;
    $82 = $77;
   }
   HEAP8[(HEAP32[$82 + 4 >> 2] | 0) + $83 | 0] = $_01_i3;
   HEAP32[5434] = $76;
   $88 = $_01_i3 >>> 8;
   if (($88 | 0) == 0) {
    break;
   } else {
    $_01_i3 = $88;
    $75 = $76;
   }
  }
  return;
 }
 if (($4 & 512 | 0) == 0) {
  _put_elf_reloc(HEAP32[5318] | 0, HEAP32[13918] | 0, (HEAP32[5434] | 0) + 1 | 0, 2, 0);
 } else {
  _greloc(HEAP32[13918] | 0, HEAP32[$1 + 32 >> 2] | 0, (HEAP32[5434] | 0) + 1 | 0, 2);
 }
 $22 = $is_jmp + 232 | 0;
 $27 = (HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0) - 4 | 0;
 $_pre_i = HEAP32[5434] | 0;
 if (($22 | 0) == 0) {
  $44 = $_pre_i;
 } else {
  $_01_i_i = $22;
  $29 = $_pre_i;
  while (1) {
   $30 = $29 + 1 | 0;
   $31 = HEAP32[13918] | 0;
   if ($30 >>> 0 > (HEAP32[$31 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($31, $30);
    $37 = HEAP32[5434] | 0;
    $36 = HEAP32[13918] | 0;
   } else {
    $37 = $29;
    $36 = $31;
   }
   HEAP8[(HEAP32[$36 + 4 >> 2] | 0) + $37 | 0] = $_01_i_i;
   HEAP32[5434] = $30;
   $42 = $_01_i_i >>> 8;
   if (($42 | 0) == 0) {
    $44 = $30;
    break;
   } else {
    $_01_i_i = $42;
    $29 = $30;
   }
  }
 }
 $45 = $44 + 4 | 0;
 $46 = HEAP32[13918] | 0;
 if ($45 >>> 0 > (HEAP32[$46 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($46, $45);
  $52 = HEAP32[13918] | 0;
  $51 = HEAP32[5434] | 0;
 } else {
  $52 = $46;
  $51 = $44;
 }
 HEAP32[(HEAP32[$52 + 4 >> 2] | 0) + $51 >> 2] = $27;
 HEAP32[5434] = $45;
 return;
}
function _gbound() {
 var $cval_i_sroa_4 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $15 = 0, $16 = 0, $17$0 = 0, $17$1 = 0, $19 = 0, $21 = 0, $_pre = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $39 = 0, $40 = 0, $44 = 0, $49 = 0, $56 = 0, $57 = 0, $58 = 0, $$etemp$3 = 0, $59$1 = 0, $64 = 0, $68 = 0, $70 = 0, $74 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval_i_sroa_4 = sp | 0;
 $2 = (HEAP32[5024] | 0) + 8 | 0;
 HEAP16[$2 >> 1] = HEAP16[$2 >> 1] & -2049;
 $5 = HEAP32[5024] | 0;
 $7 = HEAP16[$5 + 8 >> 1] | 0;
 $8 = $7 & 65535;
 if (($8 & 256 | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if (($8 & 32768 | 0) == 0) {
  $15 = $7 & 28928;
  $16 = $5;
  $17$0 = HEAP32[$16 >> 2] | 0;
  $17$1 = HEAP32[$16 + 4 >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  $19 = HEAP32[5024] | 0;
  $21 = HEAP16[$19 + 8 >> 1] | 0;
  if (($21 & 64) == 0) {
   $28 = $19;
   $27 = $21;
  } else {
   _gv(1) | 0;
   $_pre = HEAP32[5024] | 0;
   $28 = $_pre;
   $27 = HEAP16[$_pre + 8 >> 1] | 0;
  }
  HEAP16[$28 + 8 >> 1] = $27 & -257;
  $31 = HEAP32[5024] | 0;
  $32 = $31 + 8 | 0;
  $33 = HEAP16[$32 >> 1] | 0;
  if (($33 & 63) == 49) {
   HEAP16[$32 >> 1] = $33 & -28992 | 306;
   $39 = HEAP32[5024] | 0;
  } else {
   $39 = $31;
  }
  $40 = $cval_i_sroa_4 | 0;
  if ($39 >>> 0 < 66472 >>> 0) {
   $44 = $39;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $44 = HEAP32[5024] | 0;
  }
  do {
   if ($44 >>> 0 < 56272 >>> 0) {
    $56 = $44;
   } else {
    $49 = HEAPU16[$44 + 8 >> 1] | 0;
    if (!(($49 & 63 | 0) == 51 | ($49 & 62 | 0) == 52)) {
     $56 = $44;
     break;
    }
    _gv(1) | 0;
    $56 = HEAP32[5024] | 0;
   }
  } while (0);
  $57 = $56 + 40 | 0;
  HEAP32[5024] = $57;
  $58 = $57;
  $$etemp$3 = 21728;
  $59$1 = HEAP32[$$etemp$3 + 4 >> 2] | 0;
  HEAP32[$58 >> 2] = HEAP32[$$etemp$3 >> 2];
  HEAP32[$58 + 4 >> 2] = $59$1;
  HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
  HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
  $64 = HEAP32[5024] | 0;
  HEAP32[$64 + 16 >> 2] = 0;
  $68 = $64 + 20 | 0;
  HEAP32[$68 >> 2] = HEAP32[$40 >> 2];
  HEAP32[$68 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
  HEAP32[$68 + 8 >> 2] = HEAP32[$40 + 8 >> 2];
  _gen_bounded_ptr_add();
  $70 = (HEAP32[5024] | 0) + 8 | 0;
  HEAP16[$70 >> 1] = HEAP16[$70 >> 1] | $15;
  $74 = HEAP32[5024] | 0;
  HEAP32[$74 >> 2] = $17$0;
  HEAP32[$74 + 4 >> 2] = $17$1;
 }
 _gen_bounded_ptr_deref();
 STACKTOP = sp;
 return;
}
function _tok_str_add2($s, $t, $cv) {
 $s = $s | 0;
 $t = $t | 0;
 $cv = $cv | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $len_0_i = 0, $15 = 0, $str_0 = 0, $17 = 0, $25 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $len_0_i4 = 0, $42 = 0, $str_1_lcssa = 0, $48 = 0, $len_0 = 0;
 $1 = $s + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $s | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 4 | 0;
 $6 = $s + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 if (($5 | 0) > ($7 | 0)) {
  $len_0_i = ($7 | 0) == 0 ? 8 : $7 << 1;
  $15 = _tcc_realloc($4, $len_0_i << 2) | 0;
  HEAP32[$6 >> 2] = $len_0_i;
  HEAP32[$3 >> 2] = $15;
  $str_0 = $15;
 } else {
  $str_0 = $4;
 }
 $17 = $2 + 1 | 0;
 HEAP32[$str_0 + ($2 << 2) >> 2] = $t;
 switch ($t | 0) {
 case 179:
 case 200:
 case 180:
 case 183:
 case 185:
 case 186:
  {
   HEAP32[$str_0 + ($17 << 2) >> 2] = HEAP32[$cv >> 2];
   $len_0 = $2 + 2 | 0;
   HEAP32[$1 >> 2] = $len_0;
   return;
  }
 case 206:
 case 181:
 case 184:
  {
   $25 = $cv;
   $31 = (((HEAP32[HEAP32[$25 >> 2] >> 2] | 0) + 19 | 0) >>> 2) + $17 | 0;
   $32 = HEAP32[$6 >> 2] | 0;
   if (($31 | 0) > ($32 | 0)) {
    $36 = $32;
    $35 = HEAP32[$3 >> 2] | 0;
    while (1) {
     $len_0_i4 = ($36 | 0) == 0 ? 8 : $36 << 1;
     $42 = _tcc_realloc($35, $len_0_i4 << 2) | 0;
     HEAP32[$6 >> 2] = $len_0_i4;
     HEAP32[$3 >> 2] = $42;
     if (($31 | 0) > ($len_0_i4 | 0)) {
      $36 = $len_0_i4;
      $35 = $42;
     } else {
      $str_1_lcssa = $42;
      break;
     }
    }
   } else {
    $str_1_lcssa = $str_0;
   }
   HEAP32[$str_1_lcssa + ($2 + 2 << 2) >> 2] = 0;
   $48 = HEAP32[HEAP32[$25 >> 2] >> 2] | 0;
   HEAP32[$str_1_lcssa + ($17 << 2) >> 2] = $48;
   HEAP32[$str_1_lcssa + ($5 << 2) >> 2] = 0;
   HEAP32[$str_1_lcssa + ($2 + 3 << 2) >> 2] = $48;
   _memcpy($str_1_lcssa + ($2 + 5 << 2) | 0, HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0, $48) | 0;
   $len_0 = $31;
   HEAP32[$1 >> 2] = $len_0;
   return;
  }
 case 192:
 case 201:
 case 202:
  {
   HEAP32[$str_0 + ($17 << 2) >> 2] = HEAP32[$cv >> 2];
   HEAP32[$str_0 + ($2 + 2 << 2) >> 2] = HEAP32[$cv + 4 >> 2];
   $len_0 = $2 + 3 | 0;
   HEAP32[$1 >> 2] = $len_0;
   return;
  }
 case 193:
  {
   HEAP32[$str_0 + ($17 << 2) >> 2] = HEAP32[$cv >> 2];
   HEAP32[$str_0 + ($2 + 2 << 2) >> 2] = HEAP32[$cv + 4 >> 2];
   HEAP32[$str_0 + ($2 + 3 << 2) >> 2] = HEAP32[$cv + 8 >> 2];
   $len_0 = $5;
   HEAP32[$1 >> 2] = $len_0;
   return;
  }
 default:
  {
   $len_0 = $17;
   HEAP32[$1 >> 2] = $len_0;
   return;
  }
 }
}
function _next_nomacro() {
 var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $n_0_ph_i_i = 0, $p_0_i_i = 0, $n_0_i_i = 0, $tab_0_i_i = 0, $26 = 0, $p_1_i_i_ph = 0, $_pr = 0, $34 = 0, $35 = 0, $38 = 0, label = 0;
 L1 : while (1) {
  $1 = HEAP32[5350] | 0;
  L3 : do {
   if (($1 | 0) == 0) {
    _next_nomacro1();
    $38 = HEAP32[5310] | 0;
   } else {
    $3 = HEAP32[$1 >> 2] | 0;
    HEAP32[5310] = $3;
    if (($3 | 0) == 0) {
     label = 16;
     break L1;
    } else {
     $5 = $1;
    }
    L6 : while (1) {
     $6 = $5 + 4 | 0;
     $7 = HEAP32[$5 >> 2] | 0;
     HEAP32[5310] = $7;
     switch ($7 | 0) {
     case 179:
     case 200:
     case 180:
     case 183:
     case 185:
     case 186:
      {
       HEAP32[5302] = HEAP32[$6 >> 2];
       $p_1_i_i_ph = $5 + 8 | 0;
       break;
      }
     case 181:
     case 184:
     case 206:
      {
       HEAP32[5302] = $6;
       HEAP32[$5 + 8 >> 2] = $5 + 20;
       $p_1_i_i_ph = $5 + ((((HEAP32[HEAP32[5302] >> 2] | 0) + 19 | 0) >>> 2) + 1 << 2) | 0;
       break;
      }
     case 193:
      {
       $n_0_ph_i_i = 3;
       label = 9;
       break;
      }
     case 192:
     case 201:
     case 202:
      {
       $n_0_ph_i_i = 2;
       label = 9;
       break;
      }
     default:
      {
       break L6;
      }
     }
     if ((label | 0) == 9) {
      label = 0;
      $tab_0_i_i = 21208;
      $n_0_i_i = $n_0_ph_i_i;
      $p_0_i_i = $6;
      while (1) {
       HEAP32[$tab_0_i_i >> 2] = HEAP32[$p_0_i_i >> 2];
       $26 = $n_0_i_i - 1 | 0;
       if (($26 | 0) == 0) {
        break;
       } else {
        $tab_0_i_i = $tab_0_i_i + 4 | 0;
        $n_0_i_i = $26;
        $p_0_i_i = $p_0_i_i + 4 | 0;
       }
      }
      $p_1_i_i_ph = $5 + ($n_0_ph_i_i + 1 << 2) | 0;
     }
     $_pr = HEAP32[5310] | 0;
     HEAP32[5350] = $p_1_i_i_ph;
     if (($_pr | 0) != 186) {
      $38 = $_pr;
      break L3;
     }
     HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[5302];
     $34 = HEAP32[5350] | 0;
     $35 = HEAP32[$34 >> 2] | 0;
     HEAP32[5310] = $35;
     if (($35 | 0) == 0) {
      label = 16;
      break L1;
     } else {
      $5 = $34;
     }
    }
    HEAP32[5350] = $6;
    $38 = $7;
   }
  } while (0);
  switch ($38 | 0) {
  case 32:
  case 12:
  case 11:
  case 9:
  case 13:
   {
    break;
   }
  default:
   {
    label = 16;
    break L1;
   }
  }
 }
 if ((label | 0) == 16) {
  return;
 }
}
function _tcc_add_linker_symbols($s1) {
 $s1 = $s1 | 0;
 var $2 = 0, $9 = 0, $16 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $i_04 = 0, $31 = 0, $41 = 0, $42 = 0, $_in = 0, $p_03 = 0, $44 = 0, $54 = 0, $63 = 0, $64 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 $2 = HEAP32[5312] | 0;
 _add_elf_sym(HEAP32[5318] | 0, HEAP32[$2 >> 2] | 0, 0, 16, 0, HEAP32[$2 + 16 >> 2] | 0, 18720) | 0;
 $9 = HEAP32[13916] | 0;
 _add_elf_sym(HEAP32[5318] | 0, HEAP32[$9 >> 2] | 0, 0, 16, 0, HEAP32[$9 + 16 >> 2] | 0, 18384) | 0;
 $16 = HEAP32[13926] | 0;
 _add_elf_sym(HEAP32[5318] | 0, HEAP32[$16 >> 2] | 0, 0, 16, 0, HEAP32[$16 + 16 >> 2] | 0, 18240) | 0;
 _add_init_array_defines($s1, 18088);
 _add_init_array_defines($s1, 17952);
 _add_init_array_defines($s1, 17824);
 $22 = $s1 + 2832 | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 if (($23 | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 $25 = $s1 + 2828 | 0;
 $26 = sp | 0;
 $i_04 = 1;
 $28 = $23;
 while (1) {
  $31 = HEAP32[(HEAP32[$25 >> 2] | 0) + ($i_04 << 2) >> 2] | 0;
  L6 : do {
   if ((HEAP32[$31 + 20 >> 2] | 0) == 1) {
    if ((HEAP32[$31 + 24 >> 2] & 2 | 0) == 0) {
     $63 = $28;
     break;
    }
    $41 = $31 + 72 | 0;
    $42 = HEAP8[$41] | 0;
    if ($42 << 24 >> 24 != 0) {
     $p_03 = $41;
     $_in = $42;
     do {
      $44 = $_in << 24 >> 24;
      if (!(($44 - 97 | 0) >>> 0 < 26 >>> 0 | ($44 - 65 | 0) >>> 0 < 26 >>> 0 | $_in << 24 >> 24 == 95 | ($_in - 48 & 255) >>> 0 < 10 >>> 0)) {
       $63 = $28;
       break L6;
      }
      $p_03 = $p_03 + 1 | 0;
      $_in = HEAP8[$p_03] | 0;
     } while ($_in << 24 >> 24 != 0);
    }
    _snprintf($26 | 0, 1024, 17720, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $41, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    $54 = $31 + 16 | 0;
    _add_elf_sym(HEAP32[5318] | 0, 0, 0, 16, 0, HEAP32[$54 >> 2] | 0, $26) | 0;
    _snprintf($26 | 0, 1024, 17576, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $41, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    _add_elf_sym(HEAP32[5318] | 0, HEAP32[$31 >> 2] | 0, 0, 16, 0, HEAP32[$54 >> 2] | 0, $26) | 0;
    $63 = HEAP32[$22 >> 2] | 0;
   } else {
    $63 = $28;
   }
  } while (0);
  $64 = $i_04 + 1 | 0;
  if (($64 | 0) < ($63 | 0)) {
   $i_04 = $64;
   $28 = $63;
  } else {
   break;
  }
 }
 STACKTOP = sp;
 return;
}
function _ld_next($name, $name_size) {
 $name = $name | 0;
 $name_size = $name_size | 0;
 var $2 = 0, $11 = 0, $18 = 0, $q_0_ph = 0, $21 = 0, $22 = 0, $q_0 = 0, $24 = 0, $q_1 = 0, $c_0 = 0, label = 0;
 L1 : while (1) {
  $2 = HEAP32[13924] | 0;
  L3 : while (1) {
   switch ($2 | 0) {
   case 47:
    {
     break;
    }
   case -1:
    {
     $c_0 = -1;
     label = 16;
     break L1;
     break;
    }
   case 97:
   case 98:
   case 99:
   case 100:
   case 101:
   case 102:
   case 103:
   case 104:
   case 105:
   case 106:
   case 107:
   case 108:
   case 109:
   case 110:
   case 111:
   case 112:
   case 113:
   case 114:
   case 115:
   case 116:
   case 117:
   case 118:
   case 119:
   case 120:
   case 121:
   case 122:
   case 65:
   case 66:
   case 67:
   case 68:
   case 69:
   case 70:
   case 71:
   case 72:
   case 73:
   case 74:
   case 75:
   case 76:
   case 77:
   case 78:
   case 79:
   case 80:
   case 81:
   case 82:
   case 83:
   case 84:
   case 85:
   case 86:
   case 87:
   case 88:
   case 89:
   case 90:
   case 95:
   case 92:
   case 46:
   case 36:
   case 126:
    {
     $q_0_ph = $name;
     break L1;
     break;
    }
   case 32:
   case 9:
   case 12:
   case 11:
   case 13:
   case 10:
    {
     break L3;
     break;
    }
   default:
    {
     label = 15;
     break L1;
    }
   }
   _minp();
   if ((HEAP32[13924] | 0) != 42) {
    label = 7;
    break L1;
   }
   $11 = _parse_comment(HEAP32[HEAP32[13912] >> 2] | 0) | 0;
   HEAP32[HEAP32[13912] >> 2] = $11;
   $18 = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
   HEAP32[13924] = $18;
   $2 = $18;
  }
  _inp();
 }
 if ((label | 0) == 7) {
  HEAP8[$name] = 47;
  $q_0_ph = $name + 1 | 0;
 } else if ((label | 0) == 15) {
  _inp();
  $c_0 = $2;
  return $c_0 | 0;
 } else if ((label | 0) == 16) {
  return $c_0 | 0;
 }
 $21 = $name;
 $22 = $name_size - 1 | 0;
 $q_0 = $q_0_ph;
 while (1) {
  $24 = HEAP32[13924] | 0;
  if (!(($24 - 97 | 0) >>> 0 < 26 >>> 0 | ($24 - 65 | 0) >>> 0 < 26 >>> 0 | ($24 - 48 | 0) >>> 0 < 10 >>> 0)) {
   if ((_memchr(14216, $24 | 0, 12) | 0) == 0) {
    break;
   }
  }
  if (($q_0 - $21 | 0) < ($22 | 0)) {
   HEAP8[$q_0] = $24;
   $q_1 = $q_0 + 1 | 0;
  } else {
   $q_1 = $q_0;
  }
  _minp();
  $q_0 = $q_1;
 }
 HEAP8[$q_0] = 0;
 $c_0 = 256;
 return $c_0 | 0;
}
function _get_sym_ref($type, $sec, $offset, $size) {
 $type = $type | 0;
 $sec = $sec | 0;
 $offset = $offset | 0;
 $size = $size | 0;
 var $1 = 0, $5 = 0, $6 = 0, $9 = 0, $i_03_i_i_i_i = 0, $last_sym_02_i_i_i_i = 0, $sym_01_i_i_i_i = 0, $15 = 0, $scevgep4_i_i_i_i = 0, $sym_0_i_i_i = 0, $17 = 0, $22 = 0, $ps_0_i = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0;
 $1 = HEAP32[13930] | 0;
 HEAP32[13930] = $1 + 1;
 $5 = HEAP32[$type >> 2] | 256;
 $6 = HEAP32[5322] | 0;
 if (($6 | 0) == 0) {
  $9 = _tcc_malloc(8172) | 0;
  _dynarray_add(21280, 21360, $9);
  $sym_01_i_i_i_i = $9;
  $last_sym_02_i_i_i_i = HEAP32[5322] | 0;
  $i_03_i_i_i_i = 0;
  while (1) {
   HEAP32[$sym_01_i_i_i_i + 24 >> 2] = $last_sym_02_i_i_i_i;
   $15 = $i_03_i_i_i_i + 1 | 0;
   if ($15 >>> 0 < 227 >>> 0) {
    $last_sym_02_i_i_i_i = $sym_01_i_i_i_i;
    $sym_01_i_i_i_i = $sym_01_i_i_i_i + 36 | 0;
    $i_03_i_i_i_i = $15;
   } else {
    break;
   }
  }
  $scevgep4_i_i_i_i = $9 + 8136 | 0;
  HEAP32[5322] = $scevgep4_i_i_i_i;
  $sym_0_i_i_i = $scevgep4_i_i_i_i;
 } else {
  $sym_0_i_i_i = $6;
 }
 $17 = $sym_0_i_i_i + 24 | 0;
 HEAP32[5322] = HEAP32[$17 >> 2];
 HEAP32[$sym_0_i_i_i + 4 >> 2] = 0;
 HEAP32[$sym_0_i_i_i >> 2] = $1;
 HEAP32[$sym_0_i_i_i + 16 >> 2] = $5;
 $22 = $sym_0_i_i_i + 20 | 0;
 HEAP32[$22 >> 2] = 0;
 HEAP32[$sym_0_i_i_i + 12 >> 2] = 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$sym_0_i_i_i + 28 >> 2] = HEAP32[13628];
 HEAP32[13628] = $sym_0_i_i_i;
 if (($1 | 0) >= 268435456) {
  $39 = $type + 4 | 0;
  $40 = HEAP32[$39 >> 2] | 0;
  HEAP32[$22 >> 2] = $40;
  $41 = $sym_0_i_i_i + 8 | 0;
  HEAP32[$41 >> 2] = 560;
  _put_extern_sym($sym_0_i_i_i, $sec, $offset, $size);
  return $sym_0_i_i_i | 0;
 }
 $ps_0_i = (HEAP32[(HEAP32[5316] | 0) + ($1 - 256 << 2) >> 2] | 0) + 16 | 0;
 while (1) {
  $34 = HEAP32[$ps_0_i >> 2] | 0;
  if (($34 | 0) == 0) {
   break;
  } else {
   $ps_0_i = $34 + 32 | 0;
  }
 }
 HEAP32[$sym_0_i_i_i + 32 >> 2] = 0;
 HEAP32[$ps_0_i >> 2] = $sym_0_i_i_i;
 $39 = $type + 4 | 0;
 $40 = HEAP32[$39 >> 2] | 0;
 HEAP32[$22 >> 2] = $40;
 $41 = $sym_0_i_i_i + 8 | 0;
 HEAP32[$41 >> 2] = 560;
 _put_extern_sym($sym_0_i_i_i, $sec, $offset, $size);
 return $sym_0_i_i_i | 0;
}
function _gen_bounded_ptr_deref() {
 var $align = 0, $5 = 0, $6 = 0, $10 = 0, $func_0 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $_sum = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $align = sp | 0;
 $5 = (_is_float(HEAP32[HEAP32[5024] >> 2] | 0) | 0) == 0;
 $6 = HEAP32[5024] | 0;
 do {
  if ($5) {
   $10 = HEAPU16[$6 + 8 >> 1] | 0;
   if (($10 & 4096 | 0) != 0) {
    $func_0 = 389;
    break;
   }
   if (($10 & 8192 | 0) == 0) {
    label = 4;
   } else {
    label = 5;
   }
  } else {
   label = 4;
  }
 } while (0);
 L4 : do {
  if ((label | 0) == 4) {
   switch (_type_size($6 | 0, $align) | 0) {
   case 2:
    {
     label = 5;
     break L4;
     break;
    }
   case 12:
    {
     $func_0 = 393;
     break L4;
     break;
    }
   case 8:
    {
     $func_0 = 392;
     break L4;
     break;
    }
   case 1:
    {
     $func_0 = 389;
     break L4;
     break;
    }
   case 16:
    {
     $func_0 = 394;
     break L4;
     break;
    }
   case 4:
    {
     $func_0 = 391;
     break L4;
     break;
    }
   default:
    {
     _tcc_error(13168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     $func_0 = 0;
     break L4;
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  $func_0 = 390;
 }
 $27 = HEAP32[(HEAP32[(HEAP32[13918] | 0) + 60 >> 2] | 0) + 4 >> 2] | 0;
 $31 = HEAP32[(HEAP32[5024] | 0) + 16 >> 2] | 0;
 $32 = _external_global_sym($func_0, 55624, 0) | 0;
 $33 = $32 + 12 | 0;
 $34 = HEAP32[$33 >> 2] | 0;
 if (($34 | 0) != 0) {
  $38 = $34;
  $39 = $38 << 8;
  $_sum = $31 + 4 | 0;
  $40 = $27 + $_sum | 0;
  $41 = $40;
  $42 = HEAP32[$41 >> 2] | 0;
  $43 = $42 & 255;
  $44 = $43 | $39;
  HEAP32[$41 >> 2] = $44;
  STACKTOP = sp;
  return;
 }
 _put_extern_sym($32, 0, 0, 0);
 $38 = HEAP32[$33 >> 2] | 0;
 $39 = $38 << 8;
 $_sum = $31 + 4 | 0;
 $40 = $27 + $_sum | 0;
 $41 = $40;
 $42 = HEAP32[$41 >> 2] | 0;
 $43 = $42 & 255;
 $44 = $43 | $39;
 HEAP32[$41 >> 2] = $44;
 STACKTOP = sp;
 return;
}
function _sym_push2($ps, $v, $t, $c) {
 $ps = $ps | 0;
 $v = $v | 0;
 $t = $t | 0;
 $c = $c | 0;
 var $s_04 = 0, $3 = 0, $or_cond3 = 0, $10 = 0, $s_06 = 0, $16 = 0, $18 = 0, $s_0 = 0, $22 = 0, $25 = 0, $i_03_i_i = 0, $last_sym_02_i_i = 0, $sym_01_i_i = 0, $31 = 0, $scevgep4_i_i = 0, $sym_0_i = 0, $33 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 do {
  if (($ps | 0) == 21408) {
   $s_04 = HEAP32[5352] | 0;
   $3 = HEAP32[5332] | 0;
   if (($s_04 | 0) == 0 | ($s_04 | 0) == ($3 | 0)) {
    break;
   }
   $or_cond3 = ($v & 536870912 | 0) == 0 & ($v & -1073741825 | 0) < 268435456;
   $s_06 = $s_04;
   $10 = $3;
   while (1) {
    do {
     if ($or_cond3) {
      if ((HEAP32[$s_06 >> 2] | 0) != ($v | 0)) {
       $18 = $10;
       break;
      }
      $16 = _get_tok_str($v, 0) | 0;
      _tcc_error(18888, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $16, tempVarArgs) | 0);
      STACKTOP = tempVarArgs;
      $18 = HEAP32[5332] | 0;
     } else {
      $18 = $10;
     }
    } while (0);
    $s_0 = HEAP32[$s_06 + 28 >> 2] | 0;
    if (($s_0 | 0) == 0 | ($s_0 | 0) == ($18 | 0)) {
     break;
    } else {
     $s_06 = $s_0;
     $10 = $18;
    }
   }
  }
 } while (0);
 $22 = HEAP32[5322] | 0;
 if (($22 | 0) == 0) {
  $25 = _tcc_malloc(8172) | 0;
  _dynarray_add(21280, 21360, $25);
  $sym_01_i_i = $25;
  $last_sym_02_i_i = HEAP32[5322] | 0;
  $i_03_i_i = 0;
  while (1) {
   HEAP32[$sym_01_i_i + 24 >> 2] = $last_sym_02_i_i;
   $31 = $i_03_i_i + 1 | 0;
   if ($31 >>> 0 < 227 >>> 0) {
    $last_sym_02_i_i = $sym_01_i_i;
    $sym_01_i_i = $sym_01_i_i + 36 | 0;
    $i_03_i_i = $31;
   } else {
    break;
   }
  }
  $scevgep4_i_i = $25 + 8136 | 0;
  HEAP32[5322] = $scevgep4_i_i;
  $sym_0_i = $scevgep4_i_i;
 } else {
  $sym_0_i = $22;
 }
 $33 = $sym_0_i + 24 | 0;
 HEAP32[5322] = HEAP32[$33 >> 2];
 HEAP32[$sym_0_i + 4 >> 2] = 0;
 HEAP32[$sym_0_i >> 2] = $v;
 HEAP32[$sym_0_i + 16 >> 2] = $t;
 HEAP32[$sym_0_i + 20 >> 2] = 0;
 HEAP32[$sym_0_i + 12 >> 2] = $c;
 HEAP32[$33 >> 2] = 0;
 HEAP32[$sym_0_i + 28 >> 2] = HEAP32[$ps >> 2];
 HEAP32[$ps >> 2] = $sym_0_i;
 STACKTOP = sp;
 return $sym_0_i | 0;
}
function _tcc_define_symbol($s1, $sym, $value) {
 $s1 = $s1 | 0;
 $sym = $sym | 0;
 $value = $value | 0;
 var $value_ = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $11 = 0, $12 = 0, $14 = 0, $18 = 0, $_02_i_i = 0, $q_01_i_i = 0, $19 = 0, $23 = 0, $q_0_lcssa_i_i = 0, $44 = 0, $46 = 0, $54 = 0, $55 = 0, $56 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $value_ = ($value | 0) != 0 ? $value : 10728;
 $2 = _strlen($sym | 0) | 0;
 $3 = _strlen($value_ | 0) | 0;
 $4 = $3 + $2 | 0;
 $6 = ($4 | 0) != -1 ? $4 + 9253 | 0 : 17444;
 $7 = _malloc($6) | 0;
 if (($7 | 0) == 0 & ($6 | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 $11 = $7;
 $12 = $7 + 1056 | 0;
 HEAP32[$7 >> 2] = $12;
 $14 = $7 + ($4 + 1057) | 0;
 HEAP32[$7 + 4 >> 2] = $14;
 HEAP8[$14] = 92;
 $18 = $7 + 1055 | 0;
 $q_01_i_i = $7 + 32 | 0;
 $_02_i_i = 19920;
 while (1) {
  $19 = HEAP8[$_02_i_i] | 0;
  if ($19 << 24 >> 24 == 0) {
   $q_0_lcssa_i_i = $q_01_i_i;
   break;
  }
  $23 = $q_01_i_i + 1 | 0;
  HEAP8[$q_01_i_i] = $19;
  if ($23 >>> 0 < $18 >>> 0) {
   $q_01_i_i = $23;
   $_02_i_i = $_02_i_i + 1 | 0;
  } else {
   $q_0_lcssa_i_i = $23;
   break;
  }
 }
 HEAP8[$q_0_lcssa_i_i] = 0;
 HEAP32[$7 + 16 >> 2] = 1;
 HEAP32[$7 + 20 >> 2] = 0;
 HEAP32[$7 + 28 >> 2] = HEAP32[$s1 + 724 >> 2];
 HEAP32[$7 + 8 >> 2] = -1;
 HEAP32[$7 + 12 >> 2] = HEAP32[13912];
 HEAP32[13912] = $11;
 _memcpy($12 | 0, $sym | 0, $2) | 0;
 HEAP8[$11 + 1056 + $2 | 0] = 32;
 _memcpy($2 + 1 + ($11 + 1056) | 0, $value_ | 0, $3) | 0;
 HEAP32[13924] = HEAPU8[HEAP32[$7 >> 2] | 0] | 0;
 _next_nomacro();
 _parse_define();
 $44 = HEAP32[13912] | 0;
 $46 = HEAP32[$44 + 8 >> 2] | 0;
 if (($46 | 0) <= 0) {
  $54 = $44 + 12 | 0;
  $55 = HEAP32[$54 >> 2] | 0;
  HEAP32[13912] = $55;
  $56 = $44;
  _free($56);
  STACKTOP = sp;
  return;
 }
 _close($46 | 0) | 0;
 HEAP32[5036] = (HEAP32[5036] | 0) + (HEAP32[$44 + 16 >> 2] | 0);
 $54 = $44 + 12 | 0;
 $55 = HEAP32[$54 >> 2] | 0;
 HEAP32[13912] = $55;
 $56 = $44;
 _free($56);
 STACKTOP = sp;
 return;
}
function _tcc_open($s1, $filename) {
 $s1 = $s1 | 0;
 $filename = $filename | 0;
 var $4 = 0, $_0 = 0, $fd_0 = 0, $7 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $_02_i_i = 0, $q_01_i_i = 0, $35 = 0, $39 = 0, $q_0_lcssa_i_i = 0, $_02 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 if ((_strcmp($filename | 0, 17424) | 0) == 0) {
  $fd_0 = 0;
  $_0 = 15904;
 } else {
  $4 = _open($filename | 0, 0, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  $fd_0 = $4;
  $_0 = $filename;
 }
 $7 = HEAP32[$s1 >> 2] | 0;
 if (($7 | 0) == 2 & ($fd_0 | 0) > -1 | ($7 | 0) == 3) {
  $20 = (HEAP32[$s1 + 464 >> 2] | 0) - ($s1 + 336) >> 2;
  _printf(14768, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempVarArgs >> 2] = ($fd_0 | 0) < 0 ? 13880 : 12608, HEAP32[tempVarArgs + 8 >> 2] = $20, HEAP32[tempVarArgs + 16 >> 2] = 55728, HEAP32[tempVarArgs + 24 >> 2] = $_0, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
 }
 if (($fd_0 | 0) < 0) {
  $_02 = -1;
  STACKTOP = sp;
  return $_02 | 0;
 }
 $25 = _malloc(17444) | 0;
 if (($25 | 0) == 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 }
 $28 = $25;
 $29 = $25 + 1056 | 0;
 HEAP32[$25 >> 2] = $29;
 HEAP32[$25 + 4 >> 2] = $29;
 HEAP8[$29] = 92;
 $34 = $25 + 1055 | 0;
 $q_01_i_i = $25 + 32 | 0;
 $_02_i_i = $_0;
 while (1) {
  $35 = HEAP8[$_02_i_i] | 0;
  if ($35 << 24 >> 24 == 0) {
   $q_0_lcssa_i_i = $q_01_i_i;
   break;
  }
  $39 = $q_01_i_i + 1 | 0;
  HEAP8[$q_01_i_i] = $35;
  if ($39 >>> 0 < $34 >>> 0) {
   $q_01_i_i = $39;
   $_02_i_i = $_02_i_i + 1 | 0;
  } else {
   $q_0_lcssa_i_i = $39;
   break;
  }
 }
 HEAP8[$q_0_lcssa_i_i] = 0;
 HEAP32[$25 + 16 >> 2] = 1;
 HEAP32[$25 + 20 >> 2] = 0;
 HEAP32[$25 + 28 >> 2] = HEAP32[$s1 + 724 >> 2];
 HEAP32[$25 + 12 >> 2] = HEAP32[13912];
 HEAP32[13912] = $28;
 HEAP32[$25 + 8 >> 2] = $fd_0;
 $_02 = $fd_0;
 STACKTOP = sp;
 return $_02 | 0;
}
function _tcc_split_path($s, $p_ary, $p_nb_ary, $in) {
 $s = $s | 0;
 $p_ary = $p_ary | 0;
 $p_nb_ary = $p_nb_ary | 0;
 $in = $in | 0;
 var $str = 0, $1 = 0, $2 = 0, $_0 = 0, $p_0 = 0, $5 = 0, $6 = 0, $9 = 0, $12 = 0, $p_1 = 0, $22 = 0, $23 = 0, $24 = 0, $nb_alloc_0_i = 0, $31 = 0, $35 = 0, $pp_0_i = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $str = sp | 0;
 $1 = $s + 32 | 0;
 $2 = $str + 4 | 0;
 $_0 = $in;
 while (1) {
  _cstr_new($str);
  $p_0 = $_0;
  L3 : while (1) {
   $5 = HEAP8[$p_0] | 0;
   $6 = $5 << 24 >> 24;
   do {
    if (($5 << 24 >> 24 | 0) == 58 | ($5 << 24 >> 24 | 0) == 0) {
     break L3;
    } else if (($5 << 24 >> 24 | 0) == 123) {
     $9 = HEAP8[$p_0 + 1 | 0] | 0;
     if ($9 << 24 >> 24 == 0) {
      label = 8;
      break;
     }
     $12 = $p_0 + 2 | 0;
     if ((HEAP8[$12] | 0) != 125) {
      label = 8;
      break;
     }
     if ($9 << 24 >> 24 != 66) {
      $p_1 = $12;
      break;
     }
     _cstr_cat($str, HEAP32[$1 >> 2] | 0);
     $p_1 = $12;
    } else {
     label = 8;
    }
   } while (0);
   if ((label | 0) == 8) {
    label = 0;
    _cstr_ccat($str, $6);
    $p_1 = $p_0;
   }
   $p_0 = $p_1 + 1 | 0;
  }
  _cstr_ccat($str, 0);
  $22 = HEAP32[$2 >> 2] | 0;
  $23 = HEAP32[$p_nb_ary >> 2] | 0;
  $24 = HEAP32[$p_ary >> 2] | 0;
  if (($23 - 1 & $23 | 0) == 0) {
   $nb_alloc_0_i = ($23 | 0) == 0 ? 4 : $23 << 3;
   $31 = _realloc($24, $nb_alloc_0_i) | 0;
   if (($31 | 0) == 0 & ($nb_alloc_0_i | 0) != 0) {
    label = 12;
    break;
   }
   $35 = $31;
   HEAP32[$p_ary >> 2] = $35;
   $pp_0_i = $35;
  } else {
   $pp_0_i = $24;
  }
  HEAP32[$pp_0_i + ($23 << 2) >> 2] = $22;
  HEAP32[$p_nb_ary >> 2] = $23 + 1;
  if ((HEAP8[$p_0] | 0) == 0) {
   label = 15;
   break;
  } else {
   $_0 = $p_0 + 1 | 0;
  }
 }
 if ((label | 0) == 12) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 } else if ((label | 0) == 15) {
  STACKTOP = sp;
  return;
 }
}
function _external_global_sym($v, $type, $r) {
 $v = $v | 0;
 $type = $type | 0;
 $r = $r | 0;
 var $1 = 0, $9 = 0, $13 = 0, $14 = 0, $17 = 0, $i_03_i_i_i_i = 0, $last_sym_02_i_i_i_i = 0, $sym_01_i_i_i_i = 0, $23 = 0, $scevgep4_i_i_i_i = 0, $sym_0_i_i_i = 0, $25 = 0, $30 = 0, $ps_0_i = 0, $41 = 0, $s_0 = 0;
 $1 = $v - 256 | 0;
 do {
  if ($1 >>> 0 < ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
   $9 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($1 << 2) >> 2] | 0) + 16 >> 2] | 0;
   if (($9 | 0) == 0) {
    break;
   } else {
    $s_0 = $9;
   }
   return $s_0 | 0;
  }
 } while (0);
 $13 = HEAP32[$type >> 2] | 128;
 $14 = HEAP32[5322] | 0;
 if (($14 | 0) == 0) {
  $17 = _tcc_malloc(8172) | 0;
  _dynarray_add(21280, 21360, $17);
  $sym_01_i_i_i_i = $17;
  $last_sym_02_i_i_i_i = HEAP32[5322] | 0;
  $i_03_i_i_i_i = 0;
  while (1) {
   HEAP32[$sym_01_i_i_i_i + 24 >> 2] = $last_sym_02_i_i_i_i;
   $23 = $i_03_i_i_i_i + 1 | 0;
   if ($23 >>> 0 < 227 >>> 0) {
    $last_sym_02_i_i_i_i = $sym_01_i_i_i_i;
    $sym_01_i_i_i_i = $sym_01_i_i_i_i + 36 | 0;
    $i_03_i_i_i_i = $23;
   } else {
    break;
   }
  }
  $scevgep4_i_i_i_i = $17 + 8136 | 0;
  HEAP32[5322] = $scevgep4_i_i_i_i;
  $sym_0_i_i_i = $scevgep4_i_i_i_i;
 } else {
  $sym_0_i_i_i = $14;
 }
 $25 = $sym_0_i_i_i + 24 | 0;
 HEAP32[5322] = HEAP32[$25 >> 2];
 HEAP32[$sym_0_i_i_i + 4 >> 2] = 0;
 HEAP32[$sym_0_i_i_i >> 2] = $v;
 HEAP32[$sym_0_i_i_i + 16 >> 2] = $13;
 $30 = $sym_0_i_i_i + 20 | 0;
 HEAP32[$30 >> 2] = 0;
 HEAP32[$sym_0_i_i_i + 12 >> 2] = 0;
 HEAP32[$25 >> 2] = 0;
 HEAP32[$sym_0_i_i_i + 28 >> 2] = HEAP32[13628];
 HEAP32[13628] = $sym_0_i_i_i;
 if (($v | 0) < 268435456) {
  $ps_0_i = (HEAP32[(HEAP32[5316] | 0) + ($1 << 2) >> 2] | 0) + 16 | 0;
  while (1) {
   $41 = HEAP32[$ps_0_i >> 2] | 0;
   if (($41 | 0) == 0) {
    break;
   } else {
    $ps_0_i = $41 + 32 | 0;
   }
  }
  HEAP32[$sym_0_i_i_i + 32 >> 2] = 0;
  HEAP32[$ps_0_i >> 2] = $sym_0_i_i_i;
 }
 HEAP32[$30 >> 2] = HEAP32[$type + 4 >> 2];
 HEAP32[$sym_0_i_i_i + 8 >> 2] = $r | 560;
 $s_0 = $sym_0_i_i_i;
 return $s_0 | 0;
}
function _find_constraint($operands, $nb_operands, $name, $pp) {
 $operands = $operands | 0;
 $nb_operands = $nb_operands | 0;
 $name = $name | 0;
 $pp = $pp | 0;
 var $1 = 0, $5 = 0, $_05 = 0, $index_04 = 0, $9 = 0, $10 = 0, $11 = 0, $_0_lcssa = 0, $index_0_lcssa = 0, $16 = 0, $17 = 0, $23 = 0, $26 = 0, $index_17 = 0, $33 = 0, $index_2 = 0, $index_3 = 0, $_1 = 0;
 $1 = HEAP8[$name] | 0;
 do {
  if ($1 << 24 >> 24 > 47) {
   if ($1 << 24 >> 24 < 58) {
    if (($1 - 48 & 255) >>> 0 < 10 >>> 0) {
     $index_04 = 0;
     $_05 = $name;
     $5 = $1;
     while (1) {
      $9 = ($index_04 * 10 | 0) - 48 + ($5 << 24 >> 24) | 0;
      $10 = $_05 + 1 | 0;
      $11 = HEAP8[$10] | 0;
      if (($11 - 48 & 255) >>> 0 < 10 >>> 0) {
       $index_04 = $9;
       $_05 = $10;
       $5 = $11;
      } else {
       $index_0_lcssa = $9;
       $_0_lcssa = $10;
       break;
      }
     }
    } else {
     $index_0_lcssa = 0;
     $_0_lcssa = $name;
    }
    $_1 = $_0_lcssa;
    $index_3 = $index_0_lcssa >>> 0 < $nb_operands >>> 0 ? $index_0_lcssa : -1;
    break;
   }
   if ($1 << 24 >> 24 != 91) {
    $_1 = $name;
    $index_3 = -1;
    break;
   }
   $16 = $name + 1 | 0;
   $17 = _strchr($16 | 0, 93) | 0;
   if (($17 | 0) == 0) {
    $_1 = $16;
    $index_3 = -1;
    break;
   }
   $23 = _tok_alloc($16, $17 - $16 | 0) | 0;
   L12 : do {
    if (($nb_operands | 0) > 0) {
     $26 = HEAP32[$23 + 20 >> 2] | 0;
     $index_17 = 0;
     while (1) {
      $33 = $index_17 + 1 | 0;
      if ((HEAP32[$operands + ($index_17 * 56 | 0) >> 2] | 0) == ($26 | 0)) {
       $index_2 = $index_17;
       break L12;
      }
      if (($33 | 0) < ($nb_operands | 0)) {
       $index_17 = $33;
      } else {
       $index_2 = -1;
       break;
      }
     }
    } else {
     $index_2 = -1;
    }
   } while (0);
   $_1 = $17 + 1 | 0;
   $index_3 = $index_2;
  } else {
   $_1 = $name;
   $index_3 = -1;
  }
 } while (0);
 if (($pp | 0) == 0) {
  return $index_3 | 0;
 }
 HEAP32[$pp >> 2] = $_1;
 return $index_3 | 0;
}
function _parse_asm_operands($operands, $nb_operands_ptr, $is_output) {
 $operands = $operands | 0;
 $nb_operands_ptr = $nb_operands_ptr | 0;
 $is_output = $is_output | 0;
 var $5 = 0, $nb_operands_0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $19 = 0, $21 = 0, $28 = 0, $29 = 0, $39 = 0, $43 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 if ((HEAP32[5310] | 0) == 58) {
  STACKTOP = sp;
  return;
 }
 $5 = ($is_output | 0) == 0;
 $nb_operands_0 = HEAP32[$nb_operands_ptr >> 2] | 0;
 while (1) {
  if (($nb_operands_0 | 0) > 29) {
   _tcc_error(12328, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  $10 = $nb_operands_0 + 1 | 0;
  $11 = $operands + ($nb_operands_0 * 56 | 0) | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = HEAP32[5310] | 0;
  if (($12 | 0) == 91) {
   _next();
   $15 = HEAP32[5310] | 0;
   if (($15 | 0) < 256) {
    _expect(11600);
    $19 = HEAP32[5310] | 0;
   } else {
    $19 = $15;
   }
   HEAP32[$11 >> 2] = $19;
   _next();
   _skip(93);
   $21 = HEAP32[5310] | 0;
  } else {
   $21 = $12;
  }
  if (($21 | 0) != 181) {
   _expect(16808);
  }
  $28 = _tcc_malloc(HEAP32[HEAP32[5302] >> 2] | 0) | 0;
  $29 = $operands + ($nb_operands_0 * 56 | 0) + 4 | 0;
  HEAP32[$29 >> 2] = $28;
  _strcpy($28 | 0, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0) | 0;
  _next();
  _skip(40);
  _gexpr();
  do {
   if ($5) {
    $39 = HEAPU16[(HEAP32[5024] | 0) + 8 >> 1] | 0;
    if (($39 & 256 | 0) == 0) {
     break;
    }
    $43 = $39 & 63;
    if (!(($43 | 0) == 49 | $43 >>> 0 < 48 >>> 0)) {
     break;
    }
    if ((_strchr(HEAP32[$29 >> 2] | 0, 109) | 0) != 0) {
     break;
    }
    _gv(1) | 0;
   } else {
    _test_lvalue();
   }
  } while (0);
  HEAP32[$operands + ($nb_operands_0 * 56 | 0) + 24 >> 2] = HEAP32[5024];
  _skip(41);
  if ((HEAP32[5310] | 0) != 44) {
   break;
  }
  _next();
  $nb_operands_0 = $10;
 }
 HEAP32[$nb_operands_ptr >> 2] = $10;
 STACKTOP = sp;
 return;
}
function _put_stabs_r($str, $type, $other, $desc, $value, $sec, $sym_index) {
 $str = $str | 0;
 $type = $type | 0;
 $other = $other | 0;
 $desc = $desc | 0;
 $value = $value | 0;
 $sec = $sec | 0;
 $sym_index = $sym_index | 0;
 var $2 = 0, $5 = 0, $7 = 0, $9 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $38 = 0, $sr_0_i = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $$etemp$1$0 = 0, $$etemp$1$1 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $2 = _section_ptr_add(HEAP32[5328] | 0, 12) | 0;
 if (($str | 0) == 0) {
  HEAP32[$2 >> 2] = 0;
 } else {
  $5 = HEAP32[5326] | 0;
  $7 = (_strlen($str | 0) | 0) + 1 | 0;
  $9 = HEAP32[$5 >> 2] | 0;
  _memcpy(_section_ptr_add($5, $7) | 0, $str | 0, $7) | 0;
  HEAP32[$2 >> 2] = $9;
 }
 HEAP8[$2 + 4 | 0] = $type;
 HEAP8[$2 + 5 | 0] = $other;
 HEAP16[$2 + 6 >> 1] = $desc;
 HEAP32[$2 + 8 >> 2] = $value;
 $23 = HEAP32[5318] | 0;
 $24 = HEAP32[5328] | 0;
 $27 = (HEAP32[$24 >> 2] | 0) - 4 | 0;
 $28 = sp | 0;
 $29 = $24 + 60 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (($30 | 0) != 0) {
  $sr_0_i = $30;
  $44 = _section_ptr_add($sr_0_i, 8) | 0;
  $45 = $44;
  HEAP32[$45 >> 2] = $27;
  $46 = $sym_index << 8;
  $47 = $46 | 1;
  $48 = $44 + 4 | 0;
  $49 = $48;
  HEAP32[$49 >> 2] = $47;
  $$etemp$1$0 = 256;
  $$etemp$1$1 = 0;
  STACKTOP = sp;
  return;
 }
 _snprintf($28 | 0, 256, 16960, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $24 + 72, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $38 = _new_section(HEAP32[5314] | 0, $28, 9, HEAP32[$23 + 24 >> 2] | 0) | 0;
 HEAP32[$38 + 36 >> 2] = 8;
 HEAP32[$38 + 56 >> 2] = $23;
 HEAP32[$38 + 28 >> 2] = HEAP32[$24 + 16 >> 2];
 HEAP32[$29 >> 2] = $38;
 $sr_0_i = $38;
 $44 = _section_ptr_add($sr_0_i, 8) | 0;
 $45 = $44;
 HEAP32[$45 >> 2] = $27;
 $46 = $sym_index << 8;
 $47 = $46 | 1;
 $48 = $44 + 4 | 0;
 $49 = $48;
 HEAP32[$49 >> 2] = $47;
 $$etemp$1$0 = 256;
 $$etemp$1$1 = 0;
 STACKTOP = sp;
 return;
}
function _gen_inline_functions() {
 var $inline_generated_0 = 0, $i_0 = 0, $1 = 0, $2 = 0, $3 = 0, $9 = 0, $10 = 0, $11 = 0, $19 = 0, $20 = 0, $28 = 0, $inline_generated_1 = 0, $37 = 0, $38 = 0, $i_12 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $_lcssa1 = 0, $_lcssa = 0, $50 = 0;
 $i_0 = 0;
 $inline_generated_0 = 0;
 while (1) {
  $1 = HEAP32[5314] | 0;
  $2 = $1 + 2824 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (($i_0 | 0) >= ($3 | 0)) {
   if (($inline_generated_0 | 0) == 0) {
    break;
   } else {
    $i_0 = 0;
    $inline_generated_0 = 0;
    continue;
   }
  }
  $9 = HEAP32[(HEAP32[$1 + 2820 >> 2] | 0) + ($i_0 << 2) >> 2] | 0;
  $10 = $9 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  do {
   if (($11 | 0) == 0) {
    $inline_generated_1 = $inline_generated_0;
   } else {
    if ((HEAP32[$11 + 12 >> 2] | 0) == 0) {
     $inline_generated_1 = $inline_generated_0;
     break;
    }
    $19 = HEAP32[$9 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    $20 = HEAP32[13912] | 0;
    if (($20 | 0) != 0) {
     _pstrcpy($20 + 32 | 0, 1024, $9 + 8 | 0) | 0;
    }
    HEAP32[$11 + 8 >> 2] = 560;
    $28 = $11 + 16 | 0;
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] & -1025;
    HEAP32[5350] = $19;
    _next();
    HEAP32[13918] = HEAP32[5312];
    _gen_function($11);
    HEAP32[5350] = 0;
    $inline_generated_1 = 1;
   }
  } while (0);
  $i_0 = $i_0 + 1 | 0;
  $inline_generated_0 = $inline_generated_1;
 }
 $37 = $1 + 2820 | 0;
 if (($3 | 0) > 0) {
  $i_12 = 0;
  $38 = $37;
 } else {
  $_lcssa = $2;
  $_lcssa1 = $37;
  $50 = $_lcssa1;
  _dynarray_reset($50, $_lcssa);
  return;
 }
 while (1) {
  _tok_str_free(HEAP32[HEAP32[(HEAP32[$38 >> 2] | 0) + ($i_12 << 2) >> 2] >> 2] | 0);
  $44 = $i_12 + 1 | 0;
  $45 = HEAP32[5314] | 0;
  $46 = $45 + 2824 | 0;
  $49 = $45 + 2820 | 0;
  if (($44 | 0) < (HEAP32[$46 >> 2] | 0)) {
   $i_12 = $44;
   $38 = $49;
  } else {
   $_lcssa = $46;
   $_lcssa1 = $49;
   break;
  }
 }
 $50 = $_lcssa1;
 _dynarray_reset($50, $_lcssa);
 return;
}
function _vswap() {
 var $tmp = 0, $1 = 0, $6 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40 | 0;
 $tmp = sp | 0;
 $1 = HEAP32[5024] | 0;
 do {
  if ($1 >>> 0 < 56272 >>> 0) {
   $14 = $1;
  } else {
   $6 = HEAPU16[$1 + 8 >> 1] | 0;
   if (!(($6 & 63 | 0) == 51 | ($6 & 62 | 0) == 52)) {
    $14 = $1;
    break;
   }
   _gv(1) | 0;
   $14 = HEAP32[5024] | 0;
  }
 } while (0);
 $15 = $tmp;
 $16 = $14;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$15 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
 HEAP32[$15 + 8 >> 2] = HEAP32[$16 + 8 >> 2];
 HEAP32[$15 + 12 >> 2] = HEAP32[$16 + 12 >> 2];
 HEAP32[$15 + 16 >> 2] = HEAP32[$16 + 16 >> 2];
 HEAP32[$15 + 20 >> 2] = HEAP32[$16 + 20 >> 2];
 HEAP32[$15 + 24 >> 2] = HEAP32[$16 + 24 >> 2];
 HEAP32[$15 + 28 >> 2] = HEAP32[$16 + 28 >> 2];
 HEAP32[$15 + 32 >> 2] = HEAP32[$16 + 32 >> 2];
 HEAP32[$15 + 36 >> 2] = HEAP32[$16 + 36 >> 2];
 $18 = $14 - 40 | 0;
 HEAP32[$16 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$16 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
 HEAP32[$16 + 8 >> 2] = HEAP32[$18 + 8 >> 2];
 HEAP32[$16 + 12 >> 2] = HEAP32[$18 + 12 >> 2];
 HEAP32[$16 + 16 >> 2] = HEAP32[$18 + 16 >> 2];
 HEAP32[$16 + 20 >> 2] = HEAP32[$18 + 20 >> 2];
 HEAP32[$16 + 24 >> 2] = HEAP32[$18 + 24 >> 2];
 HEAP32[$16 + 28 >> 2] = HEAP32[$18 + 28 >> 2];
 HEAP32[$16 + 32 >> 2] = HEAP32[$18 + 32 >> 2];
 HEAP32[$16 + 36 >> 2] = HEAP32[$18 + 36 >> 2];
 $21 = (HEAP32[5024] | 0) - 40 | 0;
 HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$21 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
 HEAP32[$21 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
 HEAP32[$21 + 12 >> 2] = HEAP32[$15 + 12 >> 2];
 HEAP32[$21 + 16 >> 2] = HEAP32[$15 + 16 >> 2];
 HEAP32[$21 + 20 >> 2] = HEAP32[$15 + 20 >> 2];
 HEAP32[$21 + 24 >> 2] = HEAP32[$15 + 24 >> 2];
 HEAP32[$21 + 28 >> 2] = HEAP32[$15 + 28 >> 2];
 HEAP32[$21 + 32 >> 2] = HEAP32[$15 + 32 >> 2];
 HEAP32[$21 + 36 >> 2] = HEAP32[$15 + 36 >> 2];
 STACKTOP = sp;
 return;
}
function _asm_expr_prod($s1, $pe) {
 $s1 = $s1 | 0;
 $pe = $pe | 0;
 var $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $18 = 0, $22 = 0, $26 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $e2 = sp | 0;
 _asm_expr_unary($s1, $pe);
 $1 = $pe + 4 | 0;
 $2 = $e2 + 4 | 0;
 $3 = $e2 | 0;
 $4 = $pe | 0;
 L1 : while (1) {
  $5 = HEAP32[5310] | 0;
  switch ($5 | 0) {
  case 47:
  case 42:
  case 37:
  case 2:
  case 1:
   {
    break;
   }
  default:
   {
    break L1;
   }
  }
  _next();
  _asm_expr_unary($s1, $e2);
  if (!((HEAP32[$1 >> 2] | 0) == 0 & (HEAP32[$2 >> 2] | 0) == 0)) {
   _tcc_error(16368, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  do {
   if (($5 | 0) == 42) {
    HEAP32[$4 >> 2] = Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
    continue L1;
   } else if (($5 | 0) == 47) {
    $18 = HEAP32[$3 >> 2] | 0;
    if (($18 | 0) == 0) {
     label = 8;
    } else {
     $22 = $18;
    }
   } else if (($5 | 0) == 37) {
    $26 = HEAP32[$3 >> 2] | 0;
    if (($26 | 0) == 0) {
     label = 8;
     break;
    }
    HEAP32[$4 >> 2] = ((HEAP32[$4 >> 2] | 0) >>> 0) % ($26 >>> 0) | 0;
    continue L1;
   } else if (($5 | 0) == 1) {
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] << HEAP32[$3 >> 2];
    continue L1;
   } else {
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) >>> ((HEAP32[$3 >> 2] | 0) >>> 0);
    continue L1;
   }
  } while (0);
  if ((label | 0) == 8) {
   label = 0;
   _tcc_error(16256, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $22 = 0;
  }
  HEAP32[$4 >> 2] = ((HEAP32[$4 >> 2] | 0) >>> 0) / ($22 >>> 0) | 0;
 }
 STACKTOP = sp;
 return;
}
function _preprocess_new() {
 var $i_010 = 0, $9 = 0, $p_07 = 0, $r_0 = 0, $15 = 0, $22 = 0, $h_04_i = 0, $i_03_i = 0, $h_0_lcssa_i = 0, $32 = 0, $33 = 0, $35 = 0, $44 = 0, $45 = 0, $pts_0_lcssa_i = 0, label = 0;
 $i_010 = -1;
 do {
  do {
   if (($i_010 - 97 | 0) >>> 0 < 26 >>> 0 | ($i_010 - 65 | 0) >>> 0 < 26 >>> 0 | ($i_010 | 0) == 95) {
    $9 = 1;
   } else {
    if (($i_010 | 0) <= 47) {
     $9 = 0;
     break;
    }
    $9 = ($i_010 | 0) < 58 | 0;
   }
  } while (0);
  $i_010 = $i_010 + 1 | 0;
  HEAP8[21464 + $i_010 | 0] = $9;
 } while (($i_010 | 0) < 256);
 HEAP32[5316] = 0;
 _memset(21744, 0, 32768) | 0;
 HEAP32[5306] = 256;
 $p_07 = 472;
 while (1) {
  $r_0 = $p_07;
  while (1) {
   $15 = $r_0 + 1 | 0;
   if ((HEAP8[$r_0] | 0) == 0) {
    break;
   } else {
    $r_0 = $15;
   }
  }
  $22 = $15 - $p_07 - 1 | 0;
  if (($22 | 0) > 0) {
   $i_03_i = 0;
   $h_04_i = 1;
   do {
    $h_04_i = (HEAPU8[$p_07 + $i_03_i | 0] | 0) + ($h_04_i * 263 | 0) | 0;
    $i_03_i = $i_03_i + 1 | 0;
   } while (($i_03_i | 0) < ($22 | 0));
   $h_0_lcssa_i = $h_04_i & 8191;
  } else {
   $h_0_lcssa_i = 1;
  }
  $32 = 21744 + ($h_0_lcssa_i << 2) | 0;
  $33 = HEAP32[$32 >> 2] | 0;
  L18 : do {
   if (($33 | 0) == 0) {
    $pts_0_lcssa_i = $32;
    label = 16;
   } else {
    $35 = $33;
    while (1) {
     if ((HEAP32[$35 + 24 >> 2] | 0) == ($22 | 0)) {
      if ((_memcmp($35 + 28 | 0, $p_07 | 0, $22 | 0) | 0) == 0) {
       break L18;
      }
     }
     $44 = $35 | 0;
     $45 = HEAP32[$44 >> 2] | 0;
     if (($45 | 0) == 0) {
      $pts_0_lcssa_i = $44;
      label = 16;
      break;
     } else {
      $35 = $45;
     }
    }
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   _tok_alloc_new($pts_0_lcssa_i, $p_07, $22) | 0;
  }
  if ((HEAP8[$15] | 0) == 0) {
   break;
  } else {
   $p_07 = $15;
  }
 }
 return;
}
function _fill_got($s1) {
 $s1 = $s1 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $i_02 = 0, $12 = 0, $23 = 0, $25 = 0, $27 = 0, $rel_01 = 0, $32 = 0, $33 = 0, $35 = 0, $41 = 0, $44 = 0, $49 = 0, $52 = 0, $65 = 0, $66 = 0;
 $1 = $s1 + 2832 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $s1 + 2828 | 0;
 $5 = $s1 + 2856 | 0;
 $6 = $s1 + 2852 | 0;
 $7 = $s1 + 2844 | 0;
 $i_02 = 1;
 $9 = $2;
 while (1) {
  $12 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($i_02 << 2) >> 2] | 0;
  do {
   if ((HEAP32[$12 + 20 >> 2] | 0) == 9) {
    if ((HEAP32[$12 + 56 >> 2] | 0) != (HEAP32[5318] | 0)) {
     $65 = $9;
     break;
    }
    $23 = HEAP32[$12 + 4 >> 2] | 0;
    $25 = HEAP32[$12 >> 2] | 0;
    $27 = $23 + $25 | 0;
    if (($25 | 0) <= 0) {
     $65 = $9;
     break;
    }
    $rel_01 = $23;
    do {
     $32 = HEAP32[$rel_01 + 4 >> 2] | 0;
     $33 = $32 & 255;
     do {
      if (($33 | 0) == 3 | ($33 | 0) == 9 | ($33 | 0) == 4) {
       $35 = $32 >>> 8;
       if (($35 | 0) >= (HEAP32[$5 >> 2] | 0)) {
        break;
       }
       $41 = HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0;
       $44 = HEAP32[(HEAP32[$6 >> 2] | 0) + ($35 << 2) >> 2] | 0;
       _section_reserve(HEAP32[$7 >> 2] | 0, $44 + 4 | 0);
       $49 = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0;
       $52 = HEAP32[$41 + ($35 << 4) + 4 >> 2] | 0;
       HEAP8[$49 + $44 | 0] = $52;
       HEAP8[$49 + ($44 + 1) | 0] = $52 >>> 8;
       HEAP8[$49 + ($44 + 2) | 0] = $52 >>> 16;
       HEAP8[$49 + ($44 + 3) | 0] = $52 >>> 24;
      }
     } while (0);
     $rel_01 = $rel_01 + 8 | 0;
    } while ($rel_01 >>> 0 < $27 >>> 0);
    $65 = HEAP32[$1 >> 2] | 0;
   } else {
    $65 = $9;
   }
  } while (0);
  $66 = $i_02 + 1 | 0;
  if (($66 | 0) < ($65 | 0)) {
   $i_02 = $66;
   $9 = $65;
  } else {
   break;
  }
 }
 return;
}
function _asm_expr_sum($s1, $pe) {
 $s1 = $s1 | 0;
 $pe = $pe | 0;
 var $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $22 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $38 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $e2 = sp | 0;
 _asm_expr_logic($s1, $pe);
 $1 = $pe + 4 | 0;
 $2 = $e2 | 0;
 $3 = $pe | 0;
 $4 = $e2 + 4 | 0;
 L1 : while (1) {
  $5 = HEAP32[5310] | 0;
  if (!(($5 | 0) == 45 | ($5 | 0) == 43)) {
   break;
  }
  _next();
  _asm_expr_logic($s1, $e2);
  do {
   if (($5 | 0) == 43) {
    if ((HEAP32[$1 >> 2] | 0) == 0) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + (HEAP32[$2 >> 2] | 0);
     $22 = HEAP32[$4 >> 2] | 0;
     if (($22 | 0) == 0) {
      continue L1;
     }
     HEAP32[$1 >> 2] = $22;
     continue L1;
    } else {
     if ((HEAP32[$4 >> 2] | 0) != 0) {
      break;
     }
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + (HEAP32[$2 >> 2] | 0);
     continue L1;
    }
   } else {
    $28 = (HEAP32[$3 >> 2] | 0) - (HEAP32[$2 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $28;
    $29 = HEAP32[$1 >> 2] | 0;
    $31 = HEAP32[$4 >> 2] | 0;
    $32 = ($31 | 0) == 0;
    if (($29 | 0) == 0) {
     if ($32) {
      continue L1;
     } else {
      break;
     }
    }
    if ($32) {
     continue L1;
    }
    if (($29 | 0) != ($31 | 0)) {
     $38 = HEAP32[$29 + 8 >> 2] | 0;
     if (($38 | 0) != (HEAP32[$31 + 8 >> 2] | 0) | ($38 | 0) == 0) {
      break;
     }
     HEAP32[$3 >> 2] = (HEAP32[$29 + 24 >> 2] | 0) - (HEAP32[$31 + 24 >> 2] | 0) + $28;
    }
    HEAP32[$1 >> 2] = 0;
    continue L1;
   }
  } while (0);
  _tcc_error(16368, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 STACKTOP = sp;
 return;
}
function _relocate_syms($s1, $do_resolve) {
 $s1 = $s1 | 0;
 $do_resolve = $do_resolve | 0;
 var $1 = 0, $3 = 0, $5 = 0, $7 = 0, $11 = 0, $12 = 0, $13 = 0, $sym_01 = 0, $16 = 0, $17 = 0, $25 = 0, $27 = 0, $30 = 0, $57 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[5318] | 0;
 $3 = HEAP32[$1 + 4 >> 2] | 0;
 $5 = HEAP32[$1 >> 2] | 0;
 $7 = $3 + $5 | 0;
 if (($5 | 0) <= 16) {
  STACKTOP = sp;
  return;
 }
 $11 = ($do_resolve | 0) == 0;
 $12 = $s1 + 2868 | 0;
 $13 = $s1 + 2828 | 0;
 $sym_01 = $3 + 16 | 0;
 do {
  $16 = HEAP16[$sym_01 + 14 >> 1] | 0;
  $17 = $16 & 65535;
  L6 : do {
   if ($16 << 16 >> 16 == 0) {
    $25 = (HEAP32[(HEAP32[5324] | 0) + 4 >> 2] | 0) + (HEAP32[$sym_01 >> 2] | 0) | 0;
    do {
     if ($11) {
      $27 = HEAP32[$12 >> 2] | 0;
      if (($27 | 0) == 0) {
       break;
      }
      $30 = _find_elf_sym($27, $25) | 0;
      if (($30 | 0) == 0) {
       break;
      }
      HEAP32[$sym_01 + 4 >> 2] = HEAP32[(HEAP32[$27 + 4 >> 2] | 0) + ($30 << 4) + 4 >> 2];
      break L6;
     }
    } while (0);
    if ((_strcmp($25 | 0, 15552) | 0) == 0) {
     break;
    }
    if ((HEAP8[$sym_01 + 12 | 0] & -16) << 24 >> 24 == 32) {
     HEAP32[$sym_01 + 4 >> 2] = 0;
     break;
    } else {
     _tcc_error_noabort(14464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $25, tempVarArgs) | 0);
     STACKTOP = tempVarArgs;
     break;
    }
   } else {
    if (($16 & 65535) >>> 0 >= 65280 >>> 0) {
     break;
    }
    $57 = $sym_01 + 4 | 0;
    HEAP32[$57 >> 2] = (HEAP32[$57 >> 2] | 0) + (HEAP32[(HEAP32[(HEAP32[$13 >> 2] | 0) + ($17 << 2) >> 2] | 0) + 44 >> 2] | 0);
   }
  } while (0);
  $sym_01 = $sym_01 + 16 | 0;
 } while ($sym_01 >>> 0 < $7 >>> 0);
 STACKTOP = sp;
 return;
}
function _find_elf_sym($s, $name) {
 $s = $s | 0;
 $name = $name | 0;
 var $2 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $_02_i = 0, $h_01_i = 0, $13 = 0, $15 = 0, $16 = 0, $h_1_i = 0, $23 = 0, $24 = 0, $h_0_lcssa_i = 0, $sym_index_01 = 0, $32 = 0, $36 = 0, $37 = 0, $sym_index_02 = 0, $sym_index_0 = 0, $_0 = 0, label = 0;
 $2 = HEAP32[$s + 64 >> 2] | 0;
 if (($2 | 0) == 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 $7 = HEAP32[$2 + 4 >> 2] | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = HEAP8[$name] | 0;
 if ($9 << 24 >> 24 == 0) {
  $h_0_lcssa_i = 0;
 } else {
  $h_01_i = 0;
  $_02_i = $name;
  $11 = $9;
  while (1) {
   $13 = $_02_i + 1 | 0;
   $15 = ($h_01_i << 4) + ($11 & 255) | 0;
   $16 = $15 & -268435456;
   if (($16 | 0) == 0) {
    $h_1_i = $15;
   } else {
    $h_1_i = $16 >>> 24 ^ $15;
   }
   $23 = $h_1_i & (($15 | 268435455) ^ -268435456);
   $24 = HEAP8[$13] | 0;
   if ($24 << 24 >> 24 == 0) {
    $h_0_lcssa_i = $23;
    break;
   } else {
    $h_01_i = $23;
    $_02_i = $13;
    $11 = $24;
   }
  }
 }
 $sym_index_01 = HEAP32[$7 + ((($h_0_lcssa_i >>> 0) % ($8 >>> 0) | 0) + 2 << 2) >> 2] | 0;
 if (($sym_index_01 | 0) == 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 $32 = HEAP32[$s + 4 >> 2] | 0;
 $36 = HEAP32[(HEAP32[$s + 56 >> 2] | 0) + 4 >> 2] | 0;
 $37 = $8 + 2 | 0;
 $sym_index_02 = $sym_index_01;
 while (1) {
  if ((_strcmp($name | 0, $36 + (HEAP32[$32 + ($sym_index_02 << 4) >> 2] | 0) | 0) | 0) == 0) {
   $_0 = $sym_index_02;
   label = 10;
   break;
  }
  $sym_index_0 = HEAP32[$7 + ($37 + $sym_index_02 << 2) >> 2] | 0;
  if (($sym_index_0 | 0) == 0) {
   $_0 = 0;
   label = 10;
   break;
  } else {
   $sym_index_02 = $sym_index_0;
  }
 }
 if ((label | 0) == 10) {
  return $_0 | 0;
 }
 return 0;
}
function _build_got_entries($s1) {
 $s1 = $s1 | 0;
 var $1 = 0, $4 = 0, $5 = 0, $i_03 = 0, $9 = 0, $20 = 0, $22 = 0, $24 = 0, $rel_02 = 0, $28 = 0, $30 = 0, $34 = 0, $48 = 0, $52 = 0;
 $1 = $s1 + 2832 | 0;
 if ((HEAP32[$1 >> 2] | 0) <= 1) {
  return;
 }
 $4 = $s1 + 2828 | 0;
 $5 = $s1 + 2844 | 0;
 $i_03 = 1;
 do {
  $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + ($i_03 << 2) >> 2] | 0;
  do {
   if ((HEAP32[$9 + 20 >> 2] | 0) == 9) {
    if ((HEAP32[$9 + 56 >> 2] | 0) != (HEAP32[5318] | 0)) {
     break;
    }
    $20 = HEAP32[$9 + 4 >> 2] | 0;
    $22 = HEAP32[$9 >> 2] | 0;
    $24 = $20 + $22 | 0;
    if (($22 | 0) <= 0) {
     break;
    }
    $rel_02 = $20;
    do {
     $28 = $rel_02 + 4 | 0;
     $30 = HEAP32[$28 >> 2] & 255;
     do {
      if (($30 | 0) == 3 | ($30 | 0) == 9 | ($30 | 0) == 10 | ($30 | 0) == 4) {
       if ((HEAP32[$5 >> 2] | 0) == 0) {
        $34 = _new_section($s1, 12288, 1, 3) | 0;
        HEAP32[$5 >> 2] = $34;
        HEAP32[$34 + 36 >> 2] = 4;
        _add_elf_sym(HEAP32[5318] | 0, 0, 4, 17, 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] | 0, 12216) | 0;
        _memset(_section_ptr_add(HEAP32[$5 >> 2] | 0, 12) | 0, 0, 12) | 0;
       }
       if (($30 - 3 | 0) >>> 0 >= 2 >>> 0) {
        break;
       }
       $48 = (HEAP32[$28 >> 2] | 0) >>> 8;
       $52 = HEAP32[(HEAP32[5318] | 0) + 4 >> 2] | 0;
       _put_got_entry($s1, ($30 | 0) == 3 ? 6 : 7, HEAP32[$52 + ($48 << 4) + 8 >> 2] | 0, HEAPU8[$52 + ($48 << 4) + 12 | 0] | 0, $48);
      }
     } while (0);
     $rel_02 = $rel_02 + 8 | 0;
    } while ($rel_02 >>> 0 < $24 >>> 0);
   }
  } while (0);
  $i_03 = $i_03 + 1 | 0;
 } while (($i_03 | 0) < (HEAP32[$1 >> 2] | 0));
 return;
}
function _saveSetjmp(env, label, table) {
 env = env | 0;
 label = label | 0;
 table = table | 0;
 var i = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[env >> 2] = setjmpId;
 while ((i | 0) < 40) {
  if ((HEAP32[table + (i << 2) >> 2] | 0) == 0) {
   HEAP32[table + (i << 2) >> 2] = setjmpId;
   HEAP32[table + ((i << 2) + 4) >> 2] = label;
   HEAP32[table + ((i << 2) + 8) >> 2] = 0;
   return 0;
  }
  i = i + 2 | 0;
 }
 _putchar(116);
 _putchar(111);
 _putchar(111);
 _putchar(32);
 _putchar(109);
 _putchar(97);
 _putchar(110);
 _putchar(121);
 _putchar(32);
 _putchar(115);
 _putchar(101);
 _putchar(116);
 _putchar(106);
 _putchar(109);
 _putchar(112);
 _putchar(115);
 _putchar(32);
 _putchar(105);
 _putchar(110);
 _putchar(32);
 _putchar(97);
 _putchar(32);
 _putchar(102);
 _putchar(117);
 _putchar(110);
 _putchar(99);
 _putchar(116);
 _putchar(105);
 _putchar(111);
 _putchar(110);
 _putchar(32);
 _putchar(99);
 _putchar(97);
 _putchar(108);
 _putchar(108);
 _putchar(44);
 _putchar(32);
 _putchar(98);
 _putchar(117);
 _putchar(105);
 _putchar(108);
 _putchar(100);
 _putchar(32);
 _putchar(119);
 _putchar(105);
 _putchar(116);
 _putchar(104);
 _putchar(32);
 _putchar(97);
 _putchar(32);
 _putchar(104);
 _putchar(105);
 _putchar(103);
 _putchar(104);
 _putchar(101);
 _putchar(114);
 _putchar(32);
 _putchar(118);
 _putchar(97);
 _putchar(108);
 _putchar(117);
 _putchar(101);
 _putchar(32);
 _putchar(102);
 _putchar(111);
 _putchar(114);
 _putchar(32);
 _putchar(77);
 _putchar(65);
 _putchar(88);
 _putchar(95);
 _putchar(83);
 _putchar(69);
 _putchar(84);
 _putchar(74);
 _putchar(77);
 _putchar(80);
 _putchar(83);
 _putchar(10);
 abort(0);
 return 0;
}
function _get_reg($rc) {
 $rc = $rc | 0;
 var $1 = 0, $2 = 0, $r_010 = 0, $p_05 = 0, $21 = 0, $22 = 0, $p_11 = 0, $27 = 0, $38 = 0, $r_1 = 0, $47 = 0, $_0 = 0, label = 0;
 $1 = HEAP32[5024] | 0;
 $2 = $1 >>> 0 < 56272 >>> 0;
 $r_010 = 0;
 L1 : while (1) {
  L3 : do {
   if ((HEAP32[7336 + ($r_010 << 2) >> 2] & $rc | 0) != 0) {
    if ($2) {
     $_0 = $r_010;
     label = 15;
     break L1;
    } else {
     $p_05 = 56272;
    }
    while (1) {
     if ((HEAP16[$p_05 + 8 >> 1] & 63 | 0) == ($r_010 | 0)) {
      break L3;
     }
     $21 = $p_05 + 40 | 0;
     if ((HEAP16[$p_05 + 10 >> 1] & 63 | 0) == ($r_010 | 0)) {
      break L3;
     }
     if ($21 >>> 0 > $1 >>> 0) {
      $_0 = $r_010;
      label = 15;
      break L1;
     } else {
      $p_05 = $21;
     }
    }
   }
  } while (0);
  $22 = $r_010 + 1 | 0;
  if (($22 | 0) < 4) {
   $r_010 = $22;
  } else {
   label = 2;
   break;
  }
 }
 if ((label | 0) == 2) {
  if ($2) {
   $_0 = -1;
   return $_0 | 0;
  } else {
   $p_11 = 56272;
  }
  while (1) {
   $27 = HEAP16[$p_11 + 10 >> 1] & 63;
   if ($27 >>> 0 < 48 >>> 0) {
    if ((HEAP32[7336 + ($27 << 2) >> 2] & $rc | 0) != 0) {
     $r_1 = $27;
     break;
    }
   }
   $38 = HEAP16[$p_11 + 8 >> 1] & 63;
   if ($38 >>> 0 < 48 >>> 0) {
    if ((HEAP32[7336 + ($38 << 2) >> 2] & $rc | 0) != 0) {
     $r_1 = $38;
     break;
    }
   }
   $47 = $p_11 + 40 | 0;
   if ($47 >>> 0 > $1 >>> 0) {
    $_0 = -1;
    label = 15;
    break;
   } else {
    $p_11 = $47;
   }
  }
  if ((label | 0) == 15) {
   return $_0 | 0;
  }
  _save_reg($r_1);
  $_0 = $r_1;
  return $_0 | 0;
 } else if ((label | 0) == 15) {
  return $_0 | 0;
 }
 return 0;
}
function _gen_le32($c) {
 $c = $c | 0;
 var $1 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 $1 = HEAP32[5434] | 0;
 $2 = $1 + 1 | 0;
 $3 = HEAP32[13918] | 0;
 if ($2 >>> 0 > (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($3, $2);
  $9 = HEAP32[5434] | 0;
  $8 = HEAP32[13918] | 0;
 } else {
  $9 = $1;
  $8 = $3;
 }
 HEAP8[(HEAP32[$8 + 4 >> 2] | 0) + $9 | 0] = $c;
 HEAP32[5434] = $2;
 $15 = $1 + 2 | 0;
 $16 = HEAP32[13918] | 0;
 if ($15 >>> 0 > (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($16, $15);
  $22 = HEAP32[5434] | 0;
  $21 = HEAP32[13918] | 0;
 } else {
  $22 = $2;
  $21 = $16;
 }
 HEAP8[(HEAP32[$21 + 4 >> 2] | 0) + $22 | 0] = $c >>> 8;
 HEAP32[5434] = $15;
 $28 = $1 + 3 | 0;
 $29 = HEAP32[13918] | 0;
 if ($28 >>> 0 > (HEAP32[$29 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($29, $28);
  $35 = HEAP32[5434] | 0;
  $34 = HEAP32[13918] | 0;
 } else {
  $35 = $15;
  $34 = $29;
 }
 HEAP8[(HEAP32[$34 + 4 >> 2] | 0) + $35 | 0] = $c >>> 16;
 HEAP32[5434] = $28;
 $40 = $c >>> 24;
 $41 = $1 + 4 | 0;
 $42 = HEAP32[13918] | 0;
 if ($41 >>> 0 <= (HEAP32[$42 + 8 >> 2] | 0) >>> 0) {
  $48 = $28;
  $47 = $42;
  $49 = $40 & 255;
  $50 = $47 + 4 | 0;
  $51 = HEAP32[$50 >> 2] | 0;
  $52 = $51 + $48 | 0;
  HEAP8[$52] = $49;
  HEAP32[5434] = $41;
  return;
 }
 _section_realloc($42, $41);
 $48 = HEAP32[5434] | 0;
 $47 = HEAP32[13918] | 0;
 $49 = $40 & 255;
 $50 = $47 + 4 | 0;
 $51 = HEAP32[$50 >> 2] | 0;
 $52 = $51 + $48 | 0;
 HEAP8[$52] = $49;
 HEAP32[5434] = $41;
 return;
}
function _gjmp_addr($a) {
 $a = $a | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $43 = 0, $44 = 0, $49 = 0, $50 = 0, $storemerge = 0;
 $1 = HEAP32[5434] | 0;
 $2 = $a - $1 | 0;
 $3 = $2 - 2 | 0;
 if (($3 | 0) == ($3 << 24 >> 24 | 0)) {
  $7 = $1 + 1 | 0;
  $8 = HEAP32[13918] | 0;
  if ($7 >>> 0 > (HEAP32[$8 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($8, $7);
   $14 = HEAP32[5434] | 0;
   $13 = HEAP32[13918] | 0;
  } else {
   $14 = $1;
   $13 = $8;
  }
  HEAP8[(HEAP32[$13 + 4 >> 2] | 0) + $14 | 0] = -21;
  HEAP32[5434] = $7;
  $18 = $1 + 2 | 0;
  $19 = HEAP32[13918] | 0;
  if ($18 >>> 0 > (HEAP32[$19 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($19, $18);
   $25 = HEAP32[5434] | 0;
   $24 = HEAP32[13918] | 0;
  } else {
   $25 = $7;
   $24 = $19;
  }
  HEAP8[(HEAP32[$24 + 4 >> 2] | 0) + $25 | 0] = $3;
  $storemerge = $18;
  HEAP32[5434] = $storemerge;
  return;
 } else {
  $31 = $1 + 1 | 0;
  $32 = HEAP32[13918] | 0;
  if ($31 >>> 0 > (HEAP32[$32 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($32, $31);
   $38 = HEAP32[5434] | 0;
   $37 = HEAP32[13918] | 0;
  } else {
   $38 = $1;
   $37 = $32;
  }
  HEAP8[(HEAP32[$37 + 4 >> 2] | 0) + $38 | 0] = -23;
  HEAP32[5434] = $31;
  $43 = $1 + 5 | 0;
  $44 = HEAP32[13918] | 0;
  if ($43 >>> 0 > (HEAP32[$44 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($44, $43);
   $50 = HEAP32[13918] | 0;
   $49 = HEAP32[5434] | 0;
  } else {
   $50 = $44;
   $49 = $1 + 1 | 0;
  }
  HEAP32[(HEAP32[$50 + 4 >> 2] | 0) + $49 >> 2] = $2 - 5;
  $storemerge = $43;
  HEAP32[5434] = $storemerge;
  return;
 }
}
function _tcc_load_ldscript($s1) {
 $s1 = $s1 | 0;
 var $7 = 0, $8 = 0, $9 = 0, $17 = 0, $29 = 0, $_0_ph = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088 | 0;
 HEAP32[13924] = HEAPU8[HEAP32[HEAP32[13912] >> 2] | 0] | 0;
 HEAP32[13924] = _handle_eob() | 0;
 $7 = sp | 0;
 $8 = sp + 64 | 0;
 L1 : while (1) {
  $9 = _ld_next($7, 64) | 0;
  if (($9 | 0) == (-1 | 0)) {
   $_0_ph = 0;
   label = 12;
   break;
  } else if (($9 | 0) != 256) {
   $_0 = -1;
   label = 13;
   break;
  }
  do {
   if ((_strcmp($7 | 0, 15200) | 0) != 0) {
    if ((_strcmp($7 | 0, 15128) | 0) == 0) {
     break;
    }
    if ((_strcmp($7 | 0, 15080) | 0) != 0) {
     if ((_strcmp($7 | 0, 15024) | 0) != 0) {
      $_0_ph = -1;
      label = 12;
      break L1;
     }
    }
    if ((_ld_next($7, 64) | 0) != 40) {
     _expect(14928);
    }
    while (1) {
     $29 = _ld_next($8, 1024) | 0;
     if (($29 | 0) == (-1 | 0)) {
      label = 11;
      break L1;
     } else if (($29 | 0) == 41) {
      continue L1;
     }
    }
   }
  } while (0);
  $17 = _ld_add_file_list($s1, $7, 0) | 0;
  if (($17 | 0) != 0) {
   $_0_ph = $17;
   label = 12;
   break;
  }
 }
 if ((label | 0) == 11) {
  _tcc_error_noabort(14784, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $_0 = -1;
  STACKTOP = sp;
  return $_0 | 0;
 } else if ((label | 0) == 12) {
  $_0 = $_0_ph;
  STACKTOP = sp;
  return $_0 | 0;
 } else if ((label | 0) == 13) {
  STACKTOP = sp;
  return $_0 | 0;
 }
 return 0;
}
function _tcc_add_library($s, $libraryname) {
 $s = $s | 0;
 $libraryname = $libraryname | 0;
 var $libs = 0, $1 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $pp_03 = 0, $15 = 0, $16 = 0, $i_01_i = 0, $26 = 0, $27 = 0, $_0 = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $libs = sp + 1024 | 0;
 $1 = $libs;
 HEAP32[$1 >> 2] = HEAP32[1396];
 HEAP32[$1 + 4 >> 2] = HEAP32[1397];
 HEAP32[$1 + 8 >> 2] = HEAP32[1398];
 $7 = (HEAP32[$s + 16 >> 2] | 0) != 0 ? $libs + 4 | 0 : $libs | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($8 | 0) == 0) {
  $_0 = -1;
  STACKTOP = sp;
  return $_0 | 0;
 }
 $10 = $s + 136 | 0;
 $11 = $s + 140 | 0;
 $12 = sp | 0;
 $pp_03 = $7;
 $14 = $8;
 L4 : while (1) {
  $15 = HEAP32[$10 >> 2] | 0;
  $16 = HEAP32[$11 >> 2] | 0;
  if (($16 | 0) > 0) {
   $i_01_i = 0;
   do {
    _snprintf($12 | 0, 1024, $14 | 0, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$15 + ($i_01_i << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = $libraryname, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    $i_01_i = $i_01_i + 1 | 0;
    if ((_tcc_add_file_internal($s, $12, 0) | 0) == 0) {
     $_0 = 0;
     label = 7;
     break L4;
    }
   } while (($i_01_i | 0) < ($16 | 0));
  }
  $26 = $pp_03 + 4 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  if (($27 | 0) == 0) {
   $_0 = -1;
   label = 7;
   break;
  } else {
   $pp_03 = $26;
   $14 = $27;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $_0 | 0;
 }
 return 0;
}
function _tcc_add_bcheck($s1) {
 $s1 = $s1 | 0;
 var $17 = 0, $18 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $38 = 0, $sr_0_i = 0, $44 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((HEAP32[$s1 + 84 >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(_section_ptr_add(HEAP32[13928] | 0, 4) | 0) >> 2] = 0;
 _add_elf_sym(HEAP32[5318] | 0, 0, 0, 16, 0, HEAP32[(HEAP32[13928] | 0) + 16 >> 2] | 0, 11632) | 0;
 if ((HEAP32[$s1 + 44 >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $17 = _find_section($s1, 11016) | 0;
 $18 = _section_ptr_add($17, 5) | 0;
 HEAP8[$18] = -24;
 HEAP8[$18 + 1 | 0] = -4;
 HEAP8[$18 + 2 | 0] = -1;
 HEAP8[$18 + 3 | 0] = -1;
 HEAP8[$18 + 4 | 0] = -1;
 $23 = HEAP32[5318] | 0;
 $24 = _find_elf_sym($23, 10640) | 0;
 $27 = (HEAP32[$17 >> 2] | 0) - 4 | 0;
 $28 = sp | 0;
 $29 = $17 + 60 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (($30 | 0) == 0) {
  _snprintf($28 | 0, 256, 16960, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $17 + 72, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  $38 = _new_section(HEAP32[5314] | 0, $28, 9, HEAP32[$23 + 24 >> 2] | 0) | 0;
  HEAP32[$38 + 36 >> 2] = 8;
  HEAP32[$38 + 56 >> 2] = $23;
  HEAP32[$38 + 28 >> 2] = HEAP32[$17 + 16 >> 2];
  HEAP32[$29 >> 2] = $38;
  $sr_0_i = $38;
 } else {
  $sr_0_i = $30;
 }
 $44 = _section_ptr_add($sr_0_i, 8) | 0;
 HEAP32[$44 >> 2] = $27;
 HEAP32[$44 + 4 >> 2] = $24 << 8 | 2;
 STACKTOP = sp;
 return;
}
function _expr_eq() {
 var $1 = 0, $11 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 _expr_cond();
 $1 = HEAP32[5310] | 0;
 do {
  if (!(($1 | 0) == 61 | ($1 - 165 | 0) >>> 0 < 11 >>> 0)) {
   if (($1 | 0) == 252 | ($1 | 0) == 222 | ($1 | 0) == 130 | ($1 | 0) == 129) {
    break;
   }
   STACKTOP = sp;
   return;
  }
 } while (0);
 if ((HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 256) == 0) {
  _expect(16680);
  $11 = HEAP32[5310] | 0;
 } else {
  $11 = $1;
 }
 _next();
 if (($11 | 0) == 61) {
  _expr_eq();
 } else {
  $15 = HEAP32[5024] | 0;
  if ($15 >>> 0 < 66472 >>> 0) {
   $18 = $15;
  } else {
   _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $18 = HEAP32[5024] | 0;
  }
  $19 = $18 + 40 | 0;
  HEAP32[5024] = $19;
  $20 = $19;
  $21 = $15;
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$20 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
  HEAP32[$20 + 8 >> 2] = HEAP32[$21 + 8 >> 2];
  HEAP32[$20 + 12 >> 2] = HEAP32[$21 + 12 >> 2];
  HEAP32[$20 + 16 >> 2] = HEAP32[$21 + 16 >> 2];
  HEAP32[$20 + 20 >> 2] = HEAP32[$21 + 20 >> 2];
  HEAP32[$20 + 24 >> 2] = HEAP32[$21 + 24 >> 2];
  HEAP32[$20 + 28 >> 2] = HEAP32[$21 + 28 >> 2];
  HEAP32[$20 + 32 >> 2] = HEAP32[$21 + 32 >> 2];
  HEAP32[$20 + 36 >> 2] = HEAP32[$21 + 36 >> 2];
  _expr_eq();
  _gen_op($11 & 127);
 }
 _vstore();
 STACKTOP = sp;
 return;
}
function _vpush_global_sym($type, $v) {
 $type = $type | 0;
 $v = $v | 0;
 var $cval_sroa_2 = 0, $1 = 0, $2 = 0, $6 = 0, $11 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22$1 = 0, $27 = 0, $31 = 0, $32 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval_sroa_2 = sp | 0;
 $1 = _external_global_sym($v, $type, 0) | 0;
 $2 = HEAP32[5024] | 0;
 if ($2 >>> 0 < 66472 >>> 0) {
  $6 = $2;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $6 = HEAP32[5024] | 0;
 }
 do {
  if ($6 >>> 0 < 56272 >>> 0) {
   $18 = $6;
  } else {
   $11 = HEAPU16[$6 + 8 >> 1] | 0;
   if (!(($11 & 63 | 0) == 51 | ($11 & 62 | 0) == 52)) {
    $18 = $6;
    break;
   }
   _gv(1) | 0;
   $18 = HEAP32[5024] | 0;
  }
 } while (0);
 $19 = $18 + 40 | 0;
 HEAP32[5024] = $19;
 $20 = $type;
 $21 = $19;
 $22$1 = HEAP32[$20 + 4 >> 2] | 0;
 HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$21 + 4 >> 2] = $22$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 560;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $27 = HEAP32[5024] | 0;
 HEAP32[$27 + 16 >> 2] = 0;
 $31 = $27 + 20 | 0;
 $32 = $cval_sroa_2 | 0;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$31 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
 HEAP32[$31 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
 HEAP32[(HEAP32[5024] | 0) + 32 >> 2] = $1;
 STACKTOP = sp;
 return;
}
function _label_pop($ptop, $slast) {
 $ptop = $ptop | 0;
 $slast = $slast | 0;
 var $1 = 0, $s_01 = 0, $4 = 0, $6 = 0, $10 = 0, $14 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$ptop >> 2] | 0;
 if (($1 | 0) == ($slast | 0)) {
  HEAP32[$ptop >> 2] = $slast;
  STACKTOP = sp;
  return;
 } else {
  $s_01 = $1;
 }
 while (1) {
  $4 = HEAP32[$s_01 + 28 >> 2] | 0;
  $6 = HEAP32[$s_01 + 8 >> 2] | 0;
  do {
   if (($6 | 0) == 2) {
    $10 = _get_tok_str(HEAP32[$s_01 >> 2] | 0, 0) | 0;
    _tcc_warning(19944, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $10, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   } else if (($6 | 0) == 1) {
    $14 = _get_tok_str(HEAP32[$s_01 >> 2] | 0, 0) | 0;
    _tcc_error(19440, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $14, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   } else {
    if ((HEAP32[$s_01 + 12 >> 2] | 0) == 0) {
     break;
    }
    _put_extern_sym($s_01, HEAP32[13918] | 0, HEAP32[$s_01 + 24 >> 2] | 0, 1);
   }
  } while (0);
  HEAP32[(HEAP32[(HEAP32[5316] | 0) + ((HEAP32[$s_01 >> 2] | 0) - 256 << 2) >> 2] | 0) + 8 >> 2] = HEAP32[$s_01 + 32 >> 2];
  _sym_free($s_01);
  if (($4 | 0) == ($slast | 0)) {
   break;
  } else {
   $s_01 = $4;
  }
 }
 HEAP32[$ptop >> 2] = $slast;
 STACKTOP = sp;
 return;
}
function _vset($type, $r, $v) {
 $type = $type | 0;
 $r = $r | 0;
 $v = $v | 0;
 var $cval_sroa_2 = 0, $1 = 0, $5 = 0, $10 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21$1 = 0, $27 = 0, $31 = 0, $32 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval_sroa_2 = sp | 0;
 $1 = HEAP32[5024] | 0;
 if ($1 >>> 0 < 66472 >>> 0) {
  $5 = $1;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $5 = HEAP32[5024] | 0;
 }
 do {
  if ($5 >>> 0 < 56272 >>> 0) {
   $17 = $5;
  } else {
   $10 = HEAPU16[$5 + 8 >> 1] | 0;
   if (!(($10 & 63 | 0) == 51 | ($10 & 62 | 0) == 52)) {
    $17 = $5;
    break;
   }
   _gv(1) | 0;
   $17 = HEAP32[5024] | 0;
  }
 } while (0);
 $18 = $17 + 40 | 0;
 HEAP32[5024] = $18;
 $19 = $type;
 $20 = $18;
 $21$1 = HEAP32[$19 + 4 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$20 + 4 >> 2] = $21$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = $r;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $27 = HEAP32[5024] | 0;
 HEAP32[$27 + 16 >> 2] = $v;
 $31 = $27 + 20 | 0;
 $32 = $cval_sroa_2 | 0;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$31 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
 HEAP32[$31 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
 STACKTOP = sp;
 return;
}
function _vpushi($v) {
 $v = $v | 0;
 var $cval_sroa_2 = 0, $1 = 0, $5 = 0, $10 = 0, $17 = 0, $18 = 0, $19 = 0, $$etemp$0 = 0, $20$1 = 0, $25 = 0, $29 = 0, $30 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cval_sroa_2 = sp | 0;
 $1 = HEAP32[5024] | 0;
 if ($1 >>> 0 < 66472 >>> 0) {
  $5 = $1;
 } else {
  _tcc_error(17168, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $5 = HEAP32[5024] | 0;
 }
 do {
  if ($5 >>> 0 < 56272 >>> 0) {
   $17 = $5;
  } else {
   $10 = HEAPU16[$5 + 8 >> 1] | 0;
   if (!(($10 & 63 | 0) == 51 | ($10 & 62 | 0) == 52)) {
    $17 = $5;
    break;
   }
   _gv(1) | 0;
   $17 = HEAP32[5024] | 0;
  }
 } while (0);
 $18 = $17 + 40 | 0;
 HEAP32[5024] = $18;
 $19 = $18;
 $$etemp$0 = 21728;
 $20$1 = HEAP32[$$etemp$0 + 4 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$$etemp$0 >> 2];
 HEAP32[$19 + 4 >> 2] = $20$1;
 HEAP16[(HEAP32[5024] | 0) + 8 >> 1] = 48;
 HEAP16[(HEAP32[5024] | 0) + 10 >> 1] = 48;
 $25 = HEAP32[5024] | 0;
 HEAP32[$25 + 16 >> 2] = $v;
 $29 = $25 + 20 | 0;
 $30 = $cval_sroa_2 | 0;
 HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$29 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
 HEAP32[$29 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
 STACKTOP = sp;
 return;
}
function _tcc_open_bf($s1, $filename, $initlen) {
 $s1 = $s1 | 0;
 $filename = $filename | 0;
 $initlen = $initlen | 0;
 var $2 = 0, $3 = 0, $7 = 0, $10 = 0, $14 = 0, $_02_i = 0, $q_01_i = 0, $15 = 0, $19 = 0, $q_0_lcssa_i = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($initlen | 0) != 0 ? $initlen + 9252 | 0 : 17444;
 $3 = _malloc($2) | 0;
 if (($3 | 0) == 0 & ($2 | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 }
 $7 = $3;
 HEAP32[$3 >> 2] = $3 + 1056;
 $10 = $3 + ($initlen + 1056) | 0;
 HEAP32[$3 + 4 >> 2] = $10;
 HEAP8[$10] = 92;
 $14 = $3 + 1055 | 0;
 $q_01_i = $3 + 32 | 0;
 $_02_i = $filename;
 while (1) {
  $15 = HEAP8[$_02_i] | 0;
  if ($15 << 24 >> 24 == 0) {
   $q_0_lcssa_i = $q_01_i;
   break;
  }
  $19 = $q_01_i + 1 | 0;
  HEAP8[$q_01_i] = $15;
  if ($19 >>> 0 < $14 >>> 0) {
   $q_01_i = $19;
   $_02_i = $_02_i + 1 | 0;
  } else {
   $q_0_lcssa_i = $19;
   break;
  }
 }
 HEAP8[$q_0_lcssa_i] = 0;
 HEAP32[$3 + 16 >> 2] = 1;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = HEAP32[$s1 + 724 >> 2];
 HEAP32[$3 + 8 >> 2] = -1;
 HEAP32[$3 + 12 >> 2] = HEAP32[13912];
 HEAP32[13912] = $7;
 STACKTOP = sp;
 return;
}
function ___shgetc($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $9 = 0, $14 = 0, $_pre = 0, $18 = 0, $25 = 0, $_pre3 = 0, $36 = 0, $41 = 0, $_0 = 0, label = 0;
 $1 = $f + 104 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) == 0) {
  label = 3;
 } else {
  if ((HEAP32[$f + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3;
  }
 }
 do {
  if ((label | 0) == 3) {
   $9 = ___uflow($f) | 0;
   if (($9 | 0) < 0) {
    break;
   }
   $14 = HEAP32[$1 >> 2] | 0;
   $_pre = HEAP32[$f + 8 >> 2] | 0;
   do {
    if (($14 | 0) == 0) {
     label = 8;
    } else {
     $18 = HEAP32[$f + 4 >> 2] | 0;
     $25 = $14 - (HEAP32[$f + 108 >> 2] | 0) - 1 | 0;
     if (($_pre - $18 | 0) <= ($25 | 0)) {
      label = 8;
      break;
     }
     HEAP32[$f + 100 >> 2] = $18 + $25;
    }
   } while (0);
   if ((label | 0) == 8) {
    HEAP32[$f + 100 >> 2] = $_pre;
   }
   $_pre3 = HEAP32[$f + 4 >> 2] | 0;
   if (($_pre | 0) != 0) {
    $36 = $f + 108 | 0;
    HEAP32[$36 >> 2] = $_pre + 1 - $_pre3 + (HEAP32[$36 >> 2] | 0);
   }
   $41 = $_pre3 - 1 | 0;
   if ((HEAPU8[$41] | 0 | 0) == ($9 | 0)) {
    $_0 = $9;
    return $_0 | 0;
   }
   HEAP8[$41] = $9;
   $_0 = $9;
   return $_0 | 0;
  }
 } while (0);
 HEAP32[$f + 100 >> 2] = 0;
 $_0 = -1;
 return $_0 | 0;
}
function _indir() {
 var $1 = 0, $4 = 0, $7 = 0, $17 = 0, $21 = 0, $22 = 0, $23$1 = 0, $24 = 0, $26 = 0, $28 = 0, $r_0_i = 0, $_0_i = 0, $36 = 0, $47 = 0, label = 0;
 $1 = HEAP32[5024] | 0;
 $4 = HEAP32[$1 >> 2] & 15;
 if (($4 | 0) == 4) {
  $7 = $1;
 } else if (($4 | 0) == 6) {
  return;
 } else {
  _expect(10704);
  $7 = HEAP32[5024] | 0;
 }
 if ((HEAP16[$7 + 8 >> 1] & 256) == 0 | (HEAP32[5338] | 0) != 0) {
  $17 = $7;
 } else {
  _gv(1) | 0;
  $17 = HEAP32[5024] | 0;
 }
 $21 = (HEAP32[$17 + 4 >> 2] | 0) + 16 | 0;
 $22 = $17;
 $23$1 = HEAP32[$21 + 4 >> 2] | 0;
 HEAP32[$22 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$22 + 4 >> 2] = $23$1;
 $24 = HEAP32[5024] | 0;
 $26 = HEAP32[$24 >> 2] | 0;
 $28 = $26 & 15;
 if (($26 & 131104 | 0) != 0 | ($28 | 0) == 6) {
  return;
 }
 if (($28 | 0) == 11 | ($28 | 0) == 1) {
  $r_0_i = 4352;
  label = 8;
 } else if (($28 | 0) == 2) {
  $r_0_i = 8448;
  label = 8;
 } else {
  $_0_i = 256;
 }
 if ((label | 0) == 8) {
  $_0_i = $r_0_i | $26 << 10 & 16384;
 }
 $36 = $24 + 8 | 0;
 HEAP16[$36 >> 1] = HEAPU16[$36 >> 1] | 0 | $_0_i;
 if ((HEAP32[(HEAP32[5314] | 0) + 84 >> 2] | 0) == 0) {
  return;
 }
 $47 = (HEAP32[5024] | 0) + 8 | 0;
 HEAP16[$47 >> 1] = HEAP16[$47 >> 1] | 2048;
 return;
}
function _new_symtab($s1, $symtab_name, $sh_type, $sh_flags, $strtab_name, $hash_name, $hash_sh_flags) {
 $s1 = $s1 | 0;
 $symtab_name = $symtab_name | 0;
 $sh_type = $sh_type | 0;
 $sh_flags = $sh_flags | 0;
 $strtab_name = $strtab_name | 0;
 $hash_name = $hash_name | 0;
 $hash_sh_flags = $hash_sh_flags | 0;
 var $1 = 0, $3 = 0, $7 = 0, $8 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $22 = 0, $27 = 0;
 $1 = _new_section($s1, $symtab_name, $sh_type, $sh_flags) | 0;
 HEAP32[$1 + 36 >> 2] = 16;
 $3 = _new_section($s1, $strtab_name, 3, $sh_flags) | 0;
 HEAP8[_section_ptr_add($3, 1) | 0] = 0;
 HEAP32[$1 + 56 >> 2] = $3;
 $7 = $1 + 64 | 0;
 _memset(_section_ptr_add($1, 16) | 0, 0, 16) | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($8 | 0) != 0) {
  $12 = _section_ptr_add($8, 4) | 0;
  $14 = HEAP32[$8 + 4 >> 2] | 0;
  HEAP32[$12 >> 2] = 0;
  $16 = $14 + 4 | 0;
  HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
 }
 $19 = _new_section($s1, $hash_name, 5, $hash_sh_flags) | 0;
 HEAP32[$19 + 36 >> 2] = 4;
 HEAP32[$7 >> 2] = $19;
 HEAP32[$19 + 56 >> 2] = $1;
 $22 = _section_ptr_add($19, 16) | 0;
 HEAP32[$22 >> 2] = 1;
 HEAP32[$22 + 4 >> 2] = 1;
 $27 = $22 + 8 | 0;
 HEAP32[$27 >> 2] = 0;
 HEAP32[$27 + 4 >> 2] = 0;
 return $1 | 0;
}
function _section_ptr_add($sec, $size) {
 $sec = $sec | 0;
 $size = $size | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $size_0_i = 0, $13 = 0, $15 = 0, $19 = 0, $23 = 0, $24 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = $sec | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + $size | 0;
 $4 = $sec + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if ($3 >>> 0 <= $5 >>> 0) {
  $23 = HEAP32[$sec + 4 >> 2] | 0;
  HEAP32[$1 >> 2] = $3;
  $24 = $23 + $2 | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 $size_0_i = ($5 | 0) == 0 ? 1 : $5;
 while (1) {
  if ($size_0_i >>> 0 < $3 >>> 0) {
   $size_0_i = $size_0_i << 1;
  } else {
   break;
  }
 }
 $13 = $sec + 4 | 0;
 $15 = _realloc(HEAP32[$13 >> 2] | 0, $size_0_i) | 0;
 if (($15 | 0) == 0 & ($size_0_i | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 }
 $19 = HEAP32[$4 >> 2] | 0;
 _memset($15 + $19 | 0, 0, $size_0_i - $19 | 0) | 0;
 HEAP32[$13 >> 2] = $15;
 HEAP32[$4 >> 2] = $size_0_i;
 $23 = $15;
 HEAP32[$1 >> 2] = $3;
 $24 = $23 + $2 | 0;
 STACKTOP = sp;
 return $24 | 0;
}
function _cstr_cat($cstr, $str) {
 $cstr = $cstr | 0;
 $str = $str | 0;
 var $1 = 0, $3 = 0, $4 = 0, $_phi_trans_insert_i = 0, $5 = 0, $7 = 0, $8 = 0, $_01 = 0, $9 = 0, $10 = 0, $size_0_i_i = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0;
 $1 = HEAP8[$str] | 0;
 if ($1 << 24 >> 24 == 0) {
  return;
 }
 $3 = $cstr | 0;
 $4 = $cstr + 8 | 0;
 $_phi_trans_insert_i = $cstr + 4 | 0;
 $5 = $cstr + 12 | 0;
 $_01 = $str;
 $8 = $1;
 $7 = HEAP32[$3 >> 2] | 0;
 while (1) {
  $9 = $7 + 1 | 0;
  $10 = HEAP32[$4 >> 2] | 0;
  if (($7 | 0) < ($10 | 0)) {
   $19 = HEAP32[$_phi_trans_insert_i >> 2] | 0;
  } else {
   $size_0_i_i = ($10 | 0) == 0 ? 8 : $10;
   while (1) {
    if (($size_0_i_i | 0) < ($9 | 0)) {
     $size_0_i_i = $size_0_i_i << 1;
    } else {
     break;
    }
   }
   $18 = _tcc_realloc(HEAP32[$5 >> 2] | 0, $size_0_i_i) | 0;
   HEAP32[$5 >> 2] = $18;
   HEAP32[$4 >> 2] = $size_0_i_i;
   HEAP32[$_phi_trans_insert_i >> 2] = $18;
   $19 = $18;
  }
  HEAP8[$19 + $7 | 0] = $8;
  HEAP32[$3 >> 2] = $9;
  $21 = $_01 + 1 | 0;
  $22 = HEAP8[$21] | 0;
  if ($22 << 24 >> 24 == 0) {
   break;
  } else {
   $_01 = $21;
   $8 = $22;
   $7 = $9;
  }
 }
 return;
}
function _gen_bounded_ptr_add() {
 var $2 = 0, $_pre_i = 0, $6 = 0, $7 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $24 = 0, $25 = 0, $30 = 0;
 _gv2(4, 32);
 HEAP32[5024] = (HEAP32[5024] | 0) - 80;
 _save_regs(0);
 $2 = _external_global_sym(388, 55624, 0) | 0;
 _greloc(HEAP32[13918] | 0, $2, (HEAP32[5434] | 0) + 1 | 0, 2);
 $_pre_i = HEAP32[5434] | 0;
 $6 = $_pre_i + 1 | 0;
 $7 = HEAP32[13918] | 0;
 if ($6 >>> 0 > (HEAP32[$7 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($7, $6);
  $13 = HEAP32[5434] | 0;
  $12 = HEAP32[13918] | 0;
 } else {
  $13 = $_pre_i;
  $12 = $7;
 }
 HEAP8[(HEAP32[$12 + 4 >> 2] | 0) + $13 | 0] = -24;
 HEAP32[5434] = $6;
 $18 = $_pre_i + 5 | 0;
 $19 = HEAP32[13918] | 0;
 if ($18 >>> 0 > (HEAP32[$19 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($19, $18);
  $25 = HEAP32[13918] | 0;
  $24 = HEAP32[5434] | 0;
 } else {
  $25 = $19;
  $24 = $_pre_i + 1 | 0;
 }
 HEAP32[(HEAP32[$25 + 4 >> 2] | 0) + $24 >> 2] = -4;
 HEAP32[5434] = $18;
 $30 = HEAP32[5024] | 0;
 HEAP32[5024] = $30 + 40;
 HEAP16[$30 + 48 >> 1] = -32768;
 HEAP32[(HEAP32[5024] | 0) + 16 >> 2] = (HEAP32[HEAP32[(HEAP32[13918] | 0) + 60 >> 2] >> 2] | 0) - 8;
 return;
}
function _type_size($type, $a) {
 $type = $type | 0;
 $a = $a | 0;
 var $2 = 0, $6 = 0, $16 = 0, $18 = 0, $21 = 0, $ts_0 = 0, $_0 = 0;
 $2 = HEAP32[$type >> 2] | 0;
 L1 : do {
  switch ($2 & 15 | 0) {
  case 7:
   {
    $6 = HEAP32[$type + 4 >> 2] | 0;
    HEAP32[$a >> 2] = HEAP32[$6 + 8 >> 2];
    $_0 = HEAP32[$6 + 12 >> 2] | 0;
    break;
   }
  case 4:
   {
    if (($2 & 32 | 0) == 0) {
     HEAP32[$a >> 2] = 4;
     $_0 = 4;
     break L1;
    }
    $16 = HEAP32[$type + 4 >> 2] | 0;
    $18 = _type_size($16 + 16 | 0, $a) | 0;
    $21 = HEAP32[$16 + 12 >> 2] | 0;
    if (($18 | 0) < 0) {
     $ts_0 = ($21 | 0) < 0 ? -$18 | 0 : $18;
    } else {
     $ts_0 = $18;
    }
    $_0 = Math_imul($21, $ts_0) | 0;
    break;
   }
  case 8:
  case 5:
  case 0:
   {
    HEAP32[$a >> 2] = 4;
    $_0 = 4;
    break;
   }
  case 10:
   {
    HEAP32[$a >> 2] = 4;
    $_0 = 12;
    break;
   }
  case 2:
   {
    HEAP32[$a >> 2] = 2;
    $_0 = 2;
    break;
   }
  case 12:
  case 9:
   {
    HEAP32[$a >> 2] = 4;
    $_0 = 8;
    break;
   }
  default:
   {
    HEAP32[$a >> 2] = 1;
    $_0 = 1;
   }
  }
 } while (0);
 return $_0 | 0;
}
function _tcc_cleanup() {
 var $5 = 0, $7 = 0, $8 = 0, $i_01 = 0, $12 = 0, $14 = 0, $_lcssa = 0, $_pr_i = 0, $19 = 0, $p_01_i = 0, $20 = 0, $24 = 0, $26 = 0;
 if ((HEAP32[5314] | 0) == 0) {
  return;
 }
 HEAP32[5314] = 0;
 _free_defines(0);
 $5 = (HEAP32[5306] | 0) - 256 | 0;
 $7 = HEAP32[5316] | 0;
 if (($5 | 0) > 0) {
  $i_01 = 0;
  $8 = $7;
  while (1) {
   _free(HEAP32[$8 + ($i_01 << 2) >> 2] | 0);
   $12 = $i_01 + 1 | 0;
   $14 = HEAP32[5316] | 0;
   if (($12 | 0) < ($5 | 0)) {
    $i_01 = $12;
    $8 = $14;
   } else {
    $_lcssa = $14;
    break;
   }
  }
 } else {
  $_lcssa = $7;
 }
 _free($_lcssa);
 $_pr_i = HEAP32[5340] | 0;
 if (($_pr_i | 0) != 0) {
  $p_01_i = HEAP32[5320] | 0;
  $19 = $_pr_i;
  while (1) {
   $20 = HEAP32[$p_01_i >> 2] | 0;
   if (($20 | 0) == 0) {
    $24 = $19;
   } else {
    _free($20);
    $24 = HEAP32[5340] | 0;
   }
   $26 = $24 - 1 | 0;
   HEAP32[5340] = $26;
   if (($26 | 0) == 0) {
    break;
   } else {
    $p_01_i = $p_01_i + 4 | 0;
    $19 = $26;
   }
  }
 }
 _free(HEAP32[5320] | 0);
 HEAP32[5320] = 0;
 _cstr_free(21192);
 HEAP32[5322] = 0;
 HEAP32[5350] = 0;
 return;
}
function _inp() {
 var $2 = 0, $4 = 0, $5 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $17 = 0, $_pre2_i_i = 0, $20 = 0, $len_0_i_i = 0, $24 = 0, $26 = 0, $27 = 0, $_0_i_i = 0;
 $2 = HEAP32[13912] | 0;
 $4 = (HEAP32[$2 >> 2] | 0) + 1 | 0;
 HEAP32[$2 >> 2] = $4;
 $5 = HEAP8[$4] | 0;
 HEAP32[13924] = $5 & 255;
 if ($5 << 24 >> 24 != 92) {
  return;
 }
 $9 = HEAP32[13912] | 0;
 $10 = $9 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $9 + 4 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if ($11 >>> 0 < $13 >>> 0) {
  $27 = $11;
  $26 = $13;
 } else {
  $17 = HEAP32[$9 + 8 >> 2] | 0;
  $_pre2_i_i = $9 + 1056 | 0;
  if (($17 | 0) == -1) {
   $len_0_i_i = 0;
  } else {
   $20 = _read($17 | 0, $_pre2_i_i | 0, 8192) | 0;
   $len_0_i_i = ($20 | 0) < 0 ? 0 : $20;
  }
  HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i_i;
  HEAP32[$10 >> 2] = $_pre2_i_i;
  $24 = $9 + 1056 + $len_0_i_i | 0;
  HEAP32[$12 >> 2] = $24;
  HEAP8[$24] = 92;
  $27 = HEAP32[$10 >> 2] | 0;
  $26 = HEAP32[$12 >> 2] | 0;
 }
 if ($27 >>> 0 < $26 >>> 0) {
  $_0_i_i = HEAPU8[$27] | 0;
 } else {
  HEAP32[$10 >> 2] = $26;
  $_0_i_i = -1;
 }
 HEAP32[13924] = $_0_i_i;
 return;
}
function _section_reserve($sec, $size) {
 $sec = $sec | 0;
 $size = $size | 0;
 var $1 = 0, $2 = 0, $size_0_i = 0, $10 = 0, $12 = 0, $16 = 0, $20 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = $sec + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 do {
  if ($2 >>> 0 < $size >>> 0) {
   $size_0_i = ($2 | 0) == 0 ? 1 : $2;
   while (1) {
    if ($size_0_i >>> 0 < $size >>> 0) {
     $size_0_i = $size_0_i << 1;
    } else {
     break;
    }
   }
   $10 = $sec + 4 | 0;
   $12 = _realloc(HEAP32[$10 >> 2] | 0, $size_0_i) | 0;
   if (($12 | 0) == 0 & ($size_0_i | 0) != 0) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   } else {
    $16 = HEAP32[$1 >> 2] | 0;
    _memset($12 + $16 | 0, 0, $size_0_i - $16 | 0) | 0;
    HEAP32[$10 >> 2] = $12;
    HEAP32[$1 >> 2] = $size_0_i;
    break;
   }
  }
 } while (0);
 $20 = $sec | 0;
 if ((HEAP32[$20 >> 2] | 0) >>> 0 >= $size >>> 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$20 >> 2] = $size;
 STACKTOP = sp;
 return;
}
function _oad($c, $s) {
 $c = $c | 0;
 $s = $s | 0;
 var $_pre = 0, $2 = 0, $_01_i = 0, $3 = 0, $4 = 0, $9 = 0, $10 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $25 = 0, $26 = 0, $31 = 0;
 $_pre = HEAP32[5434] | 0;
 if (($c | 0) == 0) {
  $17 = $_pre;
 } else {
  $_01_i = $c;
  $2 = $_pre;
  while (1) {
   $3 = $2 + 1 | 0;
   $4 = HEAP32[13918] | 0;
   if ($3 >>> 0 > (HEAP32[$4 + 8 >> 2] | 0) >>> 0) {
    _section_realloc($4, $3);
    $10 = HEAP32[5434] | 0;
    $9 = HEAP32[13918] | 0;
   } else {
    $10 = $2;
    $9 = $4;
   }
   HEAP8[(HEAP32[$9 + 4 >> 2] | 0) + $10 | 0] = $_01_i;
   HEAP32[5434] = $3;
   $15 = $_01_i >>> 8;
   if (($15 | 0) == 0) {
    $17 = $3;
    break;
   } else {
    $_01_i = $15;
    $2 = $3;
   }
  }
 }
 $18 = $17 + 4 | 0;
 $19 = HEAP32[13918] | 0;
 if ($18 >>> 0 > (HEAP32[$19 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($19, $18);
  $26 = HEAP32[13918] | 0;
  $25 = HEAP32[5434] | 0;
 } else {
  $26 = $19;
  $25 = $17;
 }
 HEAP32[(HEAP32[$26 + 4 >> 2] | 0) + $25 >> 2] = $s;
 $31 = HEAP32[5434] | 0;
 HEAP32[5434] = $18;
 return $31 | 0;
}
function _add_init_array_defines($s1, $section_name) {
 $s1 = $s1 | 0;
 $section_name = $section_name | 0;
 var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $s_0 = 0, $end_offset_0 = 0, $15 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048 | 0;
 $1 = sp | 0;
 $2 = $section_name + 1 | 0;
 _snprintf($1 | 0, 1024, 12512, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $2, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $4 = sp + 1024 | 0;
 _snprintf($4 | 0, 1024, 12432, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $2, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 $6 = _find_section($s1, $section_name) | 0;
 if (($6 | 0) == 0) {
  $end_offset_0 = 0;
  $s_0 = HEAP32[13916] | 0;
 } else {
  $end_offset_0 = HEAP32[$6 >> 2] | 0;
  $s_0 = $6;
 }
 $15 = $s_0 + 16 | 0;
 _add_elf_sym(HEAP32[5318] | 0, 0, 0, 16, 0, HEAP32[$15 >> 2] | 0, $1) | 0;
 _add_elf_sym(HEAP32[5318] | 0, $end_offset_0, 0, 16, 0, HEAP32[$15 >> 2] | 0, $4) | 0;
 STACKTOP = sp;
 return;
}
function _tok_alloc($str, $len) {
 $str = $str | 0;
 $len = $len | 0;
 var $h_04 = 0, $i_03 = 0, $h_0_lcssa = 0, $10 = 0, $11 = 0, $13 = 0, $22 = 0, $23 = 0, $pts_0_lcssa = 0, $_0 = 0;
 if (($len | 0) > 0) {
  $i_03 = 0;
  $h_04 = 1;
  do {
   $h_04 = (HEAPU8[$str + $i_03 | 0] | 0) + ($h_04 * 263 | 0) | 0;
   $i_03 = $i_03 + 1 | 0;
  } while (($i_03 | 0) < ($len | 0));
  $h_0_lcssa = $h_04 & 8191;
 } else {
  $h_0_lcssa = 1;
 }
 $10 = 21744 + ($h_0_lcssa << 2) | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 L6 : do {
  if (($11 | 0) == 0) {
   $pts_0_lcssa = $10;
  } else {
   $13 = $11;
   while (1) {
    if ((HEAP32[$13 + 24 >> 2] | 0) == ($len | 0)) {
     if ((_memcmp($13 + 28 | 0, $str | 0, $len | 0) | 0) == 0) {
      $_0 = $13;
      break;
     }
    }
    $22 = $13 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    if (($23 | 0) == 0) {
     $pts_0_lcssa = $22;
     break L6;
    } else {
     $13 = $23;
    }
   }
   return $_0 | 0;
  }
 } while (0);
 $_0 = _tok_alloc_new($pts_0_lcssa, $str, $len) | 0;
 return $_0 | 0;
}
function _asm_expr_logic($s1, $pe) {
 $s1 = $s1 | 0;
 $pe = $pe | 0;
 var $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $e2 = sp | 0;
 _asm_expr_prod($s1, $pe);
 $1 = $pe + 4 | 0;
 $2 = $e2 + 4 | 0;
 $3 = $e2 | 0;
 $4 = $pe | 0;
 while (1) {
  $5 = HEAP32[5310] | 0;
  if (!(($5 | 0) == 124 | ($5 | 0) == 94 | ($5 | 0) == 38)) {
   break;
  }
  _next();
  _asm_expr_prod($s1, $e2);
  if (!((HEAP32[$1 >> 2] | 0) == 0 & (HEAP32[$2 >> 2] | 0) == 0)) {
   _tcc_error(16368, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
  }
  if (($5 | 0) == 124) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | HEAP32[$3 >> 2];
   continue;
  } else if (($5 | 0) == 38) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & HEAP32[$3 >> 2];
   continue;
  } else {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] ^ HEAP32[$3 >> 2];
   continue;
  }
 }
 STACKTOP = sp;
 return;
}
function _tok_alloc_new($pts, $str, $len) {
 $pts = $pts | 0;
 $str = $str | 0;
 $len = $len | 0;
 var $1 = 0, $5 = 0, $6 = 0, $18 = 0, $19 = 0, $22 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[5306] | 0;
 if (($1 | 0) > 268435455) {
  _tcc_error(17496, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $5 = HEAP32[5306] | 0;
 } else {
  $5 = $1;
 }
 $6 = $5 - 256 | 0;
 if (($6 & 511 | 0) == 0) {
  HEAP32[5316] = _tcc_realloc(HEAP32[5316] | 0, ($5 << 2) + 1024 | 0) | 0;
 }
 $18 = _tcc_malloc($len + 32 | 0) | 0;
 $19 = $18;
 HEAP32[(HEAP32[5316] | 0) + ($6 << 2) >> 2] = $19;
 $22 = HEAP32[5306] | 0;
 HEAP32[5306] = $22 + 1;
 HEAP32[$18 + 20 >> 2] = $22;
 _memset($18 + 4 | 0, 0, 16) | 0;
 HEAP32[$18 + 24 >> 2] = $len;
 HEAP32[$18 >> 2] = 0;
 _memcpy($18 + 28 | 0, $str | 0, $len) | 0;
 HEAP8[$18 + ($len + 28) | 0] = 0;
 HEAP32[$pts >> 2] = $19;
 STACKTOP = sp;
 return $19 | 0;
}
function _tcc_add_crt($s, $filename) {
 $s = $s | 0;
 $filename = $filename | 0;
 var $2 = 0, $4 = 0, $5 = 0, $i_01_i = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 $2 = HEAP32[$s + 144 >> 2] | 0;
 $4 = HEAP32[$s + 148 >> 2] | 0;
 $5 = sp | 0;
 L1 : do {
  if (($4 | 0) > 0) {
   $i_01_i = 0;
   while (1) {
    _snprintf($5 | 0, 1024, 13464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$2 + ($i_01_i << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = $filename, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    $i_01_i = $i_01_i + 1 | 0;
    if ((_tcc_add_file_internal($s, $5, 0) | 0) == 0) {
     break;
    }
    if (($i_01_i | 0) >= ($4 | 0)) {
     break L1;
    }
   }
   STACKTOP = sp;
   return 0;
  }
 } while (0);
 _tcc_error_noabort(14192, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $filename, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 STACKTOP = sp;
 return 0;
}
function _gen_le16($v) {
 $v = $v | 0;
 var $1 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 $1 = HEAP32[5434] | 0;
 $2 = $1 + 1 | 0;
 $3 = HEAP32[13918] | 0;
 if ($2 >>> 0 > (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($3, $2);
  $9 = HEAP32[5434] | 0;
  $8 = HEAP32[13918] | 0;
 } else {
  $9 = $1;
  $8 = $3;
 }
 HEAP8[(HEAP32[$8 + 4 >> 2] | 0) + $9 | 0] = $v;
 HEAP32[5434] = $2;
 $14 = $v >>> 8;
 $15 = $1 + 2 | 0;
 $16 = HEAP32[13918] | 0;
 if ($15 >>> 0 <= (HEAP32[$16 + 8 >> 2] | 0) >>> 0) {
  $22 = $2;
  $21 = $16;
  $23 = $14 & 255;
  $24 = $21 + 4 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  $26 = $25 + $22 | 0;
  HEAP8[$26] = $23;
  HEAP32[5434] = $15;
  return;
 }
 _section_realloc($16, $15);
 $22 = HEAP32[5434] | 0;
 $21 = HEAP32[13918] | 0;
 $23 = $14 & 255;
 $24 = $21 + 4 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = $25 + $22 | 0;
 HEAP8[$26] = $23;
 HEAP32[5434] = $15;
 return;
}
function _unget_tok($last_tok) {
 $last_tok = $last_tok | 0;
 var $4 = 0, $_0_i_ph4 = 0, $q_0_lcssa = 0, label = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 if (!(HEAP8[40] | 0)) {
  HEAP32[5026] = HEAP32[5350];
  HEAP8[40] = 1;
 }
 HEAP32[5350] = 20112;
 $4 = HEAP32[5310] | 0;
 HEAP32[5028] = $4;
 switch ($4 | 0) {
 case 206:
 case 184:
 case 181:
  {
   _tcc_error(15288, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
   STACKTOP = tempVarArgs;
   $q_0_lcssa = 20116;
   break;
  }
 case 202:
 case 201:
 case 192:
  {
   $_0_i_ph4 = 1;
   label = 6;
   break;
  }
 case 193:
  {
   $_0_i_ph4 = 2;
   label = 6;
   break;
  }
 default:
  {
   $q_0_lcssa = 20116;
  }
 }
 if ((label | 0) == 6) {
  _memcpy(20116, 21208, $_0_i_ph4 << 2) | 0;
  $q_0_lcssa = 20112 + ($_0_i_ph4 + 1 << 2) | 0;
 }
 HEAP32[$q_0_lcssa >> 2] = 0;
 HEAP32[5310] = $last_tok;
 STACKTOP = sp;
 return;
}
function _put_elf_reloc($symtab, $s, $offset, $type, $symbol) {
 $symtab = $symtab | 0;
 $s = $s | 0;
 $offset = $offset | 0;
 $type = $type | 0;
 $symbol = $symbol | 0;
 var $1 = 0, $2 = 0, $5 = 0, $11 = 0, $sr_0 = 0, $18 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $1 = $s + 60 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($2 | 0) == 0) {
  $5 = sp | 0;
  _snprintf($5 | 0, 256, 16960, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $s + 72, tempVarArgs) | 0) | 0;
  STACKTOP = tempVarArgs;
  $11 = _new_section(HEAP32[5314] | 0, $5, 9, HEAP32[$symtab + 24 >> 2] | 0) | 0;
  HEAP32[$11 + 36 >> 2] = 8;
  HEAP32[$11 + 56 >> 2] = $symtab;
  HEAP32[$11 + 28 >> 2] = HEAP32[$s + 16 >> 2];
  HEAP32[$1 >> 2] = $11;
  $sr_0 = $11;
 } else {
  $sr_0 = $2;
 }
 $18 = _section_ptr_add($sr_0, 8) | 0;
 HEAP32[$18 >> 2] = $offset;
 HEAP32[$18 + 4 >> 2] = $symbol << 8 | $type & 255;
 STACKTOP = sp;
 return;
}
function _tcc_add_dll($s, $filename, $flags) {
 $s = $s | 0;
 $filename = $filename | 0;
 $flags = $flags | 0;
 var $2 = 0, $4 = 0, $5 = 0, $i_01_i = 0, $14 = 0, $_0_i = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 $2 = HEAP32[$s + 136 >> 2] | 0;
 $4 = HEAP32[$s + 140 >> 2] | 0;
 $5 = sp | 0;
 L1 : do {
  if (($4 | 0) > 0) {
   $i_01_i = 0;
   while (1) {
    _snprintf($5 | 0, 1024, 13464, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$2 + ($i_01_i << 2) >> 2], HEAP32[tempVarArgs + 8 >> 2] = $filename, tempVarArgs) | 0) | 0;
    STACKTOP = tempVarArgs;
    $14 = $i_01_i + 1 | 0;
    if ((_tcc_add_file_internal($s, $5, $flags) | 0) == 0) {
     $_0_i = 0;
     break L1;
    }
    if (($14 | 0) < ($4 | 0)) {
     $i_01_i = $14;
    } else {
     $_0_i = -1;
     break;
    }
   }
  } else {
   $_0_i = -1;
  }
 } while (0);
 STACKTOP = sp;
 return $_0_i | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}
function _tok_str_add_tok($s) {
 $s = $s | 0;
 var $3 = 0, $4 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $len_0_i_i = 0, $22 = 0, $str_0_i = 0, $28 = 0;
 $3 = HEAP32[(HEAP32[13912] | 0) + 16 >> 2] | 0;
 $4 = $s + 12 | 0;
 if (($3 | 0) == (HEAP32[$4 >> 2] | 0)) {
  $28 = HEAP32[5310] | 0;
  _tok_str_add2($s, $28, 21208);
  return;
 }
 HEAP32[$4 >> 2] = $3;
 $8 = $s + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $s | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $13 = $s + 8 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if (($9 + 4 | 0) > ($14 | 0)) {
  $len_0_i_i = ($14 | 0) == 0 ? 8 : $14 << 1;
  $22 = _tcc_realloc($11, $len_0_i_i << 2) | 0;
  HEAP32[$13 >> 2] = $len_0_i_i;
  HEAP32[$10 >> 2] = $22;
  $str_0_i = $22;
 } else {
  $str_0_i = $11;
 }
 HEAP32[$str_0_i + ($9 << 2) >> 2] = 186;
 HEAP32[$str_0_i + ($9 + 1 << 2) >> 2] = $3;
 HEAP32[$8 >> 2] = $9 + 2;
 $28 = HEAP32[5310] | 0;
 _tok_str_add2($s, $28, 21208);
 return;
}
function _handle_eob() {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $_pre2_i = 0, $12 = 0, $len_0_i = 0, $16 = 0, $18 = 0, $19 = 0, $_0_i = 0;
 $1 = HEAP32[13912] | 0;
 $2 = $1 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if ($3 >>> 0 < $5 >>> 0) {
  $19 = $3;
  $18 = $5;
 } else {
  $9 = HEAP32[$1 + 8 >> 2] | 0;
  $_pre2_i = $1 + 1056 | 0;
  if (($9 | 0) == -1) {
   $len_0_i = 0;
  } else {
   $12 = _read($9 | 0, $_pre2_i | 0, 8192) | 0;
   $len_0_i = ($12 | 0) < 0 ? 0 : $12;
  }
  HEAP32[5038] = (HEAP32[5038] | 0) + $len_0_i;
  HEAP32[$2 >> 2] = $_pre2_i;
  $16 = $1 + 1056 + $len_0_i | 0;
  HEAP32[$4 >> 2] = $16;
  HEAP8[$16] = 92;
  $19 = HEAP32[$2 >> 2] | 0;
  $18 = HEAP32[$4 >> 2] | 0;
 }
 if ($19 >>> 0 < $18 >>> 0) {
  $_0_i = HEAPU8[$19] | 0;
  return $_0_i | 0;
 } else {
  HEAP32[$2 >> 2] = $18;
  $_0_i = -1;
  return $_0_i | 0;
 }
 return 0;
}
function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $3 = 0.0, $4 = 0, $8 = 0, $13 = 0.0, $14 = 0, $18 = 0, $_0 = 0, $y_0 = 0.0;
 do {
  if (($n | 0) > 1023) {
   $3 = $x * 8.98846567431158e+307;
   $4 = $n - 1023 | 0;
   if (($4 | 0) <= 1023) {
    $y_0 = $3;
    $_0 = $4;
    break;
   }
   $8 = $n - 2046 | 0;
   $y_0 = $3 * 8.98846567431158e+307;
   $_0 = ($8 | 0) > 1023 ? 1023 : $8;
  } else {
   if (($n | 0) >= -1022) {
    $y_0 = $x;
    $_0 = $n;
    break;
   }
   $13 = $x * 2.2250738585072014e-308;
   $14 = $n + 1022 | 0;
   if (($14 | 0) >= -1022) {
    $y_0 = $13;
    $_0 = $14;
    break;
   }
   $18 = $n + 2044 | 0;
   $y_0 = $13 * 2.2250738585072014e-308;
   $_0 = ($18 | 0) < -1022 ? -1022 : $18;
  }
 } while (0);
 return +($y_0 * (HEAP32[tempDoublePtr >> 2] = 0 << 20 | 0 >>> 12, HEAP32[tempDoublePtr + 4 >> 2] = $_0 + 1023 << 20 | 0 >>> 12, +HEAPF64[tempDoublePtr >> 3]));
}
function _tcc_print_stats($s, $total_time$0, $total_time$1) {
 $s = $s | 0;
 $total_time$0 = $total_time$0 | 0;
 $total_time$1 = $total_time$1 | 0;
 var $2 = 0.0, $tt_0 = 0.0, $4 = 0, $8 = 0, $11 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+($total_time$0 >>> 0) + +($total_time$1 | 0) * 4294967296.0) / 1.0e6;
 $tt_0 = $2 < .001 ? .001 : $2;
 $4 = HEAP32[5038] | 0;
 if (($4 | 0) < 1) {
  HEAP32[5038] = 1;
  $8 = 1;
 } else {
  $8 = $4;
 }
 $11 = HEAP32[5036] | 0;
 _printf(11680, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 48 | 0, HEAP32[tempVarArgs >> 2] = (HEAP32[5306] | 0) - 256, HEAP32[tempVarArgs + 8 >> 2] = $11, HEAP32[tempVarArgs + 16 >> 2] = $8, HEAPF64[tempVarArgs + 24 >> 3] = $tt_0, HEAP32[tempVarArgs + 32 >> 2] = ~~(+($11 | 0) / $tt_0), HEAPF64[tempVarArgs + 40 >> 3] = +($8 | 0) / $tt_0 / 1.0e6, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 STACKTOP = sp;
 return;
}
function _pstrcat($buf, $buf_size, $s) {
 $buf = $buf | 0;
 $buf_size = $buf_size | 0;
 $s = $s | 0;
 var $1 = 0, $4 = 0, $5 = 0, $8 = 0, $_02_i = 0, $q_01_i = 0, $10 = 0, $14 = 0, $q_0_lcssa_i = 0;
 $1 = _strlen($buf | 0) | 0;
 if (($1 | 0) >= ($buf_size | 0)) {
  return $buf | 0;
 }
 $4 = $buf + $1 | 0;
 $5 = $buf_size - $1 | 0;
 if (($5 | 0) <= 0) {
  return $buf | 0;
 }
 $8 = $buf + ($buf_size - 1) | 0;
 L7 : do {
  if (($5 - 1 | 0) > 0) {
   $q_01_i = $4;
   $_02_i = $s;
   while (1) {
    $10 = HEAP8[$_02_i] | 0;
    if ($10 << 24 >> 24 == 0) {
     $q_0_lcssa_i = $q_01_i;
     break L7;
    }
    $14 = $q_01_i + 1 | 0;
    HEAP8[$q_01_i] = $10;
    if ($14 >>> 0 < $8 >>> 0) {
     $q_01_i = $14;
     $_02_i = $_02_i + 1 | 0;
    } else {
     $q_0_lcssa_i = $14;
     break;
    }
   }
  } else {
   $q_0_lcssa_i = $4;
  }
 } while (0);
 HEAP8[$q_0_lcssa_i] = 0;
 return $buf | 0;
}
function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $14 = 0, $17 = 0, $23 = 0, $28 = 0, $33 = 0, $mem_0 = 0;
 if (($oldmem | 0) == 0) {
  $mem_0 = _malloc($bytes) | 0;
  return $mem_0 | 0;
 }
 if ($bytes >>> 0 > 4294967231 >>> 0) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem_0 = 0;
  return $mem_0 | 0;
 }
 if ($bytes >>> 0 < 11 >>> 0) {
  $14 = 16;
 } else {
  $14 = $bytes + 11 & -8;
 }
 $17 = _try_realloc_chunk($oldmem - 8 | 0, $14) | 0;
 if (($17 | 0) != 0) {
  $mem_0 = $17 + 8 | 0;
  return $mem_0 | 0;
 }
 $23 = _malloc($bytes) | 0;
 if (($23 | 0) == 0) {
  $mem_0 = 0;
  return $mem_0 | 0;
 }
 $28 = HEAP32[$oldmem - 4 >> 2] | 0;
 $33 = ($28 & -8) - (($28 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($23 | 0, $oldmem | 0, $33 >>> 0 < $bytes >>> 0 ? $33 : $bytes) | 0;
 _free($oldmem);
 $mem_0 = $23;
 return $mem_0 | 0;
}
function _dynarray_add($ptab, $nb_ptr, $data) {
 $ptab = $ptab | 0;
 $nb_ptr = $nb_ptr | 0;
 $data = $data | 0;
 var $1 = 0, $2 = 0, $nb_alloc_0 = 0, $9 = 0, $13 = 0, $pp_0 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$nb_ptr >> 2] | 0;
 $2 = HEAP32[$ptab >> 2] | 0;
 do {
  if (($1 - 1 & $1 | 0) == 0) {
   $nb_alloc_0 = ($1 | 0) == 0 ? 4 : $1 << 3;
   $9 = _realloc($2, $nb_alloc_0) | 0;
   if (($9 | 0) == 0 & ($nb_alloc_0 | 0) != 0) {
    _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
    STACKTOP = tempVarArgs;
   } else {
    $13 = $9;
    HEAP32[$ptab >> 2] = $13;
    $pp_0 = $13;
    break;
   }
  } else {
   $pp_0 = $2;
  }
 } while (0);
 HEAP32[$pp_0 + ($1 << 2) >> 2] = $data;
 HEAP32[$nb_ptr >> 2] = $1 + 1;
 STACKTOP = sp;
 return;
}
function _cstr_ccat($cstr, $ch) {
 $cstr = $cstr | 0;
 $ch = $ch | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $size_0_i = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0;
 $1 = $cstr | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 1 | 0;
 $4 = $cstr + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($2 | 0) < ($5 | 0)) {
  $17 = HEAP32[$cstr + 4 >> 2] | 0;
  $18 = $ch & 255;
  $19 = $17 + $2 | 0;
  HEAP8[$19] = $18;
  HEAP32[$1 >> 2] = $3;
  return;
 }
 $size_0_i = ($5 | 0) == 0 ? 8 : $5;
 while (1) {
  if (($size_0_i | 0) < ($3 | 0)) {
   $size_0_i = $size_0_i << 1;
  } else {
   break;
  }
 }
 $12 = $cstr + 12 | 0;
 $14 = _tcc_realloc(HEAP32[$12 >> 2] | 0, $size_0_i) | 0;
 HEAP32[$12 >> 2] = $14;
 HEAP32[$4 >> 2] = $size_0_i;
 HEAP32[$cstr + 4 >> 2] = $14;
 $17 = $14;
 $18 = $ch & 255;
 $19 = $17 + $2 | 0;
 HEAP8[$19] = $18;
 HEAP32[$1 >> 2] = $3;
 return;
}
function _sym_pop($ptop, $b) {
 $ptop = $ptop | 0;
 $b = $b | 0;
 var $1 = 0, $s_01 = 0, $4 = 0, $6 = 0, $10 = 0, $16 = 0;
 $1 = HEAP32[$ptop >> 2] | 0;
 if (($1 | 0) == ($b | 0)) {
  HEAP32[$ptop >> 2] = $b;
  return;
 } else {
  $s_01 = $1;
 }
 while (1) {
  $4 = HEAP32[$s_01 + 28 >> 2] | 0;
  $6 = HEAP32[$s_01 >> 2] | 0;
  do {
   if (($6 & 536870912 | 0) == 0) {
    $10 = $6 & -1073741825;
    if (($10 | 0) >= 268435456) {
     break;
    }
    $16 = HEAP32[(HEAP32[5316] | 0) + ($10 - 256 << 2) >> 2] | 0;
    HEAP32[(($6 & 1073741824 | 0) == 0 ? $16 + 16 | 0 : $16 + 12 | 0) >> 2] = HEAP32[$s_01 + 32 >> 2];
   }
  } while (0);
  HEAP32[$s_01 + 24 >> 2] = HEAP32[5322];
  _tcc_free(HEAP32[$s_01 + 4 >> 2] | 0);
  HEAP32[5322] = $s_01;
  if (($4 | 0) == ($b | 0)) {
   break;
  } else {
   $s_01 = $4;
  }
 }
 HEAP32[$ptop >> 2] = $b;
 return;
}
function _section_realloc($sec, $new_size) {
 $sec = $sec | 0;
 $new_size = $new_size | 0;
 var $1 = 0, $2 = 0, $size_0 = 0, $8 = 0, $10 = 0, $14 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = $sec + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $size_0 = ($2 | 0) == 0 ? 1 : $2;
 while (1) {
  if ($size_0 >>> 0 < $new_size >>> 0) {
   $size_0 = $size_0 << 1;
  } else {
   break;
  }
 }
 $8 = $sec + 4 | 0;
 $10 = _realloc(HEAP32[$8 >> 2] | 0, $size_0) | 0;
 if (($10 | 0) == 0 & ($size_0 | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
 } else {
  $14 = HEAP32[$1 >> 2] | 0;
  _memset($10 + $14 | 0, 0, $size_0 - $14 | 0) | 0;
  HEAP32[$8 >> 2] = $10;
  HEAP32[$1 >> 2] = $size_0;
  STACKTOP = sp;
  return;
 }
}
function _strtof($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $f_i = 0, $2 = 0, $3 = 0, $6 = 0.0, $14 = 0, $21 = 0, $$etemp$1$0 = 0, $$etemp$1$1 = 0, $22 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f_i = sp | 0;
 _memset($f_i | 0, 0, 112) | 0;
 $2 = $f_i + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 $3 = $f_i + 8 | 0;
 HEAP32[$3 >> 2] = -1;
 HEAP32[$f_i + 44 >> 2] = $s;
 HEAP32[$f_i + 76 >> 2] = -1;
 ___shlim($f_i, 0);
 $6 = +___floatscan($f_i, 0, 1);
 $14 = (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) + (HEAP32[$f_i + 108 >> 2] | 0) | 0;
 if (($p | 0) == 0) {
  $$etemp$1$0 = 112;
  $$etemp$1$1 = 0;
  $22 = $6;
  STACKTOP = sp;
  return +$22;
 }
 if (($14 | 0) == 0) {
  $21 = $s;
 } else {
  $21 = $s + $14 | 0;
 }
 HEAP32[$p >> 2] = $21;
 $$etemp$1$0 = 112;
 $$etemp$1$1 = 0;
 $22 = $6;
 STACKTOP = sp;
 return +$22;
}
function _gjmp($t) {
 $t = $t | 0;
 var $_pre_i = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $24 = 0;
 $_pre_i = HEAP32[5434] | 0;
 $0 = $_pre_i + 1 | 0;
 $1 = HEAP32[13918] | 0;
 if ($0 >>> 0 > (HEAP32[$1 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($1, $0);
  $7 = HEAP32[5434] | 0;
  $6 = HEAP32[13918] | 0;
 } else {
  $7 = $_pre_i;
  $6 = $1;
 }
 HEAP8[(HEAP32[$6 + 4 >> 2] | 0) + $7 | 0] = -23;
 HEAP32[5434] = $0;
 $12 = $_pre_i + 5 | 0;
 $13 = HEAP32[13918] | 0;
 if ($12 >>> 0 > (HEAP32[$13 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($13, $12);
  $19 = HEAP32[13918] | 0;
  $18 = HEAP32[5434] | 0;
 } else {
  $19 = $13;
  $18 = $_pre_i + 1 | 0;
 }
 HEAP32[(HEAP32[$19 + 4 >> 2] | 0) + $18 >> 2] = $t;
 $24 = HEAP32[5434] | 0;
 HEAP32[5434] = $12;
 return $24 | 0;
}
function _strtold($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $f_i = 0, $2 = 0, $3 = 0, $6 = 0.0, $14 = 0, $21 = 0, $$etemp$1$0 = 0, $$etemp$1$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f_i = sp | 0;
 _memset($f_i | 0, 0, 112) | 0;
 $2 = $f_i + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 $3 = $f_i + 8 | 0;
 HEAP32[$3 >> 2] = -1;
 HEAP32[$f_i + 44 >> 2] = $s;
 HEAP32[$f_i + 76 >> 2] = -1;
 ___shlim($f_i, 0);
 $6 = +___floatscan($f_i, 2, 1);
 $14 = (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) + (HEAP32[$f_i + 108 >> 2] | 0) | 0;
 if (($p | 0) == 0) {
  $$etemp$1$0 = 112;
  $$etemp$1$1 = 0;
  STACKTOP = sp;
  return +$6;
 }
 if (($14 | 0) == 0) {
  $21 = $s;
 } else {
  $21 = $s + $14 | 0;
 }
 HEAP32[$p >> 2] = $21;
 $$etemp$1$0 = 112;
 $$etemp$1$1 = 0;
 STACKTOP = sp;
 return +$6;
}
function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $f_i = 0, $2 = 0, $3 = 0, $6 = 0.0, $14 = 0, $21 = 0, $$etemp$1$0 = 0, $$etemp$1$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f_i = sp | 0;
 _memset($f_i | 0, 0, 112) | 0;
 $2 = $f_i + 4 | 0;
 HEAP32[$2 >> 2] = $s;
 $3 = $f_i + 8 | 0;
 HEAP32[$3 >> 2] = -1;
 HEAP32[$f_i + 44 >> 2] = $s;
 HEAP32[$f_i + 76 >> 2] = -1;
 ___shlim($f_i, 0);
 $6 = +___floatscan($f_i, 1, 1);
 $14 = (HEAP32[$2 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) + (HEAP32[$f_i + 108 >> 2] | 0) | 0;
 if (($p | 0) == 0) {
  $$etemp$1$0 = 112;
  $$etemp$1$1 = 0;
  STACKTOP = sp;
  return +$6;
 }
 if (($14 | 0) == 0) {
  $21 = $s;
 } else {
  $21 = $s + $14 | 0;
 }
 HEAP32[$p >> 2] = $21;
 $$etemp$1$0 = 112;
 $$etemp$1$1 = 0;
 STACKTOP = sp;
 return +$6;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return (tempRet0 = tempRet0, $10$0) | 0;
}
function _asm_global_instr() {
 var $astr = 0, $5 = 0, $8 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $astr = sp | 0;
 _next();
 _parse_asm_str($astr);
 _skip(41);
 if ((HEAP32[5310] | 0) != 59) {
  _expect(15400);
 }
 $5 = HEAP32[5312] | 0;
 HEAP32[13918] = $5;
 HEAP32[5434] = HEAP32[$5 >> 2];
 $8 = HEAP32[5314] | 0;
 $10 = HEAP32[$astr + 4 >> 2] | 0;
 $13 = (HEAP32[$astr >> 2] | 0) - 1 | 0;
 $14 = HEAP32[5336] | 0;
 $15 = HEAP32[5350] | 0;
 _tcc_open_bf($8, 14416, $13);
 _memcpy((HEAP32[13912] | 0) + 1056 | 0, $10 | 0, $13) | 0;
 HEAP32[5350] = 0;
 _tcc_assemble_internal($8, 0);
 _tcc_close();
 HEAP32[5336] = $14;
 HEAP32[5350] = $15;
 HEAP32[HEAP32[13918] >> 2] = HEAP32[5434];
 _next();
 _cstr_free($astr);
 STACKTOP = sp;
 return;
}
function _asm_clobber($clobber_regs, $str) {
 $clobber_regs = $clobber_regs | 0;
 $str = $str | 0;
 var $10 = 0, $11 = 0, $reg_0 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 if ((_strcmp($str | 0, 17792) | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 if ((_strcmp($str | 0, 17688) | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 $10 = HEAP32[(_tok_alloc($str, _strlen($str | 0) | 0) | 0) + 20 >> 2] | 0;
 $11 = $10 & -8;
 if (($11 | 0) == 432) {
  $reg_0 = $10 - 432 | 0;
 } else if (($11 | 0) == 440) {
  $reg_0 = $10 - 440 | 0;
 } else {
  _tcc_error(17520, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $str, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  $reg_0 = $10;
 }
 HEAP8[$clobber_regs + $reg_0 | 0] = 1;
 STACKTOP = sp;
 return;
}
function ___toread($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $5 = 0, $7 = 0, $17 = 0, $18 = 0, $27 = 0, $_0 = 0;
 $1 = $f + 74 | 0;
 $2 = HEAP8[$1] | 0;
 HEAP8[$1] = $2 - 1 & 255 | $2;
 $5 = $f + 20 | 0;
 $7 = $f + 44 | 0;
 if ((HEAP32[$5 >> 2] | 0) >>> 0 > (HEAP32[$7 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 1]($f, 0, 0) | 0;
 }
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$5 >> 2] = 0;
 $17 = $f | 0;
 $18 = HEAP32[$17 >> 2] | 0;
 if (($18 & 20 | 0) == 0) {
  $27 = HEAP32[$7 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $27;
  HEAP32[$f + 4 >> 2] = $27;
  $_0 = 0;
  return $_0 | 0;
 }
 if (($18 & 4 | 0) == 0) {
  $_0 = -1;
  return $_0 | 0;
 }
 HEAP32[$17 >> 2] = $18 | 32;
 $_0 = -1;
 return $_0 | 0;
}
function _pstrcpy($buf, $buf_size, $s) {
 $buf = $buf | 0;
 $buf_size = $buf_size | 0;
 $s = $s | 0;
 var $_sum = 0, $3 = 0, $_02 = 0, $q_01 = 0, $5 = 0, $9 = 0, $q_0_lcssa = 0;
 if (($buf_size | 0) <= 0) {
  return $buf | 0;
 }
 $_sum = $buf_size - 1 | 0;
 $3 = $buf + $_sum | 0;
 L4 : do {
  if (($_sum | 0) > 0) {
   $q_01 = $buf;
   $_02 = $s;
   while (1) {
    $5 = HEAP8[$_02] | 0;
    if ($5 << 24 >> 24 == 0) {
     $q_0_lcssa = $q_01;
     break L4;
    }
    $9 = $q_01 + 1 | 0;
    HEAP8[$q_01] = $5;
    if ($9 >>> 0 < $3 >>> 0) {
     $q_01 = $9;
     $_02 = $_02 + 1 | 0;
    } else {
     $q_0_lcssa = $9;
     break;
    }
   }
  } else {
   $q_0_lcssa = $buf;
  }
 } while (0);
 HEAP8[$q_0_lcssa] = 0;
 return $buf | 0;
}
function _expr_const() {
 var $1 = 0, $2 = 0, $4 = 0, $_pre = 0, $9 = 0, $10 = 0, $13 = 0, $14 = 0;
 $1 = HEAP32[13920] | 0;
 HEAP32[13920] = 1;
 _expr_cond();
 HEAP32[13920] = $1;
 $2 = HEAP32[5024] | 0;
 $4 = HEAP16[$2 + 8 >> 1] | 0;
 if (($4 & 831) == 48) {
  $10 = $2;
  $9 = $4;
 } else {
  _expect(17472);
  $_pre = HEAP32[5024] | 0;
  $10 = $_pre;
  $9 = HEAP16[$_pre + 8 >> 1] | 0;
 }
 $13 = HEAP32[$10 + 16 >> 2] | 0;
 $14 = $9 & 65535;
 do {
  if (($14 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
   if (($14 & 62 | 0) != 52) {
    break;
   }
   _gsym($13);
  } else {
   _o(55517);
  }
 } while (0);
 HEAP32[5024] = (HEAP32[5024] | 0) - 40;
 return $13 | 0;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}
function _sym_push($v, $type, $r, $c) {
 $v = $v | 0;
 $type = $type | 0;
 $r = $r | 0;
 $c = $c | 0;
 var $5 = 0, $13 = 0, $19 = 0, $ps_1 = 0;
 $5 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, $v, HEAP32[$type >> 2] | 0, $c) | 0;
 HEAP32[$5 + 20 >> 2] = HEAP32[$type + 4 >> 2];
 HEAP32[$5 + 8 >> 2] = $r;
 if (($v & 536870912 | 0) != 0) {
  return $5 | 0;
 }
 $13 = $v & -1073741825;
 if (($13 | 0) >= 268435456) {
  return $5 | 0;
 }
 $19 = HEAP32[(HEAP32[5316] | 0) + ($13 - 256 << 2) >> 2] | 0;
 $ps_1 = ($v & 1073741824 | 0) == 0 ? $19 + 16 | 0 : $19 + 12 | 0;
 HEAP32[$5 + 32 >> 2] = HEAP32[$ps_1 >> 2];
 HEAP32[$ps_1 >> 2] = $5;
 return $5 | 0;
}
function _tcc_add_runtime($s1) {
 $s1 = $s1 | 0;
 var $6 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 _tcc_add_bcheck($s1);
 if ((HEAP32[$s1 + 8 >> 2] | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 _tcc_add_library($s1, 19784) | 0;
 $6 = sp | 0;
 _snprintf($6 | 0, 1024, 12384, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = HEAP32[$s1 + 32 >> 2], HEAP32[tempVarArgs + 8 >> 2] = 19304, tempVarArgs) | 0) | 0;
 STACKTOP = tempVarArgs;
 _tcc_add_file($s1, $6) | 0;
 if ((HEAP32[$s1 + 44 >> 2] | 0) == 0) {
  STACKTOP = sp;
  return;
 }
 _tcc_add_crt($s1, 18992) | 0;
 STACKTOP = sp;
 return;
}
function _free_defines($b) {
 $b = $b | 0;
 var $1 = 0, $top_02 = 0, $4 = 0, $7 = 0, $13 = 0;
 $1 = HEAP32[13914] | 0;
 if (($1 | 0) == ($b | 0)) {
  HEAP32[13914] = $b;
  return;
 } else {
  $top_02 = $1;
 }
 while (1) {
  $4 = HEAP32[$top_02 + 28 >> 2] | 0;
  $7 = HEAP32[$top_02 + 12 >> 2] | 0;
  if (($7 | 0) != 0) {
   _tcc_free($7);
  }
  $13 = HEAP32[$top_02 >> 2] | 0;
  if (($13 | 0) > 255 & ($13 | 0) < (HEAP32[5306] | 0)) {
   HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($13 - 256 << 2) >> 2] | 0) + 4 >> 2] = 0;
  }
  _sym_free($top_02);
  if (($4 | 0) == ($b | 0)) {
   break;
  } else {
   $top_02 = $4;
  }
 }
 HEAP32[13914] = $b;
 return;
}
function _label_push($ptop, $v, $flags) {
 $ptop = $ptop | 0;
 $v = $v | 0;
 $flags = $flags | 0;
 var $1 = 0, $7 = 0, $ps_0 = 0, $9 = 0, $12 = 0, $ps_1 = 0;
 $1 = _sym_push2($ptop, $v, 0, 0) | 0;
 HEAP32[$1 + 8 >> 2] = $flags;
 $7 = (HEAP32[(HEAP32[5316] | 0) + ($v - 256 << 2) >> 2] | 0) + 8 | 0;
 if (($ptop | 0) == 54520) {
  $ps_0 = $7;
  while (1) {
   $9 = HEAP32[$ps_0 >> 2] | 0;
   if (($9 | 0) == 0) {
    $ps_1 = $ps_0;
    $12 = 0;
    break;
   } else {
    $ps_0 = $9 + 32 | 0;
   }
  }
 } else {
  $ps_1 = $7;
  $12 = HEAP32[$7 >> 2] | 0;
 }
 HEAP32[$1 + 32 >> 2] = $12;
 HEAP32[$ps_1 >> 2] = $1;
 return $1 | 0;
}
function _put_stabs($str, $type, $other, $desc, $value) {
 $str = $str | 0;
 $type = $type | 0;
 $other = $other | 0;
 $desc = $desc | 0;
 $value = $value | 0;
 var $2 = 0, $5 = 0, $7 = 0, $9 = 0;
 $2 = _section_ptr_add(HEAP32[5328] | 0, 12) | 0;
 if (($str | 0) == 0) {
  HEAP32[$2 >> 2] = 0;
 } else {
  $5 = HEAP32[5326] | 0;
  $7 = (_strlen($str | 0) | 0) + 1 | 0;
  $9 = HEAP32[$5 >> 2] | 0;
  _memcpy(_section_ptr_add($5, $7) | 0, $str | 0, $7) | 0;
  HEAP32[$2 >> 2] = $9;
 }
 HEAP8[$2 + 4 | 0] = $type;
 HEAP8[$2 + 5 | 0] = $other;
 HEAP16[$2 + 6 >> 1] = $desc;
 HEAP32[$2 + 8 >> 2] = $value;
 return;
}
function _dynarray_reset($pp, $n) {
 $pp = $pp | 0;
 $n = $n | 0;
 var $_pr = 0, $5 = 0, $p_01 = 0, $6 = 0, $10 = 0, $12 = 0, $14 = 0;
 $_pr = HEAP32[$n >> 2] | 0;
 if (($_pr | 0) != 0) {
  $p_01 = HEAP32[$pp >> 2] | 0;
  $5 = $_pr;
  while (1) {
   $6 = HEAP32[$p_01 >> 2] | 0;
   if (($6 | 0) == 0) {
    $10 = $5;
   } else {
    _free($6);
    $10 = HEAP32[$n >> 2] | 0;
   }
   $12 = $10 - 1 | 0;
   HEAP32[$n >> 2] = $12;
   if (($12 | 0) == 0) {
    break;
   } else {
    $p_01 = $p_01 + 4 | 0;
    $5 = $12;
   }
  }
 }
 $14 = $pp;
 _free(HEAP32[$14 >> 2] | 0);
 HEAP32[$14 >> 2] = 0;
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest] = HEAP8[src] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest] = HEAP8[src] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}
function _o($c) {
 $c = $c | 0;
 var $3 = 0, $_01 = 0, $4 = 0, $5 = 0, $10 = 0, $11 = 0, $16 = 0;
 if (($c | 0) == 0) {
  return;
 }
 $_01 = $c;
 $3 = HEAP32[5434] | 0;
 while (1) {
  $4 = $3 + 1 | 0;
  $5 = HEAP32[13918] | 0;
  if ($4 >>> 0 > (HEAP32[$5 + 8 >> 2] | 0) >>> 0) {
   _section_realloc($5, $4);
   $11 = HEAP32[5434] | 0;
   $10 = HEAP32[13918] | 0;
  } else {
   $11 = $3;
   $10 = $5;
  }
  HEAP8[(HEAP32[$10 + 4 >> 2] | 0) + $11 | 0] = $_01;
  HEAP32[5434] = $4;
  $16 = $_01 >>> 8;
  if (($16 | 0) == 0) {
   break;
  } else {
   $_01 = $16;
   $3 = $4;
  }
 }
 return;
}
function _find_section($s1, $name) {
 $s1 = $s1 | 0;
 $name = $name | 0;
 var $2 = 0, $5 = 0, $i_01 = 0, $10 = 0, $_0 = 0;
 $2 = HEAP32[$s1 + 2832 >> 2] | 0;
 L1 : do {
  if (($2 | 0) > 1) {
   $5 = HEAP32[$s1 + 2828 >> 2] | 0;
   $i_01 = 1;
   while (1) {
    $10 = HEAP32[$5 + ($i_01 << 2) >> 2] | 0;
    $i_01 = $i_01 + 1 | 0;
    if ((_strcmp($name | 0, $10 + 72 | 0) | 0) == 0) {
     $_0 = $10;
     break;
    }
    if (($i_01 | 0) >= ($2 | 0)) {
     break L1;
    }
   }
   return $_0 | 0;
  }
 } while (0);
 $_0 = _new_section($s1, $name, 1, 2) | 0;
 return $_0 | 0;
}
function _tok_str_add($s, $t) {
 $s = $s | 0;
 $t = $t | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $len_0_i = 0, $14 = 0, $str_0 = 0;
 $1 = $s + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $s | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $s + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($2 | 0) < ($6 | 0)) {
  $str_0 = $4;
 } else {
  $len_0_i = ($6 | 0) == 0 ? 8 : $6 << 1;
  $14 = _tcc_realloc($4, $len_0_i << 2) | 0;
  HEAP32[$5 >> 2] = $len_0_i;
  HEAP32[$3 >> 2] = $14;
  $str_0 = $14;
 }
 HEAP32[$str_0 + ($2 << 2) >> 2] = $t;
 HEAP32[$1 >> 2] = $2 + 1;
 return;
}
function _expr_sum() {
 var $2 = 0, $3 = 0, $5 = 0;
 _unary();
 while (1) {
  $2 = HEAP32[5310] | 0;
  if (!(($2 | 0) == 47 | ($2 | 0) == 42 | ($2 | 0) == 37)) {
   $3 = $2;
   break;
  }
  _next();
  _unary();
  _gen_op($2);
 }
 while (1) {
  if (!(($3 | 0) == 45 | ($3 | 0) == 43)) {
   break;
  }
  _next();
  _unary();
  while (1) {
   $5 = HEAP32[5310] | 0;
   if (!(($5 | 0) == 47 | ($5 | 0) == 42 | ($5 | 0) == 37)) {
    break;
   }
   _next();
   _unary();
   _gen_op($5);
  }
  _gen_op($3);
  $3 = HEAP32[5310] | 0;
 }
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}
function ___uflow($f) {
 $f = $f | 0;
 var $c = 0, $_0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $c = sp | 0;
 if ((HEAP32[$f + 8 >> 2] | 0) == 0) {
  if ((___toread($f) | 0) == 0) {
   label = 3;
  } else {
   $_0 = -1;
  }
 } else {
  label = 3;
 }
 do {
  if ((label | 0) == 3) {
   if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 1]($f, $c, 1) | 0) != 1) {
    $_0 = -1;
    break;
   }
   $_0 = HEAPU8[$c] | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $_0 | 0;
}
function _tcc_strdup($str) {
 $str = $str | 0;
 var $2 = 0, $3 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($str | 0) | 0) + 1 | 0;
 $3 = _malloc($2) | 0;
 if (($3 | 0) == 0 & ($2 | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 } else {
  _strcpy($3 | 0, $str | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 }
 return 0;
}
function _greloc($s, $sym, $offset, $type) {
 $s = $s | 0;
 $sym = $sym | 0;
 $offset = $offset | 0;
 $type = $type | 0;
 var $3 = 0, $4 = 0, $c_0 = 0;
 do {
  if (($sym | 0) == 0) {
   $c_0 = 0;
  } else {
   $3 = $sym + 12 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   if (($4 | 0) != 0) {
    $c_0 = $4;
    break;
   }
   _put_extern_sym2($sym, 0, 0, 0, 1);
   $c_0 = HEAP32[$3 >> 2] | 0;
  }
 } while (0);
 _put_elf_reloc(HEAP32[5318] | 0, $s, $offset, $type, $c_0);
 return;
}
function _gexpr() {
 var $3 = 0, $6 = 0;
 _expr_eq();
 if ((HEAP32[5310] | 0) != 44) {
  return;
 }
 do {
  $3 = HEAP32[5024] | 0;
  $6 = HEAPU16[$3 + 8 >> 1] | 0;
  do {
   if (($6 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
    if (($6 & 62 | 0) != 52) {
     break;
    }
    _gsym(HEAP32[$3 + 16 >> 2] | 0);
   } else {
    _o(55517);
   }
  } while (0);
  HEAP32[5024] = (HEAP32[5024] | 0) - 40;
  _next();
  _expr_eq();
 } while ((HEAP32[5310] | 0) == 44);
 return;
}
function _tcc_mallocz($size) {
 $size = $size | 0;
 var $1 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = _malloc($size) | 0;
 if (($1 | 0) == 0 & ($size | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 } else {
  _memset($1 | 0, 0, $size | 0) | 0;
  STACKTOP = sp;
  return $1 | 0;
 }
 return 0;
}
function _tcc_assemble($s1, $do_preprocess) {
 $s1 = $s1 | 0;
 $do_preprocess = $do_preprocess | 0;
 var $1 = 0, $4 = 0;
 _preprocess_init($s1);
 $1 = HEAP32[5312] | 0;
 HEAP32[13918] = $1;
 HEAP32[5434] = HEAP32[$1 >> 2];
 $4 = HEAP32[13914] | 0;
 _put_elf_sym(HEAP32[5318] | 0, 0, 0, 4, 0, 65521, (HEAP32[13912] | 0) + 32 | 0) | 0;
 _tcc_assemble_internal($s1, $do_preprocess);
 HEAP32[HEAP32[13918] >> 2] = HEAP32[5434];
 _free_defines($4);
 return 0;
}
function _tcc_realloc($ptr, $size) {
 $ptr = $ptr | 0;
 $size = $size | 0;
 var $1 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = _realloc($ptr, $size) | 0;
 if (($1 | 0) == 0 & ($size | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 } else {
  STACKTOP = sp;
  return $1 | 0;
 }
 return 0;
}
function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[ptr + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[ptr + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[ptr + 3 | 0];
 HEAP8[tempDoublePtr + 4 | 0] = HEAP8[ptr + 4 | 0];
 HEAP8[tempDoublePtr + 5 | 0] = HEAP8[ptr + 5 | 0];
 HEAP8[tempDoublePtr + 6 | 0] = HEAP8[ptr + 6 | 0];
 HEAP8[tempDoublePtr + 7 | 0] = HEAP8[ptr + 7 | 0];
}
function _skip($c) {
 $c = $c | 0;
 var $1 = 0, $4 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[5310] | 0;
 if (($1 | 0) == ($c | 0)) {
  _next();
  STACKTOP = sp;
  return;
 }
 $4 = _get_tok_str($1, 21208) | 0;
 _tcc_error(18416, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempVarArgs >> 2] = $c, HEAP32[tempVarArgs + 8 >> 2] = $4, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 _next();
 STACKTOP = sp;
 return;
}
function _tcc_fileextension($name) {
 $name = $name | 0;
 var $p_0_i = 0, $5 = 0, $8 = 0, $13 = 0;
 $p_0_i = _strchr($name | 0, 0) | 0;
 while (1) {
  if ($p_0_i >>> 0 <= $name >>> 0) {
   break;
  }
  $5 = $p_0_i - 1 | 0;
  if ((HEAP8[$5] | 0) == 47) {
   break;
  } else {
   $p_0_i = $5;
  }
 }
 $8 = _strrchr($p_0_i | 0, 46) | 0;
 if (($8 | 0) != 0) {
  $13 = $8;
  return $13 | 0;
 }
 $13 = _strchr($p_0_i | 0, 0) | 0;
 return $13 | 0;
}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest] = HEAP8[src] | 0;
  }
  dest = ret;
 } else {
  _memcpy(dest, src, num) | 0;
 }
 return dest | 0;
}
function _sym_find2($s, $v) {
 $s = $s | 0;
 $v = $v | 0;
 var $_012 = 0, $7 = 0, $_0 = 0;
 L1 : do {
  if (($s | 0) == 0) {
   $_0 = 0;
  } else {
   $_012 = $s;
   while (1) {
    if ((HEAP32[$_012 >> 2] | 0) == ($v | 0)) {
     $_0 = $_012;
     break L1;
    }
    $7 = HEAP32[$_012 + 28 >> 2] | 0;
    if (($7 | 0) == 0) {
     $_0 = 0;
     break;
    } else {
     $_012 = $7;
    }
   }
  }
 } while (0);
 return $_0 | 0;
}
function _strcat_printf($buf, $buf_size, $fmt, varrp) {
 $buf = $buf | 0;
 $buf_size = $buf_size | 0;
 $fmt = $fmt | 0;
 varrp = varrp | 0;
 var $ap = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp | 0;
 $2 = $ap;
 HEAP32[$2 >> 2] = varrp;
 HEAP32[$2 + 4 >> 2] = 0;
 $3 = _strlen($buf | 0) | 0;
 _vsnprintf($buf + $3 | 0, 2048 - $3 | 0, $fmt | 0, $ap | 0) | 0;
 STACKTOP = sp;
 return;
}
function _tcc_malloc($size) {
 $size = $size | 0;
 var $1 = 0, tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 $1 = _malloc($size) | 0;
 if (($1 | 0) == 0 & ($size | 0) != 0) {
  _tcc_error(18848, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 & -8, HEAP32[tempVarArgs >> 2] = 0, tempVarArgs) | 0);
  STACKTOP = tempVarArgs;
  return 0;
 } else {
  STACKTOP = sp;
  return $1 | 0;
 }
 return 0;
}
function _g($c) {
 $c = $c | 0;
 var $1 = 0, $2 = 0, $3 = 0, $9 = 0, $10 = 0;
 $1 = HEAP32[5434] | 0;
 $2 = $1 + 1 | 0;
 $3 = HEAP32[13918] | 0;
 if ($2 >>> 0 > (HEAP32[$3 + 8 >> 2] | 0) >>> 0) {
  _section_realloc($3, $2);
  $10 = HEAP32[5434] | 0;
  $9 = HEAP32[13918] | 0;
 } else {
  $10 = $1;
  $9 = $3;
 }
 HEAP8[(HEAP32[$9 + 4 >> 2] | 0) + $10 | 0] = $c;
 HEAP32[5434] = $2;
 return;
}
function _tcc_warning($fmt, varrp) {
 $fmt = $fmt | 0;
 varrp = varrp | 0;
 var $ap = 0, $1 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp | 0;
 $1 = HEAP32[5314] | 0;
 if ((HEAP32[$1 + 72 >> 2] | 0) != 0) {
  STACKTOP = sp;
  return;
 }
 $7 = $ap;
 HEAP32[$7 >> 2] = varrp;
 HEAP32[$7 + 4 >> 2] = 0;
 _error1($1, 1, $fmt, $ap | 0);
 STACKTOP = sp;
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _tcc_error($fmt, varrp) {
 $fmt = $fmt | 0;
 varrp = varrp | 0;
 var $ap = 0, $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp | 0;
 $1 = HEAP32[5314] | 0;
 $3 = $ap;
 HEAP32[$3 >> 2] = varrp;
 HEAP32[$3 + 4 >> 2] = 0;
 _error1($1, 0, $fmt, $ap | 0);
 if ((HEAP32[$1 + 160 >> 2] | 0) == 0) {
  _exit(1);
 } else {
  _longjmp($1 + 164 | 0, 1);
 }
}
function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $3 = 0, $5 = 0, $8 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $3 = HEAP32[$f + 8 >> 2] | 0;
 $5 = HEAP32[$f + 4 >> 2] | 0;
 $8 = $3 - $5 | 0;
 HEAP32[$f + 108 >> 2] = $8;
 if (($lim | 0) != 0 & ($8 | 0) > ($lim | 0)) {
  HEAP32[$f + 100 >> 2] = $5 + $lim;
  return;
 } else {
  HEAP32[$f + 100 >> 2] = $3;
  return;
 }
}
function _gsym($t) {
 $t = $t | 0;
 var $3 = 0, $_01_i = 0, $9 = 0, $10 = 0;
 if (($t | 0) == 0) {
  return;
 }
 $3 = (HEAP32[5434] | 0) - 4 | 0;
 $_01_i = $t;
 while (1) {
  $9 = (HEAP32[(HEAP32[13918] | 0) + 4 >> 2] | 0) + $_01_i | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$9 >> 2] = $3 - $_01_i;
  if (($10 | 0) == 0) {
   break;
  } else {
   $_01_i = $10;
  }
 }
 return;
}
function _restore_parse_state($s) {
 $s = $s | 0;
 var $10 = 0;
 HEAP32[(HEAP32[13912] | 0) + 16 >> 2] = HEAP32[$s + 4 >> 2];
 HEAP32[5350] = HEAP32[$s >> 2];
 HEAP32[5310] = HEAP32[$s + 8 >> 2];
 $10 = $s + 16 | 0;
 HEAP32[5302] = HEAP32[$10 >> 2];
 HEAP32[5303] = HEAP32[$10 + 4 >> 2];
 HEAP32[5304] = HEAP32[$10 + 8 >> 2];
 HEAP32[5305] = HEAP32[$10 + 12 >> 2];
 return;
}
function _save_parse_state($s) {
 $s = $s | 0;
 var $10 = 0;
 HEAP32[$s + 4 >> 2] = HEAP32[(HEAP32[13912] | 0) + 16 >> 2];
 HEAP32[$s >> 2] = HEAP32[5350];
 HEAP32[$s + 8 >> 2] = HEAP32[5310];
 $10 = $s + 16 | 0;
 HEAP32[$10 >> 2] = HEAP32[5302];
 HEAP32[$10 + 4 >> 2] = HEAP32[5303];
 HEAP32[$10 + 8 >> 2] = HEAP32[5304];
 HEAP32[$10 + 12 >> 2] = HEAP32[5305];
 return;
}
function _gsym_addr($t, $a) {
 $t = $t | 0;
 $a = $a | 0;
 var $2 = 0, $_01 = 0, $8 = 0, $9 = 0;
 if (($t | 0) == 0) {
  return;
 }
 $2 = $a - 4 | 0;
 $_01 = $t;
 while (1) {
  $8 = (HEAP32[(HEAP32[13918] | 0) + 4 >> 2] | 0) + $_01 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$8 >> 2] = $2 - $_01;
  if (($9 | 0) == 0) {
   break;
  } else {
   $_01 = $9;
  }
 }
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) | 0] | 0) + 24 | 0;
}
function _llvm_ctlz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[ctlz_i8 + (x >>> 24) | 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[ctlz_i8 + (x >> 16 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[ctlz_i8 + (x >> 8 & 255) | 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[ctlz_i8 + (x & 255) | 0] | 0) + 24 | 0;
}
function _mk_pointer($type) {
 $type = $type | 0;
 var $3 = 0, $5 = 0, $6 = 0;
 $3 = $type | 0;
 $5 = _sym_push2((HEAP32[5352] | 0) == 0 ? 54512 : 21408, 536870912, HEAP32[$3 >> 2] | 0, -1) | 0;
 $6 = $type + 4 | 0;
 HEAP32[$5 + 20 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & 116608 | 4;
 HEAP32[$6 >> 2] = $5;
 return;
}
function _tcc_basename($name) {
 $name = $name | 0;
 var $p_0 = 0, $5 = 0, label = 0;
 $p_0 = _strchr($name | 0, 0) | 0;
 while (1) {
  if ($p_0 >>> 0 <= $name >>> 0) {
   label = 4;
   break;
  }
  $5 = $p_0 - 1 | 0;
  if ((HEAP8[$5] | 0) == 47) {
   label = 4;
   break;
  } else {
   $p_0 = $5;
  }
 }
 if ((label | 0) == 4) {
  return $p_0 | 0;
 }
 return 0;
}
function _save_regs($n) {
 $n = $n | 0;
 var $3 = 0, $p_01 = 0, $8 = 0;
 $3 = (HEAP32[5024] | 0) + ((-$n | 0) * 40 | 0) | 0;
 if ($3 >>> 0 < 56272 >>> 0) {
  return;
 } else {
  $p_01 = 56272;
 }
 do {
  $8 = HEAP16[$p_01 + 8 >> 1] & 63;
  if ($8 >>> 0 < 48 >>> 0) {
   _save_reg($8);
  }
  $p_01 = $p_01 + 40 | 0;
 } while ($p_01 >>> 0 <= $3 >>> 0);
 return;
}
function _parse_asm_str($astr) {
 $astr = $astr | 0;
 _skip(40);
 if ((HEAP32[5310] | 0) != 181) {
  _expect(11064);
 }
 _cstr_new($astr);
 if ((HEAP32[5310] | 0) != 181) {
  _cstr_ccat($astr, 0);
  return;
 }
 do {
  _cstr_cat($astr, HEAP32[(HEAP32[5302] | 0) + 4 >> 2] | 0);
  _next();
 } while ((HEAP32[5310] | 0) == 181);
 _cstr_ccat($astr, 0);
 return;
}
function _put_stabn($type, $other, $desc, $value) {
 $type = $type | 0;
 $other = $other | 0;
 $desc = $desc | 0;
 $value = $value | 0;
 var $2 = 0;
 $2 = _section_ptr_add(HEAP32[5328] | 0, 12) | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP8[$2 + 4 | 0] = $type;
 HEAP8[$2 + 5 | 0] = $other;
 HEAP16[$2 + 6 >> 1] = $desc;
 HEAP32[$2 + 8 >> 2] = $value;
 return;
}
function _vpop() {
 var $1 = 0, $4 = 0;
 $1 = HEAP32[5024] | 0;
 $4 = HEAPU16[$1 + 8 >> 1] | 0;
 do {
  if (($4 & 63 | 0) != 3 | (HEAP32[5338] | 0) != 0) {
   if (($4 & 62 | 0) != 52) {
    break;
   }
   _gsym(HEAP32[$1 + 16 >> 2] | 0);
  } else {
   _o(55517);
  }
 } while (0);
 HEAP32[5024] = (HEAP32[5024] | 0) - 40;
 return;
}
function _lvalue_type($t) {
 $t = $t | 0;
 var $1 = 0, $r_0 = 0, $_0 = 0, label = 0;
 $1 = $t & 15;
 if (($1 | 0) == 11 | ($1 | 0) == 1) {
  $r_0 = 4352;
  label = 3;
 } else if (($1 | 0) == 2) {
  $r_0 = 8448;
  label = 3;
 } else {
  $_0 = 256;
 }
 if ((label | 0) == 3) {
  $_0 = $r_0 | $t << 10 & 16384;
 }
 return $_0 | 0;
}
function _tcc_error_noabort($fmt, varrp) {
 $fmt = $fmt | 0;
 varrp = varrp | 0;
 var $ap = 0, $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp | 0;
 $1 = HEAP32[5314] | 0;
 $3 = $ap;
 HEAP32[$3 >> 2] = varrp;
 HEAP32[$3 + 4 >> 2] = 0;
 _error1($1, 0, $fmt, $ap | 0);
 STACKTOP = sp;
 return;
}
function _put_stabd($type, $other, $desc) {
 $type = $type | 0;
 $other = $other | 0;
 $desc = $desc | 0;
 var $2 = 0;
 $2 = _section_ptr_add(HEAP32[5328] | 0, 12) | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP8[$2 + 4 | 0] = $type;
 HEAP8[$2 + 5 | 0] = $other;
 HEAP16[$2 + 6 >> 1] = $desc;
 HEAP32[$2 + 8 >> 2] = 0;
 return;
}
function _preprocess_init($s1) {
 $s1 = $s1 | 0;
 var $3 = 0, $7 = 0;
 HEAP32[$s1 + 464 >> 2] = $s1 + 336;
 $3 = $s1 + 468 | 0;
 HEAP32[$s1 + 724 >> 2] = $3;
 HEAP32[(HEAP32[13912] | 0) + 28 >> 2] = $3;
 HEAP32[5024] = 56232;
 $7 = $s1 + 2784 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$s1 + 2816 >> 2] = $7;
 return;
}
function _define_undef($s) {
 $s = $s | 0;
 var $1 = 0, $2 = 0;
 $1 = $s | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!(($2 | 0) > 255 & ($2 | 0) < (HEAP32[5306] | 0))) {
  HEAP32[$1 >> 2] = 0;
  return;
 }
 HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($2 - 256 << 2) >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 return;
}
function _testSetjmp(id, table) {
 id = id | 0;
 table = table | 0;
 var i = 0, curr = 0;
 while ((i | 0) < 20) {
  curr = HEAP32[table + (i << 2) >> 2] | 0;
  if ((curr | 0) == 0) break;
  if ((curr | 0) == (id | 0)) {
   return HEAP32[table + ((i << 2) + 4) >> 2] | 0;
  }
  i = i + 2 | 0;
 }
 return 0;
}
function _tcc_add_file($s, $filename) {
 $s = $s | 0;
 $filename = $filename | 0;
 var $_0 = 0;
 if ((HEAP32[$s + 44 >> 2] | 0) == 4) {
  $_0 = _tcc_add_file_internal($s, $filename, 5) | 0;
  return $_0 | 0;
 } else {
  $_0 = _tcc_add_file_internal($s, $filename, 1) | 0;
  return $_0 | 0;
 }
 return 0;
}
function _memcmp(p1, p2, num) {
 p1 = p1 | 0;
 p2 = p2 | 0;
 num = num | 0;
 var i = 0, v1 = 0, v2 = 0;
 while ((i | 0) < (num | 0)) {
  v1 = HEAPU8[p1 + i | 0] | 0;
  v2 = HEAPU8[p2 + i | 0] | 0;
  if ((v1 | 0) != (v2 | 0)) return ((v1 | 0) > (v2 | 0) ? 1 : -1) | 0;
  i = i + 1 | 0;
 }
 return 0;
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}
function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}
function _strcat(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0, pdestEnd = 0;
 pdestEnd = pdest + (_strlen(pdest) | 0) | 0;
 do {
  HEAP8[pdestEnd + i | 0] = HEAP8[psrc + i | 0];
  i = i + 1 | 0;
 } while (HEAP8[psrc + (i - 1) | 0] | 0);
 return pdest | 0;
}
function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}
function _tcc_close() {
 var $1 = 0, $3 = 0;
 $1 = HEAP32[13912] | 0;
 $3 = HEAP32[$1 + 8 >> 2] | 0;
 if (($3 | 0) > 0) {
  _close($3 | 0) | 0;
  HEAP32[5036] = (HEAP32[5036] | 0) + (HEAP32[$1 + 16 >> 2] | 0);
 }
 HEAP32[13912] = HEAP32[$1 + 12 >> 2];
 _free($1);
 return;
}
function _define_find($v) {
 $v = $v | 0;
 var $1 = 0, $_0 = 0;
 $1 = $v - 256 | 0;
 if ($1 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 $_0 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($1 << 2) >> 2] | 0) + 4 >> 2] | 0;
 return $_0 | 0;
}
function _label_find($v) {
 $v = $v | 0;
 var $1 = 0, $_0 = 0;
 $1 = $v - 256 | 0;
 if ($1 >>> 0 >= ((HEAP32[5306] | 0) - 256 | 0) >>> 0) {
  $_0 = 0;
  return $_0 | 0;
 }
 $_0 = HEAP32[(HEAP32[(HEAP32[5316] | 0) + ($1 << 2) >> 2] | 0) + 8 >> 2] | 0;
 return $_0 | 0;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}
function _expect($msg) {
 $msg = $msg | 0;
 var tempVarArgs = 0, sp = 0;
 sp = STACKTOP;
 _tcc_error(19320, (tempVarArgs = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempVarArgs >> 2] = $msg, tempVarArgs) | 0);
 STACKTOP = tempVarArgs;
 STACKTOP = sp;
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}
function _asm_int_expr($s1) {
 $s1 = $s1 | 0;
 var $e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $e = sp | 0;
 _asm_expr_sum($s1, $e);
 if ((HEAP32[$e + 4 >> 2] | 0) != 0) {
  _expect(18248);
 }
 STACKTOP = sp;
 return HEAP32[$e >> 2] | 0;
}
function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1 | 0] = HEAP8[ptr + 1 | 0];
 HEAP8[tempDoublePtr + 2 | 0] = HEAP8[ptr + 2 | 0];
 HEAP8[tempDoublePtr + 3 | 0] = HEAP8[ptr + 3 | 0];
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return (tempRet0 = tempRet0, $1$0) | 0;
}
function _put_elf_str($s, $sym) {
 $s = $s | 0;
 $sym = $sym | 0;
 var $2 = 0, $4 = 0;
 $2 = (_strlen($sym | 0) | 0) + 1 | 0;
 $4 = HEAP32[$s >> 2] | 0;
 _memcpy(_section_ptr_add($s, $2) | 0, $sym | 0, $2) | 0;
 return $4 | 0;
}
function _gen_addr32($r, $sym, $c) {
 $r = $r | 0;
 $sym = $sym | 0;
 $c = $c | 0;
 if (($r & 512 | 0) == 0) {
  _gen_le32($c);
  return;
 }
 _greloc(HEAP32[13918] | 0, $sym, HEAP32[5434] | 0, 1);
 _gen_le32($c);
 return;
}
function _strcpy(pdest, psrc) {
 pdest = pdest | 0;
 psrc = psrc | 0;
 var i = 0;
 do {
  HEAP8[pdest + i | 0] = HEAP8[psrc + i | 0];
  i = i + 1 | 0;
 } while (HEAP8[psrc + (i - 1) | 0] | 0);
 return pdest | 0;
}
function _put_extern_sym($sym, $section, $value, $size) {
 $sym = $sym | 0;
 $section = $section | 0;
 $value = $value | 0;
 $size = $size | 0;
 _put_extern_sym2($sym, $section, $value, $size, 1);
 return;
}
function _gen_addrpc32($r, $sym, $c) {
 $r = $r | 0;
 $sym = $sym | 0;
 $c = $c | 0;
 if (($r & 512 | 0) != 0) {
  _greloc(HEAP32[13918] | 0, $sym, HEAP32[5434] | 0, 2);
 }
 _gen_le32($c - 4 | 0);
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}
function _is_float($t) {
 $t = $t | 0;
 var $1 = 0, $6 = 0;
 $1 = $t & 15;
 if (($1 - 9 | 0) >>> 0 < 2 >>> 0) {
  $6 = 1;
  return $6 | 0;
 }
 $6 = ($1 | 0) == 8 | 0;
 return $6 | 0;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}
function _pstrncpy($out, $in, $num) {
 $out = $out | 0;
 $in = $in | 0;
 $num = $num | 0;
 _memcpy($out | 0, $in | 0, $num) | 0;
 HEAP8[$out + $num | 0] = 0;
 return $out | 0;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 1](a1 | 0, a2 | 0, a3 | 0) | 0;
}
function _gen_expr32($pe) {
 $pe = $pe | 0;
 var $2 = 0;
 $2 = HEAP32[$pe + 4 >> 2] | 0;
 _gen_addr32(($2 | 0) != 0 ? 512 : 0, $2, HEAP32[$pe >> 2] | 0);
 return;
}
function b0(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(0);
 return 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 7 & -8;
 return ret | 0;
}
function _sym_free($sym) {
 $sym = $sym | 0;
 HEAP32[$sym + 24 >> 2] = HEAP32[5322];
 _tcc_free(HEAP32[$sym + 4 >> 2] | 0);
 HEAP32[5322] = $sym;
 return;
}
function _tok_str_new($s) {
 $s = $s | 0;
 HEAP32[$s >> 2] = 0;
 HEAP32[$s + 4 >> 2] = 0;
 HEAP32[$s + 8 >> 2] = 0;
 HEAP32[$s + 12 >> 2] = -1;
 return;
}
function b5(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(5);
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 3](a1 | 0, a2 | 0) | 0;
}
function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr] | 0) {
  curr = curr + 1 | 0;
 }
 return curr - ptr | 0;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0);
}
function _cstr_free($cstr) {
 $cstr = $cstr | 0;
 _tcc_free(HEAP32[$cstr + 12 >> 2] | 0);
 _memset($cstr | 0, 0, 16) | 0;
 return;
}
function _test_lvalue() {
 if ((HEAP16[(HEAP32[5024] | 0) + 8 >> 1] & 256) != 0) {
  return;
 }
 _expect(16680);
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 3](a1 | 0) | 0;
}
function b7(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(7);
 return 0;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 15](a1 | 0);
}
function iii__getcwd__wrapper(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return _getcwd(a1 | 0, a2 | 0) | 0;
}
function _asm_expr($s1, $pe) {
 $s1 = $s1 | 0;
 $pe = $pe | 0;
 _asm_expr_sum($s1, $pe);
 return;
}
function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(4);
 return 0;
}
function _ggoto() {
 _gcall_or_jmp(1);
 HEAP32[5024] = (HEAP32[5024] | 0) - 40;
 return;
}
function _cstr_new($cstr) {
 $cstr = $cstr | 0;
 _memset($cstr | 0, 0, 16) | 0;
 return;
}
function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}
function _ldexp($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}
function _tok_str_free($str) {
 $str = $str | 0;
 _tcc_free($str);
 return;
}
function b8(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(8);
 return 0;
}
function setTempRet9(value) {
 value = value | 0;
 tempRet9 = value;
}
function setTempRet8(value) {
 value = value | 0;
 tempRet8 = value;
}
function setTempRet7(value) {
 value = value | 0;
 tempRet7 = value;
}
function setTempRet6(value) {
 value = value | 0;
 tempRet6 = value;
}
function setTempRet5(value) {
 value = value | 0;
 tempRet5 = value;
}
function setTempRet4(value) {
 value = value | 0;
 tempRet4 = value;
}
function setTempRet3(value) {
 value = value | 0;
 tempRet3 = value;
}
function setTempRet2(value) {
 value = value | 0;
 tempRet2 = value;
}
function setTempRet1(value) {
 value = value | 0;
 tempRet1 = value;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}
function _tcc_free($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}
function _gen_cvt_ftof($t) {
 $t = $t | 0;
 _gv(2) | 0;
 return;
}
function _decl($l) {
 $l = $l | 0;
 _decl0($l, 0) | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}
function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(2);
}
function b3(p0) {
 p0 = p0 | 0;
 abort(3);
 return 0;
}
function stackSave() {
 return STACKTOP | 0;
}
function b1(p0) {
 p0 = p0 | 0;
 abort(1);
}
function _tcc_memstats() {
 return;
}
function b6() {
 abort(6);
}
function runPostSets() {
}

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,_put_elf_sym,b0];
  
  var FUNCTION_TABLE_vi = [b1,b1,_preprocess_init,b1,_mk_pointer,b1,_free_defines,b1,_decl,b1,_expect,b1,b1,b1,b1,b1];
  
  var FUNCTION_TABLE_vii = [b2,b2,_sym_pop,b2,_tcc_warning,b2,b2,b2];
  
  var FUNCTION_TABLE_ii = [b3,b3,_strlen,b3];
  
  var FUNCTION_TABLE_iiii = [b4,b4];
  
  var FUNCTION_TABLE_viiiiiii = [b5,b5,_put_stabs_r,b5];
  
  var FUNCTION_TABLE_v = [b6,b6,_next,b6,_gen_inline_functions,b6,b6,b6];
  
  var FUNCTION_TABLE_iiiii = [b7,b7,_sym_push,b7];
  
  var FUNCTION_TABLE_iii = [b8,b8,iii__getcwd__wrapper,b8];
  

  return { _memcmp: _memcmp, _strlen: _strlen, _strcat: _strcat, _free: _free, _main: _main, _realloc: _realloc, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _saveSetjmp: _saveSetjmp, _memcpy: _memcpy, _strcpy: _strcpy, _testSetjmp: _testSetjmp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "_strncmp": _strncmp, "_llvm_lifetime_end": _llvm_lifetime_end, "_pread": _pread, "_tzset": _tzset, "_sscanf": _sscanf, "_snprintf": _snprintf, "_lseek": _lseek, "__scanString": __scanString, "_llvm_va_end": _llvm_va_end, "_fclose": _fclose, "__getFloat": __getFloat, "_strtoll": _strtoll, "_fprintf": _fprintf, "_strtoul": _strtoul, "_printf": _printf, "_strtoull": _strtoull, "_close": _close, "_fflush": _fflush, "_fopen": _fopen, "__reallyNegative": __reallyNegative, "_abort": _abort, "_strtol": _strtol, "_fputc": _fputc, "___buildEnvironment": ___buildEnvironment, "_sysconf": _sysconf, "_open": _open, "___setErrNo": ___setErrNo, "_fwrite": _fwrite, "_send": _send, "_fdopen": _fdopen, "_write": _write, "_fputs": _fputs, "_exit": _exit, "_sprintf": _sprintf, "_strrchr": _strrchr, "_fabs": _fabs, "_isspace": _isspace, "_unlink": _unlink, "_localtime": _localtime, "_vsnprintf": _vsnprintf, "_strchr": _strchr, "_longjmp": _longjmp, "_fmod": _fmod, "_read": _read, "_getcwd": _getcwd, "__formatString": __formatString, "_localtime_r": _localtime_r, "_getenv": _getenv, "_gettimeofday": _gettimeofday, "_atoi": _atoi, "_dlclose": _dlclose, "_recv": _recv, "__parseInt64": __parseInt64, "_execl": _execl, "_pwrite": _pwrite, "_putchar": _putchar, "_puts": _puts, "_fsync": _fsync, "___errno_location": ___errno_location, "_llvm_lifetime_start": _llvm_lifetime_start, "_copysign": _copysign, "_sbrk": _sbrk, "__parseInt": __parseInt, "_time": _time, "__exit": __exit, "_strcmp": _strcmp, "_memchr": _memchr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_stdout": _stdout }, buffer);
var _memcmp = Module["_memcmp"] = asm["_memcmp"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






